// @bun
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);

// node_modules/object-hash/index.js
var require_object_hash = __commonJS((exports, module) => {
  var crypto = import.meta.require("crypto");
  exports = module.exports = objectHash;
  function objectHash(object, options) {
    options = applyDefaults(object, options);
    return hash(object, options);
  }
  exports.sha1 = function(object) {
    return objectHash(object);
  };
  exports.keys = function(object) {
    return objectHash(object, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
  };
  exports.MD5 = function(object) {
    return objectHash(object, { algorithm: "md5", encoding: "hex" });
  };
  exports.keysMD5 = function(object) {
    return objectHash(object, { algorithm: "md5", encoding: "hex", excludeValues: true });
  };
  var hashes = crypto.getHashes ? crypto.getHashes().slice() : ["sha1", "md5"];
  hashes.push("passthrough");
  var encodings = ["buffer", "hex", "binary", "base64"];
  function applyDefaults(object, sourceOptions) {
    sourceOptions = sourceOptions || {};
    var options = {};
    options.algorithm = sourceOptions.algorithm || "sha1";
    options.encoding = sourceOptions.encoding || "hex";
    options.excludeValues = sourceOptions.excludeValues ? true : false;
    options.algorithm = options.algorithm.toLowerCase();
    options.encoding = options.encoding.toLowerCase();
    options.ignoreUnknown = sourceOptions.ignoreUnknown !== true ? false : true;
    options.respectType = sourceOptions.respectType === false ? false : true;
    options.respectFunctionNames = sourceOptions.respectFunctionNames === false ? false : true;
    options.respectFunctionProperties = sourceOptions.respectFunctionProperties === false ? false : true;
    options.unorderedArrays = sourceOptions.unorderedArrays !== true ? false : true;
    options.unorderedSets = sourceOptions.unorderedSets === false ? false : true;
    options.unorderedObjects = sourceOptions.unorderedObjects === false ? false : true;
    options.replacer = sourceOptions.replacer || undefined;
    options.excludeKeys = sourceOptions.excludeKeys || undefined;
    if (typeof object === "undefined") {
      throw new Error("Object argument required.");
    }
    for (var i = 0;i < hashes.length; ++i) {
      if (hashes[i].toLowerCase() === options.algorithm.toLowerCase()) {
        options.algorithm = hashes[i];
      }
    }
    if (hashes.indexOf(options.algorithm) === -1) {
      throw new Error('Algorithm "' + options.algorithm + '"  not supported. ' + "supported values: " + hashes.join(", "));
    }
    if (encodings.indexOf(options.encoding) === -1 && options.algorithm !== "passthrough") {
      throw new Error('Encoding "' + options.encoding + '"  not supported. ' + "supported values: " + encodings.join(", "));
    }
    return options;
  }
  function isNativeFunction(f) {
    if (typeof f !== "function") {
      return false;
    }
    var exp = /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i;
    return exp.exec(Function.prototype.toString.call(f)) != null;
  }
  function hash(object, options) {
    var hashingStream;
    if (options.algorithm !== "passthrough") {
      hashingStream = crypto.createHash(options.algorithm);
    } else {
      hashingStream = new PassThrough;
    }
    if (typeof hashingStream.write === "undefined") {
      hashingStream.write = hashingStream.update;
      hashingStream.end = hashingStream.update;
    }
    var hasher = typeHasher(options, hashingStream);
    hasher.dispatch(object);
    if (!hashingStream.update) {
      hashingStream.end("");
    }
    if (hashingStream.digest) {
      return hashingStream.digest(options.encoding === "buffer" ? undefined : options.encoding);
    }
    var buf = hashingStream.read();
    if (options.encoding === "buffer") {
      return buf;
    }
    return buf.toString(options.encoding);
  }
  exports.writeToStream = function(object, options, stream) {
    if (typeof stream === "undefined") {
      stream = options;
      options = {};
    }
    options = applyDefaults(object, options);
    return typeHasher(options, stream).dispatch(object);
  };
  function typeHasher(options, writeTo, context) {
    context = context || [];
    var write = function(str2) {
      if (writeTo.update) {
        return writeTo.update(str2, "utf8");
      } else {
        return writeTo.write(str2, "utf8");
      }
    };
    return {
      dispatch: function(value) {
        if (options.replacer) {
          value = options.replacer(value);
        }
        var type2 = typeof value;
        if (value === null) {
          type2 = "null";
        }
        return this["_" + type2](value);
      },
      _object: function(object) {
        var pattern = /\[object (.*)\]/i;
        var objString = Object.prototype.toString.call(object);
        var objType = pattern.exec(objString);
        if (!objType) {
          objType = "unknown:[" + objString + "]";
        } else {
          objType = objType[1];
        }
        objType = objType.toLowerCase();
        var objectNumber = null;
        if ((objectNumber = context.indexOf(object)) >= 0) {
          return this.dispatch("[CIRCULAR:" + objectNumber + "]");
        } else {
          context.push(object);
        }
        if (typeof Buffer !== "undefined" && Buffer.isBuffer && Buffer.isBuffer(object)) {
          write("buffer:");
          return write(object);
        }
        if (objType !== "object" && objType !== "function" && objType !== "asyncfunction") {
          if (this["_" + objType]) {
            this["_" + objType](object);
          } else if (options.ignoreUnknown) {
            return write("[" + objType + "]");
          } else {
            throw new Error('Unknown object type "' + objType + '"');
          }
        } else {
          var keys = Object.keys(object);
          if (options.unorderedObjects) {
            keys = keys.sort();
          }
          if (options.respectType !== false && !isNativeFunction(object)) {
            keys.splice(0, 0, "prototype", "__proto__", "constructor");
          }
          if (options.excludeKeys) {
            keys = keys.filter(function(key) {
              return !options.excludeKeys(key);
            });
          }
          write("object:" + keys.length + ":");
          var self2 = this;
          return keys.forEach(function(key) {
            self2.dispatch(key);
            write(":");
            if (!options.excludeValues) {
              self2.dispatch(object[key]);
            }
            write(",");
          });
        }
      },
      _array: function(arr, unordered) {
        unordered = typeof unordered !== "undefined" ? unordered : options.unorderedArrays !== false;
        var self2 = this;
        write("array:" + arr.length + ":");
        if (!unordered || arr.length <= 1) {
          return arr.forEach(function(entry) {
            return self2.dispatch(entry);
          });
        }
        var contextAdditions = [];
        var entries = arr.map(function(entry) {
          var strm = new PassThrough;
          var localContext = context.slice();
          var hasher = typeHasher(options, strm, localContext);
          hasher.dispatch(entry);
          contextAdditions = contextAdditions.concat(localContext.slice(context.length));
          return strm.read().toString();
        });
        context = context.concat(contextAdditions);
        entries.sort();
        return this._array(entries, false);
      },
      _date: function(date) {
        return write("date:" + date.toJSON());
      },
      _symbol: function(sym) {
        return write("symbol:" + sym.toString());
      },
      _error: function(err) {
        return write("error:" + err.toString());
      },
      _boolean: function(bool2) {
        return write("bool:" + bool2.toString());
      },
      _string: function(string) {
        write("string:" + string.length + ":");
        write(string.toString());
      },
      _function: function(fn2) {
        write("fn:");
        if (isNativeFunction(fn2)) {
          this.dispatch("[native]");
        } else {
          this.dispatch(fn2.toString());
        }
        if (options.respectFunctionNames !== false) {
          this.dispatch("function-name:" + String(fn2.name));
        }
        if (options.respectFunctionProperties) {
          this._object(fn2);
        }
      },
      _number: function(number) {
        return write("number:" + number.toString());
      },
      _xml: function(xml) {
        return write("xml:" + xml.toString());
      },
      _null: function() {
        return write("Null");
      },
      _undefined: function() {
        return write("Undefined");
      },
      _regexp: function(regex) {
        return write("regex:" + regex.toString());
      },
      _uint8array: function(arr) {
        write("uint8array:");
        return this.dispatch(Array.prototype.slice.call(arr));
      },
      _uint8clampedarray: function(arr) {
        write("uint8clampedarray:");
        return this.dispatch(Array.prototype.slice.call(arr));
      },
      _int8array: function(arr) {
        write("int8array:");
        return this.dispatch(Array.prototype.slice.call(arr));
      },
      _uint16array: function(arr) {
        write("uint16array:");
        return this.dispatch(Array.prototype.slice.call(arr));
      },
      _int16array: function(arr) {
        write("int16array:");
        return this.dispatch(Array.prototype.slice.call(arr));
      },
      _uint32array: function(arr) {
        write("uint32array:");
        return this.dispatch(Array.prototype.slice.call(arr));
      },
      _int32array: function(arr) {
        write("int32array:");
        return this.dispatch(Array.prototype.slice.call(arr));
      },
      _float32array: function(arr) {
        write("float32array:");
        return this.dispatch(Array.prototype.slice.call(arr));
      },
      _float64array: function(arr) {
        write("float64array:");
        return this.dispatch(Array.prototype.slice.call(arr));
      },
      _arraybuffer: function(arr) {
        write("arraybuffer:");
        return this.dispatch(new Uint8Array(arr));
      },
      _url: function(url) {
        return write("url:" + url.toString(), "utf8");
      },
      _map: function(map2) {
        write("map:");
        var arr = Array.from(map2);
        return this._array(arr, options.unorderedSets !== false);
      },
      _set: function(set2) {
        write("set:");
        var arr = Array.from(set2);
        return this._array(arr, options.unorderedSets !== false);
      },
      _file: function(file) {
        write("file:");
        return this.dispatch([file.name, file.size, file.type, file.lastModfied]);
      },
      _blob: function() {
        if (options.ignoreUnknown) {
          return write("[blob]");
        }
        throw Error(`Hashing Blob objects is currently not supported
` + `(see https://github.com/puleos/object-hash/issues/26)
` + `Use "options.replacer" or "options.ignoreUnknown"
`);
      },
      _domwindow: function() {
        return write("domwindow");
      },
      _bigint: function(number) {
        return write("bigint:" + number.toString());
      },
      _process: function() {
        return write("process");
      },
      _timer: function() {
        return write("timer");
      },
      _pipe: function() {
        return write("pipe");
      },
      _tcp: function() {
        return write("tcp");
      },
      _udp: function() {
        return write("udp");
      },
      _tty: function() {
        return write("tty");
      },
      _statwatcher: function() {
        return write("statwatcher");
      },
      _securecontext: function() {
        return write("securecontext");
      },
      _connection: function() {
        return write("connection");
      },
      _zlib: function() {
        return write("zlib");
      },
      _context: function() {
        return write("context");
      },
      _nodescript: function() {
        return write("nodescript");
      },
      _httpparser: function() {
        return write("httpparser");
      },
      _dataview: function() {
        return write("dataview");
      },
      _signal: function() {
        return write("signal");
      },
      _fsevent: function() {
        return write("fsevent");
      },
      _tlswrap: function() {
        return write("tlswrap");
      }
    };
  }
  function PassThrough() {
    return {
      buf: "",
      write: function(b3) {
        this.buf += b3;
      },
      end: function(b3) {
        this.buf += b3;
      },
      read: function() {
        return this.buf;
      }
    };
  }
});

// node_modules/slug/slug.js
var require_slug = __commonJS((exports, module) => {
  (function(root) {
    let base64;
    function getWholeCharAndI(str2, i) {
      const code = str2.charCodeAt(i);
      if (isNaN(code)) {
        throw new RangeError("Index " + i + ' out of range for string "' + str2 + '"; please open an issue at https://github.com/Trott/slug/issues/new');
      }
      if (code < 55296 || code > 57343) {
        return [str2.charAt(i), i];
      }
      if (code >= 55296 && code <= 56319) {
        if (str2.length <= i + 1) {
          return [" ", i];
        }
        const next = str2.charCodeAt(i + 1);
        if (next < 56320 || next > 57343) {
          return [" ", i];
        }
        return [str2.charAt(i) + str2.charAt(i + 1), i + 1];
      }
      if (i === 0) {
        return [" ", i];
      }
      const prev = str2.charCodeAt(i - 1);
      if (prev < 55296 || prev > 56319) {
        return [" ", i];
      }
      throw new Error('String "' + str2 + '" reaches code believed to be unreachable; please open an issue at https://github.com/Trott/slug/issues/new');
    }
    if (typeof window !== "undefined") {
      if (window.btoa) {
        base64 = function(input) {
          return btoa(unescape(encodeURIComponent(input)));
        };
      } else {
        base64 = function(input) {
          const str2 = unescape(encodeURIComponent(input + ""));
          let output = "";
          for (let block, charCode, idx = 0, map2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";str2.charAt(idx | 0) || (map2 = "=", idx % 1); output += map2.charAt(63 & block >> 8 - idx % 1 * 8)) {
            charCode = str2.charCodeAt(idx += 3 / 4);
            if (charCode > 255) {
              throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
            }
            block = block << 8 | charCode;
          }
          return output;
        };
      }
    } else {
      base64 = function(input) {
        return Buffer.from(input).toString("base64");
      };
    }
    function slug(string, opts) {
      let result = slugify(string, opts);
      const fallback = opts && opts.fallback !== undefined ? opts.fallback : slug.defaults.fallback;
      if (fallback === true && result === "") {
        let input = "";
        for (let i = 0;i < string.length; i++) {
          const charAndI = getWholeCharAndI(string, i);
          i = charAndI[1];
          input += charAndI[0];
        }
        result = slugify(base64(input), opts);
      }
      return result;
    }
    const locales = {
      bg: { \u{419}: "Y", \u{439}: "y", X: "H", x: "h", \u{426}: "Ts", \u{446}: "ts", \u{429}: "Sht", \u{449}: "sht", \u{42a}: "A", \u{44a}: "a", \u{42c}: "Y", \u{44c}: "y" },
      de: { \u{c4}: "AE", \u{e4}: "ae", \u{d6}: "OE", \u{f6}: "oe", \u{dc}: "UE", \u{fc}: "ue" },
      sr: { \u{111}: "dj", \u{110}: "DJ" },
      uk: { \u{418}: "Y", \u{438}: "y", \u{419}: "Y", \u{439}: "y", \u{426}: "Ts", \u{446}: "ts", \u{425}: "Kh", \u{445}: "kh", \u{429}: "Shch", \u{449}: "shch", \u{413}: "H", \u{433}: "h" }
    };
    let defaultLocale = {};
    function slugify(string, opts) {
      if (typeof string !== "string") {
        throw new Error("slug() requires a string argument, received " + typeof string);
      }
      if (typeof opts === "string") {
        opts = { replacement: opts };
      }
      opts = opts ? Object.assign({}, opts) : {};
      opts.mode = opts.mode || slug.defaults.mode;
      const defaults = slug.defaults.modes[opts.mode];
      const keys = ["replacement", "multicharmap", "charmap", "remove", "lower", "trim"];
      for (let key, i = 0, l = keys.length;i < l; i++) {
        key = keys[i];
        opts[key] = key in opts ? opts[key] : defaults[key];
      }
      const localeMap = locales[opts.locale] || defaultLocale;
      let lengths = [];
      for (const key in opts.multicharmap) {
        if (!Object.prototype.hasOwnProperty.call(opts.multicharmap, key)) {
          continue;
        }
        const len = key.length;
        if (lengths.indexOf(len) === -1) {
          lengths.push(len);
        }
      }
      lengths = lengths.sort(function(a, b3) {
        return b3 - a;
      });
      const disallowedChars = opts.mode === "rfc3986" ? /[^\w\s\-.~]/ : /[^A-Za-z0-9\s]/;
      let result = "";
      for (let char, i = 0, l = string.length;i < l; i++) {
        char = string[i];
        let matchedMultichar = false;
        for (let j2 = 0;j2 < lengths.length; j2++) {
          const len = lengths[j2];
          const str2 = string.substr(i, len);
          if (opts.multicharmap[str2]) {
            i += len - 1;
            char = opts.multicharmap[str2];
            matchedMultichar = true;
            break;
          }
        }
        if (!matchedMultichar) {
          if (localeMap[char]) {
            char = localeMap[char];
          } else if (opts.charmap[char]) {
            char = opts.charmap[char].replace(opts.replacement, " ");
          } else if (char.includes(opts.replacement)) {
            char = char.replace(opts.replacement, " ");
          } else {
            char = char.replace(disallowedChars, "");
          }
        }
        result += char;
      }
      if (opts.remove) {
        result = result.replace(opts.remove, "");
      }
      if (opts.trim) {
        result = result.trim();
      }
      result = result.replace(/\s+/g, opts.replacement);
      if (opts.lower) {
        result = result.toLowerCase();
      }
      return result;
    }
    const initialMulticharmap = {
      \u{92b}\u{93c}: "Fi",
      \u{917}\u{93c}: "Ghi",
      \u{916}\u{93c}: "Khi",
      \u{915}\u{93c}: "Qi",
      \u{921}\u{93c}: "ugDha",
      \u{922}\u{93c}: "ugDhha",
      \u{92f}\u{93c}: "Yi",
      \u{91c}\u{93c}: "Za",
      \u{5d1}\u{5b4}\u{5d9}: "i",
      \u{5d1}\u{5b5}: "e",
      \u{5d1}\u{5b5}\u{5d9}: "e",
      \u{5d1}\u{5b6}: "e",
      \u{5d1}\u{5b7}: "a",
      \u{5d1}\u{5b8}: "a",
      \u{5d1}\u{5b9}: "o",
      \u{5d5}\u{5b9}: "o",
      \u{5d1}\u{5bb}: "u",
      \u{5d5}\u{5bc}: "u",
      \u{5d1}\u{5bc}: "b",
      \u{5db}\u{5bc}: "k",
      \u{5da}\u{5bc}: "k",
      \u{5e4}\u{5bc}: "p",
      \u{5e9}\u{5c1}: "sh",
      \u{5e9}\u{5c2}: "s",
      \u{5d1}\u{5b0}: "e",
      \u{5d7}\u{5b1}: "e",
      \u{5d7}\u{5b2}: "a",
      \u{5d7}\u{5b3}: "o",
      \u{5d1}\u{5b4}: "i"
    };
    const initialCharmap = {
      \u{c0}: "A",
      \u{c1}: "A",
      \u{c2}: "A",
      \u{c3}: "A",
      \u{c4}: "A",
      \u{c5}: "A",
      \u{c6}: "AE",
      \u{c7}: "C",
      \u{c8}: "E",
      \u{c9}: "E",
      \u{ca}: "E",
      \u{cb}: "E",
      \u{cc}: "I",
      \u{cd}: "I",
      \u{ce}: "I",
      \u{cf}: "I",
      \u{d0}: "D",
      \u{d1}: "N",
      \u{d2}: "O",
      \u{d3}: "O",
      \u{d4}: "O",
      \u{d5}: "O",
      \u{d6}: "O",
      \u{150}: "O",
      \u{d8}: "O",
      \u{14c}: "O",
      \u{d9}: "U",
      \u{da}: "U",
      \u{db}: "U",
      \u{dc}: "U",
      \u{170}: "U",
      \u{dd}: "Y",
      \u{de}: "TH",
      \u{df}: "ss",
      \u{e0}: "a",
      \u{e1}: "a",
      \u{e2}: "a",
      \u{e3}: "a",
      \u{e4}: "a",
      \u{e5}: "a",
      \u{e6}: "ae",
      \u{e7}: "c",
      \u{e8}: "e",
      \u{e9}: "e",
      \u{ea}: "e",
      \u{eb}: "e",
      \u{ec}: "i",
      \u{ed}: "i",
      \u{ee}: "i",
      \u{ef}: "i",
      \u{f0}: "d",
      \u{f1}: "n",
      \u{f2}: "o",
      \u{f3}: "o",
      \u{f4}: "o",
      \u{f5}: "o",
      \u{f6}: "o",
      \u{151}: "o",
      \u{f8}: "o",
      \u{14d}: "o",
      \u{152}: "OE",
      \u{153}: "oe",
      \u{f9}: "u",
      \u{fa}: "u",
      \u{fb}: "u",
      \u{fc}: "u",
      \u{171}: "u",
      \u{fd}: "y",
      \u{fe}: "th",
      \u{ff}: "y",
      \u{1e9e}: "SS",
      \u{3b1}: "a",
      \u{3b2}: "b",
      \u{3b3}: "g",
      \u{3b4}: "d",
      \u{3b5}: "e",
      \u{3b6}: "z",
      \u{3b7}: "h",
      \u{3b8}: "th",
      \u{3b9}: "i",
      \u{3ba}: "k",
      \u{3bb}: "l",
      \u{3bc}: "m",
      \u{3bd}: "n",
      \u{3be}: "3",
      \u{3bf}: "o",
      \u{3c0}: "p",
      \u{3c1}: "r",
      \u{3c3}: "s",
      \u{3c4}: "t",
      \u{3c5}: "y",
      \u{3c6}: "f",
      \u{3c7}: "x",
      \u{3c8}: "ps",
      \u{3c9}: "w",
      \u{3ac}: "a",
      \u{3ad}: "e",
      \u{3af}: "i",
      \u{3cc}: "o",
      \u{3cd}: "y",
      \u{3ae}: "h",
      \u{3ce}: "w",
      \u{3c2}: "s",
      \u{3ca}: "i",
      \u{3b0}: "y",
      \u{3cb}: "y",
      \u{390}: "i",
      \u{391}: "A",
      \u{392}: "B",
      \u{393}: "G",
      \u{394}: "D",
      \u{395}: "E",
      \u{396}: "Z",
      \u{397}: "H",
      \u{398}: "Th",
      \u{399}: "I",
      \u{39a}: "K",
      \u{39b}: "L",
      \u{39c}: "M",
      \u{39d}: "N",
      \u{39e}: "3",
      \u{39f}: "O",
      \u{3a0}: "P",
      \u{3a1}: "R",
      \u{3a3}: "S",
      \u{3a4}: "T",
      \u{3a5}: "Y",
      \u{3a6}: "F",
      \u{3a7}: "X",
      \u{3a8}: "PS",
      \u{3a9}: "W",
      \u{386}: "A",
      \u{388}: "E",
      \u{38a}: "I",
      \u{38c}: "O",
      \u{38e}: "Y",
      \u{389}: "H",
      \u{38f}: "W",
      \u{3aa}: "I",
      \u{3ab}: "Y",
      \u{15f}: "s",
      \u{15e}: "S",
      \u{131}: "i",
      \u{130}: "I",
      \u{11f}: "g",
      \u{11e}: "G",
      \u{430}: "a",
      \u{431}: "b",
      \u{432}: "v",
      \u{433}: "g",
      \u{434}: "d",
      \u{435}: "e",
      \u{451}: "yo",
      \u{436}: "zh",
      \u{437}: "z",
      \u{438}: "i",
      \u{439}: "j",
      \u{43a}: "k",
      \u{43b}: "l",
      \u{43c}: "m",
      \u{43d}: "n",
      \u{43e}: "o",
      \u{43f}: "p",
      \u{440}: "r",
      \u{441}: "s",
      \u{442}: "t",
      \u{443}: "u",
      \u{444}: "f",
      \u{445}: "h",
      \u{446}: "c",
      \u{447}: "ch",
      \u{448}: "sh",
      \u{449}: "sh",
      \u{44a}: "u",
      \u{44b}: "y",
      \u{44c}: "",
      \u{44d}: "e",
      \u{44e}: "yu",
      \u{44f}: "ya",
      \u{410}: "A",
      \u{411}: "B",
      \u{412}: "V",
      \u{413}: "G",
      \u{414}: "D",
      \u{415}: "E",
      \u{401}: "Yo",
      \u{416}: "Zh",
      \u{417}: "Z",
      \u{418}: "I",
      \u{419}: "J",
      \u{41a}: "K",
      \u{41b}: "L",
      \u{41c}: "M",
      \u{41d}: "N",
      \u{41e}: "O",
      \u{41f}: "P",
      \u{420}: "R",
      \u{421}: "S",
      \u{422}: "T",
      \u{423}: "U",
      \u{424}: "F",
      \u{425}: "H",
      \u{426}: "C",
      \u{427}: "Ch",
      \u{428}: "Sh",
      \u{429}: "Sh",
      \u{42a}: "U",
      \u{42b}: "Y",
      \u{42c}: "",
      \u{42d}: "E",
      \u{42e}: "Yu",
      \u{42f}: "Ya",
      \u{404}: "Ye",
      \u{406}: "I",
      \u{407}: "Yi",
      \u{490}: "G",
      \u{454}: "ye",
      \u{456}: "i",
      \u{457}: "yi",
      \u{491}: "g",
      \u{10d}: "c",
      \u{10f}: "d",
      \u{11b}: "e",
      \u{148}: "n",
      \u{159}: "r",
      \u{161}: "s",
      \u{165}: "t",
      \u{16f}: "u",
      \u{17e}: "z",
      \u{10c}: "C",
      \u{10e}: "D",
      \u{11a}: "E",
      \u{147}: "N",
      \u{158}: "R",
      \u{160}: "S",
      \u{164}: "T",
      \u{16e}: "U",
      \u{17d}: "Z",
      \u{13e}: "l",
      \u{13a}: "l",
      \u{155}: "r",
      \u{13d}: "L",
      \u{139}: "L",
      \u{154}: "R",
      \u{105}: "a",
      \u{107}: "c",
      \u{119}: "e",
      \u{142}: "l",
      \u{144}: "n",
      \u{15b}: "s",
      \u{17a}: "z",
      \u{17c}: "z",
      \u{104}: "A",
      \u{106}: "C",
      \u{118}: "E",
      \u{141}: "L",
      \u{143}: "N",
      \u{15a}: "S",
      \u{179}: "Z",
      \u{17b}: "Z",
      \u{101}: "a",
      \u{113}: "e",
      \u{123}: "g",
      \u{12b}: "i",
      \u{137}: "k",
      \u{13c}: "l",
      \u{146}: "n",
      \u{16b}: "u",
      \u{100}: "A",
      \u{112}: "E",
      \u{122}: "G",
      \u{12a}: "I",
      \u{136}: "K",
      \u{13b}: "L",
      \u{145}: "N",
      \u{16a}: "U",
      \u{623}: "a",
      \u{625}: "i",
      \u{628}: "b",
      \u{62a}: "t",
      \u{62b}: "th",
      \u{62c}: "g",
      \u{62d}: "h",
      \u{62e}: "kh",
      \u{62f}: "d",
      \u{630}: "th",
      \u{631}: "r",
      \u{632}: "z",
      \u{633}: "s",
      \u{634}: "sh",
      \u{635}: "s",
      \u{636}: "d",
      \u{637}: "t",
      \u{638}: "th",
      \u{639}: "aa",
      \u{63a}: "gh",
      \u{641}: "f",
      \u{642}: "k",
      \u{643}: "k",
      \u{644}: "l",
      \u{645}: "m",
      \u{646}: "n",
      \u{647}: "h",
      \u{648}: "o",
      \u{64a}: "y",
      \u{621}: "aa",
      \u{629}: "a",
      \u{622}: "a",
      \u{627}: "a",
      \u{67e}: "p",
      \u{698}: "zh",
      \u{6af}: "g",
      \u{686}: "ch",
      \u{6a9}: "k",
      \u{6cc}: "i",
      \u{117}: "e",
      \u{12f}: "i",
      \u{173}: "u",
      \u{116}: "E",
      \u{12e}: "I",
      \u{172}: "U",
      \u{21b}: "t",
      \u{21a}: "T",
      \u{163}: "t",
      \u{162}: "T",
      \u{219}: "s",
      \u{218}: "S",
      \u{103}: "a",
      \u{102}: "A",
      \u{1ea0}: "A",
      \u{1ea2}: "A",
      \u{1ea6}: "A",
      \u{1ea4}: "A",
      \u{1eac}: "A",
      \u{1ea8}: "A",
      \u{1eaa}: "A",
      \u{1eb0}: "A",
      \u{1eae}: "A",
      \u{1eb6}: "A",
      \u{1eb2}: "A",
      \u{1eb4}: "A",
      \u{1eb8}: "E",
      \u{1eba}: "E",
      \u{1ebc}: "E",
      \u{1ec0}: "E",
      \u{1ebe}: "E",
      \u{1ec6}: "E",
      \u{1ec2}: "E",
      \u{1ec4}: "E",
      \u{1eca}: "I",
      \u{1ec8}: "I",
      \u{128}: "I",
      \u{1ecc}: "O",
      \u{1ece}: "O",
      \u{1ed2}: "O",
      \u{1ed0}: "O",
      \u{1ed8}: "O",
      \u{1ed4}: "O",
      \u{1ed6}: "O",
      \u{1a0}: "O",
      \u{1edc}: "O",
      \u{1eda}: "O",
      \u{1ee2}: "O",
      \u{1ede}: "O",
      \u{1ee0}: "O",
      \u{1ee4}: "U",
      \u{1ee6}: "U",
      \u{168}: "U",
      \u{1af}: "U",
      \u{1eea}: "U",
      \u{1ee8}: "U",
      \u{1ef0}: "U",
      \u{1eec}: "U",
      \u{1eee}: "U",
      \u{1ef2}: "Y",
      \u{1ef4}: "Y",
      \u{1ef6}: "Y",
      \u{1ef8}: "Y",
      \u{110}: "D",
      \u{1ea1}: "a",
      \u{1ea3}: "a",
      \u{1ea7}: "a",
      \u{1ea5}: "a",
      \u{1ead}: "a",
      \u{1ea9}: "a",
      \u{1eab}: "a",
      \u{1eb1}: "a",
      \u{1eaf}: "a",
      \u{1eb7}: "a",
      \u{1eb3}: "a",
      \u{1eb5}: "a",
      \u{1eb9}: "e",
      \u{1ebb}: "e",
      \u{1ebd}: "e",
      \u{1ec1}: "e",
      \u{1ebf}: "e",
      \u{1ec7}: "e",
      \u{1ec3}: "e",
      \u{1ec5}: "e",
      \u{1ecb}: "i",
      \u{1ec9}: "i",
      \u{129}: "i",
      \u{1ecd}: "o",
      \u{1ecf}: "o",
      \u{1ed3}: "o",
      \u{1ed1}: "o",
      \u{1ed9}: "o",
      \u{1ed5}: "o",
      \u{1ed7}: "o",
      \u{1a1}: "o",
      \u{1edd}: "o",
      \u{1edb}: "o",
      \u{1ee3}: "o",
      \u{1edf}: "o",
      \u{1ee1}: "o",
      \u{1ee5}: "u",
      \u{1ee7}: "u",
      \u{169}: "u",
      \u{1b0}: "u",
      \u{1eeb}: "u",
      \u{1ee9}: "u",
      \u{1ef1}: "u",
      \u{1eed}: "u",
      \u{1eef}: "u",
      \u{1ef3}: "y",
      \u{1ef5}: "y",
      \u{1ef7}: "y",
      \u{1ef9}: "y",
      \u{111}: "d",
      \u{4d8}: "AE",
      \u{4d9}: "ae",
      \u{492}: "GH",
      \u{493}: "gh",
      \u{49a}: "KH",
      \u{49b}: "kh",
      \u{4a2}: "NG",
      \u{4a3}: "ng",
      \u{4ae}: "UE",
      \u{4af}: "ue",
      \u{4b0}: "U",
      \u{4b1}: "u",
      \u{4ba}: "H",
      \u{4bb}: "h",
      \u{4e8}: "OE",
      \u{4e9}: "oe",
      \u{452}: "dj",
      \u{458}: "j",
      \u{459}: "lj",
      \u{45a}: "nj",
      \u{45b}: "c",
      \u{45f}: "dz",
      \u{402}: "Dj",
      \u{408}: "j",
      \u{409}: "Lj",
      \u{40a}: "Nj",
      \u{40b}: "C",
      \u{40f}: "Dz",
      \u{1cc}: "nj",
      \u{1c9}: "lj",
      \u{1cb}: "NJ",
      \u{1c8}: "LJ",
      \u{905}: "a",
      \u{906}: "aa",
      \u{90f}: "e",
      \u{908}: "ii",
      \u{90d}: "ei",
      \u{90e}: "ae",
      \u{910}: "ai",
      \u{907}: "i",
      \u{913}: "o",
      \u{911}: "oi",
      \u{912}: "oii",
      \u{90a}: "uu",
      \u{914}: "ou",
      \u{909}: "u",
      \u{92c}: "B",
      \u{92d}: "Bha",
      \u{91a}: "Ca",
      \u{91b}: "Chha",
      \u{921}: "Da",
      \u{922}: "Dha",
      \u{92b}: "Fa",
      \u{917}: "Ga",
      \u{918}: "Gha",
      \u{917}\u{93c}: "Ghi",
      \u{939}: "Ha",
      \u{91c}: "Ja",
      \u{91d}: "Jha",
      \u{915}: "Ka",
      \u{916}: "Kha",
      \u{916}\u{93c}: "Khi",
      \u{932}: "L",
      \u{933}: "Li",
      \u{90c}: "Li",
      \u{934}: "Lii",
      \u{961}: "Lii",
      \u{92e}: "Ma",
      \u{928}: "Na",
      \u{919}: "Na",
      \u{91e}: "Nia",
      \u{923}: "Nae",
      \u{929}: "Ni",
      \u{950}: "oms",
      \u{92a}: "Pa",
      \u{915}\u{93c}: "Qi",
      \u{930}: "Ra",
      \u{90b}: "Ri",
      \u{960}: "Ri",
      \u{931}: "Ri",
      \u{938}: "Sa",
      \u{936}: "Sha",
      \u{937}: "Shha",
      \u{91f}: "Ta",
      \u{924}: "Ta",
      \u{920}: "Tha",
      \u{926}: "Tha",
      \u{925}: "Tha",
      \u{927}: "Thha",
      \u{921}\u{93c}: "ugDha",
      \u{922}\u{93c}: "ugDhha",
      \u{935}: "Va",
      \u{92f}: "Ya",
      \u{92f}\u{93c}: "Yi",
      \u{91c}\u{93c}: "Za",
      \u{259}: "e",
      \u{18f}: "E",
      \u{10d0}: "a",
      \u{10d1}: "b",
      \u{10d2}: "g",
      \u{10d3}: "d",
      \u{10d4}: "e",
      \u{10d5}: "v",
      \u{10d6}: "z",
      \u{10d7}: "t",
      \u{10d8}: "i",
      \u{10d9}: "k",
      \u{10da}: "l",
      \u{10db}: "m",
      \u{10dc}: "n",
      \u{10dd}: "o",
      \u{10de}: "p",
      \u{10df}: "zh",
      \u{10e0}: "r",
      \u{10e1}: "s",
      \u{10e2}: "t",
      \u{10e3}: "u",
      \u{10e4}: "p",
      \u{10e5}: "k",
      \u{10e6}: "gh",
      \u{10e7}: "q",
      \u{10e8}: "sh",
      \u{10e9}: "ch",
      \u{10ea}: "ts",
      \u{10eb}: "dz",
      \u{10ec}: "ts",
      \u{10ed}: "ch",
      \u{10ee}: "kh",
      \u{10ef}: "j",
      \u{10f0}: "h",
      \u{5d1}: "v",
      \u{5d2}\u{5bc}: "g",
      \u{5d2}: "g",
      \u{5d3}: "d",
      \u{5d3}\u{5bc}: "d",
      \u{5d4}: "h",
      \u{5d5}: "v",
      \u{5d6}: "z",
      \u{5d7}: "h",
      \u{5d8}: "t",
      \u{5d9}: "y",
      \u{5db}: "kh",
      \u{5da}: "kh",
      \u{5dc}: "l",
      \u{5de}: "m",
      \u{5dd}: "m",
      \u{5e0}: "n",
      \u{5df}: "n",
      \u{5e1}: "s",
      \u{5e4}: "f",
      \u{5e3}: "f",
      \u{5e5}: "ts",
      \u{5e6}: "ts",
      \u{5e7}: "k",
      \u{5e8}: "r",
      \u{5ea}\u{5bc}: "t",
      \u{5ea}: "t"
    };
    slug.charmap = Object.assign({}, initialCharmap);
    slug.multicharmap = Object.assign({}, initialMulticharmap);
    slug.defaults = {
      charmap: slug.charmap,
      mode: "pretty",
      modes: {
        rfc3986: {
          replacement: "-",
          remove: null,
          lower: true,
          charmap: slug.charmap,
          multicharmap: slug.multicharmap,
          trim: true
        },
        pretty: {
          replacement: "-",
          remove: null,
          lower: true,
          charmap: slug.charmap,
          multicharmap: slug.multicharmap,
          trim: true
        }
      },
      multicharmap: slug.multicharmap,
      fallback: true
    };
    slug.reset = function() {
      slug.defaults.modes.rfc3986.charmap = slug.defaults.modes.pretty.charmap = slug.charmap = slug.defaults.charmap = Object.assign({}, initialCharmap);
      slug.defaults.modes.rfc3986.multicharmap = slug.defaults.modes.pretty.multicharmap = slug.multicharmap = slug.defaults.multicharmap = Object.assign({}, initialMulticharmap);
      defaultLocale = "";
    };
    slug.extend = function(customMap) {
      const keys = Object.keys(customMap);
      const multi = {};
      const single = {};
      for (let i = 0;i < keys.length; i++) {
        if (keys[i].length > 1) {
          multi[keys[i]] = customMap[keys[i]];
        } else {
          single[keys[i]] = customMap[keys[i]];
        }
      }
      Object.assign(slug.charmap, single);
      Object.assign(slug.multicharmap, multi);
    };
    slug.setLocale = function(locale) {
      defaultLocale = locales[locale] || {};
    };
    if (typeof module !== "undefined" && module.exports) {
      module.exports = slug;
    } else {
      root.slug = slug;
    }
  })(exports);
});

// node_modules/keyword-extractor/lib/stopwords/ar.js
var require_ar = __commonJS((exports, module) => {
  module.exports = {
    stopwords: ["\u060C", "\u0621", "\u0621\u064E", "\u0622", "\u0622\u0628", "\u0622\u0630\u0627\u0631", "\u0622\u0636", "\u0622\u0644", "\u0622\u0645\u064A\u0646\u064E", "\u0622\u0646\u0627\u0621", "\u0622\u0646\u0641\u0627", "\u0622\u0647", "\u0622\u0647\u0627\u064B", "\u0622\u0647\u064D", "\u0622\u0647\u0650", "\u0623", "\u0623\u0628\u062F\u0627", "\u0623\u0628\u0631\u064A\u0644", "\u0623\u0628\u0648", "\u0623\u0628\u064C", "\u0623\u062C\u0644", "\u0623\u062C\u0645\u0639", "\u0623\u062D\u062F", "\u0623\u062E\u0628\u0631", "\u0623\u062E\u0630", "\u0623\u062E\u0648", "\u0623\u062E\u064C", "\u0623\u0631\u0628\u0639", "\u0623\u0631\u0628\u0639\u0627\u0621", "\u0623\u0631\u0628\u0639\u0629", "\u0623\u0631\u0628\u0639\u0645\u0626\u0629", "\u0623\u0631\u0628\u0639\u0645\u0627\u0626\u0629", "\u0623\u0631\u0649", "\u0623\u0633\u0643\u0646", "\u0623\u0635\u0628\u062D", "\u0623\u0635\u0644\u0627", "\u0623\u0636\u062D\u0649", "\u0623\u0637\u0639\u0645", "\u0623\u0639\u0637\u0649", "\u0623\u0639\u0644\u0645", "\u0623\u063A\u0633\u0637\u0633", "\u0623\u0641\u0631\u064A\u0644", "\u0623\u0641\u0639\u0644 \u0628\u0647", "\u0623\u0641\u064D\u0651", "\u0623\u0642\u0628\u0644", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0623\u0644", "\u0623\u0644\u0627", "\u0623\u0644\u0641", "\u0623\u0644\u0641\u0649", "\u0623\u0645", "\u0623\u0645\u0627", "\u0623\u0645\u0627\u0645", "\u0623\u0645\u0627\u0645\u0643", "\u0623\u0645\u0627\u0645\u0643\u064E", "\u0623\u0645\u062F", "\u0623\u0645\u0633", "\u0623\u0645\u0633\u0649", "\u0623\u0645\u0651\u0627", "\u0623\u0646", "\u0623\u0646\u0627", "\u0623\u0646\u0628\u0623", "\u0623\u0646\u062A", "\u0623\u0646\u062A\u0645", "\u0623\u0646\u062A\u0645\u0627", "\u0623\u0646\u062A\u0646", "\u0623\u0646\u062A\u0650", "\u0623\u0646\u0634\u0623", "\u0623\u0646\u0647", "\u0623\u0646\u064B\u0651", "\u0623\u0646\u0651\u0649", "\u0623\u0647\u0644\u0627", "\u0623\u0648", "\u0623\u0648\u062A", "\u0623\u0648\u0634\u0643", "\u0623\u0648\u0644", "\u0623\u0648\u0644\u0626\u0643", "\u0623\u0648\u0644\u0627\u0621", "\u0623\u0648\u0644\u0627\u0644\u0643", "\u0623\u0648\u0651\u0647\u0652", "\u0623\u0649", "\u0623\u064A", "\u0623\u064A\u0627", "\u0623\u064A\u0627\u0631", "\u0623\u064A\u0636\u0627", "\u0623\u064A\u0644\u0648\u0644", "\u0623\u064A\u0646", "\u0623\u064A\u0651", "\u0623\u064A\u0651\u0627\u0646", "\u0623\u064F\u0641\u064D\u0651", "\u0624", "\u0625\u062D\u062F\u0649", "\u0625\u0630", "\u0625\u0630\u0627", "\u0625\u0630\u0627\u064B", "\u0625\u0630\u0645\u0627", "\u0625\u0630\u0646", "\u0625\u0632\u0627\u0621", "\u0625\u0644\u0649", "\u0625\u0644\u064A", "\u0625\u0644\u064A\u0643\u0645", "\u0625\u0644\u064A\u0643\u0645\u0627", "\u0625\u0644\u064A\u0643\u0646\u0651", "\u0625\u0644\u064A\u0643\u064E", "\u0625\u0644\u064E\u064A\u0652\u0643\u064E", "\u0625\u0644\u0651\u0627", "\u0625\u0645\u0651\u0627", "\u0625\u0646", "\u0625\u0646\u064E\u0651", "\u0625\u0649", "\u0625\u064A\u0627\u0643", "\u0625\u064A\u0627\u0643\u0645", "\u0625\u064A\u0627\u0643\u0645\u0627", "\u0625\u064A\u0627\u0643\u0646", "\u0625\u064A\u0627\u0646\u0627", "\u0625\u064A\u0627\u0647", "\u0625\u064A\u0627\u0647\u0627", "\u0625\u064A\u0627\u0647\u0645", "\u0625\u064A\u0627\u0647\u0645\u0627", "\u0625\u064A\u0627\u0647\u0646", "\u0625\u064A\u0627\u064A", "\u0625\u064A\u0647\u064D", "\u0626", "\u0627", "\u0627?", "\u0627?\u0649", "\u0627\u0627\u0644\u0627", "\u0627\u0627\u0644\u062A\u0649", "\u0627\u0628\u062A\u062F\u0623", "\u0627\u0628\u064A\u0646", "\u0627\u062A\u062E\u0630", "\u0627\u062B\u0631", "\u0627\u062B\u0646\u0627", "\u0627\u062B\u0646\u0627\u0646", "\u0627\u062B\u0646\u064A", "\u0627\u062B\u0646\u064A\u0646", "\u0627\u062C\u0644", "\u0627\u062D\u062F", "\u0627\u062E\u0631\u0649", "\u0627\u062E\u0644\u0648\u0644\u0642", "\u0627\u0630\u0627", "\u0627\u0631\u0628\u0639\u0629", "\u0627\u0631\u0628\u0639\u0648\u0646", "\u0627\u0631\u0628\u0639\u064A\u0646", "\u0627\u0631\u062A\u062F\u0651", "\u0627\u0633\u062A\u062D\u0627\u0644", "\u0627\u0635\u0628\u062D", "\u0627\u0636\u062D\u0649", "\u0627\u0637\u0627\u0631", "\u0627\u0639\u0627\u062F\u0629", "\u0627\u0639\u0644\u0646\u062A", "\u0627\u0641", "\u0627\u0643\u062B\u0631", "\u0627\u0643\u062F", "\u0627\u0644\u0622\u0646", "\u0627\u0644\u0623\u0644\u0627\u0621", "\u0627\u0644\u0623\u0644\u0649", "\u0627\u0644\u0627", "\u0627\u0644\u0627\u062E\u064A\u0631\u0629", "\u0627\u0644\u0627\u0646", "\u0627\u0644\u0627\u0648\u0644", "\u0627\u0644\u0627\u0648\u0644\u0649", "\u0627\u0644\u062A\u0649", "\u0627\u0644\u062A\u064A", "\u0627\u0644\u062B\u0627\u0646\u064A", "\u0627\u0644\u062B\u0627\u0646\u064A\u0629", "\u0627\u0644\u062D\u0627\u0644\u064A", "\u0627\u0644\u0630\u0627\u062A\u064A", "\u0627\u0644\u0630\u0649", "\u0627\u0644\u0630\u064A", "\u0627\u0644\u0630\u064A\u0646", "\u0627\u0644\u0633\u0627\u0628\u0642", "\u0627\u0644\u0641", "\u0627\u0644\u0644\u0627\u062A\u064A", "\u0627\u0644\u0644\u062A\u0627\u0646", "\u0627\u0644\u0644\u062A\u064A\u0627", "\u0627\u0644\u0644\u062A\u064A\u0646", "\u0627\u0644\u0644\u0630\u0627\u0646", "\u0627\u0644\u0644\u0630\u064A\u0646", "\u0627\u0644\u0644\u0648\u0627\u062A\u064A", "\u0627\u0644\u0645\u0627\u0636\u064A", "\u0627\u0644\u0645\u0642\u0628\u0644", "\u0627\u0644\u0648\u0642\u062A", "\u0627\u0644\u0649", "\u0627\u0644\u064A", "\u0627\u0644\u064A\u0647", "\u0627\u0644\u064A\u0647\u0627", "\u0627\u0644\u064A\u0648\u0645", "\u0627\u0645\u0627", "\u0627\u0645\u0627\u0645", "\u0627\u0645\u0633", "\u0627\u0645\u0633\u0649", "\u0627\u0646", "\u0627\u0646\u0628\u0631\u0649", "\u0627\u0646\u0642\u0644\u0628", "\u0627\u0646\u0647", "\u0627\u0646\u0647\u0627", "\u0627\u0648", "\u0627\u0648\u0644", "\u0627\u064A", "\u0627\u064A\u0627\u0631", "\u0627\u064A\u0627\u0645", "\u0627\u064A\u0636\u0627", "\u0628", "\u0628\u0624\u0633\u0627", "\u0628\u0625\u0646", "\u0628\u0626\u0633", "\u0628\u0627\u0621", "\u0628\u0627\u062A", "\u0628\u0627\u0633\u0645", "\u0628\u0627\u0646", "\u0628\u062E\u064D", "\u0628\u062F", "\u0628\u062F\u0644\u0627", "\u0628\u0631\u0633", "\u0628\u0633\u0628\u0628", "\u0628\u0633\u0651", "\u0628\u0634\u0643\u0644", "\u0628\u0636\u0639", "\u0628\u0637\u0622\u0646", "\u0628\u0639\u062F", "\u0628\u0639\u062F\u0627", "\u0628\u0639\u0636", "\u0628\u063A\u062A\u0629", "\u0628\u0644", "\u0628\u0644\u0649", "\u0628\u0646", "\u0628\u0647", "\u0628\u0647\u0627", "\u0628\u0647\u0630\u0627", "\u0628\u064A\u062F", "\u0628\u064A\u0646", "\u0628\u064E\u0633\u0652", "\u0628\u064E\u0644\u0652\u0647\u064E", "\u0629", "\u062A", "\u062A\u0627\u0621", "\u062A\u0627\u0631\u0629", "\u062A\u0627\u0633\u0639", "\u062A\u0627\u0646\u0650", "\u062A\u0627\u0646\u0650\u0643", "\u062A\u0628\u062F\u0651\u0644", "\u062A\u062C\u0627\u0647", "\u062A\u062D\u062A", "\u062A\u062D\u0648\u0651\u0644", "\u062A\u062E\u0630", "\u062A\u0631\u0643", "\u062A\u0633\u0639", "\u062A\u0633\u0639\u0629", "\u062A\u0633\u0639\u0645\u0626\u0629", "\u062A\u0633\u0639\u0645\u0627\u0626\u0629", "\u062A\u0633\u0639\u0648\u0646", "\u062A\u0633\u0639\u064A\u0646", "\u062A\u0634\u0631\u064A\u0646", "\u062A\u0639\u0633\u0627", "\u062A\u0639\u0644\u064E\u0651\u0645", "\u062A\u0641\u0639\u0644\u0627\u0646", "\u062A\u0641\u0639\u0644\u0648\u0646", "\u062A\u0641\u0639\u0644\u064A\u0646", "\u062A\u0643\u0648\u0646", "\u062A\u0644\u0642\u0627\u0621", "\u062A\u0644\u0643", "\u062A\u0645", "\u062A\u0645\u0648\u0632", "\u062A\u064A\u0646\u0643", "\u062A\u064E\u064A\u0652\u0646\u0650", "\u062A\u0650\u0647", "\u062A\u0650\u064A", "\u062B", "\u062B\u0627\u0621", "\u062B\u0627\u0644\u062B", "\u062B\u0627\u0645\u0646", "\u062B\u0627\u0646", "\u062B\u0627\u0646\u064A", "\u062B\u0644\u0627\u062B", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u062B\u0644\u0627\u062B\u0629", "\u062B\u0644\u0627\u062B\u0645\u0626\u0629", "\u062B\u0644\u0627\u062B\u0645\u0627\u0626\u0629", "\u062B\u0644\u0627\u062B\u0648\u0646", "\u062B\u0644\u0627\u062B\u064A\u0646", "\u062B\u0645", "\u062B\u0645\u0627\u0646", "\u062B\u0645\u0627\u0646\u0645\u0626\u0629", "\u062B\u0645\u0627\u0646\u0648\u0646", "\u062B\u0645\u0627\u0646\u064A", "\u062B\u0645\u0627\u0646\u064A\u0629", "\u062B\u0645\u0627\u0646\u064A\u0646", "\u062B\u0645\u0646\u0645\u0626\u0629", "\u062B\u0645\u064E\u0651", "\u062B\u0645\u0651", "\u062B\u0645\u0651\u0629", "\u062C", "\u062C\u0627\u0646\u0641\u064A", "\u062C\u062F\u0627", "\u062C\u0639\u0644", "\u062C\u0644\u0644", "\u062C\u0645\u0639\u0629", "\u062C\u0645\u064A\u0639", "\u062C\u0646\u064A\u0647", "\u062C\u0648\u0627\u0646", "\u062C\u0648\u064A\u0644\u064A\u0629", "\u062C\u064A\u0631", "\u062C\u064A\u0645", "\u062D", "\u062D\u0627\u0621", "\u062D\u0627\u062F\u064A", "\u062D\u0627\u0631", "\u062D\u0627\u0634\u0627", "\u062D\u0627\u0644\u064A\u0627", "\u062D\u0627\u064A", "\u062D\u0628\u0630\u0627", "\u062D\u0628\u064A\u0628", "\u062D\u062A\u0649", "\u062D\u062C\u0627", "\u062D\u062F\u064E\u062B", "\u062D\u0631\u0649", "\u062D\u0632\u064A\u0631\u0627\u0646", "\u062D\u0633\u0628", "\u062D\u0642\u0627", "\u062D\u0645\u062F\u0627", "\u062D\u0645\u0648", "\u062D\u0645\u064C", "\u062D\u0648\u0627\u0644\u0649", "\u062D\u0648\u0644", "\u062D\u064A\u062B", "\u062D\u064A\u062B\u0645\u0627", "\u062D\u064A\u0646", "\u062D\u064A\u064E\u0651", "\u062D\u064E\u0630\u0627\u0631\u0650", "\u062E", "\u062E\u0627\u0621", "\u062E\u0627\u0635\u0629", "\u062E\u0627\u0644", "\u062E\u0627\u0645\u0633", "\u062E\u0628\u064E\u0651\u0631", "\u062E\u0644\u0627", "\u062E\u0644\u0627\u0641\u0627", "\u062E\u0644\u0627\u0644", "\u062E\u0644\u0641", "\u062E\u0645\u0633", "\u062E\u0645\u0633\u0629", "\u062E\u0645\u0633\u0645\u0626\u0629", "\u062E\u0645\u0633\u0645\u0627\u0626\u0629", "\u062E\u0645\u0633\u0648\u0646", "\u062E\u0645\u0633\u064A\u0646", "\u062E\u0645\u064A\u0633", "\u062F", "\u062F\u0627\u0644", "\u062F\u0631\u0647\u0645", "\u062F\u0631\u0649", "\u062F\u0648\u0627\u0644\u064A\u0643", "\u062F\u0648\u0644\u0627\u0631", "\u062F\u0648\u0646", "\u062F\u0648\u0646\u0643", "\u062F\u064A\u0633\u0645\u0628\u0631", "\u062F\u064A\u0646\u0627\u0631", "\u0630", "\u0630\u0627", "\u0630\u0627\u062A", "\u0630\u0627\u0643", "\u0630\u0627\u0644", "\u0630\u0627\u0646\u0643", "\u0630\u0627\u0646\u0650", "\u0630\u0644\u0643", "\u0630\u0647\u0628", "\u0630\u0648", "\u0630\u064A\u062A", "\u0630\u064A\u0646\u0643", "\u0630\u064E\u064A\u0652\u0646\u0650", "\u0630\u0650\u0647", "\u0630\u0650\u064A", "\u0631", "\u0631\u0623\u0649", "\u0631\u0627\u0621", "\u0631\u0627\u0628\u0639", "\u0631\u0627\u062D", "\u0631\u062C\u0639", "\u0631\u0632\u0642", "\u0631\u0648\u064A\u062F\u0643", "\u0631\u064A\u0627\u0644", "\u0631\u064A\u062B", "\u0631\u064F\u0628\u064E\u0651", "\u0632", "\u0632\u0627\u064A", "\u0632\u0639\u0645", "\u0632\u0648\u062F", "\u0632\u064A\u0627\u0631\u0629", "\u0633", "\u0633\u0627\u0621", "\u0633\u0627\u0628\u0639", "\u0633\u0627\u062F\u0633", "\u0633\u0628\u062A", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0633\u0628\u062D\u0627\u0646", "\u0633\u0628\u0639", "\u0633\u0628\u0639\u0629", "\u0633\u0628\u0639\u0645\u0626\u0629", "\u0633\u0628\u0639\u0645\u0627\u0626\u0629", "\u0633\u0628\u0639\u0648\u0646", "\u0633\u0628\u0639\u064A\u0646", "\u0633\u062A", "\u0633\u062A\u0629", "\u0633\u062A\u0643\u0648\u0646", "\u0633\u062A\u0645\u0626\u0629", "\u0633\u062A\u0645\u0627\u0626\u0629", "\u0633\u062A\u0648\u0646", "\u0633\u062A\u064A\u0646", "\u0633\u062D\u0642\u0627", "\u0633\u0631\u0627", "\u0633\u0631\u0639\u0627\u0646", "\u0633\u0642\u0649", "\u0633\u0645\u0639\u0627", "\u0633\u0646\u0629", "\u0633\u0646\u062A\u064A\u0645", "\u0633\u0646\u0648\u0627\u062A", "\u0633\u0648\u0641", "\u0633\u0648\u0649", "\u0633\u064A\u0646", "\u0634", "\u0634\u0628\u0627\u0637", "\u0634\u0628\u0647", "\u0634\u062A\u0627\u0646\u064E", "\u0634\u062E\u0635\u0627", "\u0634\u0631\u0639", "\u0634\u0645\u0627\u0644", "\u0634\u064A\u0643\u0644", "\u0634\u064A\u0646", "\u0634\u064E\u062A\u064E\u0651\u0627\u0646\u064E", "\u0635", "\u0635\u0627\u062F", "\u0635\u0627\u0631", "\u0635\u0628\u0627\u062D", "\u0635\u0628\u0631", "\u0635\u0628\u0631\u0627", "\u0635\u062F\u0642\u0627", "\u0635\u0631\u0627\u062D\u0629", "\u0635\u0641\u0631", "\u0635\u0647\u064D", "\u0635\u0647\u0652", "\u0636", "\u0636\u0627\u062F", "\u0636\u062D\u0648\u0629", "\u0636\u062F", "\u0636\u0645\u0646", "\u0637", "\u0637\u0627\u0621", "\u0637\u0627\u0642", "\u0637\u0627\u0644\u0645\u0627", "\u0637\u0631\u0627", "\u0637\u0641\u0642", "\u0637\u064E\u0642", "\u0638", "\u0638\u0627\u0621", "\u0638\u0644", "\u0638\u0644\u0651", "\u0638\u0646\u064E\u0651", "\u0639", "\u0639\u0627\u062F", "\u0639\u0627\u0634\u0631", "\u0639\u0627\u0645", "\u0639\u0627\u0645\u0627", "\u0639\u0627\u0645\u0629", "\u0639\u062C\u0628\u0627", "\u0639\u062F\u0627", "\u0639\u062F\u0629", "\u0639\u062F\u062F", "\u0639\u062F\u0645", "\u0639\u062F\u064E\u0651", "\u0639\u0633\u0649", "\u0639\u0634\u0631", "\u0639\u0634\u0631\u0629", "\u0639\u0634\u0631\u0648\u0646", "\u0639\u0634\u0631\u064A\u0646", "\u0639\u0644", "\u0639\u0644\u0642", "\u0639\u0644\u0645", "\u0639\u0644\u0649", "\u0639\u0644\u064A", "\u0639\u0644\u064A\u0643", "\u0639\u0644\u064A\u0647", "\u0639\u0644\u064A\u0647\u0627", "\u0639\u0644\u064B\u0651", "\u0639\u0646", "\u0639\u0646\u062F", "\u0639\u0646\u062F\u0645\u0627", "\u0639\u0646\u0647", "\u0639\u0646\u0647\u0627", "\u0639\u0648\u0636", "\u0639\u064A\u0627\u0646\u0627", "\u0639\u064A\u0646", "\u0639\u064E\u062F\u064E\u0633\u0652", "\u063A", "\u063A\u0627\u062F\u0631", "\u063A\u0627\u0644\u0628\u0627", "\u063A\u062F\u0627", "\u063A\u062F\u0627\u0629", "\u063A\u064A\u0631", "\u063A\u064A\u0646", "\u0640", "\u0641", "\u0641\u0625\u0646", "\u0641\u0627\u0621", "\u0641\u0627\u0646", "\u0641\u0627\u0646\u0647", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0641\u0631\u0627\u062F\u0649", "\u0641\u0636\u0644\u0627", "\u0641\u0642\u062F", "\u0641\u0642\u0637", "\u0641\u0643\u0627\u0646", "\u0641\u0644\u0627\u0646", "\u0641\u0644\u0633", "\u0641\u0647\u0648", "\u0641\u0648", "\u0641\u0648\u0642", "\u0641\u0649", "\u0641\u064A", "\u0641\u064A\u0641\u0631\u064A", "\u0641\u064A\u0647", "\u0641\u064A\u0647\u0627", "\u0642", "\u0642\u0627\u0637\u0628\u0629", "\u0642\u0627\u0641", "\u0642\u0627\u0644", "\u0642\u0627\u0645", "\u0642\u0628\u0644", "\u0642\u062F", "\u0642\u0631\u0634", "\u0642\u0637\u0651", "\u0642\u0644\u0645\u0627", "\u0642\u0648\u0629", "\u0643", "\u0643\u0623\u0646", "\u0643\u0623\u0646\u0651", "\u0643\u0623\u064A\u0651", "\u0643\u0623\u064A\u0651\u0646", "\u0643\u0627\u062F", "\u0643\u0627\u0641", "\u0643\u0627\u0646", "\u0643\u0627\u0646\u062A", "\u0643\u0627\u0646\u0648\u0646", "\u0643\u062B\u064A\u0631\u0627", "\u0643\u0630\u0627", "\u0643\u0630\u0644\u0643", "\u0643\u0631\u0628", "\u0643\u0633\u0627", "\u0643\u0644", "\u0643\u0644\u062A\u0627", "\u0643\u0644\u0645", "\u0643\u0644\u064E\u0651\u0627", "\u0643\u0644\u0651\u0645\u0627", "\u0643\u0645", "\u0643\u0645\u0627", "\u0643\u0646", "\u0643\u0649", "\u0643\u064A\u062A", "\u0643\u064A\u0641", "\u0643\u064A\u0641\u0645\u0627", "\u0643\u0650\u062E", "\u0644", "\u0644\u0623\u0646", "\u0644\u0627", "\u0644\u0627 \u0633\u064A\u0645\u0627", "\u0644\u0627\u062A", "\u0644\u0627\u0632\u0627\u0644", "\u0644\u0627\u0633\u064A\u0645\u0627", "\u0644\u0627\u0645", "\u0644\u0627\u064A\u0632\u0627\u0644", "\u0644\u0628\u064A\u0643", "\u0644\u062F\u0646", "\u0644\u062F\u0649", "\u0644\u062F\u064A", "\u0644\u0630\u0644\u0643", "\u0644\u0639\u0644", "\u0644\u0639\u0644\u064E\u0651", "\u0644\u0639\u0645\u0631", "\u0644\u0642\u0627\u0621", "\u0644\u0643\u0646", "\u0644\u0643\u0646\u0647", "\u0644\u0643\u0646\u064E\u0651", "\u0644\u0644\u0627\u0645\u0645", "\u0644\u0645", "\u0644\u0645\u0627", "\u0644\u0645\u0651\u0627", "\u0644\u0646", "\u0644\u0647", "\u0644\u0647\u0627", "\u0644\u0647\u0630\u0627", "\u0644\u0647\u0645", "\u0644\u0648", "\u0644\u0648\u0643\u0627\u0644\u0629", "\u0644\u0648\u0644\u0627", "\u0644\u0648\u0645\u0627", "\u0644\u064A\u062A", "\u0644\u064A\u0631\u0629", "\u0644\u064A\u0633", "\u0644\u064A\u0633\u0628", "\u0645", "\u0645\u0626\u0629", "\u0645\u0626\u062A\u0627\u0646", "\u0645\u0627", "\u0645\u0627 \u0623\u0641\u0639\u0644\u0647", "\u0645\u0627 \u0627\u0646\u0641\u0643", "\u0645\u0627 \u0628\u0631\u062D", "\u0645\u0627\u0626\u0629", "\u0645\u0627\u0627\u0646\u0641\u0643", "\u0645\u0627\u0628\u0631\u062D", "\u0645\u0627\u062F\u0627\u0645", "\u0645\u0627\u0630\u0627", "\u0645\u0627\u0631\u0633", "\u0645\u0627\u0632\u0627\u0644", "\u0645\u0627\u0641\u062A\u0626", "\u0645\u0627\u064A", "\u0645\u0627\u064A\u0632\u0627\u0644", "\u0645\u0627\u064A\u0648", "\u0645\u062A\u0649", "\u0645\u062B\u0644", "\u0645\u0630", "\u0645\u0631\u0651\u0629", "\u0645\u0633\u0627\u0621", "\u0645\u0639", "\u0645\u0639\u0627\u0630", "\u0645\u0639\u0647", "\u0645\u0642\u0627\u0628\u0644", "\u0645\u0643\u0627\u0646\u0643\u0645", "\u0645\u0643\u0627\u0646\u0643\u0645\u0627", "\u0645\u0643\u0627\u0646\u0643\u0646\u0651", "\u0645\u0643\u0627\u0646\u064E\u0643", "\u0645\u0644\u064A\u0627\u0631", "\u0645\u0644\u064A\u0645", "\u0645\u0644\u064A\u0648\u0646", "\u0645\u0645\u0627", "\u0645\u0646", "\u0645\u0646\u0630", "\u0645\u0646\u0647", "\u0645\u0646\u0647\u0627", "\u0645\u0647", "\u0645\u0647\u0645\u0627", "\u0645\u064A\u0645", "\u0646", "\u0646\u0627", "\u0646\u0628\u064E\u0651\u0627", "\u0646\u062D\u0646", "\u0646\u062D\u0648", "\u0646\u0639\u0645", "\u0646\u0641\u0633", "\u0646\u0641\u0633\u0647", "\u0646\u0647\u0627\u064A\u0629", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u0646\u0648\u0646", "\u0646\u064A\u0633\u0627\u0646", "\u0646\u064A\u0641", "\u0646\u064E\u062E\u0652", "\u0646\u064E\u0651", "\u0647", "\u0647\u0624\u0644\u0627\u0621", "\u0647\u0627", "\u0647\u0627\u0621", "\u0647\u0627\u0643\u064E", "\u0647\u0628\u0651", "\u0647\u0630\u0627", "\u0647\u0630\u0647", "\u0647\u0644", "\u0647\u0644\u0644\u0629", "\u0647\u0644\u0645", "\u0647\u0644\u0651\u0627", "\u0647\u0645", "\u0647\u0645\u0627", "\u0647\u0645\u0632\u0629", "\u0647\u0646", "\u0647\u0646\u0627", "\u0647\u0646\u0627\u0643", "\u0647\u0646\u0627\u0644\u0643", "\u0647\u0648", "\u0647\u064A", "\u0647\u064A\u0627", "\u0647\u064A\u0647\u0627\u062A", "\u0647\u064A\u0651\u0627", "\u0647\u064E\u0624\u0644\u0627\u0621", "\u0647\u064E\u0627\u062A\u0627\u0646\u0650", "\u0647\u064E\u0627\u062A\u064E\u064A\u0652\u0646\u0650", "\u0647\u064E\u0627\u062A\u0650\u0647", "\u0647\u064E\u0627\u062A\u0650\u064A", "\u0647\u064E\u062C\u0652", "\u0647\u064E\u0630\u0627", "\u0647\u064E\u0630\u0627\u0646\u0650", "\u0647\u064E\u0630\u064E\u064A\u0652\u0646\u0650", "\u0647\u064E\u0630\u0650\u0647", "\u0647\u064E\u0630\u0650\u064A", "\u0647\u064E\u064A\u0652\u0647\u0627\u062A", "\u0648", "\u06486", "\u0648\u0623\u0628\u0648", "\u0648\u0623\u0646", "\u0648\u0627", "\u0648\u0627\u062D\u062F", "\u0648\u0627\u0636\u0627\u0641", "\u0648\u0627\u0636\u0627\u0641\u062A", "\u0648\u0627\u0643\u062F", "\u0648\u0627\u0644\u062A\u064A", "\u0648\u0627\u0644\u0630\u064A", "\u0648\u0627\u0646", "\u0648\u0627\u0647\u0627\u064B", "\u0648\u0627\u0648", "\u0648\u0627\u0648\u0636\u062D", "\u0648\u0628\u064A\u0646", "\u0648\u062B\u064A", "\u0648\u062C\u062F", "\u0648\u0631\u0627\u0621\u064E\u0643", "\u0648\u0631\u062F", "\u0648\u0639\u0644\u0649", "\u0648\u0641\u064A", "\u0648\u0642\u0627\u0644", "\u0648\u0642\u0627\u0644\u062A", "\u0648\u0642\u062F", "\u0648\u0642\u0641", "\u0648\u0643\u0627\u0646", "\u0648\u0643\u0627\u0646\u062A", "\u0648\u0644\u0627", "\u0648\u0644\u0627\u064A\u0632\u0627\u0644", "\u0648\u0644\u0643\u0646", "\u0648\u0644\u0645", "\u0648\u0644\u0647", "\u0648\u0644\u064A\u0633", "\u0648\u0645\u0639", "\u0648\u0645\u0646", "\u0648\u0647\u0628", "\u0648\u0647\u0630\u0627", "\u0648\u0647\u0648", "\u0648\u0647\u064A", "\u0648\u064E\u064A\u0652", "\u0648\u064F\u0634\u0652\u0643\u064E\u0627\u0646\u064E", "\u0649", "\u064A", "\u064A\u0627\u0621", "\u064A\u0641\u0639\u0644\u0627\u0646", "\u064A\u0641\u0639\u0644\u0648\u0646", "\u064A\u0643\u0648\u0646", "\u064A\u0644\u064A", "\u064A\u0645\u0643\u0646", "\u064A\u0645\u064A\u0646", "\u064A\u0646", "\u064A\u0646\u0627\u064A\u0631", "\u064A\u0648\u0627\u0646", "\u064A\u0648\u0631\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u064A\u0648\u0645", "\u064A\u0648\u0646\u064A\u0648", "\u0651\u0623\u064A\u0651\u0627\u0646"]
  };
});

// node_modules/keyword-extractor/lib/stopwords/cs.js
var require_cs = __commonJS((exports, module) => {
  module.exports = {
    stopwords: ["a", "aby", "ahoj", "aj", "ale", "anebo", "ani", "ani\u017E", "ano", "asi", "aspo\u0148", "atd", "atp", "az", "a\u010Dkoli", "a\u017E", "bez", "beze", "bl\xEDzko", "bohu\u017Eel", "brzo", "bude", "budem", "budeme", "budes", "budete", "bude\u0161", "budou", "budu", "by", "byl", "byla", "byli", "bylo", "byly", "bys", "byt", "b\xFDt", "b\u011Bhem", "chce", "chceme", "chcete", "chce\u0161", "chci", "cht\xEDt", "cht\u011Bj\xED", "chut'", "chuti", "ci", "clanek", "clanku", "clanky", "co", "coz", "co\u017E", "cz", "daleko", "dalsi", "dal\u0161\xED", "den", "deset", "design", "devaten\xE1ct", "dev\u011Bt", "dnes", "do", "dobr\xFD", "docela", "dva", "dvacet", "dvan\xE1ct", "dv\u011B", "d\xE1l", "d\xE1le", "d\u011Bkovat", "d\u011Bkujeme", "d\u011Bkuji", "email", "ho", "hodn\u011B", "i", "jak", "jakmile", "jako", "jako\u017E", "jde", "je", "jeden", "jeden\xE1ct", "jedna", "jedno", "jednou", "jedou", "jeho", "jeho\u017E", "jej", "jeji", "jejich", "jej\xED", "jeliko\u017E", "jemu", "jen", "jenom", "jen\u017E", "jeste", "jestli", "jestli\u017Ee", "je\u0161t\u011B", "je\u017E", "ji", "jich", "jimi", "jinak", "jine", "jin\xE9", "jiz", "ji\u017E", "jsem", "jses", "jse\u0161", "jsi", "jsme", "jsou", "jste", "j\xE1", "j\xED", "j\xEDm", "j\xED\u017E", "j\u0161te", "k", "kam", "ka\u017Ed\xFD", "kde", "kdo", "kdy", "kdyz", "kdy\u017E", "ke", "kolik", "krom\u011B", "ktera", "ktere", "kteri", "kterou", "ktery", "kter\xE1", "kter\xE9", "kter\xFD", "kte\u0159i", "kte\u0159\xED", "ku", "kv\u016Fli", "ma", "maj\xED", "mate", "me", "mezi", "mi", "mit", "mne", "mnou", "mn\u011B", "moc", "mohl", "mohou", "moje", "moji", "mo\u017En\xE1", "muj", "mus\xED", "muze", "my", "m\xE1", "m\xE1lo", "m\xE1m", "m\xE1me", "m\xE1te", "m\xE1\u0161", "m\xE9", "m\xED", "m\xEDt", "m\u011B", "m\u016Fj", "m\u016F\u017Ee", "na", "nad", "nade", "nam", "napiste", "napi\u0161te", "naproti", "nas", "nasi", "na\u010De\u017E", "na\u0161e", "na\u0161i", "ne", "nebo", "nebyl", "nebyla", "nebyli", "nebyly", "nech\u0165", "ned\u011Blaj\xED", "ned\u011Bl\xE1", "ned\u011Bl\xE1m", "ned\u011Bl\xE1me", "ned\u011Bl\xE1te", "ned\u011Bl\xE1\u0161", "neg", "nejsi", "nejsou", "nemaj\xED", "nem\xE1me", "nem\xE1te", "nem\u011Bl", "neni", "nen\xED", "nesta\u010D\xED", "nevad\xED", "nez", "ne\u017E", "nic", "nich", "nimi", "nove", "novy", "nov\xE9", "nov\xFD", "nula", "n\xE1", "n\xE1m", "n\xE1mi", "n\xE1s", "n\xE1\u0161", "n\xED", "n\xEDm", "n\u011B", "n\u011Bco", "n\u011Bjak", "n\u011Bkde", "n\u011Bkdo", "n\u011Bmu", "n\u011Bmu\u017E", "o", "od", "ode", "on", "ona", "oni", "ono", "ony", "osm", "osmn\xE1ct", "pak", "patn\xE1ct", "po", "pod", "podle", "pokud", "potom", "pouze", "pozd\u011B", "po\u0159\xE1d", "prave", "prav\xE9", "pred", "pres", "pri", "pro", "proc", "prost\u011B", "pros\xEDm", "proti", "proto", "protoze", "proto\u017Ee", "pro\u010D", "prvni", "prvn\xED", "pr\xE1ve", "pta", "p\u011Bt", "p\u0159ed", "p\u0159ede", "p\u0159es", "p\u0159ese", "p\u0159i", "p\u0159i\u010Dem\u017E", "re", "rovn\u011B", "s", "se", "sedm", "sedmn\xE1ct", "si", "sice", "skoro", "sm\xED", "sm\u011Bj\xED", "snad", "spolu", "sta", "sto", "strana", "st\xE9", "sve", "svych", "svym", "svymi", "sv\xE9", "sv\xFDch", "sv\xFDm", "sv\xFDmi", "sv\u016Fj", "ta", "tady", "tak", "take", "takhle", "taky", "takze", "tak\xE9", "tak\u017Ee", "tam", "tamhle", "tamhleto", "tamto", "tato", "te", "tebe", "tebou", "ted'", "tedy", "tema", "ten", "tento", "teto", "ti", "tim", "timto", "tipy", "tis\xEDc", "tis\xEDce", "to", "tob\u011B", "tohle", "toho", "tohoto", "tom", "tomto", "tomu", "tomuto", "toto", "tro\u0161ku", "tu", "tuto", "tvoje", "tv\xE1", "tv\xE9", "tv\u016Fj", "ty", "tyto", "t\xE9ma", "t\xE9to", "t\xEDm", "t\xEDmto", "t\u011B", "t\u011Bm", "t\u011Bma", "t\u011Bmu", "t\u0159eba", "t\u0159i", "t\u0159in\xE1ct", "u", "ur\u010Dit\u011B", "uz", "u\u017E", "v", "vam", "vas", "vase", "va\u0161e", "va\u0161i", "ve", "vedle", "ve\u010Der", "vice", "vlastn\u011B", "vsak", "vy", "v\xE1m", "v\xE1mi", "v\xE1s", "v\xE1\u0161", "v\xEDce", "v\u0161ak", "v\u0161echen", "v\u0161echno", "v\u0161ichni", "v\u016Fbec", "v\u017Edy", "z", "za", "zat\xEDmco", "za\u010D", "zda", "zde", "ze", "zpet", "zpravy", "zpr\xE1vy", "zp\u011Bt", "\u010Dau", "\u010Di", "\u010Dl\xE1nek", "\u010Dl\xE1nku", "\u010Dl\xE1nky", "\u010Dtrn\xE1ct", "\u010Dty\u0159i", "\u0161est", "\u0161estn\xE1ct", "\u017Ee"]
  };
});

// node_modules/keyword-extractor/lib/stopwords/da.js
var require_da = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "ad",
      "af",
      "aldrig",
      "alle",
      "alt",
      "altid",
      "anden",
      "andet",
      "andre",
      "at",
      "bagved",
      "begge",
      "blev",
      "blive",
      "bliver",
      "da",
      "de",
      "dem",
      "den",
      "denne",
      "der",
      "deres",
      "det",
      "dette",
      "dig",
      "din",
      "disse",
      "dog",
      "du",
      "efter",
      "ej",
      "eller",
      "en",
      "end",
      "endnu",
      "ene",
      "eneste",
      "enhver",
      "er",
      "et",
      "fem",
      "fire",
      "fjernt",
      "flere",
      "fleste",
      "for",
      "foran",
      "fordi",
      "forrige",
      "fra",
      "f\xE5",
      "f\xF8r",
      "gennem",
      "god",
      "ham",
      "han",
      "hans",
      "har",
      "havde",
      "have",
      "hende",
      "hendes",
      "her",
      "hos",
      "hovfor",
      "hun",
      "hurtig",
      "hvad",
      "hvem",
      "hver",
      "hvilken",
      "hvis",
      "hvon\xE5r",
      "hvor",
      "hvordan",
      "hvorfor",
      "hvorhen",
      "hvorn\xE5r",
      "i",
      "ikke",
      "imod",
      "ind",
      "ingen",
      "intet",
      "ja",
      "jeg",
      "jer",
      "jeres",
      "jo",
      "kan",
      "kom",
      "kommer",
      "kunne",
      "langsom",
      "lav",
      "lidt",
      "lille",
      "man",
      "mand",
      "mange",
      "med",
      "meget",
      "mellem",
      "men",
      "mens",
      "mere",
      "mig",
      "min",
      "mindre",
      "mine",
      "mit",
      "mod",
      "m\xE5ske",
      "ned",
      "nede",
      "nej",
      "ni",
      "nogen",
      "noget",
      "nogle",
      "nok",
      "nu",
      "ny",
      "nyt",
      "n\xE5r",
      "n\xE6r",
      "n\xE6ste",
      "n\xE6sten",
      "og",
      "ogs\xE5",
      "om",
      "op",
      "oppe",
      "os",
      "otte",
      "over",
      "p\xE5",
      "rask",
      "sammen",
      "se",
      "seks",
      "selv",
      "ses",
      "sig",
      "sin",
      "sine",
      "sit",
      "skal",
      "skulle",
      "som",
      "stor",
      "store",
      "syv",
      "s\xE5dan",
      "temmelig",
      "thi",
      "ti",
      "til",
      "to",
      "tre",
      "ud",
      "uden",
      "udenfor",
      "under",
      "var",
      "ved",
      "vi",
      "vil",
      "ville",
      "vor",
      "v\xE6re",
      "v\xE6ret"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/de.js
var require_de = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "a",
      "ab",
      "aber",
      "ach",
      "acht",
      "achte",
      "achten",
      "achter",
      "achtes",
      "ag",
      "alle",
      "allein",
      "allem",
      "allen",
      "aller",
      "allerdings",
      "alles",
      "allgemeinen",
      "als",
      "also",
      "am",
      "an",
      "andere",
      "anderen",
      "andern",
      "anders",
      "au",
      "auch",
      "auf",
      "aus",
      "ausser",
      "au\xDFer",
      "ausserdem",
      "au\xDFerdem",
      "b",
      "bald",
      "bei",
      "beide",
      "beiden",
      "beim",
      "beispiel",
      "bekannt",
      "bereits",
      "besonders",
      "besser",
      "besten",
      "bin",
      "bis",
      "bisher",
      "bist",
      "c",
      "d",
      "da",
      "dabei",
      "dadurch",
      "daf\xFCr",
      "dagegen",
      "daher",
      "dahin",
      "dahinter",
      "damals",
      "damit",
      "danach",
      "daneben",
      "dank",
      "dann",
      "daran",
      "darauf",
      "daraus",
      "darf",
      "darfst",
      "darin",
      "dar\xFCber",
      "darum",
      "darunter",
      "das",
      "dasein",
      "daselbst",
      "dass",
      "da\xDF",
      "dasselbe",
      "davon",
      "davor",
      "dazu",
      "dazwischen",
      "dein",
      "deine",
      "deinem",
      "deiner",
      "dem",
      "dementsprechend",
      "demgegen\xFCber",
      "demgem\xE4ss",
      "demgem\xE4\xDF",
      "demselben",
      "demzufolge",
      "den",
      "denen",
      "denn",
      "denselben",
      "der",
      "deren",
      "derjenige",
      "derjenigen",
      "dermassen",
      "derma\xDFen",
      "derselbe",
      "derselben",
      "des",
      "deshalb",
      "desselben",
      "dessen",
      "deswegen",
      "d.h",
      "dich",
      "die",
      "diejenige",
      "diejenigen",
      "dies",
      "diese",
      "dieselbe",
      "dieselben",
      "diesem",
      "diesen",
      "dieser",
      "dieses",
      "dir",
      "doch",
      "dort",
      "drei",
      "drin",
      "dritte",
      "dritten",
      "dritter",
      "drittes",
      "du",
      "durch",
      "durchaus",
      "d\xFCrfen",
      "d\xFCrft",
      "durfte",
      "durften",
      "e",
      "eben",
      "ebenso",
      "ehrlich",
      "ei",
      "ei,",
      "eigen",
      "eigene",
      "eigenen",
      "eigener",
      "eigenes",
      "ein",
      "einander",
      "eine",
      "einem",
      "einen",
      "einer",
      "eines",
      "einige",
      "einigen",
      "einiger",
      "einiges",
      "einmal",
      "eins",
      "elf",
      "en",
      "ende",
      "endlich",
      "entweder",
      "er",
      "Ernst",
      "erst",
      "erste",
      "ersten",
      "erster",
      "erstes",
      "es",
      "etwa",
      "etwas",
      "euch",
      "f",
      "fr\xFCher",
      "f\xFCnf",
      "f\xFCnfte",
      "f\xFCnften",
      "f\xFCnfter",
      "f\xFCnftes",
      "f\xFCr",
      "g",
      "gab",
      "ganz",
      "ganze",
      "ganzen",
      "ganzer",
      "ganzes",
      "gar",
      "gedurft",
      "gegen",
      "gegen\xFCber",
      "gehabt",
      "gehen",
      "geht",
      "gekannt",
      "gekonnt",
      "gemacht",
      "gemocht",
      "gemusst",
      "genug",
      "gerade",
      "gern",
      "gesagt",
      "geschweige",
      "gewesen",
      "gewollt",
      "geworden",
      "gibt",
      "ging",
      "gleich",
      "gott",
      "gross",
      "gro\xDF",
      "grosse",
      "gro\xDFe",
      "grossen",
      "gro\xDFen",
      "grosser",
      "gro\xDFer",
      "grosses",
      "gro\xDFes",
      "gut",
      "gute",
      "guter",
      "gutes",
      "h",
      "habe",
      "haben",
      "habt",
      "hast",
      "hat",
      "hatte",
      "h\xE4tte",
      "hatten",
      "h\xE4tten",
      "heisst",
      "her",
      "heute",
      "hier",
      "hin",
      "hinter",
      "hoch",
      "i",
      "ich",
      "ihm",
      "ihn",
      "ihnen",
      "ihr",
      "ihre",
      "ihrem",
      "ihren",
      "ihrer",
      "ihres",
      "im",
      "immer",
      "in",
      "indem",
      "infolgedessen",
      "ins",
      "irgend",
      "ist",
      "j",
      "ja",
      "jahr",
      "jahre",
      "jahren",
      "je",
      "jede",
      "jedem",
      "jeden",
      "jeder",
      "jedermann",
      "jedermanns",
      "jedoch",
      "jemand",
      "jemandem",
      "jemanden",
      "jene",
      "jenem",
      "jenen",
      "jener",
      "jenes",
      "jetzt",
      "k",
      "kam",
      "kann",
      "kannst",
      "kaum",
      "kein",
      "keine",
      "keinem",
      "keinen",
      "keiner",
      "kleine",
      "kleinen",
      "kleiner",
      "kleines",
      "kommen",
      "kommt",
      "k\xF6nnen",
      "k\xF6nnt",
      "konnte",
      "k\xF6nnte",
      "konnten",
      "kurz",
      "l",
      "lang",
      "lange",
      "leicht",
      "leide",
      "lieber",
      "los",
      "m",
      "machen",
      "macht",
      "machte",
      "mag",
      "magst",
      "mahn",
      "man",
      "manche",
      "manchem",
      "manchen",
      "mancher",
      "manches",
      "mann",
      "mehr",
      "mein",
      "meine",
      "meinem",
      "meinen",
      "meiner",
      "meines",
      "mensch",
      "menschen",
      "mich",
      "mir",
      "mit",
      "mittel",
      "mochte",
      "m\xF6chte",
      "mochten",
      "m\xF6gen",
      "m\xF6glich",
      "m\xF6gt",
      "morgen",
      "muss",
      "mu\xDF",
      "m\xFCssen",
      "musst",
      "m\xFCsst",
      "musste",
      "mussten",
      "n",
      "na",
      "nach",
      "nachdem",
      "nahm",
      "nat\xFCrlich",
      "neben",
      "nein",
      "neue",
      "neuen",
      "neun",
      "neunte",
      "neunten",
      "neunter",
      "neuntes",
      "nicht",
      "nichts",
      "nie",
      "niemand",
      "niemandem",
      "niemanden",
      "noch",
      "nun",
      "nur",
      "o",
      "ob",
      "oben",
      "oder",
      "offen",
      "oft",
      "ohne",
      "Ordnung",
      "p",
      "q",
      "r",
      "recht",
      "rechte",
      "rechten",
      "rechter",
      "rechtes",
      "richtig",
      "rund",
      "s",
      "sa",
      "sache",
      "sagt",
      "sagte",
      "sah",
      "satt",
      "schlecht",
      "Schluss",
      "schon",
      "sechs",
      "sechste",
      "sechsten",
      "sechster",
      "sechstes",
      "sehr",
      "sei",
      "seid",
      "seien",
      "sein",
      "seine",
      "seinem",
      "seinen",
      "seiner",
      "seines",
      "seit",
      "seitdem",
      "selbst",
      "sich",
      "sie",
      "sieben",
      "siebente",
      "siebenten",
      "siebenter",
      "siebentes",
      "sind",
      "so",
      "solang",
      "solche",
      "solchem",
      "solchen",
      "solcher",
      "solches",
      "soll",
      "sollen",
      "sollte",
      "sollten",
      "sondern",
      "sonst",
      "sowie",
      "sp\xE4ter",
      "statt",
      "t",
      "tag",
      "tage",
      "tagen",
      "tat",
      "teil",
      "tel",
      "tritt",
      "trotzdem",
      "tun",
      "u",
      "\xFCber",
      "\xFCberhaupt",
      "\xFCbrigens",
      "uhr",
      "um",
      "und",
      "und?",
      "uns",
      "unser",
      "unsere",
      "unserer",
      "unter",
      "v",
      "vergangenen",
      "viel",
      "viele",
      "vielem",
      "vielen",
      "vielleicht",
      "vier",
      "vierte",
      "vierten",
      "vierter",
      "viertes",
      "vom",
      "von",
      "vor",
      "w",
      "wahr?",
      "w\xE4hrend",
      "w\xE4hrenddem",
      "w\xE4hrenddessen",
      "wann",
      "war",
      "w\xE4re",
      "waren",
      "wart",
      "warum",
      "was",
      "wegen",
      "weil",
      "weit",
      "weiter",
      "weitere",
      "weiteren",
      "weiteres",
      "welche",
      "welchem",
      "welchen",
      "welcher",
      "welches",
      "wem",
      "wen",
      "wenig",
      "wenige",
      "weniger",
      "weniges",
      "wenigstens",
      "wenn",
      "wer",
      "werde",
      "werden",
      "werdet",
      "wessen",
      "wie",
      "wieder",
      "will",
      "willst",
      "wir",
      "wird",
      "wirklich",
      "wirst",
      "wo",
      "wohl",
      "wollen",
      "wollt",
      "wollte",
      "wollten",
      "worden",
      "wurde",
      "w\xFCrde",
      "wurden",
      "w\xFCrden",
      "x",
      "y",
      "z",
      "z.b",
      "zehn",
      "zehnte",
      "zehnten",
      "zehnter",
      "zehntes",
      "zeit",
      "zu",
      "zuerst",
      "zugleich",
      "zum",
      "zun\xE4chst",
      "zur",
      "zur\xFCck",
      "zusammen",
      "zwanzig",
      "zwar",
      "zwei",
      "zweite",
      "zweiten",
      "zweiter",
      "zweites",
      "zwischen",
      "zw\xF6lf",
      "\uFEFFaber",
      "euer",
      "eure",
      "hattest",
      "hattet",
      "jedes",
      "mu\xDFt",
      "m\xFC\xDFt",
      "sollst",
      "sollt",
      "soweit",
      "weshalb",
      "wieso",
      "woher",
      "wohin"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/en.js
var require_en = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "a",
      "a's",
      "able",
      "about",
      "above",
      "according",
      "accordingly",
      "across",
      "actually",
      "after",
      "afterwards",
      "again",
      "against",
      "ain't",
      "all",
      "allow",
      "allows",
      "almost",
      "alone",
      "along",
      "already",
      "also",
      "although",
      "always",
      "am",
      "among",
      "amongst",
      "an",
      "and",
      "another",
      "any",
      "anybody",
      "anyhow",
      "anyone",
      "anything",
      "anyway",
      "anyways",
      "anywhere",
      "apart",
      "appear",
      "appreciate",
      "appropriate",
      "are",
      "aren't",
      "around",
      "as",
      "aside",
      "ask",
      "asking",
      "associated",
      "at",
      "available",
      "away",
      "awfully",
      "b",
      "be",
      "became",
      "because",
      "become",
      "becomes",
      "becoming",
      "been",
      "before",
      "beforehand",
      "behind",
      "being",
      "believe",
      "below",
      "beside",
      "besides",
      "best",
      "better",
      "between",
      "beyond",
      "both",
      "brief",
      "but",
      "by",
      "c",
      "c'mon",
      "c's",
      "came",
      "can",
      "can't",
      "cannot",
      "cant",
      "cause",
      "causes",
      "certain",
      "certainly",
      "changes",
      "clearly",
      "co",
      "com",
      "come",
      "comes",
      "concerning",
      "consequently",
      "consider",
      "considering",
      "contain",
      "containing",
      "contains",
      "corresponding",
      "could",
      "couldn't",
      "course",
      "currently",
      "d",
      "definitely",
      "described",
      "despite",
      "did",
      "didn't",
      "different",
      "do",
      "does",
      "doesn't",
      "doing",
      "don't",
      "done",
      "down",
      "downwards",
      "during",
      "e",
      "each",
      "edu",
      "eg",
      "eight",
      "either",
      "else",
      "elsewhere",
      "enough",
      "entirely",
      "especially",
      "et",
      "etc",
      "even",
      "ever",
      "every",
      "everybody",
      "everyone",
      "everything",
      "everywhere",
      "ex",
      "exactly",
      "example",
      "except",
      "f",
      "far",
      "few",
      "fifth",
      "first",
      "five",
      "followed",
      "following",
      "follows",
      "for",
      "former",
      "formerly",
      "forth",
      "four",
      "from",
      "further",
      "furthermore",
      "g",
      "get",
      "gets",
      "getting",
      "given",
      "gives",
      "go",
      "goes",
      "going",
      "gone",
      "got",
      "gotten",
      "greetings",
      "h",
      "had",
      "hadn't",
      "happens",
      "hardly",
      "has",
      "hasn't",
      "have",
      "haven't",
      "having",
      "he",
      "he's",
      "hello",
      "help",
      "hence",
      "her",
      "here",
      "here's",
      "hereafter",
      "hereby",
      "herein",
      "hereupon",
      "hers",
      "herself",
      "hi",
      "him",
      "himself",
      "his",
      "hither",
      "hopefully",
      "how",
      "howbeit",
      "however",
      "i",
      "i'd",
      "i'll",
      "i'm",
      "i've",
      "ie",
      "if",
      "ignored",
      "immediate",
      "in",
      "inasmuch",
      "inc",
      "indeed",
      "indicate",
      "indicated",
      "indicates",
      "inner",
      "insofar",
      "instead",
      "into",
      "inward",
      "is",
      "isn't",
      "it",
      "it'd",
      "it'll",
      "it's",
      "its",
      "itself",
      "j",
      "just",
      "k",
      "keep",
      "keeps",
      "kept",
      "know",
      "knows",
      "known",
      "l",
      "last",
      "lately",
      "later",
      "latter",
      "latterly",
      "least",
      "less",
      "lest",
      "let",
      "let's",
      "like",
      "liked",
      "likely",
      "little",
      "look",
      "looking",
      "looks",
      "ltd",
      "m",
      "mainly",
      "many",
      "may",
      "maybe",
      "me",
      "mean",
      "meanwhile",
      "merely",
      "might",
      "more",
      "moreover",
      "most",
      "mostly",
      "much",
      "must",
      "my",
      "myself",
      "n",
      "name",
      "namely",
      "nd",
      "near",
      "nearly",
      "necessary",
      "need",
      "needs",
      "neither",
      "never",
      "nevertheless",
      "new",
      "next",
      "nine",
      "no",
      "nobody",
      "non",
      "none",
      "noone",
      "nor",
      "normally",
      "not",
      "nothing",
      "novel",
      "now",
      "nowhere",
      "o",
      "obviously",
      "of",
      "off",
      "often",
      "oh",
      "ok",
      "okay",
      "old",
      "on",
      "once",
      "one",
      "ones",
      "only",
      "onto",
      "or",
      "other",
      "others",
      "otherwise",
      "ought",
      "our",
      "ours",
      "ourselves",
      "out",
      "outside",
      "over",
      "overall",
      "own",
      "p",
      "particular",
      "particularly",
      "per",
      "perhaps",
      "placed",
      "please",
      "plus",
      "possible",
      "presumably",
      "probably",
      "provides",
      "q",
      "que",
      "quite",
      "qv",
      "r",
      "rather",
      "rd",
      "re",
      "really",
      "reasonably",
      "regarding",
      "regardless",
      "regards",
      "relatively",
      "respectively",
      "right",
      "s",
      "said",
      "same",
      "saw",
      "say",
      "saying",
      "says",
      "second",
      "secondly",
      "see",
      "seeing",
      "seem",
      "seemed",
      "seeming",
      "seems",
      "seen",
      "self",
      "selves",
      "sensible",
      "sent",
      "serious",
      "seriously",
      "seven",
      "several",
      "shall",
      "she",
      "should",
      "shouldn't",
      "since",
      "six",
      "so",
      "some",
      "somebody",
      "somehow",
      "someone",
      "something",
      "sometime",
      "sometimes",
      "somewhat",
      "somewhere",
      "soon",
      "sorry",
      "specified",
      "specify",
      "specifying",
      "still",
      "sub",
      "such",
      "sup",
      "sure",
      "t",
      "t's",
      "take",
      "taken",
      "tell",
      "tends",
      "th",
      "than",
      "thank",
      "thanks",
      "thanx",
      "that",
      "that's",
      "thats",
      "the",
      "their",
      "theirs",
      "them",
      "themselves",
      "then",
      "thence",
      "there",
      "there's",
      "thereafter",
      "thereby",
      "therefore",
      "therein",
      "theres",
      "thereupon",
      "these",
      "they",
      "they'd",
      "they'll",
      "they're",
      "they've",
      "think",
      "third",
      "this",
      "thorough",
      "thoroughly",
      "those",
      "though",
      "three",
      "through",
      "throughout",
      "thru",
      "thus",
      "to",
      "together",
      "too",
      "took",
      "toward",
      "towards",
      "tried",
      "tries",
      "truly",
      "try",
      "trying",
      "twice",
      "two",
      "u",
      "un",
      "under",
      "unfortunately",
      "unless",
      "unlikely",
      "until",
      "unto",
      "up",
      "upon",
      "us",
      "use",
      "used",
      "useful",
      "uses",
      "using",
      "usually",
      "uucp",
      "v",
      "value",
      "various",
      "very",
      "via",
      "viz",
      "vs",
      "w",
      "want",
      "wants",
      "was",
      "wasn't",
      "way",
      "we",
      "we'd",
      "we'll",
      "we're",
      "we've",
      "welcome",
      "well",
      "went",
      "were",
      "weren't",
      "what",
      "what's",
      "whatever",
      "when",
      "whence",
      "whenever",
      "where",
      "where's",
      "whereafter",
      "whereas",
      "whereby",
      "wherein",
      "whereupon",
      "wherever",
      "whether",
      "which",
      "while",
      "whither",
      "who",
      "who's",
      "whoever",
      "whole",
      "whom",
      "whose",
      "why",
      "will",
      "willing",
      "wish",
      "with",
      "within",
      "without",
      "won't",
      "wonder",
      "would",
      "would",
      "wouldn't",
      "x",
      "y",
      "yes",
      "yet",
      "you",
      "you'd",
      "you'll",
      "you're",
      "you've",
      "your",
      "yours",
      "yourself",
      "yourselves",
      "z",
      "zero"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/es.js
var require_es = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "_",
      "a",
      "actualmente",
      "acuerdo",
      "adelante",
      "ademas",
      "adem\xE1s",
      "adrede",
      "afirm\xF3",
      "agreg\xF3",
      "ahi",
      "ahora",
      "ah\xED",
      "al",
      "algo",
      "alguna",
      "algunas",
      "alguno",
      "algunos",
      "alg\xFAn",
      "alli",
      "all\xED",
      "alrededor",
      "ambos",
      "ampleamos",
      "antano",
      "anta\xF1o",
      "ante",
      "anterior",
      "antes",
      "apenas",
      "aproximadamente",
      "aquel",
      "aquella",
      "aquellas",
      "aquello",
      "aquellos",
      "aqui",
      "aqu\xE9l",
      "aqu\xE9lla",
      "aqu\xE9llas",
      "aqu\xE9llos",
      "aqu\xED",
      "arriba",
      "arribaabajo",
      "asegur\xF3",
      "asi",
      "as\xED",
      "atras",
      "aun",
      "aunque",
      "ayer",
      "a\xF1adi\xF3",
      "a\xFAn",
      "b",
      "bajo",
      "bastante",
      "bien",
      "breve",
      "buen",
      "buena",
      "buenas",
      "bueno",
      "buenos",
      "c",
      "cada",
      "casi",
      "cerca",
      "cierta",
      "ciertas",
      "cierto",
      "ciertos",
      "cinco",
      "claro",
      "coment\xF3",
      "como",
      "con",
      "conmigo",
      "conocer",
      "conseguimos",
      "conseguir",
      "considera",
      "consider\xF3",
      "consigo",
      "consigue",
      "consiguen",
      "consigues",
      "contigo",
      "contra",
      "cosas",
      "creo",
      "cual",
      "cuales",
      "cualquier",
      "cuando",
      "cuanta",
      "cuantas",
      "cuanto",
      "cuantos",
      "cuatro",
      "cuenta",
      "cu\xE1l",
      "cu\xE1les",
      "cu\xE1ndo",
      "cu\xE1nta",
      "cu\xE1ntas",
      "cu\xE1nto",
      "cu\xE1ntos",
      "c\xF3mo",
      "d",
      "da",
      "dado",
      "dan",
      "dar",
      "de",
      "debajo",
      "debe",
      "deben",
      "debido",
      "decir",
      "dej\xF3",
      "del",
      "delante",
      "demasiado",
      "dem\xE1s",
      "dentro",
      "deprisa",
      "desde",
      "despacio",
      "despues",
      "despu\xE9s",
      "detras",
      "detr\xE1s",
      "dia",
      "dias",
      "dice",
      "dicen",
      "dicho",
      "dieron",
      "diferente",
      "diferentes",
      "dijeron",
      "dijo",
      "dio",
      "donde",
      "dos",
      "durante",
      "d\xEDa",
      "d\xEDas",
      "d\xF3nde",
      "e",
      "ejemplo",
      "el",
      "ella",
      "ellas",
      "ello",
      "ellos",
      "embargo",
      "empleais",
      "emplean",
      "emplear",
      "empleas",
      "empleo",
      "en",
      "encima",
      "encuentra",
      "enfrente",
      "enseguida",
      "entonces",
      "entre",
      "era",
      "erais",
      "eramos",
      "eran",
      "eras",
      "eres",
      "es",
      "esa",
      "esas",
      "ese",
      "eso",
      "esos",
      "esta",
      "estaba",
      "estabais",
      "estaban",
      "estabas",
      "estad",
      "estada",
      "estadas",
      "estado",
      "estados",
      "estais",
      "estamos",
      "estan",
      "estando",
      "estar",
      "estaremos",
      "estar\xE1",
      "estar\xE1n",
      "estar\xE1s",
      "estar\xE9",
      "estar\xE9is",
      "estar\xEDa",
      "estar\xEDais",
      "estar\xEDamos",
      "estar\xEDan",
      "estar\xEDas",
      "estas",
      "este",
      "estemos",
      "esto",
      "estos",
      "estoy",
      "estuve",
      "estuviera",
      "estuvierais",
      "estuvieran",
      "estuvieras",
      "estuvieron",
      "estuviese",
      "estuvieseis",
      "estuviesen",
      "estuvieses",
      "estuvimos",
      "estuviste",
      "estuvisteis",
      "estuvi\xE9ramos",
      "estuvi\xE9semos",
      "estuvo",
      "est\xE1",
      "est\xE1bamos",
      "est\xE1is",
      "est\xE1n",
      "est\xE1s",
      "est\xE9",
      "est\xE9is",
      "est\xE9n",
      "est\xE9s",
      "ex",
      "excepto",
      "existe",
      "existen",
      "explic\xF3",
      "expres\xF3",
      "f",
      "fin",
      "final",
      "fue",
      "fuera",
      "fuerais",
      "fueran",
      "fueras",
      "fueron",
      "fuese",
      "fueseis",
      "fuesen",
      "fueses",
      "fui",
      "fuimos",
      "fuiste",
      "fuisteis",
      "fu\xE9ramos",
      "fu\xE9semos",
      "g",
      "general",
      "gran",
      "grandes",
      "gueno",
      "h",
      "ha",
      "haber",
      "habia",
      "habida",
      "habidas",
      "habido",
      "habidos",
      "habiendo",
      "habla",
      "hablan",
      "habremos",
      "habr\xE1",
      "habr\xE1n",
      "habr\xE1s",
      "habr\xE9",
      "habr\xE9is",
      "habr\xEDa",
      "habr\xEDais",
      "habr\xEDamos",
      "habr\xEDan",
      "habr\xEDas",
      "hab\xE9is",
      "hab\xEDa",
      "hab\xEDais",
      "hab\xEDamos",
      "hab\xEDan",
      "hab\xEDas",
      "hace",
      "haceis",
      "hacemos",
      "hacen",
      "hacer",
      "hacerlo",
      "haces",
      "hacia",
      "haciendo",
      "hago",
      "han",
      "has",
      "hasta",
      "hay",
      "haya",
      "hayamos",
      "hayan",
      "hayas",
      "hay\xE1is",
      "he",
      "hecho",
      "hemos",
      "hicieron",
      "hizo",
      "horas",
      "hoy",
      "hube",
      "hubiera",
      "hubierais",
      "hubieran",
      "hubieras",
      "hubieron",
      "hubiese",
      "hubieseis",
      "hubiesen",
      "hubieses",
      "hubimos",
      "hubiste",
      "hubisteis",
      "hubi\xE9ramos",
      "hubi\xE9semos",
      "hubo",
      "i",
      "igual",
      "incluso",
      "indic\xF3",
      "informo",
      "inform\xF3",
      "intenta",
      "intentais",
      "intentamos",
      "intentan",
      "intentar",
      "intentas",
      "intento",
      "ir",
      "j",
      "junto",
      "k",
      "l",
      "la",
      "lado",
      "largo",
      "las",
      "le",
      "lejos",
      "les",
      "lleg\xF3",
      "lleva",
      "llevar",
      "lo",
      "los",
      "luego",
      "lugar",
      "m",
      "mal",
      "manera",
      "manifest\xF3",
      "mas",
      "mayor",
      "me",
      "mediante",
      "medio",
      "mejor",
      "mencion\xF3",
      "menos",
      "menudo",
      "mi",
      "mia",
      "mias",
      "mientras",
      "mio",
      "mios",
      "mis",
      "misma",
      "mismas",
      "mismo",
      "mismos",
      "modo",
      "momento",
      "mucha",
      "muchas",
      "mucho",
      "muchos",
      "muy",
      "m\xE1s",
      "m\xED",
      "m\xEDa",
      "m\xEDas",
      "m\xEDo",
      "m\xEDos",
      "n",
      "nada",
      "nadie",
      "ni",
      "ninguna",
      "ningunas",
      "ninguno",
      "ningunos",
      "ning\xFAn",
      "no",
      "nos",
      "nosotras",
      "nosotros",
      "nuestra",
      "nuestras",
      "nuestro",
      "nuestros",
      "nueva",
      "nuevas",
      "nuevo",
      "nuevos",
      "nunca",
      "o",
      "ocho",
      "os",
      "otra",
      "otras",
      "otro",
      "otros",
      "p",
      "pais",
      "para",
      "parece",
      "parte",
      "partir",
      "pasada",
      "pasado",
      "pa\xECs",
      "peor",
      "pero",
      "pesar",
      "poca",
      "pocas",
      "poco",
      "pocos",
      "podeis",
      "podemos",
      "poder",
      "podria",
      "podr\xEDa",
      "podriais",
      "podriamos",
      "podrian",
      "podrias",
      "podr\xE1",
      "podr\xE1n",
      "podr\xEDa",
      "podr\xEDan",
      "poner",
      "por",
      "por qu\xE9",
      "porque",
      "posible",
      "primer",
      "primera",
      "primero",
      "primeros",
      "principalmente",
      "pronto",
      "propia",
      "propias",
      "propio",
      "propios",
      "proximo",
      "pr\xF3ximo",
      "pr\xF3ximos",
      "pudo",
      "pueda",
      "puede",
      "pueden",
      "puedo",
      "pues",
      "q",
      "qeu",
      "que",
      "qued\xF3",
      "queremos",
      "quien",
      "quienes",
      "quiere",
      "quiza",
      "quizas",
      "quiz\xE1",
      "quiz\xE1s",
      "qui\xE9n",
      "qui\xE9nes",
      "qu\xE9",
      "r",
      "raras",
      "realizado",
      "realizar",
      "realiz\xF3",
      "repente",
      "respecto",
      "s",
      "sabe",
      "sabeis",
      "sabemos",
      "saben",
      "saber",
      "sabes",
      "sal",
      "salvo",
      "se",
      "sea",
      "seamos",
      "sean",
      "seas",
      "segun",
      "segunda",
      "segundo",
      "seg\xFAn",
      "seis",
      "ser",
      "sera",
      "seremos",
      "ser\xE1",
      "ser\xE1n",
      "ser\xE1s",
      "ser\xE9",
      "ser\xE9is",
      "ser\xEDa",
      "ser\xEDais",
      "ser\xEDamos",
      "ser\xEDan",
      "ser\xEDas",
      "se\xE1is",
      "se\xF1al\xF3",
      "si",
      "sido",
      "siempre",
      "siendo",
      "siete",
      "sigue",
      "siguiente",
      "sin",
      "sino",
      "sobre",
      "sois",
      "sola",
      "solamente",
      "solas",
      "solo",
      "solos",
      "somos",
      "son",
      "soy",
      "soyos",
      "su",
      "supuesto",
      "sus",
      "suya",
      "suyas",
      "suyo",
      "suyos",
      "s\xE9",
      "s\xED",
      "s\xF3lo",
      "t",
      "tal",
      "tambien",
      "tambi\xE9n",
      "tampoco",
      "tan",
      "tanto",
      "tarde",
      "te",
      "temprano",
      "tendremos",
      "tendr\xE1",
      "tendr\xE1n",
      "tendr\xE1s",
      "tendr\xE9",
      "tendr\xE9is",
      "tendr\xEDa",
      "tendr\xEDais",
      "tendr\xEDamos",
      "tendr\xEDan",
      "tendr\xEDas",
      "tened",
      "teneis",
      "tenemos",
      "tener",
      "tenga",
      "tengamos",
      "tengan",
      "tengas",
      "tengo",
      "teng\xE1is",
      "tenida",
      "tenidas",
      "tenido",
      "tenidos",
      "teniendo",
      "ten\xE9is",
      "ten\xEDa",
      "ten\xEDais",
      "ten\xEDamos",
      "ten\xEDan",
      "ten\xEDas",
      "tercera",
      "ti",
      "tiempo",
      "tiene",
      "tienen",
      "tienes",
      "toda",
      "todas",
      "todavia",
      "todav\xEDa",
      "todo",
      "todos",
      "total",
      "trabaja",
      "trabajais",
      "trabajamos",
      "trabajan",
      "trabajar",
      "trabajas",
      "trabajo",
      "tras",
      "trata",
      "trav\xE9s",
      "tres",
      "tu",
      "tus",
      "tuve",
      "tuviera",
      "tuvierais",
      "tuvieran",
      "tuvieras",
      "tuvieron",
      "tuviese",
      "tuvieseis",
      "tuviesen",
      "tuvieses",
      "tuvimos",
      "tuviste",
      "tuvisteis",
      "tuvi\xE9ramos",
      "tuvi\xE9semos",
      "tuvo",
      "tuya",
      "tuyas",
      "tuyo",
      "tuyos",
      "t\xFA",
      "u",
      "ultimo",
      "un",
      "una",
      "unas",
      "uno",
      "unos",
      "usa",
      "usais",
      "usamos",
      "usan",
      "usar",
      "usas",
      "uso",
      "usted",
      "ustedes",
      "v",
      "va",
      "vais",
      "valor",
      "vamos",
      "van",
      "varias",
      "varios",
      "vaya",
      "veces",
      "ver",
      "verdad",
      "verdadera",
      "verdadero",
      "vez",
      "vosotras",
      "vosotros",
      "voy",
      "vuestra",
      "vuestras",
      "vuestro",
      "vuestros",
      "w",
      "x",
      "y",
      "ya",
      "yo",
      "z",
      "\xE9l",
      "\xE9ramos",
      "\xE9sa",
      "\xE9sas",
      "\xE9se",
      "\xE9sos",
      "\xE9sta",
      "\xE9stas",
      "\xE9ste",
      "\xE9stos",
      "\xFAltima",
      "\xFAltimas",
      "\xFAltimo",
      "\xFAltimos"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/fa.js
var require_fa = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "0",
      "\u06F1",
      "\u06F2",
      "\u06F3",
      "\u06F4",
      "\u06F5",
      "\u06F6",
      "\u06F7",
      "\u06F8",
      "\u06F9",
      "\u06F0",
      "\u060C",
      "!",
      '"',
      "'",
      "`",
      "\xBB",
      "\xAB",
      "{",
      "}",
      "(",
      ")",
      "%",
      "\u062F\u0631\u0635\u062F",
      "\u0641\u06CC\u0635\u062F",
      "-",
      ";",
      "\u061B",
      "\u061B",
      "\u064B",
      "\u064C",
      "\u064D",
      "",
      "\u064E",
      "\u064F",
      "\u0650",
      "\u0651",
      "]",
      "[",
      "@",
      "#",
      "$",
      "%",
      "&",
      "*",
      "\u0627\u062A",
      "\u0627\u062A\u0641\u0627\u0642\u0627",
      "\u0627\u062C\u0631\u0627\u0633\u062A",
      "\u0627\u062D\u062A\u0645\u0627\u0644\u0627",
      "\u0627\u062D\u064A\u0627\u0646\u0627",
      "\u0627\u062E",
      "\u0627\u062E\u062A\u0635\u0627\u0631\u0627",
      "\u0627\u062E\u0631",
      "\u0627\u062E\u0631\u0647\u0627",
      "\u0627\u062E\u0647",
      "\u0627\u062E\u064A\u0631\u0627",
      "\u0627\u062F\u0645\u0647\u0627\u0633\u062A",
      "\u0627\u0631\u0627\u0633\u062A\u0647",
      "\u0627\u0631\u0627\u0645",
      "\u0627\u0631\u0632\u0627\u0646\u062A\u0631",
      "\u0627\u0631\u0632\u0648\u0645\u0646\u062F\u0627\u0646\u0647",
      "\u0627\u0631\u0646\u0647",
      "\u0627\u0631\u0647",
      "\u0627\u0632",
      "\u0627\u0632\u0627\u062F\u0627\u0646\u0647",
      "\u0627\u0632\u0627\u0646",
      "\u0627\u0632\u0627\u0646\u062C\u0627",
      "\u0627\u0632\u0627\u0646\u062C\u0627\u0643\u0647",
      "\u0627\u0632\u0627\u064A\u0646",
      "\u0627\u0632\u0627\u064A\u0646\u0631\u0648",
      "\u0627\u0632\u0628\u0647",
      "\u0627\u0632\u062C\u0645\u0644\u0647",
      "\u0627\u0632\u0631\u0648\u064A",
      "\u0627\u0632\u0633\u0631",
      "\u0627\u0632\u0634",
      "\u0627\u0632\u0642\u0628\u064A\u0644",
      "\u0627\u0632\u0644\u062D\u0627\u0638",
      "\u0627\u0632\u0646\u0638\u0631",
      "\u0627\u0632\u0648",
      "\u0627\u0632\u064A\u0643",
      "\u0627\u0633\u0627\u0633",
      "\u0627\u0633\u0627\u0633\u0627",
      "\u0627\u0633\u0627\u0646",
      "\u0627\u0633\u0627\u0646\u062A\u0631",
      "\u0627\u0633\u0627\u0646\u064A",
      "\u0627\u0633\u062A",
      "\u0627\u0633\u062A\u0648\u0627\u0631\u062A\u0631",
      "\u0627\u0633\u064A\u0628\u067E\u0630\u064A\u0631\u0646\u062F",
      "\u0627\u0634",
      "\u0627\u0634\u0627\u0646",
      "\u0627\u0634\u062A\u0628\u0627\u0647\u0627",
      "\u0627\u0634\u0641\u062A\u0647",
      "\u0627\u0634\u0643\u0627\u0631",
      "\u0627\u0634\u0643\u0627\u0631\u0627",
      "\u0627\u0634\u0643\u0627\u0631\u062A\u0631",
      "\u0627\u0634\u0646\u0627\u064A\u0646\u062F",
      "\u0627\u0635\u0637\u0644\u0627\u062D\u0627",
      "\u0627\u0635\u0644\u0627",
      "\u0627\u0635\u0648\u0644\u0627",
      "\u0627\u0637\u0644\u0627\u0639\u0646\u062F",
      "\u0627\u063A\u0644\u0628",
      "\u0627\u0641\u0632\u0648\u062F\u0646",
      "\u0627\u0641\u0633\u0648\u0633",
      "\u0627\u0641\u0642\u064A",
      "\u0627\u0642\u0644",
      "\u0627\u0642\u0644\u0627",
      "\u0627\u0642\u0644\u064A\u062A",
      "\u0627\u0643\u062A\u0633\u0627\u0628\u0627",
      "\u0627\u0643\u062B\u0631",
      "\u0627\u0643\u062B\u0631\u0627",
      "\u0627\u0643\u062B\u0631\u064A\u062A",
      "\u0627\u0643\u0646\u0648\u0646",
      "\u0627\u0644\u0627",
      "\u0627\u0644\u0627\u0633\u0641",
      "\u0627\u0644\u0627\u0646",
      "\u0627\u0644\u0628\u062A\u0647",
      "\u0627\u0644\u0632\u0627\u0645\u0627",
      "\u0627\u0644\u0638\u0627\u0647\u0631",
      "\u0627\u0644\u0645\u0642\u062F\u0648\u0631",
      "\u0627\u0644\u0647\u064A",
      "\u0627\u0644\u064A",
      "\u0627\u0645",
      "\u0627\u0645\u0627",
      "\u0627\u0645\u0627\u0646",
      "\u0627\u0645\u0631\u0627\u0646\u0647",
      "\u0627\u0645\u0631\u0648\u0632",
      "\u0627\u0645\u0631\u0648\u0632\u0647",
      "\u0627\u0645\u0633\u0627\u0644",
      "\u0627\u0645\u0634\u0628",
      "\u0627\u0645\u064A\u062F\u0648\u0627\u0631\u0645",
      "\u0627\u0645\u064A\u062F\u0648\u0627\u0631\u0646\u062F",
      "\u0627\u0645\u064A\u062F\u0648\u0627\u0631\u064A\u0645",
      "\u0627\u0646",
      "\u0627\u0646\u0627\u0646",
      "\u0627\u0646\u0627\u0646\u064A",
      "\u0627\u0646\u062C\u0627",
      "\u0627\u0646\u062F",
      "\u0627\u0646\u062F\u0643",
      "\u0627\u0646\u062F\u0643\u064A",
      "\u0627\u0646\u0631\u0627",
      "\u0627\u0646\u0634\u0627\u0627\u0644\u0644\u0647",
      "\u0627\u0646\u0642\u062F\u0631",
      "\u0627\u0646\u0643\u0633",
      "\u0627\u0646\u0643\u0647",
      "\u0627\u0646\u0645",
      "\u0627\u0646\u0647\u0627",
      "\u0627\u0646\u0647\u0627\u0633\u062A",
      "\u0627\u0646\u0648\u0642\u062A",
      "\u0627\u0646\u0686\u0646\u0627\u0646",
      "\u0627\u0646\u0686\u0647",
      "\u0627\u0646\u06AF\u0627\u0631",
      "\u0627\u0646\u06AF\u0627\u0647",
      "\u0627\u0646\u06AF\u0647",
      "\u0627\u0646\u06AF\u0648\u0646\u0647",
      "\u0627\u0647\u0627\u0646",
      "\u0627\u0647\u0627\u064A",
      "\u0627\u0648",
      "\u0627\u0648\u0631\u062F",
      "\u0627\u0648\u0631\u062F\u0646",
      "\u0627\u0648\u0633\u062A",
      "\u0627\u0648\u0644",
      "\u0627\u0648\u0644\u0627",
      "\u0627\u0648\u0644\u0634",
      "\u0627\u0648\u0646",
      "\u0627\u0648\u0646\u0647\u0645\u0647",
      "\u0627\u0648\u0647",
      "\u0627\u0648\u064A\u064A",
      "\u0627\u064A",
      "\u0627\u064A\u0627",
      "\u0627\u064A\u0634\u0627\u0646",
      "\u0627\u064A\u0645",
      "\u0627\u064A\u0646",
      "\u0627\u064A\u0646\u0627\u0646",
      "\u0627\u064A\u0646\u062C\u0627",
      "\u0627\u064A\u0646\u062C\u0627\u0633\u062A",
      "\u0627\u064A\u0646\u062C\u0648\u0631\u064A",
      "\u0627\u064A\u0646\u0631\u0648",
      "\u0627\u064A\u0646\u0633\u062A",
      "\u0627\u064A\u0646\u0637\u0648\u0631",
      "\u0627\u064A\u0646\u0642\u062F\u0631",
      "\u0627\u064A\u0646\u0643",
      "\u0627\u064A\u0646\u0643\u0647",
      "\u0627\u064A\u0646\u0647\u0627",
      "\u0627\u064A\u0646\u0647\u0627\u0633\u062A",
      "\u0627\u064A\u0646\u0647\u0645\u0647",
      "\u0627\u064A\u0646\u0648",
      "\u0627\u064A\u0646\u0686\u0646\u064A\u0646",
      "\u0627\u064A\u0646\u06AF\u0648\u0646\u0647",
      "\u0627\u06AF\u0627\u0647\u0627\u0646\u0647",
      "\u0627\u06AF\u0631",
      "\u0627\u06AF\u0631\u0646\u0647",
      "\u0627\u06AF\u0631\u0686\u0647",
      "\u0627\u06AF\u0647",
      "\u0628",
      "\u0628\u0627",
      "\u0628\u0627\u0627\u0637\u0645\u064A\u0646\u0627\u0646",
      "\u0628\u0627\u0627\u0646\u0643\u0647",
      "\u0628\u0627\u0627\u064A\u0646",
      "\u0628\u0627\u0627\u064A\u0646\u0643\u0647",
      "\u0628\u0627\u0631",
      "\u0628\u0627\u0631\u0647",
      "\u0628\u0627\u0631\u0647\u0627",
      "\u0628\u0627\u0631\u0647\u0627\u0648\u0628\u0627\u0631\u0647\u0627",
      "\u0628\u0627\u0632",
      "\u0628\u0627\u0632\u0627\u0646\u062F\u064A\u0634\u0627\u0646\u0647",
      "\u0628\u0627\u0632\u0647\u0645",
      "\u0628\u0627\u0632\u064A\u06AF\u0648\u0634\u0627\u0646\u0647",
      "\u0628\u0627\u0633\u062A\u062B\u0646\u0627\u064A",
      "\u0628\u0627\u0634",
      "\u0628\u0627\u0634\u062F",
      "\u0628\u0627\u0639\u0644\u0627\u0642\u0647",
      "\u0628\u0627\u0644\u0627",
      "\u0628\u0627\u0644\u0627\u062A\u0631",
      "\u0628\u0627\u0644\u0627\u062E\u0631\u0647",
      "\u0628\u0627\u0644\u0627\u062E\u0635",
      "\u0628\u0627\u0644\u0627\u0633\u062A",
      "\u0628\u0627\u0644\u0627\u064A",
      "\u0628\u0627\u0644\u0636\u0631\u0648\u0631",
      "\u0628\u0627\u0644\u0637\u0628\u0639",
      "\u0628\u0627\u0644\u0639\u0643\u0633",
      "\u0628\u0627\u0644\u0642\u0648\u0647",
      "\u0628\u0627\u0644\u0644\u0647",
      "\u0628\u0627\u0644\u0646\u062A\u064A\u062C\u0647",
      "\u0628\u0627\u0644\u0646\u0633\u0628\u0647",
      "\u0628\u0627\u0647\u0645",
      "\u0628\u0627\u0648\u062C\u0648\u062F",
      "\u0628\u0627\u0648\u062C\u0648\u062F\u0627\u0646\u0643\u0647",
      "\u0628\u0627\u0648\u062C\u0648\u062F\u0627\u064A\u0646\u0643\u0647",
      "\u0628\u0627\u0648\u062C\u0648\u062F\u064A\u0643\u0647",
      "\u0628\u0627\u0648\u0631\u0646\u062F",
      "\u0628\u0627\u064A\u062F",
      "\u0628\u0627\u064A\u0633\u062A\u064A",
      "\u0628\u062A\u0627\u0632\u06AF\u064A",
      "\u0628\u062A\u062F\u0631\u064A\u062C",
      "\u0628\u062A\u0645\u0627\u0645\u064A",
      "\u0628\u062C\u0627",
      "\u0628\u062C\u0627\u064A",
      "\u0628\u062C\u0632",
      "\u0628\u062E\u0627\u0637\u0631",
      "\u0628\u062E\u0627\u0637\u0631\u0627\u064A\u0646\u0643\u0647",
      "\u0628\u062E\u0631\u062F\u0627\u0646\u0647",
      "\u0628\u062E\u0634\u0647",
      "\u0628\u062E\u0635\u0648\u0635",
      "\u0628\u062E\u0648\u0628\u064A",
      "\u0628\u062F",
      "\u0628\u062F\u0627\u0646",
      "\u0628\u062F\u0627\u0646\u062C\u0627",
      "\u0628\u062F\u0627\u0646\u0647\u0627",
      "\u0628\u062F\u0628\u064A\u0646\u0627\u0646\u0647",
      "\u0628\u062F\u062E\u0648\u0627\u0647\u0627\u0646\u0647",
      "\u0628\u062F\u0631\u0633\u062A\u064A",
      "\u0628\u062F\u0631\u0634\u062A\u064A",
      "\u0628\u062F\u0644\u062E\u0648\u0627\u0647",
      "\u0628\u062F\u0648\u0646",
      "\u0628\u062F\u064A\u0646",
      "\u0628\u062F\u064A\u0646\u062C\u0627",
      "\u0628\u062F\u064A\u0646\u0633\u0627\u0646",
      "\u0628\u0631",
      "\u0628\u0631\u0627",
      "\u0628\u0631\u0627\u062B\u0631",
      "\u0628\u0631\u0627\u0633\u0627\u0633",
      "\u0628\u0631\u0627\u0633\u062A\u064A",
      "\u0628\u0631\u0627\u0646",
      "\u0628\u0631\u0627\u0646\u0646\u062F",
      "\u0628\u0631\u0627\u0646\u0647\u0627\u0633\u062A",
      "\u0628\u0631\u0627\u064A",
      "\u0628\u0631\u0627\u064A\u062A",
      "\u0628\u0631\u0627\u064A\u0634",
      "\u0628\u0631\u0627\u064A\u0634\u0627\u0646",
      "\u0628\u0631\u0627\u064A\u0645",
      "\u0628\u0631\u0627\u064A\u0645\u0627\u0646",
      "\u0628\u0631\u062D\u0633\u0628",
      "\u0628\u0631\u062E\u0644\u0627\u0641",
      "\u0628\u0631\u062E\u0648\u0631\u062F\u0627\u0631\u0646\u062F",
      "\u0628\u0631\u062E\u064A",
      "\u0628\u0631\u062F\u0627\u0634\u062A\u0646",
      "\u0628\u0631\u062F\u0646",
      "\u0628\u0631\u0631\u0648\u064A",
      "\u0628\u0631\u0639\u0643\u0633",
      "\u0628\u0631\u063A\u0645",
      "\u0628\u0631\u0645\u064A",
      "\u0628\u0631\u0646\u0645\u064A",
      "\u0628\u0631\u0648",
      "\u0628\u0631\u0648\u0634\u0646\u064A",
      "\u0628\u0631\u067E\u0627",
      "\u0628\u0632\u0639\u0645",
      "\u0628\u0632\u0648\u062F\u064A",
      "\u0628\u0633",
      "\u0628\u0633\u0627",
      "\u0628\u0633\u0627\u062F\u06AF\u064A",
      "\u0628\u0633\u062A\u0647",
      "\u0628\u0633\u062E\u062A\u064A",
      "\u0628\u0633\u0631\u0639\u062A",
      "\u0628\u0633\u0647\u0648\u0644\u062A",
      "\u0628\u0633\u0648\u064A",
      "\u0628\u0633\u064A",
      "\u0628\u0633\u064A\u0627\u0631",
      "\u0628\u0633\u064A\u0627\u0631\u064A",
      "\u0628\u0634\u0627\u0646",
      "\u0628\u0634\u062F\u062A",
      "\u0628\u0635\u0648\u0631\u062A",
      "\u0628\u0637\u0628\u0639",
      "\u0628\u0637\u0648\u0631",
      "\u0628\u0637\u0648\u0631\u0643\u0644\u064A",
      "\u0628\u0637\u0648\u0631\u064A",
      "\u0628\u0637\u0648\u0631\u064A\u0643\u0647",
      "\u0628\u0639\u062F",
      "\u0628\u0639\u062F\u0627",
      "\u0628\u0639\u062F\u0627\u0632",
      "\u0628\u0639\u062F\u0627\u0632\u0627\u0646",
      "\u0628\u0639\u062F\u0627\u0632\u0627\u064A\u0646",
      "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
      "\u0628\u0639\u062F\u0647\u0627",
      "\u0628\u0639\u062F\u064A",
      "\u0628\u0639\u0636\u064A",
      "\u0628\u0639\u0636\u064A\u0634\u0627\u0646",
      "\u0628\u0639\u0636\u064A\u0647\u0627",
      "\u0628\u0639\u0636\u064A\u0647\u0627\u0634\u0627\u0646",
      "\u0628\u0639\u0636\u064A\u0647\u0627\u064A\u0634\u0627\u0646",
      "\u0628\u0639\u0644\u0627\u0648\u0647",
      "\u0628\u0639\u064A\u062F",
      "\u0628\u0641\u0647\u0645\u064A",
      "\u0628\u0642\u062F\u0631\u064A",
      "\u0628\u0643\u0627\u0631",
      "\u0628\u0643\u0631\u0627\u062A",
      "\u0628\u0644\u0627\u062F\u0631\u0646\u06AF",
      "\u0628\u0644\u0627\u0641\u0627\u0635\u0644\u0647",
      "\u0628\u0644\u0643\u0647",
      "\u0628\u0644\u0647",
      "\u0628\u0645\u0631\u0627\u062A\u0628",
      "\u0628\u0645\u0648\u062C\u0628",
      "\u0628\u0645\u0648\u0642\u0639",
      "\u0628\u0646\u0627\u0628\u0631\u0627\u064A\u0646",
      "\u0628\u0646\u0627\u0628\u0647",
      "\u0628\u0646\u0627\u0686\u0627\u0631",
      "\u0628\u0646\u062F\u0631\u062A",
      "\u0628\u0647",
      "\u0628\u0647\u062A",
      "\u0628\u0647\u062A\u0631",
      "\u0628\u0647\u0631\u062D\u0627\u0644",
      "\u0628\u0647\u0634",
      "\u0628\u0647\u064A\u0686",
      "\u0628\u0648\u062F",
      "\u0628\u0648\u062F\u0646",
      "\u0628\u0648\u0636\u0648\u062D",
      "\u0628\u0648\u064A\u0698\u0647",
      "\u0628\u064A",
      "\u0628\u064A\u0631\u0648\u0646",
      "\u0628\u064A\u0634",
      "\u0628\u064A\u0634\u062A\u0631",
      "\u0628\u064A\u0646",
      "\u0628\u064A\u0646\u0627\u0628\u064A\u0646",
      "\u0628\u064A\u0647\u0648\u062F\u0647",
      "\u0628\u064A\u06AF\u0645\u0627\u0646",
      "\u0628\u067E\u0627",
      "\u0628\u06AF\u0631\u0645\u064A",
      "\u062A",
      "\u062A\u0627",
      "\u062A\u0627\u0627\u0646\u062C\u0627",
      "\u062A\u0627\u0627\u0646\u062C\u0627\u0643\u0647",
      "\u062A\u0627\u0627\u0646\u0643\u0647",
      "\u062A\u0627\u0627\u064A\u0646\u062C\u0627",
      "\u062A\u0627\u0627\u064A\u0646\u0643\u0647",
      "\u062A\u0627\u0628\u0647",
      "\u062A\u0627\u062C\u0627\u064A\u064A\u0643\u0647",
      "\u062A\u0627\u062D\u062F\u0648\u062F\u064A",
      "\u062A\u0627\u062D\u062F\u064A",
      "\u062A\u0627\u0632\u0647",
      "\u062A\u0627\u0632\u06AF\u064A",
      "\u062A\u0627\u0643\u0646\u0648\u0646",
      "\u062A\u0627\u0648\u0642\u062A\u064A",
      "\u062A\u0627\u0648\u0642\u062A\u064A\u0643\u0647",
      "\u062A\u062D\u062A",
      "\u062A\u062F\u0631\u064A\u062C",
      "\u062A\u062F\u0631\u064A\u062C\u0627",
      "\u062A\u062F\u0631\u064A\u062C\u064A",
      "\u062A\u0631",
      "\u062A\u0631\u062A\u064A\u0628",
      "\u062A\u0631\u062C\u064A\u062D\u0627",
      "\u062A\u0631\u062F\u064A\u062F",
      "\u062A\u0631\u0646\u062F",
      "\u062A\u0631\u064A",
      "\u062A\u0631\u064A\u0646",
      "\u062A\u0635\u0631\u064A\u062D\u0627",
      "\u062A\u0639\u062F\u0627\u062F\u064A",
      "\u062A\u0639\u0645\u062F\u0627",
      "\u062A\u0641\u0627\u0648\u062A",
      "\u062A\u0641\u0627\u0648\u062A\u0646\u062F",
      "\u062A\u0641\u0646\u0646\u064A",
      "\u062A\u0642\u0631\u064A\u0628\u0627",
      "\u062A\u0643",
      "\u062A\u0644\u0648\u064A\u062D\u0627",
      "\u062A\u0645\u0627\u0645",
      "\u062A\u0645\u0627\u0645\u0627",
      "\u062A\u0645\u0627\u0645\u0634\u0627\u0646",
      "\u062A\u0645\u0627\u0645\u064A",
      "\u062A\u0646\u062F",
      "\u062A\u0646\u0647\u0627",
      "\u062A\u0646\u0647\u0627\u064A\u064A",
      "\u062A\u0646\u06AF\u0627\u062A\u0646\u06AF",
      "\u062A\u0648",
      "\u062A\u0648\u0633\u0637",
      "\u062A\u0648\u0648\u0645\u0627",
      "\u062A\u0648\u064A",
      "\u062A\u0648\u064A\u064A",
      "\u062B",
      "\u062B\u0627\u0644\u062B\u0627",
      "\u062B\u0627\u0646\u064A",
      "\u062B\u0627\u0646\u064A\u0627",
      "\u062C",
      "\u062C\u0627",
      "\u062C\u0627\u064A",
      "\u062C\u0627\u064A\u064A",
      "\u062C\u0628\u0631\u06AF\u0631\u0627\u064A\u0627\u0646\u0647",
      "\u062C\u062F\u0627",
      "\u062C\u062F\u0627\u0627\u0632",
      "\u062C\u062F\u0627\u0627\u0632\u0647\u0645",
      "\u062C\u062F\u0627\u06AF\u0627\u0646\u0647",
      "\u062C\u062F\u064A",
      "\u062C\u062F\u064A\u062F\u0627",
      "\u062C\u0631\u0645\u0632\u0627\u0633\u062A",
      "\u062C\u0632",
      "\u062C\u0632\u062C\u0632",
      "\u062C\u0633\u0648\u0631\u0627\u0646\u0647",
      "\u062C\u0644\u0648",
      "\u062C\u0644\u0648\u062A\u0631",
      "\u062C\u0644\u0648\u064A",
      "\u062C\u0645\u0639",
      "\u062C\u0645\u0639\u0627",
      "\u062C\u0645\u0639\u064A",
      "\u062C\u0646\u0627\u0628\u0639\u0627\u0644\u064A",
      "\u062C\u0646\u0633",
      "\u062C\u0647\u062A",
      "\u062C\u0648\u0631",
      "\u062C\u0648\u0631\u064A",
      "\u062D",
      "\u062D\u0627\u0634\u0627",
      "\u062D\u0627\u0634\u0627\u0648\u0643\u0644\u0627",
      "\u062D\u0627\u0634\u064A\u0647",
      "\u062D\u0627\u0636\u0631",
      "\u062D\u0627\u0636\u0631\u0645",
      "\u062D\u0627\u0643\u064A\u0633\u062A",
      "\u062D\u0627\u0644",
      "\u062D\u0627\u0644\u0627",
      "\u062D\u0627\u0644\u0643\u0647",
      "\u062D\u0627\u0644\u064A",
      "\u062D\u062A\u0645\u0627",
      "\u062D\u062A\u064A",
      "\u062D\u062F\u0627\u0642\u0644",
      "\u062D\u062F\u0627\u0643\u062B\u0631",
      "\u062D\u062F\u0648\u062F",
      "\u062D\u0631\u0641",
      "\u062D\u0633\u0627\u0628\u064A",
      "\u062D\u0633\u0627\u0628\u06AF\u0631\u0627\u0646\u0647",
      "\u062D\u0633\u0628",
      "\u062D\u0636\u0631\u062A\u0639\u0627\u0644\u064A",
      "\u062D\u0642\u064A\u0631\u0627\u0646\u0647",
      "\u062D\u0642\u064A\u0642\u062A\u0627",
      "\u062D\u0643\u0645\u0627",
      "\u062D\u0643\u064A\u0645\u0627\u0646\u0647",
      "\u062D\u0648\u0644",
      "\u062E",
      "\u062E\u0627\u0644\u0635",
      "\u062E\u0627\u0644\u0635\u0627\u0646\u0647",
      "\u062E\u0627\u0644\u064A",
      "\u062E\u0627\u0645",
      "\u062E\u0627\u0645\u0633\u0627",
      "\u062E\u0628",
      "\u062E\u062F\u0627\u062D\u0627\u0641\u0638",
      "\u062E\u062F\u0627\u0633\u062A",
      "\u062E\u062F\u0627\u06AF\u0648\u0646\u0647",
      "\u062E\u0631\u062F\u0645\u0646\u062F\u0627\u0646\u0647",
      "\u062E\u0633\u062A\u0647",
      "\u062E\u0634\u0645\u06AF\u064A\u0646",
      "\u062E\u0635\u0645\u0627\u0646\u0647",
      "\u062E\u0635\u0648\u0635\u0627",
      "\u062E\u0644\u0627\u0642\u0627\u0646\u0647",
      "\u062E\u0648\u0627\u0633\u062A\u0647",
      "\u062E\u0648\u0627\u0647",
      "\u062E\u0648\u0627\u0647\u062F",
      "\u062E\u0648\u0628",
      "\u062E\u0648\u0628\u062A\u0631",
      "\u062E\u0648\u0628\u0633\u062A",
      "\u062E\u0648\u0628\u064A",
      "\u062E\u0648\u062F",
      "\u062E\u0648\u062F\u0627\u0646\u062F",
      "\u062E\u0648\u062F\u0627\u06AF\u0627\u0647\u0627\u0646\u0647",
      "\u062E\u0648\u062F\u0628\u0647",
      "\u062E\u0648\u062F\u062A",
      "\u062E\u0648\u062F\u062A\u0627\u0646",
      "\u062E\u0648\u062F\u062A\u0648",
      "\u062E\u0648\u062F\u0631\u0627",
      "\u062E\u0648\u062F\u0634",
      "\u062E\u0648\u062F\u0634\u0627\u0646",
      "\u062E\u0648\u062F\u0645",
      "\u062E\u0648\u062F\u0645\u0627\u0646",
      "\u062E\u0648\u062F\u0645\u062E\u062A\u0627\u0631\u0627\u0646\u0647",
      "\u062E\u0648\u062F\u0645\u0648",
      "\u062E\u0648\u062F\u0646\u0645\u0627\u064A\u0627\u0646\u0647",
      "\u062E\u0648\u062F\u064A",
      "\u062E\u0648\u0634",
      "\u062E\u0648\u0634\u0628\u062E\u062A\u0627\u0646\u0647",
      "\u062E\u0648\u0634\u0628\u064A\u0646\u0627\u0646\u0647",
      "\u062E\u0648\u0634\u062D\u0627\u0644",
      "\u062E\u0648\u064A\u0634",
      "\u062E\u0648\u064A\u0634\u062A\u0646\u0645",
      "\u062E\u0648\u06AF\u064A\u0631\u0627\u0646\u0647",
      "\u062E\u064A\u0631",
      "\u062E\u064A\u0631\u0647",
      "\u062E\u064A\u0644\u064A",
      "\u062F",
      "\u062F\u0627",
      "\u062F\u0627\u0627\u0645",
      "\u062F\u0627\u0627\u0645\u0627",
      "\u062F\u0627\u062E\u0644",
      "\u062F\u0627\u062F\u0646",
      "\u062F\u0627\u0631\u0627",
      "\u062F\u0627\u0631\u0627\u0633\u062A",
      "\u062F\u0627\u0631\u0627\u064A",
      "\u062F\u0627\u0631\u062F",
      "\u062F\u0627\u0634\u062A\u0646",
      "\u062F\u0627\u0648\u0637\u0644\u0628\u0627\u0646\u0647",
      "\u062F\u0627\u064A\u0645",
      "\u062F\u0627\u064A\u0645\u0627",
      "\u062F\u062E\u062A\u0631\u0627\u0646\u0647",
      "\u062F\u0631\u0627\u062B\u0631",
      "\u062F\u0631\u0627\u0632\u0627",
      "\u062F\u0631\u0627\u0632\u0627\u064A",
      "\u062F\u0631\u0627\u0646",
      "\u062F\u0631\u0627\u064A\u0646",
      "\u062F\u0631\u0628\u0627\u0628",
      "\u062F\u0631\u0628\u0627\u0631\u0647",
      "\u062F\u0631\u0628\u062F\u0631",
      "\u062F\u0631\u0628\u0631",
      "\u062F\u0631\u0628\u0631\u0627\u0628\u0631",
      "\u062F\u0631\u0628\u0647",
      "\u062F\u0631\u062A\u062E\u062A",
      "\u062F\u0631\u062B\u0627\u0646\u064A",
      "\u062F\u0631\u062D\u0627\u0644",
      "\u062F\u0631\u062D\u0627\u0644\u064A",
      "\u062F\u0631\u062D\u0627\u0644\u064A\u0643\u0647",
      "\u062F\u0631\u062F\u0643\u0634\u0627\u0646",
      "\u062F\u0631\u0631\u0627\u0633\u062A\u0627\u064A",
      "\u062F\u0631\u0633\u062A",
      "\u062F\u0631\u0633\u062A\u0647",
      "\u062F\u0631\u0634\u062A",
      "\u062F\u0631\u0634\u062A\u064A",
      "\u062F\u0631\u0635\u0648\u0631\u062A\u064A",
      "\u062F\u0631\u0635\u0648\u0631\u062A\u064A\u0643\u0647",
      "\u062F\u0631\u0637\u064A",
      "\u062F\u0631\u0639\u064A\u0646",
      "\u062F\u0631\u0643\u0644",
      "\u062F\u0631\u0643\u0646\u0627\u0631",
      "\u062F\u0631\u0645\u062C\u0645\u0648\u0639",
      "\u062F\u0631\u0645\u0642\u0627\u0628\u0644",
      "\u062F\u0631\u0645\u0648\u0631\u062F",
      "\u062F\u0631\u0645\u064A\u0627\u0646",
      "\u062F\u0631\u0646\u062A\u064A\u062C\u0647",
      "\u062F\u0631\u0646\u0647\u0627\u064A\u062A",
      "\u062F\u0631\u0647\u0631",
      "\u062F\u0631\u0647\u0631\u062D\u0627\u0644",
      "\u062F\u0631\u0647\u0631\u0635\u0648\u0631\u062A",
      "\u062F\u0631\u0648\u0627\u0642\u0639",
      "\u062F\u0631\u064A\u063A",
      "\u062F\u0631\u064A\u063A\u0627",
      "\u062F\u0631\u067E\u064A",
      "\u062F\u0633\u062A\u0647",
      "\u062F\u0634\u0645\u0646\u064A\u0645",
      "\u062F\u0634\u0648\u0627\u0631",
      "\u062F\u0634\u0648\u0627\u0631\u062A\u0631",
      "\u062F\u0642\u064A\u0642",
      "\u062F\u0642\u064A\u0642\u0627",
      "\u062F\u0644\u062E\u0648\u0627\u0647",
      "\u062F\u0644\u062E\u0648\u0634",
      "\u062F\u0644\u0634\u0627\u062F",
      "\u062F\u0645",
      "\u062F\u0647\u062F",
      "\u062F\u0648",
      "\u062F\u0648\u0628\u0627\u0631\u0647",
      "\u062F\u0648\u062A\u0627",
      "\u062F\u0648\u062A\u0627\u062F\u0648\u062A\u0627",
      "\u062F\u0648\u0631",
      "\u062F\u0648\u0631\u0627\u0632",
      "\u062F\u0648\u0631\u062A\u0631",
      "\u062F\u0648\u0633\u0627\u0644\u0647",
      "\u062F\u0648\u0633\u062A\u0627\u0646\u0647",
      "\u062F\u0648\u0645",
      "\u062F\u064A\u0631",
      "\u062F\u064A\u0631\u062A",
      "\u062F\u064A\u0631\u0645",
      "\u062F\u064A\u0631\u0648\u0632",
      "\u062F\u064A\u0631\u0648\u0632\u0628\u0647",
      "\u062F\u064A\u0634\u0628",
      "\u062F\u064A\u0648\u0627\u0646\u0647",
      "\u062F\u064A\u0648\u064A",
      "\u062F\u064A\u06AF\u0631",
      "\u062F\u064A\u06AF\u0631\u0627\u0646",
      "\u062F\u064A\u06AF\u0631\u062A\u0627",
      "\u062F\u064A\u06AF\u0631\u064A",
      "\u062F\u064A\u06AF\u0647",
      "\u062F\u06AF\u0631\u0628\u0627\u0631",
      "\u062F\u06AF\u0631\u0628\u0627\u0631\u0647",
      "\u062F\u06AF\u0631\u06AF\u0648\u0646",
      "\u0630",
      "\u0630\u0627\u062A\u0627",
      "\u0630\u0627\u0644\u0643",
      "\u0630\u064A\u0644",
      "\u0630\u064A\u0644\u0627",
      "\u0631",
      "\u0631\u0627",
      "\u0631\u0627\u0627\u0632",
      "\u0631\u0627\u0628\u0647",
      "\u0631\u0627\u062C\u0639",
      "\u0631\u0627\u062D\u062A",
      "\u0631\u0627\u062D\u062A\u0631",
      "\u0631\u0627\u062F\u0631",
      "\u0631\u0627\u0633\u0627",
      "\u0631\u0627\u0633\u062A",
      "\u0631\u0627\u0633\u062A\u0627",
      "\u0631\u0627\u0633\u062A\u064A",
      "\u0631\u0633\u0645\u0627",
      "\u0631\u0634\u062A\u0647",
      "\u0631\u063A\u0645",
      "\u0631\u0641\u062A\u0627\u0631\u0647\u0627\u0633\u062A",
      "\u0631\u0646\u062C\u0646\u062F",
      "\u0631\u0646\u062F\u0627\u0646\u0647",
      "\u0631\u0647\u06AF\u0634\u0627\u0633\u062A",
      "\u0631\u0648",
      "\u0631\u0648\u0627\u0633\u062A",
      "\u0631\u0648\u0628\u0631\u0648",
      "\u0631\u0648\u0628\u0631\u0648\u0633\u062A",
      "\u0631\u0648\u0628\u0647",
      "\u0631\u0648\u0632",
      "\u0631\u0648\u0632\u0627\u0646\u0647",
      "\u0631\u0648\u0632\u0628\u0631\u0648\u0632",
      "\u0631\u0648\u0632\u0645\u0631\u0647",
      "\u0631\u0648\u0634",
      "\u0631\u0648\u0634\u0646",
      "\u0631\u0648\u0634\u0646\u064A",
      "\u0631\u0648\u064A",
      "\u0631\u0648\u064A\u0634",
      "\u0631\u064A\u0627\u0643\u0627\u0631\u0627\u0646\u0647",
      "\u0631\u064A\u0632",
      "\u0631\u064A\u0632\u0627\u0646",
      "\u0632",
      "\u0632\u062F",
      "\u0632\u062F\u0646",
      "\u0632\u062F\u0647",
      "\u0632\u0634\u062A",
      "\u0632\u0645\u0627\u0646\u064A",
      "\u0632\u0646\u0646\u062F",
      "\u0632\u0647\u064A",
      "\u0632\u0648",
      "\u0632\u0648\u062F",
      "\u0632\u0648\u062F\u062A\u0631",
      "\u0632\u0648\u062F\u064A",
      "\u0632\u064A\u0627\u062F",
      "\u0632\u064A\u0627\u062F\u062A\u0631",
      "\u0632\u064A\u0627\u062F\u0647",
      "\u0632\u064A\u0628\u0627",
      "\u0632\u064A\u0628\u0627\u062A\u0631",
      "\u0632\u064A\u0631",
      "\u0632\u064A\u0631\u0627",
      "\u0632\u064A\u0631\u0627\u0643\u0647",
      "\u0632\u064A\u0631\u0643\u0627\u0646\u0647",
      "\u0632\u064A\u0631\u0646\u062F",
      "\u0632\u064A\u0631\u0686\u0634\u0645\u064A",
      "\u0632\u064A\u0646",
      "\u0633",
      "\u0633\u0627\u0628\u0642\u0627",
      "\u0633\u0627\u062E\u062A\u0646",
      "\u0633\u0627\u062F\u0647",
      "\u0633\u0627\u062F\u06AF\u064A",
      "\u0633\u0627\u0632\u0627\u0646",
      "\u0633\u0627\u0632\u0647\u0627\u0633\u062A",
      "\u0633\u0627\u0632\u064A",
      "\u0633\u0627\u0632\u06AF\u0627\u0631\u0627\u0646\u0647",
      "\u0633\u0627\u0643\u0646\u0646\u062F",
      "\u0633\u0627\u0644\u0627\u0646\u0647",
      "\u0633\u0627\u0644\u062A\u0647",
      "\u0633\u0627\u0644\u0645",
      "\u0633\u0627\u0644\u0647\u0627\u0633\u062A",
      "\u0633\u0627\u0644\u064A\u0627\u0646\u0647",
      "\u0633\u0627\u064A\u0631",
      "\u0633\u0627\u064A\u0631\u0627\u0646",
      "\u0633\u0627\u064A\u0631\u064A\u0646",
      "\u0633\u062A",
      "\u0633\u062E\u062A",
      "\u0633\u062E\u062A\u062A\u0631",
      "\u0633\u062E\u062A\u0647",
      "\u0633\u0631",
      "\u0633\u0631\u0627\u0633\u0631",
      "\u0633\u0631\u0627\u0646\u062C\u0627\u0645",
      "\u0633\u0631\u0627\u067E\u0627",
      "\u0633\u0631\u064A",
      "\u0633\u0631\u064A\u0639",
      "\u0633\u0631\u064A\u0639\u0627",
      "\u0633\u0639\u0627\u062F\u062A\u0645\u0646\u062F\u0627\u0646\u0647",
      "\u0633\u0646\u06AF\u062F\u0644\u0627\u0646\u0647",
      "\u0633\u0646\u06AF\u064A\u0646",
      "\u0633\u0647",
      "\u0633\u0647\u0648\u0627",
      "\u0633\u0648\u0645",
      "\u0633\u064A\u0627\u0647",
      "\u0633\u064A\u062E",
      "\u0633\u067E\u0633",
      "\u0634",
      "\u0634\u0627\u0627\u0627\u0644\u0644\u0647",
      "\u0634\u0627\u062F",
      "\u0634\u0627\u062F\u062A\u0631",
      "\u0634\u0627\u062F\u0645\u0627\u0646",
      "\u0634\u0627\u0643\u0644\u0647",
      "\u0634\u0627\u0646",
      "\u0634\u0627\u0647\u062F\u0646\u062F",
      "\u0634\u0627\u0647\u062F\u064A\u0645",
      "\u0634\u0627\u064A\u062F",
      "\u0634\u0628\u0627\u0646\u0647",
      "\u0634\u0628\u0647\u0627\u0633\u062A",
      "\u0634\u062A\u0627\u0628\u0627\u0646",
      "\u0634\u062A\u0627\u0628\u0632\u062F\u0647",
      "\u0634\u062C\u0627\u0639\u0627\u0646\u0647",
      "\u0634\u062E\u0635\u0627",
      "\u0634\u062F",
      "\u0634\u062F\u062A",
      "\u0634\u062F\u0646",
      "\u0634\u062F\u0647",
      "\u0634\u062F\u064A\u062F\u0627",
      "\u0634\u0645\u0627",
      "\u0634\u0645\u0627\u0631\u064A",
      "\u0634\u0645\u0627\u0633\u062A",
      "\u0634\u0645\u0627\u064A\u0646\u062F",
      "\u0634\u0648\u062F",
      "\u0634\u0648\u0631\u0627\u0633\u062A",
      "\u0634\u0648\u0642\u0645",
      "\u0634\u064A\u0631\u064A\u0646",
      "\u0634\u064A\u0631\u064A\u0646\u0647",
      "\u0634\u064A\u0643",
      "\u0635",
      "\u0635\u0627\u062F\u0642\u0627\u0646\u0647",
      "\u0635\u0627\u0641",
      "\u0635\u062F",
      "\u0635\u062F\u0627\u0644\u0628\u062A\u0647",
      "\u0635\u062F\u062F\u0631\u0635\u062F",
      "\u0635\u0631\u0627\u062D\u062A\u0627",
      "\u0635\u0631\u0641\u0627",
      "\u0635\u0631\u064A\u062D",
      "\u0635\u0631\u064A\u062D\u0627",
      "\u0635\u0631\u064A\u062D\u062A\u0631",
      "\u0635\u0645\u064A\u0645\u0627\u0646\u0647",
      "\u0635\u0646\u062F\u0648\u0642",
      "\u0636",
      "\u0636\u0631\u0648\u0631\u062A\u0627",
      "\u0636\u0639\u064A\u0641",
      "\u0636\u0639\u064A\u0641\u062A\u0631",
      "\u0636\u0645\u0646",
      "\u0636\u0645\u0646\u0627",
      "\u0637",
      "\u0637\u0628\u0639\u0627",
      "\u0637\u0628\u064A\u0639\u062A\u0627",
      "\u0637\u0644\u0628\u0643\u0627\u0631\u0627\u0646\u0647",
      "\u0637\u0648\u0631",
      "\u0637\u0648\u0631\u064A",
      "\u0637\u064A",
      "\u0638",
      "\u0638\u0627\u0647\u0631\u0627",
      "\u0639",
      "\u0639\u0627\u062C\u0632\u0627\u0646\u0647",
      "\u0639\u0627\u062F\u0644\u0627\u0646\u0647",
      "\u0639\u0627\u0642\u0628\u062A",
      "\u0639\u0627\u0642\u0644\u0627\u0646\u0647",
      "\u0639\u0627\u0644\u0645\u0627\u0646\u0647",
      "\u0639\u0627\u0644\u064A",
      "\u0639\u0628\u0627\u0631\u062A\u0646\u062F",
      "\u0639\u062C\u0628",
      "\u0639\u062C\u0648\u0644\u0627\u0646\u0647",
      "\u0639\u0631\u0641\u0627\u0646\u064A",
      "\u0639\u0632\u064A\u0632",
      "\u0639\u0642\u0628",
      "\u0639\u0642\u0628\u062A\u0631",
      "\u0639\u0644\u0627\u0648\u0647",
      "\u0639\u0644\u0646\u0627",
      "\u0639\u0644\u064A\u0631\u063A\u0645",
      "\u0639\u0644\u064A\u0647",
      "\u0639\u0645\u062F\u0627",
      "\u0639\u0645\u062F\u062A\u0627",
      "\u0639\u0645\u062F\u0647",
      "\u0639\u0645\u062F\u064A",
      "\u0639\u0645\u0644\u0627",
      "\u0639\u0645\u0644\u064A",
      "\u0639\u0645\u0644\u06AF\u0631\u0627\u064A\u0627\u0646\u0647",
      "\u0639\u0645\u0648\u0645",
      "\u0639\u0645\u0648\u0645\u0627",
      "\u0639\u0645\u064A\u0642\u0627",
      "\u0639\u0646",
      "\u0639\u0646\u0642\u0631\u064A\u0628",
      "\u0639\u064A\u0646\u0627",
      "\u063A",
      "\u063A\u0627\u0644\u0628\u0627",
      "\u063A\u0632\u0627\u0644\u0627\u0646",
      "\u063A\u064A\u0631",
      "\u063A\u064A\u0631\u0627\u0632",
      "\u063A\u064A\u0631\u0627\u0632\u0627\u0646",
      "\u063A\u064A\u0631\u0627\u0632\u0627\u064A\u0646",
      "\u063A\u064A\u0631\u062A\u0635\u0627\u062F\u0641\u064A",
      "\u063A\u064A\u0631\u0637\u0628\u064A\u0639\u064A",
      "\u063A\u064A\u0631\u0639\u0645\u062F\u064A",
      "\u063A\u064A\u0631\u0645\u0633\u062A\u0642\u064A\u0645",
      "\u063A\u064A\u0631\u064A\u0643\u0633\u0627\u0646",
      "\u0641",
      "\u0641\u0627\u0642\u062F",
      "\u0641\u0628\u0647\u0627",
      "\u0641\u0631",
      "\u0641\u0631\u0627\u062A\u0631",
      "\u0641\u0631\u0627\u062A\u0631\u0627\u0632",
      "\u0641\u0631\u0627\u0648\u0627\u0646",
      "\u0641\u0631\u062F\u0627",
      "\u0641\u0639\u0627\u0644\u0627\u0646\u0647",
      "\u0641\u0639\u0644\u0627",
      "\u0641\u0642\u0637",
      "\u0641\u0643\u0648\u0631\u0627\u0646\u0647",
      "\u0641\u0644\u0627\u0646",
      "\u0641\u0644\u0630\u0627",
      "\u0641\u0646\u0627\u0648\u0631\u0627\u0646\u0647",
      "\u0641\u0647\u0631\u0633\u062A\u0648\u0627\u0631",
      "\u0641\u0648\u0631\u0627",
      "\u0641\u0648\u0631\u064A",
      "\u0641\u0648\u0642",
      "\u0642",
      "\u0642\u0627\u0627\u0644\u0646\u062F",
      "\u0642\u0627\u0628\u0644",
      "\u0642\u0627\u0637\u0628\u0647",
      "\u0642\u0627\u0637\u0639\u0627\u0646\u0647",
      "\u0642\u0627\u0639\u062F\u062A\u0627",
      "\u0642\u0627\u0646\u0648\u0646\u0627",
      "\u0642\u0628\u0644",
      "\u0642\u0628\u0644\u0627",
      "\u0642\u0628\u0644\u0646\u062F",
      "\u0642\u062F",
      "\u0642\u062F\u0631",
      "\u0642\u062F\u0631\u0645\u0633\u0644\u0645",
      "\u0642\u062F\u0631\u064A",
      "\u0642\u0631\u0627\u0631",
      "\u0642\u0631\u0627\u0631\u062F\u0627\u062F\u0646",
      "\u0642\u0631\u064A\u0628",
      "\u0642\u0636\u0627\u064A\u0627\u0633\u062A",
      "\u0642\u0637\u0639\u0627",
      "\u0642\u064A\u0644\u0627",
      "\u0643",
      "\u0643\u0627\u0631\u0627\u0641\u0631\u064A\u0646\u0627\u0646\u0647",
      "\u0643\u0627\u0631\u0628\u0631\u0645\u062F\u0627\u0631\u0627\u0646\u0647",
      "\u0643\u0627\u0631\u0646\u062F",
      "\u0643\u0627\u0634",
      "\u0643\u0627\u0634\u0643\u064A",
      "\u0643\u0627\u0645\u0644\u0627",
      "\u0643\u0627\u0645\u0644\u062A\u0631",
      "\u0643\u0627\u0646",
      "\u0643\u0627\u064A\u0646",
      "\u0643\u062C\u0627",
      "\u0643\u062C\u0627\u0633\u062A",
      "\u0643\u062F\u0627\u0645",
      "\u0643\u062F\u0627\u0645\u0646\u062F",
      "\u0643\u062F\u0627\u0645\u064A\u0643",
      "\u0643\u0631\u0627\u062A",
      "\u0643\u0631\u062F",
      "\u0643\u0631\u062F\u0646",
      "\u0643\u0631\u062F\u0647",
      "\u0643\u0632",
      "\u0643\u0632\u064A\u0646",
      "\u0643\u0633",
      "\u0643\u0633\u0627\u0646\u064A",
      "\u0643\u0633\u064A",
      "\u0643\u0634\u064A\u062F\u0646",
      "\u0643\u0644",
      "\u0643\u0644\u0627",
      "\u0643\u0644\u064A",
      "\u0643\u0644\u064A\u0634\u0647",
      "\u0643\u0645",
      "\u0643\u0645\u0627\x7F\u0627\u064A\u0646\u0643\u0647",
      "\u0643\u0645\u0627\u0628\u064A\u0634",
      "\u0643\u0645\u0627\u0643\u0627\u0646",
      "\u0643\u0645\u062A\u0631",
      "\u0643\u0645\u062A\u0631\u0647",
      "\u0643\u0645\u064A",
      "\u0643\u0646\u0627\u0631",
      "\u0643\u0646\u0627\u0631\u0634",
      "\u0643\u0646\u0627\u0646",
      "\u0643\u0646\u0627\u064A\u0647",
      "\u0643\u0646\u062F",
      "\u0643\u0646\u0645",
      "\u0643\u0646\u0646\u062F",
      "\u0643\u0646\u0646\u062F\u0647",
      "\u0643\u0647",
      "\u0643\u0648\u062F\u0643\u0627\u0646\u0647",
      "\u0643\u0648\u0631\u0643\u0648\u0631\u0627\u0646\u0647",
      "\u0643\u064A",
      "\u0643\u064A\u0633\u062A",
      "\u0644",
      "\u0644\u0627",
      "\u0644\u0627\u0627\u0642\u0644",
      "\u0644\u0627\u062C\u0631\u0645",
      "\u0644\u0628",
      "\u0644\u0630\u0627",
      "\u0644\u0632\u0648\u0645\u0627",
      "\u0644\u0637\u0641\u0627",
      "\u0644\u064A\u0643\u0646",
      "\u0645",
      "\u0645\u0627",
      "\u0645\u0627\u062A",
      "\u0645\u0627\u062F\u0627\u0645",
      "\u0645\u0627\u062F\u0627\u0645\u064A",
      "\u0645\u0627\u062F\u0627\u0645\u064A\u0643\u0647",
      "\u0645\u0627\u0633\u062A",
      "\u0645\u0627\u0634\u064A\u0646\u0648\u0627\u0631",
      "\u0645\u0627\u0642\u0628\u0644",
      "\u0645\u0627\u0644\u0627",
      "\u0645\u0627\u0644\u0627\u0645\u0627\u0644",
      "\u0645\u0627\u0645\u0627\u0646",
      "\u0645\u0627\u0646\u0646\u062F",
      "\u0645\u0627\u0647\u0631\u0627\u0646\u0647",
      "\u0645\u0627\u0647\u064A\u062A\u0627",
      "\u0645\u0627\u064A\u064A",
      "\u0645\u0628\u0627\u062F\u0627",
      "\u0645\u062A\u0627\u0633\u0641\u0627\u0646\u0647",
      "\u0645\u062A\u0639\u0627\u0642\u0628\u0627",
      "\u0645\u062A\u0641\u0627\u0648\u062A\u0646\u062F",
      "\u0645\u062A\u0641\u0643\u0631\u0627\u0646\u0647",
      "\u0645\u062A\u0642\u0627\u0628\u0644\u0627",
      "\u0645\u062A\u0648\u0627\u0644\u064A",
      "\u0645\u062A\u0648\u0633\u0641\u0627\u0646\u0647",
      "\u0645\u062B\u0627\u0628\u0647",
      "\u0645\u062B\u0644",
      "\u0645\u062B\u0644\u0627",
      "\u0645\u062C\u0628\u0648\u0631\u0646\u062F",
      "\u0645\u062C\u062F\u062F\u0627",
      "\u0645\u062C\u0631\u0645\u0627\u0646\u0647",
      "\u0645\u062C\u0645\u0648\u0639",
      "\u0645\u062C\u0645\u0648\u0639\u0627",
      "\u0645\u062D\u062A\u0627\u062C\u0646\u062F",
      "\u0645\u062D\u062A\u0627\u0637",
      "\u0645\u062D\u062A\u0627\u0637\u0627\u0646\u0647",
      "\u0645\u062D\u0643\u0645",
      "\u0645\u062E\u0627\u0644\u0641\u0646\u062F",
      "\u0645\u062E\u062A\u0635\u0631",
      "\u0645\u062E\u062A\u0635\u0631\u0627",
      "\u0645\u062E\u0635\u0648\u0635\u0627",
      "\u0645\u062F\u0627\u0645",
      "\u0645\u062F\u0627\u0648\u0645",
      "\u0645\u062F\u0628\u0631",
      "\u0645\u062F\u0628\u0631\u0627\u0646\u0647",
      "\u0645\u062F\u062A\u0647\u0627\u0633\u062A",
      "\u0645\u062F\u062A\u064A",
      "\u0645\u0631\u0627",
      "\u0645\u0631\u0627\u062A\u0628",
      "\u0645\u0631\u062A\u0628",
      "\u0645\u0631\u062A\u0628\u0627",
      "\u0645\u0631\u062F\u0627\u0646\u0647",
      "\u0645\u0633\u062A\u062D\u0636\u0631\u064A\u062F",
      "\u0645\u0633\u062A\u0639\u062F",
      "\u0645\u0633\u062A\u0642\u0644\u0627",
      "\u0645\u0633\u062A\u0642\u064A\u0645",
      "\u0645\u0633\u062A\u0642\u064A\u0645\u0627",
      "\u0645\u0633\u062A\u0645\u0631",
      "\u0645\u0633\u062A\u0645\u0631\u0627",
      "\u0645\u0633\u062A\u0646\u062F",
      "\u0645\u0633\u0644\u0645",
      "\u0645\u0633\u0644\u0645\u0627",
      "\u0645\u0633\u064A\u0648\u0644\u0627\u0646\u0647",
      "\u0645\u0634\u062A",
      "\u0645\u0634\u062A\u0631\u0643\u0627",
      "\u0645\u0634\u062E\u0635",
      "\u0645\u0634\u063A\u0648\u0644",
      "\u0645\u0634\u063A\u0648\u0644\u0646\u062F",
      "\u0645\u0634\u0643\u0644",
      "\u0645\u0634\u0643\u0644\u062A\u0631",
      "\u0645\u0637\u0644\u0642",
      "\u0645\u0637\u0644\u0642\u0627",
      "\u0645\u0637\u0645\u0627\u0646\u0627",
      "\u0645\u0637\u0645\u0627\u0646\u0645",
      "\u0645\u0637\u0645\u0646\u0627",
      "\u0645\u0639",
      "\u0645\u0639\u062A\u0642\u062F\u0645",
      "\u0645\u0639\u062A\u0642\u062F\u0646\u062F",
      "\u0645\u0639\u062A\u0642\u062F\u064A\u0645",
      "\u0645\u0639\u062F\u0648\u062F",
      "\u0645\u0639\u0630\u0648\u0631\u064A\u0645",
      "\u0645\u0639\u0644\u0642",
      "\u0645\u0639\u0644\u0648\u0645\u0647",
      "\u0645\u0639\u0645\u0648\u0644\u0627",
      "\u0645\u0639\u0645\u0648\u0644\u064A",
      "\u0645\u063A\u0631\u0636\u0627\u0646\u0647",
      "\u0645\u063A\u0644\u0648\u0628",
      "\u0645\u0641\u064A\u062F\u0646\u062F",
      "\u0645\u0642\u062F\u0627\u0631",
      "\u0645\u0642\u0635\u0631",
      "\u0645\u0642\u0635\u0631\u064A",
      "\u0645\u0642\u0644\u0648\u0628",
      "\u0645\u0643\u0631\u0631",
      "\u0645\u0643\u0631\u0631\u0627",
      "\u0645\u0644\u0632\u0645",
      "\u0645\u0645\u064A\u0632\u064A\u0647\u0627\u0633\u062A",
      "\u0645\u0646",
      "\u0645\u0646\u062A\u0647\u064A",
      "\u0645\u0646\u062D\u0635\u0631",
      "\u0645\u0646\u062D\u0635\u0631\u0627",
      "\u0645\u0646\u062D\u0635\u0631\u0628\u0641\u0631\u062F",
      "\u0645\u0646\u0635\u0641\u0627\u0646\u0647",
      "\u0645\u0646\u0637\u0642\u0627",
      "\u0645\u0646\u0637\u0642\u064A",
      "\u0645\u0646\u064A",
      "\u0645\u0648\u0627\u062C\u0647\u0646\u062F",
      "\u0645\u0648\u062C\u0628",
      "\u0645\u0648\u062C\u0648\u062F\u0646\u062F",
      "\u0645\u0648\u062E\u0631",
      "\u0645\u0648\u0631\u062F",
      "\u0645\u0648\u0642\u0639\u064A\u0643\u0647",
      "\u0645\u064A",
      "\u0645\u064A\u0627\u0646",
      "\u0645\u064A\u0632\u0627\u0646",
      "\u0645\u06AF\u0631",
      "\u0645\u06AF\u0631\u0627\u0646\u0643\u0647",
      "\u0645\u06AF\u0631\u0627\u064A\u0646\u0643\u0647",
      "\u0646",
      "\u0646\u0627\u0627\u0645\u064A\u062F",
      "\u0646\u0627\u0627\u06AF\u0627\u0647\u0627\u0646\u0647",
      "\u0646\u0627\u062A\u0648\u0627\u0646",
      "\u0646\u0627\u062E\u0648\u0627\u0633\u062A\u0647",
      "\u0646\u0627\u062E\u0648\u0627\u0646\u062F\u0647",
      "\u0646\u0627\u062F\u064A\u062F\u0647",
      "\u0646\u0627\u0631\u0627\u0636\u064A",
      "\u0646\u0627\u0633\u0627\u0632\u06AF\u0627\u0631\u0627\u0646\u0647",
      "\u0646\u0627\u0634\u0646\u0627\u062E\u062A\u0647",
      "\u0646\u0627\u0643\u0627\u0645",
      "\u0646\u0627\u0647\u0634\u064A\u0627\u0631",
      "\u0646\u0627\u067E\u0630\u064A\u0631",
      "\u0646\u0627\u0686\u0627\u0631",
      "\u0646\u0627\u06AF\u0632\u064A\u0631",
      "\u0646\u0627\u06AF\u0647\u0627\u0646",
      "\u0646\u0628\u0627\u064A\u062F",
      "\u0646\u0628\u0634",
      "\u0646\u062A\u064A\u062C\u062A\u0627",
      "\u0646\u062E\u0633\u062A",
      "\u0646\u062E\u0648\u062F\u064A",
      "\u0646\u062F\u0627\u0631\u062F",
      "\u0646\u062F\u0631\u062A",
      "\u0646\u062F\u0631\u062A\u0627",
      "\u0646\u0631\u0645",
      "\u0646\u0631\u0645\u064A",
      "\u0646\u0632\u062F",
      "\u0646\u0632\u062F\u064A\u0643",
      "\u0646\u0632\u062F\u064A\u0643\u062A\u0631",
      "\u0646\u0633\u0628\u062A",
      "\u0646\u0638\u0631\u0627",
      "\u0646\u0638\u0631\u0628\u0647",
      "\u0646\u0638\u064A\u0631",
      "\u0646\u0641\u0631\u0646\u062F",
      "\u0646\u0641\u0647\u0645\u064A",
      "\u0646\u0642\u0627\u062F\u0627\u0646\u0647",
      "\u0646\u0645\u064A",
      "\u0646\u0647",
      "\u0646\u0647\u0627\u0646",
      "\u0646\u0647\u0627\u064A\u062A",
      "\u0646\u0647\u0627\u064A\u062A\u0627",
      "\u0646\u0648\u0627\u0648\u0631\u0627\u0646\u0647",
      "\u0646\u0648\u0639",
      "\u0646\u0648\u0639\u0627",
      "\u0646\u0648\u0645\u064A\u062F",
      "\u0646\u064A\u0627\u0632\u0645\u0646\u062F\u0627\u0646\u0647",
      "\u0646\u064A\u0627\u0632\u0645\u0646\u062F\u0646\u062F",
      "\u0646\u064A\u0632",
      "\u0646\u064A\u0633\u062A",
      "\u0646\u064A\u0643",
      "\u0646\u064A\u0645\u064A",
      "\u0647",
      "\u0647\u0627",
      "\u0647\u0627\u0633\u062A",
      "\u0647\u0627\u0646",
      "\u0647\u0627\u064A\u064A",
      "\u0647\u062F\u0641",
      "\u0647\u0631",
      "\u0647\u0631\u0627\u0632\u0686\u0646\u062F\u06AF\u0627\u0647\u064A",
      "\u0647\u0631\u0627\u0646\u0686\u0647",
      "\u0647\u0631\u062C\u0627",
      "\u0647\u0631\u0632\u0686\u0646\u062F\u06AF\u0627\u0647\u064A",
      "\u0647\u0631\u0633\u0627\u0644\u0647",
      "\u0647\u0631\u0642\u062F\u0631",
      "\u0647\u0631\u0643\u062F\u0627\u0645",
      "\u0647\u0631\u0643\u0633",
      "\u0647\u0631\u0643\u0633\u064A",
      "\u0647\u0631\u0643\u0647",
      "\u0647\u0631\u0648\u0642\u062A",
      "\u0647\u0631\u0686\u0642\u062F\u0631",
      "\u0647\u0631\u0686\u0646\u062F",
      "\u0647\u0631\u0686\u0647",
      "\u0647\u0631\u06AF\u0627\u0647",
      "\u0647\u0631\u06AF\u0632",
      "\u0647\u0631\u06AF\u0648\u0646\u0647",
      "\u0647\u0632\u0627\u0631\u0647\u0627",
      "\u0647\u0633\u062A",
      "\u0647\u0633\u062A\u0646\u062F",
      "\u0647\u0634\u064A\u0627\u0631\u0627\u0646\u0647",
      "\u0647\u0642",
      "\u0647\u0645",
      "\u0647\u0645\u0627\u0646",
      "\u0647\u0645\u0627\u0646\u0627",
      "\u0647\u0645\u0627\u0646\u0637\u0648\u0631",
      "\u0647\u0645\u0627\u0646\u0637\u0648\u0631\u0643\u0647",
      "\u0647\u0645\u0627\u0646\u0637\u0648\u0631\u064A",
      "\u0647\u0645\u0627\u0646\u0637\u0648\u0631\u064A\u0643\u0647",
      "\u0647\u0645\u0627\u0646\u0642\u062F\u0631",
      "\u0647\u0645\u0627\u0646\u0646\u062F",
      "\u0647\u0645\u0627\u0646\u0647\u0627",
      "\u0647\u0645\u0627\u0646\u064A",
      "\u0647\u0645\u0627\u0647\u0646\u06AF\u062A\u0631",
      "\u0647\u0645\u062E\u0648\u0627\u0646",
      "\u0647\u0645\u062F\u0644\u0627\u0646\u0647",
      "\u0647\u0645\u062F\u064A\u06AF\u0631",
      "\u0647\u0645\u0632\u0645\u0627\u0646",
      "\u0647\u0645\u0633\u0648",
      "\u0647\u0645\u0633\u0648\u0628\u0627",
      "\u0647\u0645\u0643\u0627\u0631\u0627\u0646\u0647",
      "\u0647\u0645\u0646\u0648\u0627",
      "\u0647\u0645\u0647",
      "\u0647\u0645\u0648\u0627\u0631\u0647",
      "\u0647\u0645\u064A",
      "\u0647\u0645\u064A\u0634\u0647",
      "\u0647\u0645\u064A\u0634\u06AF\u064A",
      "\u0647\u0645\u064A\u0646",
      "\u0647\u0645\u064A\u0646\u0637\u0648\u0631",
      "\u0647\u0645\u064A\u0646\u0637\u0648\u0631\u0643\u0647",
      "\u0647\u0645\u064A\u0646\u0637\u0648\u0631\u064A",
      "\u0647\u0645\u064A\u0646\u0637\u0648\u0631\u064A\u0643\u0647",
      "\u0647\u0645\u064A\u0646\u0643\u0647",
      "\u0647\u0645\u0686\u0646\u0627\u0646",
      "\u0647\u0645\u0686\u0646\u0627\u0646\u0643\u0647",
      "\u0647\u0645\u0686\u0646\u064A\u0646",
      "\u0647\u0645\u0686\u0648\u0646",
      "\u0647\u0645\u0686\u064A\u0646",
      "\u0647\u0645\u06AF\u0627\u0645",
      "\u0647\u0645\u06AF\u0627\u0646",
      "\u0647\u0645\u06AF\u064A",
      "\u0647\u0646\u0648\u0632",
      "\u0647\u0646\u06AF\u0627\u0645\u064A\u0643\u0647",
      "\u0647\u0648\u0634\u0645\u0646\u062F\u0627\u0646\u0647",
      "\u0647\u0648\u0634\u064A\u0627\u0631\u0627\u0646\u0647",
      "\u0647\u0648\u064A",
      "\u0647\u064A",
      "\u0647\u064A\u0686",
      "\u0647\u064A\u0686\u0643\u062F\u0627\u0645",
      "\u0647\u064A\u0686\u0643\u0633",
      "\u0647\u064A\u0686\u064A",
      "\u0647\u064A\u0686\u064A\u0643",
      "\u0647\u064A\u0686\u06AF\u0627\u0647",
      "\u0647\u064A\u0686\u06AF\u0648\u0646\u0647",
      "\u0648\u0627\u0628\u0633\u062A\u0647",
      "\u0648\u0627\u0636\u062D",
      "\u0648\u0627\u0636\u062D\u062A\u0631",
      "\u0648\u0627\u0642\u0639",
      "\u0648\u0627\u0642\u0639\u0627",
      "\u0648\u0627\u0642\u0639\u064A",
      "\u0648\u0627\u0642\u0641\u0646\u062F",
      "\u0648\u0627\u064A",
      "\u0648\u062C\u0647",
      "\u0648\u062C\u0648\u062F",
      "\u0648\u062C\u0648\u062F\u064A\u0643\u0647",
      "\u0648\u062D\u0634\u062A",
      "\u0648\u0631",
      "\u0648\u0631\u0627",
      "\u0648\u0631\u0627\u064A",
      "\u0648\u0632\u0648",
      "\u0648\u0636\u0648\u062D",
      "\u0648\u0642\u062A\u064A",
      "\u0648\u0642\u062A\u064A\u0643\u0647",
      "\u0648\u0644\u064A",
      "\u0648\u0644\u064A\u0643\u0646",
      "\u0648\u0647\u0645\u064A\u0646",
      "\u0648\u064A",
      "\u0648\u064A\u0627",
      "\u0648\u064A\u0698\u0647",
      "\u0648\u06AF\u0631",
      "\u0648\u06AF\u0631\u0646\u0647",
      "\u064A\u0627",
      "\u064A\u0627\u0627\u0632",
      "\u064A\u0627\u0627\u0646\u0643\u0647",
      "\u064A\u0627\u0627\u064A\u0646\u0643\u0647",
      "\u064A\u0627\u0628\u062F",
      "\u064A\u0627\u0631\u0628",
      "\u064A\u0627\u0641\u062A\u0646",
      "\u064A\u0639\u0646\u064A",
      "\u064A\u0642\u064A\u0646\u0627",
      "\u064A\u0643",
      "\u064A\u0643\u0627\u064A\u0643",
      "\u064A\u0643\u0628\u0627\u0631",
      "\u064A\u0643\u0628\u0627\u0631\u0647",
      "\u064A\u0643\u062C\u0627",
      "\u064A\u0643\u062C\u0627\u0646\u0628\u0647",
      "\u064A\u0643\u062C\u0648\u0631",
      "\u064A\u0643\u062C\u0648\u0631\u064A",
      "\u064A\u0643\u062F\u0645",
      "\u064A\u0643\u062F\u064A\u06AF\u0631",
      "\u064A\u0643\u0631\u064A\u0632",
      "\u064A\u0643\u0632\u0645\u0627\u0646",
      "\u064A\u0643\u0633\u0627\u0644",
      "\u064A\u0643\u0633\u0631\u0647",
      "\u064A\u0643\u0633\u0631\u064A",
      "\u064A\u0643\u0637\u0631\u0641\u0647",
      "\u064A\u0643\u0646\u0648\u0627\u062E\u062A",
      "\u064A\u0643\u064A",
      "\u064A\u0643\u067E\u0627\u0631\u0686\u0647",
      "\u064A\u0647",
      "\u064A\u0648\u0627\u0634",
      "\u067E",
      "\u067E\u0627\u0631\u0633\u0627\u0644",
      "\u067E\u0627\u0631\u0633\u0627\u064A\u0627\u0646\u0647",
      "\u067E\u0627\u0631\u0647",
      "\u067E\u0627\u064A\u064A\u0646",
      "\u067E\u062F\u0631\u0627\u0646\u0647",
      "\u067E\u062F\u0631\u067E\u064A",
      "\u067E\u062F\u064A\u062F\u0647",
      "\u067E\u0630\u064A\u0631",
      "\u067E\u0630\u064A\u0631\u0646\u062F",
      "\u067E\u0631\u0627\u0643\u0646\u062F\u0647",
      "\u067E\u0631\u062A\u062D\u0631\u0643",
      "\u067E\u0631\u062E\u0627\u0634\u06AF\u0631\u0627\u0646\u0647",
      "\u067E\u0631\u0633\u0627\u0646",
      "\u067E\u0631\u0634\u062A\u0627\u0628",
      "\u067E\u0631\u0634\u0648\u0631",
      "\u067E\u0631\u0648\u0631\u062F\u06AF\u0627\u0631\u0627",
      "\u067E\u0631\u064A\u0631\u0648\u0632",
      "\u067E\u0633",
      "\u067E\u0634\u062A",
      "\u067E\u0634\u062A\u0648\u0627\u0646\u0647",
      "\u067E\u0634\u064A\u0645\u0648\u0646\u064A",
      "\u067E\u0646\u0647\u0627\u0646",
      "\u067E\u0647\u0646",
      "\u067E\u064A",
      "\u067E\u064A\u0627\u0645\u0628\u0631\u0627\u0646\u0647",
      "\u067E\u064A\u062F\u0627\u0633\u062A",
      "\u067E\u064A\u062F\u0631\u067E\u064A",
      "\u067E\u064A\u0631\u0627\u0645\u0648\u0646",
      "\u067E\u064A\u0634",
      "\u067E\u064A\u0634\u0627\u067E\u064A\u0634",
      "\u067E\u064A\u0634\u062A\u0631",
      "\u067E\u064A\u0648\u0633\u062A\u0647",
      "\u067E\u064A\u06AF\u064A\u0631",
      "\u0686",
      "\u0686\u0627\u0631\u062F\u0647",
      "\u0686\u0627\u0644\u0647",
      "\u0686\u0627\u067E\u0644\u0648\u0633\u0627\u0646\u0647",
      "\u0686\u062A",
      "\u0686\u062A\u0647",
      "\u0686\u0631\u0627",
      "\u0686\u0631\u0627\u0643\u0647",
      "\u0686\u0637\u0648\u0631",
      "\u0686\u0642\u062F\u0631",
      "\u0686\u0643\u0627\u0631",
      "\u0686\u0646\u0627\u0646",
      "\u0686\u0646\u0627\u0646\u0643\u0647",
      "\u0686\u0646\u0627\u0646\u0686\u0647",
      "\u0686\u0646\u062F",
      "\u0686\u0646\u062F\u0627\u0646",
      "\u0686\u0646\u062F\u0627\u0646\u064A",
      "\u0686\u0646\u062F\u0631\u0648\u0632\u0647",
      "\u0686\u0646\u062F\u0645\u0627\u0647\u0647",
      "\u0686\u0646\u062F\u0645\u064A\u0646",
      "\u0686\u0646\u062F\u0647",
      "\u0686\u0646\u062F\u064A\u0646",
      "\u0686\u0646\u064A\u0646",
      "\u0686\u0647",
      "\u0686\u0647\u0627\u0631\u0647\u0632\u0627\u0631",
      "\u0686\u0648",
      "\u0686\u0648\u0646",
      "\u0686\u064A",
      "\u0686\u064A\u0632",
      "\u0686\u064A\u0632\u0647\u0627\u0633\u062A",
      "\u0686\u064A\u0632\u064A\u0633\u062A",
      "\u0686\u064A\u0633\u062A",
      "\u0686\u064A\u0647",
      "\u0686\u06AF\u0648\u0646\u0647",
      "\u0698",
      "\u06AF",
      "\u06AF\u0627\u0647",
      "\u06AF\u0627\u0647\u064A",
      "\u06AF\u0630\u0627\u0631\u0627\u0646",
      "\u06AF\u0630\u0627\u0631\u064A",
      "\u06AF\u0630\u0627\u0634\u062A\u0646",
      "\u06AF\u0631",
      "\u06AF\u0631\u062F\u064A\u062F",
      "\u06AF\u0631\u0641\u062A\u0627\u0631\u0646\u062F",
      "\u06AF\u0631\u0641\u062A\u0646",
      "\u06AF\u0631\u0645\u064A",
      "\u06AF\u0631\u0646\u0647",
      "\u06AF\u0631\u0686\u0647",
      "\u06AF\u0641\u062A",
      "\u06AF\u0645\u0627\u0646",
      "\u06AF\u0647\u06AF\u0627\u0647",
      "\u06AF\u0648\u0646\u0647",
      "\u06AF\u0648\u064A\u0627",
      "\u06AF\u0648\u064A\u0627\u0646",
      "\u06AF\u0648\u064A\u064A",
      "\u0627\u0628\u0644\u0647\u0627\u0646\u0647 \u0647\u0627",
      "?",
      "",
      ":",
      "\u0648",
      "NULL",
      "\u062F\u0631",
      "\u0628\u0647",
      "\u0627\u0632",
      "\u0643\u0647",
      "\u0645\u064A",
      "\u0627\u064A\u0646",
      "\u0627\u0633\u062A",
      "\u0631\u0627",
      "\u0628\u0627",
      "\u0647\u0627\u064A",
      "\u0628\u0631\u0627\u064A",
      "\u0622\u0646",
      "\u064A\u0643",
      "\u0634\u0648\u062F",
      "\u0634\u062F\u0647",
      "\u062E\u0648\u062F",
      "\u0647\u0627",
      "\u0643\u0631\u062F",
      "\u0634\u062F",
      "\u0627\u064A",
      "\u062A\u0627",
      "\u0643\u0646\u062F",
      "\u0628\u0631",
      "\u0628\u0648\u062F",
      "\u06AF\u0641\u062A",
      "\u0646\u064A\u0632",
      "\u0648\u064A",
      "\u0647\u0645",
      "\u0643\u0646\u0646\u062F",
      "\u062F\u0627\u0631\u062F",
      "\u0645\u0627",
      "\u0643\u0631\u062F\u0647",
      "\u064A\u0627",
      "\u0627\u0645\u0627",
      "\u0628\u0627\u064A\u062F",
      "\u062F\u0648",
      "\u0627\u0646\u062F",
      "\u0647\u0631",
      "\u062E\u0648\u0627\u0647\u062F",
      "\u0627\u0648",
      "\u0645\u0648\u0631\u062F",
      "\u0622\u0646\u0647\u0627",
      "\u0628\u0627\u0634\u062F",
      "\u062F\u064A\u06AF\u0631",
      "\u0645\u0631\u062F\u0645",
      "\u0646\u0645\u064A",
      "\u0628\u064A\u0646",
      "\u067E\u064A\u0634",
      "\u067E\u0633",
      "\u0627\u06AF\u0631",
      "\u0647\u0645\u0647",
      "\u0635\u0648\u0631\u062A",
      "\u064A\u0643\u064A",
      "\u0647\u0633\u062A\u0646\u062F",
      "\u0628\u064A",
      "\u0645\u0646",
      "\u062F\u0647\u062F",
      "\u0647\u0632\u0627\u0631",
      "\u0646\u064A\u0633\u062A",
      "\u0627\u0633\u062A\u0641\u0627\u062F\u0647",
      "\u062F\u0627\u062F",
      "\u062F\u0627\u0634\u062A\u0647",
      "\u062F\u0627\u0634\u062A",
      "\u0686\u0647",
      "\u0647\u0645\u0686\u0646\u064A\u0646",
      "\u0643\u0631\u062F\u0646\u062F",
      "\u062F\u0627\u062F\u0647",
      "\u0628\u0648\u062F\u0647",
      "\u062F\u0627\u0631\u0646\u062F",
      "\u0647\u0645\u064A\u0646",
      "\u0645\u064A\u0644\u064A\u0648\u0646",
      "\u0633\u0648\u064A",
      "\u0634\u0648\u0646\u062F",
      "\u0628\u064A\u0634\u062A\u0631",
      "\u0628\u0633\u064A\u0627\u0631",
      "\u0631\u0648\u064A",
      "\u06AF\u0631\u0641\u062A\u0647",
      "\u0647\u0627\u064A\u064A",
      "\u062A\u0648\u0627\u0646\u062F",
      "\u0627\u0648\u0644",
      "\u0646\u0627\u0645",
      "\u0647\u064A\u0686",
      "\u0686\u0646\u062F",
      "\u062C\u062F\u064A\u062F",
      "\u0628\u064A\u0634",
      "\u0634\u062F\u0646",
      "\u0643\u0631\u062F\u0646",
      "\u0643\u0646\u064A\u0645",
      "\u0646\u0634\u0627\u0646",
      "\u062D\u062A\u064A",
      "\u0627\u064A\u0646\u0643\u0647",
      "\u0648\u0644?",
      "\u062A\u0648\u0633\u0637",
      "\u0686\u0646\u064A\u0646",
      "\u0628\u0631\u062E\u064A",
      "\u0646\u0647",
      "\u062F\u064A\u0631\u0648\u0632",
      "\u062F\u0648\u0645",
      "\u062F\u0631\u0628\u0627\u0631\u0647",
      "\u0628\u0639\u062F",
      "\u0645\u062E\u062A\u0644\u0641",
      "\u06AF\u064A\u0631\u062F",
      "\u0634\u0645\u0627",
      "\u06AF\u0641\u062A\u0647",
      "\u0622\u0646\u0627\u0646",
      "\u0628\u0627\u0631",
      "\u0637\u0648\u0631",
      "\u06AF\u0631\u0641\u062A",
      "\u062F\u0647\u0646\u062F",
      "\u06AF\u0630\u0627\u0631\u064A",
      "\u0628\u0633\u064A\u0627\u0631\u064A",
      "\u0637\u064A",
      "\u0628\u0648\u062F\u0646\u062F",
      "\u0645\u064A\u0644\u064A\u0627\u0631\u062F",
      "\u0628\u062F\u0648\u0646",
      "\u062A\u0645\u0627\u0645",
      "\u0643\u0644",
      "\u062A\u0631",
      "\u0628\u0631\u0627\u0633\u0627\u0633",
      "\u0634\u062F\u0646\u062F",
      "\u062A\u0631\u064A\u0646",
      "\u0627\u0645\u0631\u0648\u0632",
      "\u0628\u0627\u0634\u0646\u062F",
      "\u0646\u062F\u0627\u0631\u062F",
      "\u0686\u0648\u0646",
      "\u0642\u0627\u0628\u0644",
      "\u06AF\u0648\u064A\u062F",
      "\u062F\u064A\u06AF\u0631\u064A",
      "\u0647\u0645\u0627\u0646",
      "\u062E\u0648\u0627\u0647\u0646\u062F",
      "\u0642\u0628\u0644",
      "\u0622\u0645\u062F\u0647",
      "\u0627\u0643\u0646\u0648\u0646",
      "\u062A\u062D\u062A",
      "\u0637\u0631\u064A\u0642",
      "\u06AF\u064A\u0631\u064A",
      "\u062C\u0627\u064A",
      "\u0647\u0646\u0648\u0632",
      "\u0686\u0631\u0627",
      "\u0627\u0644\u0628\u062A\u0647",
      "\u0643\u0646\u064A\u062F",
      "\u0633\u0627\u0632\u064A",
      "\u0633\u0648\u0645",
      "\u0643\u0646\u0645",
      "\u0628\u0644\u0643\u0647",
      "\u0632\u064A\u0631",
      "\u062A\u0648\u0627\u0646\u0646\u062F",
      "\u0636\u0645\u0646",
      "\u0641\u0642\u0637",
      "\u0628\u0648\u062F\u0646",
      "\u062D\u0642",
      "\u0622\u064A\u062F",
      "\u0648\u0642\u062A\u064A",
      "\u0627\u0634",
      "\u064A\u0627\u0628\u062F",
      "\u0646\u062E\u0633\u062A\u064A\u0646",
      "\u0645\u0642\u0627\u0628\u0644",
      "\u062E\u062F\u0645\u0627\u062A",
      "\u0627\u0645\u0633\u0627\u0644",
      "\u062A\u0627\u0643\u0646\u0648\u0646",
      "\u0645\u0627\u0646\u0646\u062F",
      "\u062A\u0627\u0632\u0647",
      "\u0622\u0648\u0631\u062F",
      "\u0641\u0643\u0631",
      "\u0622\u0646\u0686\u0647",
      "\u0646\u062E\u0633\u062A",
      "\u0646\u0634\u062F\u0647",
      "\u0634\u0627\u064A\u062F",
      "\u0686\u0647\u0627\u0631",
      "\u062C\u0631\u064A\u0627\u0646",
      "\u067E\u0646\u062C",
      "\u0633\u0627\u062E\u062A\u0647",
      "\u0632\u064A\u0631\u0627",
      "\u0646\u0632\u062F\u064A\u0643",
      "\u0628\u0631\u062F\u0627\u0631\u064A",
      "\u0643\u0633\u064A",
      "\u0631\u064A\u0632\u064A",
      "\u0631\u0641\u062A",
      "\u06AF\u0631\u062F\u062F",
      "\u0645\u062B\u0644",
      "\u0622\u0645\u062F",
      "\u0627\u0645",
      "\u0628\u0647\u062A\u0631\u064A\u0646",
      "\u062F\u0627\u0646\u0633\u062A",
      "\u0643\u0645\u062A\u0631",
      "\u062F\u0627\u062F\u0646",
      "\u062A\u0645\u0627\u0645\u064A",
      "\u062C\u0644\u0648\u06AF\u064A\u0631\u064A",
      "\u0628\u064A\u0634\u062A\u0631\u064A",
      "\u0627\u064A\u0645",
      "\u0646\u0627\u0634\u064A",
      "\u0686\u064A\u0632\u064A",
      "\u0622\u0646\u0643\u0647",
      "\u0628\u0627\u0644\u0627",
      "\u0628\u0646\u0627\u0628\u0631\u0627\u064A\u0646",
      "\u0627\u064A\u0634\u0627\u0646",
      "\u0628\u0639\u0636\u064A",
      "\u062F\u0627\u062F\u0646\u062F",
      "\u062F\u0627\u0634\u062A\u0646\u062F",
      "\u0628\u0631\u062E\u0648\u0631\u062F\u0627\u0631",
      "\u0646\u062E\u0648\u0627\u0647\u062F",
      "\u0647\u0646\u06AF\u0627\u0645",
      "\u0646\u0628\u0627\u064A\u062F",
      "\u063A\u064A\u0631",
      "\u0646\u0628\u0648\u062F",
      "\u062F\u064A\u062F\u0647",
      "\u0648\u06AF\u0648",
      "\u062F\u0627\u0631\u064A\u0645",
      "\u0686\u06AF\u0648\u0646\u0647",
      "\u0628\u0646\u062F\u064A",
      "\u062E\u0648\u0627\u0633\u062A",
      "\u0641\u0648\u0642",
      "\u062F\u0647",
      "\u0646\u0648\u0639\u064A",
      "\u0647\u0633\u062A\u064A\u0645",
      "\u062F\u064A\u06AF\u0631\u0627\u0646",
      "\u0647\u0645\u0686\u0646\u0627\u0646",
      "\u0633\u0631\u0627\u0633\u0631",
      "\u0646\u062F\u0627\u0631\u0646\u062F",
      "\u06AF\u0631\u0648\u0647\u064A",
      "\u0633\u0639\u064A",
      "\u0631\u0648\u0632\u0647\u0627\u064A",
      "\u0622\u0646\u062C\u0627",
      "\u064A\u0643\u062F\u064A\u06AF\u0631",
      "\u0643\u0631\u062F\u0645",
      "\u0628\u064A\u0633\u062A",
      "\u0628\u0631\u0648\u0632",
      "\u0633\u067E\u0633",
      "\u0631\u0641\u062A\u0647",
      "\u0622\u0648\u0631\u062F\u0647",
      "\u0646\u0645\u0627\u064A\u062F",
      "\u0628\u0627\u0634\u064A\u0645",
      "\u06AF\u0648\u064A\u0646\u062F",
      "\u0632\u064A\u0627\u062F",
      "\u062E\u0648\u064A\u0634",
      "\u0647\u0645\u0648\u0627\u0631\u0647",
      "\u06AF\u0630\u0627\u0634\u062A\u0647",
      "\u0634\u0634",
      "\u0646\u062F\u0627\u0634\u062A\u0647",
      "\u0634\u0646\u0627\u0633\u064A",
      "\u062E\u0648\u0627\u0647\u064A\u0645",
      "\u0622\u0628\u0627\u062F",
      "\u062F\u0627\u0634\u062A\u0646",
      "\u0646\u0638\u064A\u0631",
      "\u0647\u0645\u0686\u0648\u0646",
      "\u0628\u0627\u0631\u0647",
      "\u0646\u0643\u0631\u062F\u0647",
      "\u0634\u0627\u0646",
      "\u0633\u0627\u0628\u0642",
      "\u0647\u0641\u062A",
      "\u062F\u0627\u0646\u0646\u062F",
      "\u062C\u0627\u064A\u064A",
      "\u0628?",
      "\u062C\u0632",
      "\u0632?\u0631\u0650",
      "\u0631\u0648?\u0650",
      "\u0633\u0631?\u0650",
      "\u062A\u0648?\u0650",
      "\u062C\u0644\u0648?\u0650",
      "\u067E?\u0634\u0650",
      "\u0639\u0642\u0628\u0650",
      "\u0628\u0627\u0644\u0627?\u0650",
      "\u062E\u0627\u0631\u062C\u0650",
      "\u0648\u0633\u0637\u0650",
      "\u0628?\u0631\u0648\u0646\u0650",
      "\u0633\u0648?\u0650",
      "\u0643\u0646\u0627\u0631\u0650",
      "\u067E\u0627\u0639?\u0646\u0650",
      "\u0646\u0632\u062F\u0650",
      "\u0646\u0632\u062F?\u0643\u0650",
      "\u062F\u0646\u0628\u0627\u0644\u0650",
      "\u062D\u062F\u0648\u062F\u0650",
      "\u0628\u0631\u0627\u0628\u0631\u0650",
      "\u0637\u0628\u0642\u0650",
      "\u0645\u0627\u0646\u0646\u062F\u0650",
      "\u0636\u062F\u0651\u0650",
      "\u0647\u0646\u06AF\u0627\u0645\u0650",
      "\u0628\u0631\u0627?\u0650",
      "\u0645\u062B\u0644\u0650",
      "\u0628\u0627\u0631\u0629",
      "\u0627\u062B\u0631\u0650",
      "\u062A\u0648\u0644\u0650",
      "\u0639\u0644\u0651\u062A\u0650",
      "\u0633\u0645\u062A\u0650",
      "\u0639\u0646\u0648\u0627\u0646\u0650",
      "\u0642\u0635\u062F\u0650",
      "\u0631\u0648\u0628",
      "\u062C\u062F\u0627",
      "\u0643?",
      "\u0643\u0647",
      "\u0686?\u0633\u062A",
      "\u0647\u0633\u062A",
      "\u0643\u062C\u0627",
      "\u0643\u062C\u0627\u0633\u062A",
      "\u0643\u064E?",
      "\u0686\u0637\u0648\u0631",
      "\u0643\u062F\u0627\u0645",
      "\u0622?\u0627",
      "\u0645\u06AF\u0631",
      "\u0686\u0646\u062F?\u0646",
      "?\u0643",
      "\u0686?\u0632?",
      "\u062F?\u06AF\u0631",
      "\u0643\u0633?",
      "\u0628\u0639\u0631?",
      "\u0647?\u0686",
      "\u0686?\u0632",
      "\u062C\u0627",
      "\u0643\u0633",
      "\u0647\u0631\u06AF\u0632",
      "?\u0627",
      "\u062A\u0646\u0647\u0627",
      "\u0628\u0644\u0643\u0647",
      "\u062E?\u0627\u0647",
      "\u0628\u0644\u0647",
      "\u0628\u0644?",
      "\u0622\u0631\u0647",
      "\u0622\u0631?",
      "\u0645\u0631\u0633?",
      "\u0627\u0644\u0628\u062A\u0651\u0647",
      "\u0644\u0637\u0641\u0627\u064B",
      "\u0651\u0647",
      "\u0627\u0646\u0643\u0647",
      "\u0648\u0642\u062A?\u0643\u0647",
      "\u0647\u0645?\u0646",
      "\u067E?\u0634",
      "\u0645\u062F\u0651\u062A?",
      "\u0647\u0646\u06AF\u0627\u0645?",
      "\u0645\u0627\u0646",
      "\u062A\u0627\u0646",
      "?",
      "\u0648\u0631",
      "\u0647\u0645\u0645\u0648\u0646",
      "\u0648?",
      "\u0643\u0646\u0646   ",
      "\u0643\u0646\u0646\u062F   ",
      "\u0645?\u200C\u0643\u0646\u0646\u062F   ",
      "\u0645?\u200C\u0643\u0646\u0646   ",
      "\u0647\u0645\u0645\u0648\u0646   ",
      "\u0646\u0632\u062F?\u0645   ",
      "\u0646\u0645?\u0645\u0648\u0646?\u062F   ",
      "\u062F\u0627\u0631\u0627?",
      "\u062E\u0648\u062F?",
      "\u0648\u06AF\u0631\u062F",
      "\u0647\u0645\u0627\u0646\u0646\u062F",
      "\u0628\u0634\u0648\u0646\u062F",
      "\u0646\u0645?\u200C\u0643\u0646\u0646\u062F   ",
      "\u0627\u0646\u0647\u0627",
      "\u0628\u0627\u0632\u0645",
      "\u067E?\u0634\u0634\u0648\u0646   ",
      "?\u06AF\u0631\u062F?   ",
      "\u0648\u0646\u0646",
      "\u0631\u0648?\u0645",
      "\u0627\u0628\u062F\u0627",
      "\u0639\u0645\u062F\u062A\u0627",
      "\u0628\u0646\u062F?",
      "\u0645?\u200C\u06AF\u0646   ",
      "\u0645\u0646\u062F",
      "\u0622\u062E\u0647",
      "\u0622\u0648\u0631\u062F\u0647   ",
      "\u0631\u0627\u0628\u0633?\u0627\u0631   ",
      "\u0645?\u200C\u0628\u0627\u0634\u062F   ",
      "\u0633\u0627\u062E\u062A\u0647\u200C\u0627\u0645   ",
      "\u0645?\u200C\u06AF\u0631\u062F\u062F   ",
      "\u062F\u0631\u0628\u0627\u0631\u0647   ",
      "\u0648\u0628\u0631\u0627?   ",
      "\u0645?\u200C\u062F\u0647?\u0645  ",
      "\u062E\u0648?\u0634",
      "\u062F\u0648\u0628\u0627\u0631\u0647\u200C\u0627?",
      "\u067E\u0631\u0627\u0632",
      "\u0647\u0634\u0627\u0646",
      "\u0628\u062A\u0648\u0627\u0646",
      "\u0645?\u200C\u0646\u0648\u0634\u0646\u062F",
      "\u0646\u0631?\u0645",
      "\u0646\u062F?\u062F?",
      "\u062F\u0627\u0634\u062A\u0646\u062F",
      "\u0628\u062E\u0648\u0628?",
      "\u0645?\u200C\u062E\u0648\u0627\u0633\u062A\u0646",
      "\u062F\u0631",
      "\u062A\u0648?",
      "\u0628\u0627",
      "\u0643\u0647",
      "\u0628\u0647",
      "\u062A\u0648",
      "\u0634\u062F",
      "\u0631\u0627 ",
      "\u0634\u062F\u0647",
      "\u0627\u0633\u062A",
      "\u0647\u0645",
      "\u0627\u0632",
      "\u0646\u0645?\u200C\u06AF?\u0631\u0646\u062F",
      "\u0628?\u0646",
      "\u0628?\u0646\u0645\u0627\u0646",
      "\u0645\u0647\u0645\u062A\u0631\u0647",
      "\u0628?\u0627\u0631?\u0645",
      "\u0648\u0627\u0633\u0634",
      "\u0628\u062F\u0647?\u062F",
      "\u0646\u0643\u0646\u0646\u062F",
      "\u06AF\u0630\u0627\u0631?",
      "\u0645\u0627\u0627",
      "\u0646\u0645?\u200C\u0627\u0648\u0631\u0645",
      "\u062E\u0627\u0633\u062A",
      "\u0631\u0641\u062A\u0647\u200C\u0627\u0645",
      "\u0646\u0645?\u200C\u0627\u0648\u0631\u0645",
      "\u0647\u0627?\u062A",
      "\u0646\u0645?\u200C\u0628\u0631\u062F",
      "\u0647\u0645\u0686\u0646\u0627\u0646\u0643\u0647",
      "\u0628\u0634?\u062F",
      "\u0646\u0645?\u200C\u0631\u0648\u0645",
      "\u062A\u0627\u0646",
      "\u0646\u0645?\u0645\u0648\u0646?\u062F",
      "\u0647\u0645\u0645\u0648\u0646",
      "\u0648\u0631",
      "\u062A\u0646\u0647\u0627",
      "\u0645?\u200C\u062E\u0648\u0627\u0647\u0646\u062F",
      "\u062F\u0686\u0627\u0631",
      "\u0634\u0646\u0627\u0633?\u062F",
      "\u062E\u0648\u062F?",
      "\u0648\u06AF\u0631\u062F",
      "\u0628\u0648\u062C\u0648\u062F",
      "\u0647\u0645\u0627\u0646\u0646\u062F",
      "\u062F\u0627\u0631\u0627?",
      "\u0628\u0631?\u0632?\u062F",
      "\u0628\u0634\u0645",
      "\u0643\u0646\u0647",
      "\u0643\u0646\u064A\u0645",
      "\u064A",
      "\u0643\u0646\u0646\u062F",
      "\u0648",
      "\u0643\u0646\u064A",
      "\u0645\u064A\u0643\u0646\u0645",
      "\u0643\u0646\u0645",
      "\u0645?",
      "\u0627?\u0646",
      "\u062F\u0627\u0631\u0647",
      "\u0686\u064A",
      "\u062A\u0648\u0646",
      "\u0628\u0647\u0645",
      "\u0628\u0639\u062F\u0627",
      "\u0647\u0627\u0634",
      "\u0628\u0634\u064A",
      "\u0645\u064A\u0643\u0646\u062F",
      "\u0643\u0631\u062F\u0647",
      "\u0627?\u062F",
      "\u06AF\u0631\u0686\u0647",
      "\u0627\u0632\u0634",
      "\u0645\u064A\u0643\u0646\u0647",
      "\u0645\u064A\u200C\u0631\u0645",
      "\u0643\u0646\u0647",
      "\u0643\u0631\u062F",
      "\u0628\u0627\u0634\u0647",
      "\u062F\u0648\u0646?\u062F",
      "\u064A\u0643",
      "\u0628\u06AF\u064A\u0631\u0645",
      "\u0634\u062F\u064A\u062F",
      "\u0628\u0632\u0646\u064A\u062F",
      "\u0646\u0634\u0648\u0646",
      "\u0631\u0648\u0649",
      "\u0631\u0633\u064A\u062F",
      "\u0628\u0634\u0646",
      "\u0628\u0631\u064A",
      "\u062F\u0627\u0631\u0645",
      "\u0627\u0644\u064A",
      "\u06AF\u0647",
      "\u0627\u064A\u0646\u0637\u0648\u0631\u064A",
      "\u0643\u0644\u064A",
      "\u062A\u0648\u0646\u0633\u062A",
      "\u062F\u0627\u0631\u0645",
      "\u064A\u0647",
      "\u0646\u062F\u0627\u0631\u0647",
      "\u0628\u064A\u0627\u062F",
      "\u062C\u0648\u0631",
      "\u0643\u0631\u062F\u0647",
      "\u0628\u0648\u062F\u0645",
      "\u062A\u0648\u064A",
      "\u0643\u0631\u062F\u064A\u062F",
      "\u0647\u0633\u062A\u0646",
      "\u0627\u0648\u0646",
      "\u0645\u064A\u0634\u0647",
      "\u0634\u0648",
      "\u0628\u0634\u0645",
      "\u0628\u0631\u064A\u062F",
      "\u0628\u0631\u064A\u0645",
      "\u0628\u0648\u062F?\u062F",
      "\u0686\u064A\u0647",
      "\u0628\u0627\u0634\u0647",
      "\u0648\u0627\u0642\u0639\u0627",
      "\u0631\u0648",
      "\u0647\u0633\u062A?\u062F",
      "\u0627\u064A\u0646\u062C\u0627",
      "\u0648\u0627\u0631\u062F",
      "\u062A\u0648\u0634",
      "\u0627\u064A\u0646\u0643\u0647",
      "\u0622\u064A\u0627",
      "\u0628\u062F\u0645",
      "\u0628\u0627\u0634\u0647",
      "\u0628\u0647\u0634\u0648\u0646",
      "\u064A\u0639\u0646\u064A",
      "\u0645\u0648\u0646",
      "\u0634\u0631\u0637",
      "\u0627\u064A\u0646\u0627",
      "\u0643\u0631\u062F\u0645",
      "\u0628\u062F\u0627\u0646",
      "\u0646\u0628\u0627\u0634",
      "\u0646\u062F\u0627\u062F",
      "\u0645\u064A\u200C\u0643\u0646\u0646",
      "\u0643\u0631\u062F\u0646",
      "\u0643\u0631\u062F\u0647",
      "\u0627\u0648\u0646",
      "\u0645\u064A\u0631\u0646",
      "\u0634\u062F\u064A\u0645",
      "\u0628\u0631\u0627?",
      "\u0645\u064A\u0643\u0646\u064A\u0645",
      "\u0643\u0646?\u0645",
      "\u062E\u0648\u062F\u0645",
      "\u060C",
      "\u0649",
      "\u0639\u0644\u0627\u0631\u063A\u0645",
      "\u060C",
      "\u0646\u0645\u064A\u0643\u0646\u0646",
      "\u0645\u064A\u0631\u0648\u0645",
      "\u0627\u0648\u0646\u062C\u0627",
      ".",
      "\u0627\u0648\u0646\u0627",
      "\u0627\u0647",
      "\u0627\u064A\u0646\u062C\u0648\u0631",
      "\u0627\u062A",
      "\u062E\u0648\u0627\u0647\u064A\u0645\u0643\u0631\u062F",
      "\u0645\u064A\u200C\u06AF\u064A\u0631\u0647",
      "\u0645\u064A\u062F\u0647\u0645",
      "\u062E\u064A\u0644\u064A",
      "\u0645?\u200C\u0643\u0646\u0646\u062F",
      "\u0643\u0646\u0646",
      "\u0646\u0643\u0646\u0647",
      "\u061F",
      "?",
      "\u0645?\u200C\u0643\u0646\u062F",
      "\u0634\u062F\u0647\u200C\u0627\u0646\u062F",
      "\u0628\u0627\u0634\u0645",
      "\u0646\u0627",
      "\u062D\u062A?",
      "\u0645?\u200C\u062F\u0627\u062F",
      "\u0645?\u200C\u0634\u0648\u0646\u062F",
      "\u0643\u0631\u062F\u0646\u062F",
      "\u0645?\u200C\u0643\u0646\u0645",
      "\u0645?\u200C\u062F\u0647\u062F",
      "\u0643\u0631\u062F\u064A\u0645",
      "\u0643\u0646\u064A\u062F",
      "_",
      "\u0628\u0631\u0627\u0649",
      "\u0647\u0627?",
      "\u0647\u0627?a",
      "\u061B",
      "\u060C",
      ".",
      "\u2026",
      "",
      "\u0648",
      "\u062F\u0631",
      "\u0628\u0647",
      "\u0627\u0632",
      "\u0643\u0647",
      "\u0645\u064A",
      "\u0627\u064A\u0646",
      "\u0627\u0633\u062A",
      "\u0631\u0627",
      "\u0628\u0627",
      "\u0647\u0627\u064A",
      "\u0628\u0631\u0627\u064A",
      "\u0622\u0646",
      "\u064A\u0643",
      "\u0634\u0648\u062F",
      "\u0634\u062F\u0647",
      "\u062E\u0648\u062F",
      "\u0647\u0627",
      "\u0643\u0631\u062F",
      "\u0634\u062F",
      "\u0627\u064A",
      "\u062A\u0627",
      "\u0643\u0646\u062F",
      "\u0628\u0631",
      "\u0628\u0648\u062F",
      "\u06AF\u0641\u062A",
      "\u0646\u064A\u0632",
      "\u0648\u064A",
      "\u0647\u0645",
      "\u0643\u0646\u0646\u062F",
      "\u062F\u0627\u0631\u062F",
      "\u0645\u0627",
      "\u0643\u0631\u062F\u0647",
      "\u064A\u0627",
      "\u0627\u0645\u0627",
      "\u0628\u0627\u064A\u062F",
      "\u062F\u0648",
      "\u0627\u0646\u062F",
      "\u0647\u0631",
      "\u062E\u0648\u0627\u0647\u062F",
      "\u0627\u0648",
      "\u0645\u0648\u0631\u062F",
      "\u0622\u0646\u0647\u0627",
      "\u0628\u0627\u0634\u062F",
      "\u062F\u064A\u06AF\u0631",
      "\u0645\u0631\u062F\u0645",
      "\u0646\u0645\u064A",
      "\u0628\u064A\u0646",
      "\u067E\u064A\u0634",
      "\u067E\u0633",
      "\u0627\u06AF\u0631",
      "\u0647\u0645\u0647",
      "\u0635\u0648\u0631\u062A",
      "\u064A\u0643\u064A",
      "\u0647\u0633\u062A\u0646\u062F",
      "\u0628\u064A",
      "\u0645\u0646",
      "\u062F\u0647\u062F",
      "\u0647\u0632\u0627\u0631",
      "\u0646\u064A\u0633\u062A",
      "\u0627\u0633\u062A\u0641\u0627\u062F\u0647",
      "\u062F\u0627\u062F",
      "\u062F\u0627\u0634\u062A\u0647",
      "\u062F\u0627\u0634\u062A",
      "\u0686\u0647",
      "\u0647\u0645\u0686\u0646\u064A\u0646",
      "\u0643\u0631\u062F\u0646\u062F",
      "\u062F\u0627\u062F\u0647",
      "\u0628\u0648\u062F\u0647",
      "\u062F\u0627\u0631\u0646\u062F",
      "\u0647\u0645\u064A\u0646",
      "\u0645\u064A\u0644\u064A\u0648\u0646",
      "\u0633\u0648\u064A",
      "\u0634\u0648\u0646\u062F",
      "\u0628\u064A\u0634\u062A\u0631",
      "\u0628\u0633\u064A\u0627\u0631",
      "\u0631\u0648\u064A",
      "\u06AF\u0631\u0641\u062A\u0647",
      "\u0647\u0627\u064A\u064A",
      "\u062A\u0648\u0627\u0646\u062F",
      "\u0627\u0648\u0644",
      "\u0646\u0627\u0645",
      "\u0647\u064A\u0686",
      "\u0686\u0646\u062F",
      "\u062C\u062F\u064A\u062F",
      "\u0628\u064A\u0634",
      "\u0634\u062F\u0646",
      "\u0643\u0631\u062F\u0646",
      "\u0643\u0646\u064A\u0645",
      "\u0646\u0634\u0627\u0646",
      "\u062D\u062A\u064A",
      "\u0627\u064A\u0646\u0643\u0647",
      "\u0648\u0644\u06CC",
      "\u062A\u0648\u0633\u0637",
      "\u0686\u0646\u064A\u0646",
      "\u0628\u0631\u062E\u064A",
      "\u0646\u0647",
      "\u062F\u064A\u0631\u0648\u0632",
      "\u062F\u0648\u0645",
      "\u062F\u0631\u0628\u0627\u0631\u0647",
      "\u0628\u0639\u062F",
      "\u0645\u062E\u062A\u0644\u0641",
      "\u06AF\u064A\u0631\u062F",
      "\u0634\u0645\u0627",
      "\u06AF\u0641\u062A\u0647",
      "\u0622\u0646\u0627\u0646",
      "\u0628\u0627\u0631",
      "\u0637\u0648\u0631",
      "\u06AF\u0631\u0641\u062A",
      "\u062F\u0647\u0646\u062F",
      "\u06AF\u0630\u0627\u0631\u064A",
      "\u0628\u0633\u064A\u0627\u0631\u064A",
      "\u0637\u064A",
      "\u0628\u0648\u062F\u0646\u062F",
      "\u0645\u064A\u0644\u064A\u0627\u0631\u062F",
      "\u0628\u062F\u0648\u0646",
      "\u062A\u0645\u0627\u0645",
      "\u0643\u0644",
      "\u062A\u0631\t\u0628\u0631\u0627\u0633\u0627\u0633",
      "\u0634\u062F\u0646\u062F",
      "\u062A\u0631\u064A\u0646",
      "\u0627\u0645\u0631\u0648\u0632",
      "\u0628\u0627\u0634\u0646\u062F",
      "\u0646\u062F\u0627\u0631\u062F",
      "\u0686\u0648\u0646",
      "\u0642\u0627\u0628\u0644",
      "\u06AF\u0648\u064A\u062F",
      "\u062F\u064A\u06AF\u0631\u064A",
      "\u0647\u0645\u0627\u0646",
      "\u062E\u0648\u0627\u0647\u0646\u062F",
      "\u0642\u0628\u0644",
      "\u0622\u0645\u062F\u0647",
      "\u0627\u0643\u0646\u0648\u0646",
      "\u062A\u062D\u062A",
      "\u0637\u0631\u064A\u0642",
      "\u06AF\u064A\u0631\u064A",
      "\u062C\u0627\u064A",
      "\u0647\u0646\u0648\u0632",
      "\u0686\u0631\u0627",
      "\u0627\u0644\u0628\u062A\u0647",
      "\u0643\u0646\u064A\u062F",
      "\u0633\u0627\u0632\u064A",
      "\u0633\u0648\u0645",
      "\u0643\u0646\u0645",
      "\u0628\u0644\u0643\u0647",
      "\u0632\u064A\u0631",
      "\u062A\u0648\u0627\u0646\u0646\u062F",
      "\u0636\u0645\u0646",
      "\u0641\u0642\u0637",
      "\u0628\u0648\u062F\u0646",
      "\u062D\u0642",
      "\u0622\u064A\u062F",
      "\u0648\u0642\u062A\u064A",
      "\u0627\u0634",
      "\u064A\u0627\u0628\u062F",
      "\u0646\u062E\u0633\u062A\u064A\u0646",
      "\u0645\u0642\u0627\u0628\u0644",
      "\u062E\u062F\u0645\u0627\u062A",
      "\u0627\u0645\u0633\u0627\u0644",
      "\u062A\u0627\u0643\u0646\u0648\u0646",
      "\u0645\u0627\u0646\u0646\u062F",
      "\u062A\u0627\u0632\u0647",
      "\u0622\u0648\u0631\u062F",
      "\u0641\u0643\u0631",
      "\u0622\u0646\u0686\u0647",
      "\u0646\u062E\u0633\u062A",
      "\u0646\u0634\u062F\u0647",
      "\u0634\u0627\u064A\u062F",
      "\u0686\u0647\u0627\u0631",
      "\u062C\u0631\u064A\u0627\u0646",
      "\u067E\u0646\u062C",
      "\u0633\u0627\u062E\u062A\u0647",
      "\u0632\u064A\u0631\u0627",
      "\u0646\u0632\u062F\u064A\u0643",
      "\u0628\u0631\u062F\u0627\u0631\u064A",
      "\u0643\u0633\u064A",
      "\u0631\u064A\u0632\u064A",
      "\u0631\u0641\u062A",
      "\u06AF\u0631\u062F\u062F",
      "\u0645\u062B\u0644",
      "\u0622\u0645\u062F",
      "\u0627\u0645",
      "\u0628\u0647\u062A\u0631\u064A\u0646",
      "\u062F\u0627\u0646\u0633\u062A",
      "\u0643\u0645\u062A\u0631",
      "\u062F\u0627\u062F\u0646",
      "\u062A\u0645\u0627\u0645\u064A",
      "\u062C\u0644\u0648\u06AF\u064A\u0631\u064A",
      "\u0628\u064A\u0634\u062A\u0631\u064A",
      "\u0627\u064A\u0645",
      "\u0646\u0627\u0634\u064A",
      "\u0686\u064A\u0632\u064A",
      "\u0622\u0646\u0643\u0647",
      "\u0628\u0627\u0644\u0627",
      "\u0628\u0646\u0627\u0628\u0631\u0627\u064A\u0646",
      "\u0627\u064A\u0634\u0627\u0646",
      "\u0628\u0639\u0636\u064A",
      "\u062F\u0627\u062F\u0646\u062F",
      "\u062F\u0627\u0634\u062A\u0646\u062F",
      "\u0628\u0631\u062E\u0648\u0631\u062F\u0627\u0631",
      "\u0646\u062E\u0648\u0627\u0647\u062F",
      "\u0647\u0646\u06AF\u0627\u0645",
      "\u0646\u0628\u0627\u064A\u062F",
      "\u063A\u064A\u0631",
      "\u0646\u0628\u0648\u062F",
      "\u062F\u064A\u062F\u0647",
      "\u0648\u06AF\u0648",
      "\u062F\u0627\u0631\u064A\u0645",
      "\u0686\u06AF\u0648\u0646\u0647",
      "\u0628\u0646\u062F\u064A",
      "\u062E\u0648\u0627\u0633\u062A",
      "\u0641\u0648\u0642",
      "\u062F\u0647",
      "\u0646\u0648\u0639\u064A",
      "\u0647\u0633\u062A\u064A\u0645",
      "\u062F\u064A\u06AF\u0631\u0627\u0646",
      "\u0647\u0645\u0686\u0646\u0627\u0646",
      "\u0633\u0631\u0627\u0633\u0631",
      "\u0646\u062F\u0627\u0631\u0646\u062F",
      "\u06AF\u0631\u0648\u0647\u064A",
      "\u0633\u0639\u064A",
      "\u0631\u0648\u0632\u0647\u0627\u064A",
      "\u0622\u0646\u062C\u0627",
      "\u064A\u0643\u062F\u064A\u06AF\u0631",
      "\u0643\u0631\u062F\u0645",
      "\u0628\u064A\u0633\u062A",
      "\u0628\u0631\u0648\u0632",
      "\u0633\u067E\u0633",
      "\u0631\u0641\u062A\u0647",
      "\u0622\u0648\u0631\u062F\u0647",
      "\u0646\u0645\u0627\u064A\u062F",
      "\u0628\u0627\u0634\u064A\u0645",
      "\u06AF\u0648\u064A\u0646\u062F",
      "\u0632\u064A\u0627\u062F",
      "\u062E\u0648\u064A\u0634",
      "\u0647\u0645\u0648\u0627\u0631\u0647",
      "\u06AF\u0630\u0627\u0634\u062A\u0647",
      "\u0634\u0634\t\u0646\u062F\u0627\u0634\u062A\u0647",
      "\u0634\u0646\u0627\u0633\u064A",
      "\u062E\u0648\u0627\u0647\u064A\u0645",
      "\u0622\u0628\u0627\u062F",
      "\u062F\u0627\u0634\u062A\u0646",
      "\u0646\u0638\u064A\u0631",
      "\u0647\u0645\u0686\u0648\u0646",
      "\u0628\u0627\u0631\u0647",
      "\u0646\u0643\u0631\u062F\u0647",
      "\u0634\u0627\u0646",
      "\u0633\u0627\u0628\u0642",
      "\u0647\u0641\u062A",
      "\u062F\u0627\u0646\u0646\u062F",
      "\u062C\u0627\u064A\u064A",
      "\u0628\u06CC",
      "\u062C\u0632",
      "\u0632\u06CC\u0631\u0650",
      "\u0631\u0648\u06CC\u0650",
      "\u0633\u0631\u06CC\u0650",
      "\u062A\u0648\u06CC\u0650",
      "\u062C\u0644\u0648\u06CC\u0650",
      "\u067E\u06CC\u0634\u0650",
      "\u0639\u0642\u0628\u0650",
      "\u0628\u0627\u0644\u0627\u06CC\u0650",
      "\u062E\u0627\u0631\u062C\u0650",
      "\u0648\u0633\u0637\u0650",
      "\u0628\u06CC\u0631\u0648\u0646\u0650",
      "\u0633\u0648\u06CC\u0650",
      "\u06A9\u0646\u0627\u0631\u0650",
      "\u067E\u0627\u0639\u06CC\u0646\u0650",
      "\u0646\u0632\u062F\u0650",
      "\u0646\u0632\u062F\u06CC\u06A9\u0650",
      "\u062F\u0646\u0628\u0627\u0644\u0650",
      "\u062D\u062F\u0648\u062F\u0650",
      "\u0628\u0631\u0627\u0628\u0631\u0650",
      "\u0637\u0628\u0642\u0650",
      "\u0645\u0627\u0646\u0646\u062F\u0650",
      "\u0636\u062F\u0651\u0650",
      "\u0647\u0646\u06AF\u0627\u0645\u0650",
      "\u0628\u0631\u0627\u06CC\u0650",
      "\u0645\u062B\u0644\u0650",
      "\u0628\u0627\u0631\u0629",
      "\u0627\u062B\u0631\u0650",
      "\u062A\u0648\u0644\u0650",
      "\u0639\u0644\u0651\u062A\u0650",
      "\u0633\u0645\u062A\u0650",
      "\u0639\u0646\u0648\u0627\u0646\u0650",
      "\u0642\u0635\u062F\u0650",
      "\u0631\u0648\u0628",
      "\u062C\u062F\u0627",
      "\u06A9\u06CC",
      "\u06A9\u0647",
      "\u0686\u06CC\u0633\u062A",
      "\u0647\u0633\u062A",
      "\u06A9\u062C\u0627",
      "\u06A9\u062C\u0627\u0633\u062A",
      "\u06A9\u064E\u06CC",
      "\u0686\u0637\u0648\u0631",
      "\u06A9\u062F\u0627\u0645",
      "\u0622\u06CC\u0627",
      "\u0645\u06AF\u0631",
      "\u0686\u0646\u062F\u06CC\u0646",
      "\u06CC\u06A9",
      "\u0686\u06CC\u0632\u06CC",
      "\u062F\u06CC\u06AF\u0631",
      "\u06A9\u0633\u06CC",
      "\u0628\u0639\u0631\u06CC",
      "\u0647\u06CC\u0686",
      "\u0686\u06CC\u0632",
      "\u062C\u0627",
      "\u06A9\u0633",
      "\u0647\u0631\u06AF\u0632",
      "\u06CC\u0627",
      "\u062A\u0646\u0647\u0627",
      "\u0628\u0644\u06A9\u0647",
      "\u062E\u06CC\u0627\u0647",
      "\u0628\u0644\u0647",
      "\u0628\u0644\u06CC",
      "\u0622\u0631\u0647",
      "\u0622\u0631\u06CC",
      "\u0645\u0631\u0633\u06CC",
      "\u0627\u0644\u0628\u062A\u0651\u0647",
      "\u0644\u0637\u0641\u0627\u064B",
      "\u0651\u0647",
      "\u0627\u0646\u06A9\u0647",
      "\u0648\u0642\u062A\u06CC\u06A9\u0647",
      "\u0647\u0645\u06CC\u0646",
      "\u067E\u06CC\u0634",
      "\u0645\u062F\u0651\u062A\u06CC",
      "\u0647\u0646\u06AF\u0627\u0645\u06CC",
      "\u0645\u0627\u0646",
      "\u062A\u0627\u0646",
      "!",
      '"',
      "#",
      "(",
      ")",
      "*",
      ",",
      "-",
      ".",
      "/",
      ":",
      "[",
      "]",
      "\xAB",
      "\xBB",
      "\u060C",
      "\u061B",
      "\u061F",
      "\u0622\u0628\u0627\u062F",
      "\u0622\u062E",
      "\u0622\u062E\u0631",
      "\u0622\u062E\u0631\u0647\u0627",
      "\u0622\u062E\u0647",
      "\u0622\u062F\u0645\u0647\u0627\u0633\u062A",
      "\u0622\u0631\u0627\u0645",
      "\u0622\u0631\u0627\u0645 \u0622\u0631\u0627\u0645",
      "\u0622\u0631\u0647",
      "\u0622\u0631\u06CC",
      "\u0622\u0632\u0627\u062F\u0627\u0646\u0647",
      "\u0622\u0633\u0627\u0646",
      "\u0622\u0633\u06CC\u0628 \u067E\u0630\u06CC\u0631\u0646\u062F",
      "\u0622\u0634\u0646\u0627\u06CC\u0646\u062F",
      "\u0622\u0634\u06A9\u0627\u0631\u0627",
      "\u0622\u0642\u0627",
      "\u0622\u0642\u0627\u06CC",
      "\u0622\u0642\u0627\u06CC\u0627\u0646",
      "\u0622\u0645\u062F",
      "\u0622\u0645\u062F\u0646",
      "\u0622\u0645\u062F\u0647",
      "\u0622\u0645\u0631\u0627\u0646\u0647",
      "\u0622\u0646",
      "\u0622\u0646 \u06AF\u0627\u0647",
      "\u0622\u0646\u0627\u0646",
      "\u0622\u0646\u0627\u0646\u06CC",
      "\u0622\u0646\u062C\u0627",
      "\u0622\u0646\u0631\u0627",
      "\u0622\u0646\u0637\u0648\u0631",
      "\u0622\u0646\u0642\u062F\u0631",
      "\u0622\u0646\u0647\u0627",
      "\u0622\u0646\u0647\u0627\u0633\u062A",
      "\u0622\u0646\u0686\u0646\u0627\u0646",
      "\u0622\u0646\u0686\u0646\u0627\u0646 \u06A9\u0647",
      "\u0622\u0646\u0686\u0647",
      "\u0622\u0646\u06A9\u0647",
      "\u0622\u0646\u06AF\u0627\u0647",
      "\u0622\u0646\u200C\u0647\u0627",
      "\u0622\u0647\u0627\u0646",
      "\u200C\u0647\u0627\u06CC",
      "\u0622\u0647\u0627\u06CC",
      "\u0622\u0648\u0631",
      "\u0622\u0648\u0631\u062F",
      "\u0622\u0648\u0631\u062F\u0646",
      "\u0622\u0648\u0631\u062F\u0647",
      "\u0622\u0648\u0647",
      "\u0622\u06CC",
      "\u0622\u06CC\u0627",
      "\u0622\u06CC\u062F",
      "\u0622\u06CC\u0646\u062F",
      "\u0627",
      "\u0627\u062A\u0641\u0627\u0642\u0627",
      "\u0627\u062B\u0631\u0650",
      "\u0627\u062C\u0631\u0627\u0633\u062A",
      "\u0627\u062D\u062A\u0631\u0627\u0645\u0627",
      "\u0627\u062D\u062A\u0645\u0627\u0644\u0627",
      "\u0627\u062D\u06CC\u0627\u0646\u0627\u064B",
      "\u0627\u062E\u06CC\u0631",
      "\u0627\u062E\u06CC\u0631\u0627\u064B",
      "\u0627\u0631\u06CC",
      "\u0627\u0632",
      "\u0627\u0632 \u0622\u0646 \u067E\u0633",
      "\u0627\u0632 \u062C\u0645\u0644\u0647",
      "\u0627\u0632\u0627\u06CC\u0646 \u0631\u0648",
      "\u0627\u0632\u062C\u0645\u0644\u0647",
      "\u0627\u0632\u0634",
      "\u0627\u0633\u0627\u0633\u0627",
      "\u0627\u0633\u0627\u0633\u0627\u064B",
      "\u0627\u0633\u062A",
      "\u0627\u0633\u062A\u0641\u0627\u062F",
      "\u0627\u0633\u062A\u0641\u0627\u062F\u0647",
      "\u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u0646\u062F",
      "\u0627\u0634",
      "\u0627\u0634\u062A\u0628\u0627\u0647\u0627",
      "\u0627\u0634\u06A9\u0627\u0631\u0627",
      "\u0627\u0635\u0644\u0627",
      "\u0627\u0635\u0644\u0627\u064B",
      "\u0627\u0635\u0648\u0644\u0627",
      "\u0627\u0635\u0648\u0644\u0627\u064B",
      "\u0627\u0639\u0644\u0627\u0645",
      "\u0627\u063A\u0644\u0628",
      "\u0627\u0641\u0632\u0648\u062F",
      "\u0627\u0641\u0633\u0648\u0633",
      "\u0627\u0642\u0644",
      "\u0627\u0642\u0644\u06CC\u062A",
      "\u0627\u0644\u0627",
      "\u0627\u0644\u0627\u0646",
      "\u0627\u0644\u0628\u062A\u0647",
      "\u0627\u0644\u0628\u062A\u0651\u0647",
      "\u0627\u0644\u0647\u06CC",
      "\u0627\u0644\u06CC",
      "\u0627\u0645",
      "\u0627\u0645\u0627",
      "\u0627\u0645\u0631\u0648\u0632",
      "\u0627\u0645\u0631\u0648\u0632\u0647",
      "\u0627\u0645\u0633\u0627\u0644",
      "\u0627\u0645\u0634\u0628",
      "\u0627\u0645\u0648\u0631",
      "\u0627\u0645\u06CC\u062F\u0648\u0627\u0631\u0645",
      "\u0627\u0645\u06CC\u062F\u0648\u0627\u0631\u0646\u062F",
      "\u0627\u0645\u06CC\u062F\u0648\u0627\u0631\u06CC\u0645",
      "\u0627\u0646",
      "\u0627\u0646 \u0634\u0627\u0623\u0627\u0644\u0644\u0647",
      "\u0627\u0646\u062A\u0647\u0627",
      "\u0627\u0646\u062C\u0627\u0645",
      "\u0627\u0646\u062F",
      "\u0627\u0646\u062F\u06A9\u06CC",
      "\u0627\u0646\u0634\u0627\u0627\u0644\u0644\u0647",
      "\u0627\u0646\u0635\u0627\u0641\u0627",
      "\u0627\u0646\u0637\u0648\u0631",
      "\u0627\u0646\u0642\u062F\u0631",
      "\u0627\u0646\u0647\u0627",
      "\u0627\u0646\u0686\u0646\u0627\u0646",
      "\u0627\u0646\u06A9\u0647",
      "\u0627\u0646\u06AF\u0627\u0631",
      "\u0627\u0648",
      "\u0627\u0648\u0633\u062A",
      "\u0627\u0648\u0644",
      "\u0627\u0648\u0644\u0627",
      "\u0627\u0648\u0644\u0627\u064B",
      "\u0627\u0648\u0644\u06CC\u0646",
      "\u0627\u0648\u0646",
      "\u0627\u06A9\u062B\u0631",
      "\u0627\u06A9\u062B\u0631\u0627",
      "\u0627\u06A9\u062B\u0631\u0627\u064B",
      "\u0627\u06A9\u062B\u0631\u06CC\u062A",
      "\u0627\u06A9\u0646\u0648\u0646",
      "\u0627\u06AF\u0631",
      "\u0627\u06AF\u0631 \u0686\u0647",
      "\u0627\u06AF\u0631\u0686\u0647",
      "\u0627\u06AF\u0647",
      "\u0627\u06CC",
      "\u0627\u06CC\u0627",
      "\u0627\u06CC\u062F",
      "\u0627\u06CC\u0634\u0627\u0646",
      "\u0627\u06CC\u0645",
      "\u0627\u06CC\u0646",
      "\u0627\u06CC\u0646 \u062C\u0648\u0631\u06CC",
      "\u0627\u06CC\u0646 \u0642\u062F\u0631",
      "\u0627\u06CC\u0646 \u06AF\u0648\u0646\u0647",
      "\u0627\u06CC\u0646\u0627\u0646",
      "\u0627\u06CC\u0646\u062C\u0627",
      "\u0627\u06CC\u0646\u062C\u0627\u0633\u062A",
      "\u0627\u06CC\u0646\u062F",
      "\u0627\u06CC\u0646\u0637\u0648\u0631",
      "\u0627\u06CC\u0646\u0642\u062F\u0631",
      "\u0627\u06CC\u0646\u0647\u0627",
      "\u0627\u06CC\u0646\u0647\u0627\u0633\u062A",
      "\u0627\u06CC\u0646\u0648",
      "\u0627\u06CC\u0646\u0686\u0646\u06CC\u0646",
      "\u0627\u06CC\u0646\u06A9",
      "\u0627\u06CC\u0646\u06A9\u0647",
      "\u0627\u06CC\u0646\u06AF\u0648\u0646\u0647",
      "\u0628 ",
      "\u0628\u0627",
      "\u0628\u0627\u0627\u06CC\u0646 \u062D\u0627\u0644",
      "\u0628\u0627\u0627\u06CC\u0646 \u0648\u062C\u0648\u062F",
      "\u0628\u0627\u062F",
      "\u0628\u0627\u0631",
      "\u0628\u0627\u0631\u0629",
      "\u0628\u0627\u0631\u0647",
      "\u0628\u0627\u0631\u0647\u0627",
      "\u0628\u0627\u0632",
      "\u0628\u0627\u0632 \u0647\u0645",
      "\u0628\u0627\u0632\u0647\u0645",
      "\u0628\u0627\u0632\u06CC \u06A9\u0646\u0627\u0646",
      "\u0628\u0627\u0632\u06CC\u06AF\u0648\u0634\u0627\u0646\u0647",
      "\u0628\u0627\u0634",
      "\u0628\u0627\u0634\u062F",
      "\u0628\u0627\u0634\u0645",
      "\u0628\u0627\u0634\u0646\u062F",
      "\u0628\u0627\u0634\u06CC",
      "\u0628\u0627\u0634\u06CC\u062F",
      "\u0628\u0627\u0634\u06CC\u0645",
      "\u0628\u0627\u0644\u0627",
      "\u0628\u0627\u0644\u0627\u062E\u0631\u0647",
      "\u0628\u0627\u0644\u0627\u062E\u0635",
      "\u0628\u0627\u0644\u0627\u0633\u062A",
      "\u0628\u0627\u0644\u0627\u06CC",
      "\u0628\u0627\u0644\u0627\u06CC\u0650",
      "\u0628\u0627\u0644\u0637\u0628\u0639",
      "\u0628\u0627\u0644\u0639\u06A9\u0633",
      "\u0628\u0627\u0648\u062C\u0648\u062F\u06CC \u06A9\u0647",
      "\u0628\u0627\u0648\u0631\u0646\u062F",
      "\u0628\u0627\u06CC\u062F",
      "\u0628\u062A\u062F\u0631\u06CC\u062C",
      "\u0628\u062A\u0648\u0627\u0646",
      "\u0628\u062A\u0648\u0627\u0646\u062F",
      "\u0628\u062A\u0648\u0627\u0646\u06CC",
      "\u0628\u062A\u0648\u0627\u0646\u06CC\u0645",
      "\u0628\u062C\u0632",
      "\u0628\u062E\u0634",
      "\u0628\u062E\u0634\u0647",
      "\u0628\u062E\u0634\u06CC",
      "\u0628\u062E\u0635\u0648\u0635",
      "\u0628\u062E\u0648\u0627\u0647",
      "\u0628\u062E\u0648\u0627\u0647\u062F",
      "\u0628\u062E\u0648\u0627\u0647\u0645",
      "\u0628\u062E\u0648\u0627\u0647\u0646\u062F",
      "\u0628\u062E\u0648\u0627\u0647\u06CC",
      "\u0628\u062E\u0648\u0627\u0647\u06CC\u062F",
      "\u0628\u062E\u0648\u0627\u0647\u06CC\u0645",
      "\u0628\u062E\u0648\u0628\u06CC",
      "\u0628\u062F",
      "\u0628\u062F\u0627\u0646",
      "\u0628\u062F\u0627\u0646\u062C\u0627",
      "\u0628\u062F\u0627\u0646\u0647\u0627",
      "\u0628\u062F\u0647\u06CC\u062F",
      "\u0628\u062F\u0648\u0646",
      "\u0628\u062F\u06CC\u0646",
      "\u0628\u062F\u06CC\u0646 \u062A\u0631\u062A\u06CC\u0628",
      "\u0628\u062F\u06CC\u0646\u062C\u0627",
      "\u0628\u0631",
      "\u0628\u0631\u0622\u0646\u0646\u062F",
      "\u0628\u0631\u0627",
      "\u0628\u0631\u0627\u0628\u0631",
      "\u0628\u0631\u0627\u0628\u0631\u0650",
      "\u0628\u0631\u0627\u062D\u062A\u06CC",
      "\u0628\u0631\u0627\u0633\u0627\u0633",
      "\u0628\u0631\u0627\u0633\u062A\u06CC",
      "\u0628\u0631\u0627\u06CC",
      "\u0628\u0631\u0627\u06CC\u062A",
      "\u0628\u0631\u0627\u06CC\u0634",
      "\u0628\u0631\u0627\u06CC\u0634\u0627\u0646",
      "\u0628\u0631\u0627\u06CC\u0645",
      "\u0628\u0631\u0627\u06CC\u0645\u0627\u0646",
      "\u0628\u0631\u0627\u06CC\u0650",
      "\u0628\u0631\u062E\u0648\u0631\u062F\u0627\u0631",
      "\u0628\u0631\u062E\u0648\u0631\u062F\u0627\u0631\u0646\u062F",
      "\u0628\u0631\u062E\u06CC",
      "\u0628\u0631\u062F\u0627\u0631\u06CC",
      "\u0628\u0631\u0639\u06A9\u0633",
      "\u0628\u0631\u0646\u0627\u0645\u0647 \u0633\u0627\u0632\u0647\u0627\u0633\u062A",
      "\u0628\u0631\u0648\u0632",
      "\u0628\u0631\u0648\u0634\u0646\u06CC",
      "\u0628\u0632\u0631\u06AF",
      "\u0628\u0632\u0648\u062F\u06CC",
      "\u0628\u0633",
      "\u0628\u0633\u0627",
      "\u0628\u0633\u0627\u062F\u06AF\u06CC",
      "\u0628\u0633\u062E\u062A\u06CC",
      "\u0628\u0633\u0648\u06CC",
      "\u0628\u0633\u06CC",
      "\u0628\u0633\u06CC\u0627\u0631",
      "\u0628\u0633\u06CC\u0627\u0631\u06CC",
      "\u0628\u0634\u062F\u062A",
      "\u0628\u0637\u0648\u0631",
      "\u0628\u0637\u0648\u0631\u06CC \u06A9\u0647",
      "\u0628\u0639\u062F",
      "\u0628\u0639\u062F \u0627\u0632 \u0627\u06CC\u0646 \u06A9\u0647",
      "\u0628\u0639\u062F\u0627",
      "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
      "\u0628\u0639\u062F\u0627\u064B",
      "\u0628\u0639\u062F\u0647\u0627",
      "\u0628\u0639\u0631\u06CC",
      "\u0628\u0639\u0636\u0627",
      "\u0628\u0639\u0636\u06CC",
      "\u0628\u0639\u0636\u06CC \u0634\u0627\u0646",
      "\u0628\u0639\u0636\u06CC\u0647\u0627\u06CC\u0634\u0627\u0646",
      "\u0628\u0639\u0636\u06CC\u200C\u0647\u0627",
      "\u0628\u0639\u0644\u0627\u0648\u0647",
      "\u0628\u0639\u06CC\u062F",
      "\u0628\u0641\u0647\u0645\u06CC \u0646\u0641\u0647\u0645\u06CC",
      "\u0628\u0644\u0627\u0641\u0627\u0635\u0644\u0647",
      "\u0628\u0644\u0647",
      "\u0628\u0644\u06A9\u0647",
      "\u0628\u0644\u06CC",
      "\u0628\u0645\u0627\u0646\u062F",
      "\u0628\u0646\u0627\u0628\u0631\u0627\u06CC\u0646",
      "\u0628\u0646\u062F\u06CC",
      "\u0628\u0647",
      "\u0628\u0647 \u0622\u0633\u0627\u0646\u06CC",
      "\u0628\u0647 \u062A\u0627\u0632\u06AF\u06CC",
      "\u0628\u0647 \u062A\u062F\u0631\u06CC\u062C",
      "\u0628\u0647 \u062A\u0645\u0627\u0645\u06CC",
      "\u0628\u0647 \u062C\u0627\u06CC",
      "\u0628\u0647 \u062C\u0632",
      "\u0628\u0647 \u062E\u0648\u0628\u06CC",
      "\u0628\u0647 \u062F\u0631\u0634\u062A\u06CC",
      "\u0628\u0647 \u062F\u0644\u062E\u0648\u0627\u0647",
      "\u0628\u0647 \u0631\u0627\u0633\u062A\u06CC",
      "\u0628\u0647 \u0631\u063A\u0645",
      "\u0628\u0647 \u0631\u0648\u0634\u0646\u06CC",
      "\u0628\u0647 \u0632\u0648\u062F\u06CC",
      "\u0628\u0647 \u0633\u0627\u062F\u06AF\u06CC",
      "\u0628\u0647 \u0633\u0631\u0639\u062A",
      "\u0628\u0647 \u0634\u0627\u0646",
      "\u0628\u0647 \u0634\u062F\u062A",
      "\u0628\u0647 \u0637\u0648\u0631 \u06A9\u0644\u06CC",
      "\u0628\u0647 \u0637\u0648\u0631\u06CC \u06A9\u0647",
      "\u0628\u0647 \u0639\u0644\u0627\u0648\u0647",
      "\u0628\u0647 \u0642\u062F\u0631\u06CC",
      "\u0628\u0647 \u0645\u0631\u0627\u062A\u0628",
      "\u0628\u0647 \u0646\u0627\u0686\u0627\u0631",
      "\u0628\u0647 \u0647\u0631\u062D\u0627\u0644",
      "\u0628\u0647 \u0647\u06CC\u0686 \u0648\u062C\u0647",
      "\u0628\u0647 \u0648\u0636\u0648\u062D",
      "\u0628\u0647 \u0648\u06CC\u0698\u0647",
      "\u0628\u0647 \u06A9\u0631\u0627\u062A",
      "\u0628\u0647 \u06AF\u0631\u0645\u06CC",
      "\u0628\u0647\u062A",
      "\u0628\u0647\u062A\u0631",
      "\u0628\u0647\u062A\u0631\u06CC\u0646",
      "\u0628\u0647\u0634",
      "\u0628\u0648\u062F",
      "\u0628\u0648\u062F\u0645",
      "\u0628\u0648\u062F\u0646",
      "\u0628\u0648\u062F\u0646\u062F",
      "\u0628\u0648\u062F\u0647",
      "\u0628\u0648\u062F\u06CC",
      "\u0628\u0648\u062F\u06CC\u062F",
      "\u0628\u0648\u062F\u06CC\u0645",
      "\u0628\u0648\u06CC\u0698\u0647",
      "\u0628\u067E\u0627",
      "\u0628\u06A9\u0627\u0631",
      "\u0628\u06A9\u0646",
      "\u0628\u06A9\u0646\u062F",
      "\u0628\u06A9\u0646\u0645",
      "\u0628\u06A9\u0646\u0646\u062F",
      "\u0628\u06A9\u0646\u06CC",
      "\u0628\u06A9\u0646\u06CC\u062F",
      "\u0628\u06A9\u0646\u06CC\u0645",
      "\u0628\u06AF\u0630\u0627\u0631\u06CC\u0645",
      "\u0628\u06AF\u0648",
      "\u0628\u06AF\u0648\u06CC\u062F",
      "\u0628\u06AF\u0648\u06CC\u0645",
      "\u0628\u06AF\u0648\u06CC\u0646\u062F",
      "\u0628\u06AF\u0648\u06CC\u06CC",
      "\u0628\u06AF\u0648\u06CC\u06CC\u062F",
      "\u0628\u06AF\u0648\u06CC\u06CC\u0645",
      "\u0628\u06AF\u06CC\u0631",
      "\u0628\u06AF\u06CC\u0631\u062F",
      "\u0628\u06AF\u06CC\u0631\u0645",
      "\u0628\u06AF\u06CC\u0631\u0646\u062F",
      "\u0628\u06AF\u06CC\u0631\u06CC",
      "\u0628\u06AF\u06CC\u0631\u06CC\u062F",
      "\u0628\u06AF\u06CC\u0631\u06CC\u0645",
      "\u0628\u06CC",
      "\u0628\u06CC \u0622\u0646\u06A9\u0647",
      "\u0628\u06CC \u0627\u0637\u0644\u0627\u0639\u0646\u062F",
      "\u0628\u06CC \u062A\u0631\u062F\u06CC\u062F",
      "\u0628\u06CC \u062A\u0641\u0627\u0648\u062A\u0646\u062F",
      "\u0628\u06CC \u0646\u06CC\u0627\u0632\u0645\u0646\u062F\u0627\u0646\u0647",
      "\u0628\u06CC \u0647\u062F\u0641",
      "\u0628\u06CC\u0627",
      "\u0628\u06CC\u0627\u0628",
      "\u0628\u06CC\u0627\u0628\u062F",
      "\u0628\u06CC\u0627\u0628\u0645",
      "\u0628\u06CC\u0627\u0628\u0646\u062F",
      "\u0628\u06CC\u0627\u0628\u06CC",
      "\u0628\u06CC\u0627\u0628\u06CC\u062F",
      "\u0628\u06CC\u0627\u0628\u06CC\u0645",
      "\u0628\u06CC\u0627\u0648\u0631",
      "\u0628\u06CC\u0627\u0648\u0631\u062F",
      "\u0628\u06CC\u0627\u0648\u0631\u0645",
      "\u0628\u06CC\u0627\u0648\u0631\u0646\u062F",
      "\u0628\u06CC\u0627\u0648\u0631\u06CC",
      "\u0628\u06CC\u0627\u0648\u0631\u06CC\u062F",
      "\u0628\u06CC\u0627\u0648\u0631\u06CC\u0645",
      "\u0628\u06CC\u0627\u06CC\u062F",
      "\u0628\u06CC\u0627\u06CC\u0645",
      "\u0628\u06CC\u0627\u06CC\u0646\u062F",
      "\u0628\u06CC\u0627\u06CC\u06CC",
      "\u0628\u06CC\u0627\u06CC\u06CC\u062F",
      "\u0628\u06CC\u0627\u06CC\u06CC\u0645",
      "\u0628\u06CC\u0631\u0648\u0646",
      "\u0628\u06CC\u0631\u0648\u0646\u0650",
      "\u0628\u06CC\u0633\u062A",
      "\u0628\u06CC\u0634",
      "\u0628\u06CC\u0634\u062A\u0631",
      "\u0628\u06CC\u0634\u062A\u0631\u06CC",
      "\u0628\u06CC\u0646",
      "\u0628\u06CC\u06AF\u0645\u0627\u0646",
      "\u062A",
      "\u062A\u0627",
      "\u062A\u0627\u0632\u0647",
      "\u062A\u0627\u0646",
      "\u062A\u0627\u06A9\u0646\u0648\u0646",
      "\u062A\u062D\u062A",
      "\u062A\u062D\u0631\u06CC\u0645 \u0647\u0627\u0633\u062A",
      "\u062A\u0631",
      "\u062A\u0631 \u0628\u0631\u0627\u0633\u0627\u0633",
      "\u062A\u0631\u06CC\u0644\u06CC\u0627\u0631\u062F",
      "\u062A\u0631\u06CC\u0644\u06CC\u0648\u0646",
      "\u062A\u0631\u06CC\u0646",
      "\u062A\u0635\u0631\u06CC\u062D\u0627\u064B",
      "\u062A\u0639\u062F\u0627\u062F\u06CC",
      "\u062A\u0639\u0645\u062F\u0627",
      "\u062A\u0642\u0631\u06CC\u0628\u0627",
      "\u062A\u0642\u0631\u06CC\u0628\u0627\u064B",
      "\u062A\u0644\u0648\u06CC\u062D\u0627",
      "\u062A\u0644\u0648\u06CC\u062D\u0627\u064B",
      "\u062A\u0645\u0627\u0645",
      "\u062A\u0645\u0627\u0645 \u0642\u062F",
      "\u062A\u0645\u0627\u0645\u0627",
      "\u062A\u0645\u0627\u0645\u0634\u0627\u0646",
      "\u062A\u0645\u0627\u0645\u06CC",
      "\u062A\u0646\u062F \u062A\u0646\u062F",
      "\u062A\u0646\u0647\u0627",
      "\u062A\u0648",
      "\u062A\u0648\u0624\u0645\u0627\u064B",
      "\u062A\u0648\u0627\u0646",
      "\u062A\u0648\u0627\u0646\u062F",
      "\u062A\u0648\u0627\u0646\u0633\u062A",
      "\u062A\u0648\u0627\u0646\u0633\u062A\u0645",
      "\u062A\u0648\u0627\u0646\u0633\u062A\u0646",
      "\u062A\u0648\u0627\u0646\u0633\u062A\u0646\u062F",
      "\u062A\u0648\u0627\u0646\u0633\u062A\u0647",
      "\u062A\u0648\u0627\u0646\u0633\u062A\u06CC",
      "\u062A\u0648\u0627\u0646\u0633\u062A\u06CC\u0645",
      "\u062A\u0648\u0627\u0646\u0645",
      "\u062A\u0648\u0627\u0646\u0646\u062F",
      "\u062A\u0648\u0627\u0646\u06CC",
      "\u062A\u0648\u0627\u0646\u06CC\u062F",
      "\u062A\u0648\u0627\u0646\u06CC\u0645",
      "\u062A\u0648\u0633\u0637",
      "\u062A\u0648\u0644\u0650",
      "\u062A\u0648\u06CC",
      "\u062A\u0648\u06CC\u0650",
      "\u062A\u06A9 \u062A\u06A9",
      "\u062B",
      "\u062B\u0627\u0644\u062B\u0627\u064B",
      "\u062B\u0627\u0646\u06CC\u0627",
      "\u062B\u0627\u0646\u06CC\u0627\u064B",
      "\u062C",
      "\u062C\u0627",
      "\u062C\u0627\u06CC",
      "\u062C\u0627\u06CC\u06CC",
      "\u062C\u062F\u0627",
      "\u062C\u062F\u0627\u064B",
      "\u062C\u062F\u0627\u06AF\u0627\u0646\u0647",
      "\u062C\u062F\u06CC\u062F",
      "\u062C\u062F\u06CC\u062F\u0627",
      "\u062C\u0631\u0645\u0632\u0627\u0633\u062A",
      "\u062C\u0631\u06CC\u0627\u0646",
      "\u062C\u0632",
      "\u062C\u0644\u0648",
      "\u062C\u0644\u0648\u06AF\u06CC\u0631\u06CC",
      "\u062C\u0644\u0648\u06CC",
      "\u062C\u0644\u0648\u06CC\u0650",
      "\u062C\u0645\u0639 \u0627\u0646\u062F",
      "\u062C\u0645\u0639\u0627",
      "\u062C\u0645\u0639\u06CC",
      "\u062C\u0646\u0627\u0628\u0639\u0627\u0644\u06CC",
      "\u062C\u0646\u0627\u062D",
      "\u062C\u0646\u0633 \u0627\u0646\u062F",
      "\u062C\u0647\u062A",
      "\u062C\u0648\u0631",
      "\u062D",
      "\u062D\u0627\u0634\u06CC\u0647\u200C\u0627\u06CC",
      "\u062D\u0627\u0636\u0631",
      "\u062D\u0627\u0636\u0631\u0645",
      "\u062D\u0627\u0644",
      "\u062D\u0627\u0644\u0627",
      "\u062D\u0627\u06A9\u06CC\u0633\u062A",
      "\u062D\u062A\u0645\u0627",
      "\u062D\u062A\u0645\u0627\u064B",
      "\u062D\u062A\u06CC",
      "\u062D\u062F\u0627\u0642\u0644",
      "\u062D\u062F\u0627\u06A9\u062B\u0631",
      "\u062D\u062F\u0648\u062F",
      "\u062D\u062F\u0648\u062F\u0627",
      "\u062D\u062F\u0648\u062F\u0650",
      "\u062D\u0633\u0627\u0628\u06AF\u0631\u0627\u0646\u0647",
      "\u062D\u0636\u0631\u062A\u0639\u0627\u0644\u06CC",
      "\u062D\u0642",
      "\u062D\u0642\u06CC\u0631\u0627\u0646\u0647",
      "\u062D\u0642\u06CC\u0642\u062A\u0627",
      "\u062D\u0648\u0644",
      "\u062D\u06A9\u0645\u0627\u064B",
      "\u062E",
      "\u062E\u0627\u0631\u062C\u0650",
      "\u062E\u0627\u0644\u0635\u0627\u0646\u0647",
      "\u062E\u0628",
      "\u062E\u062F\u0627\u062D\u0627\u0641\u0638",
      "\u062E\u062F\u0627\u0633\u062A",
      "\u062E\u062F\u0645\u0627\u062A",
      "\u062E\u0633\u062A\u0647\u200C\u0627\u06CC",
      "\u062E\u0635\u0648\u0635\u0627",
      "\u062E\u0635\u0648\u0635\u0627\u064B",
      "\u062E\u0644\u0627\u0635\u0647",
      "\u062E\u0648\u0627\u0633\u062A",
      "\u062E\u0648\u0627\u0633\u062A\u0645",
      "\u062E\u0648\u0627\u0633\u062A\u0646",
      "\u062E\u0648\u0627\u0633\u062A\u0646\u062F",
      "\u062E\u0648\u0627\u0633\u062A\u0647",
      "\u062E\u0648\u0627\u0633\u062A\u06CC",
      "\u062E\u0648\u0627\u0633\u062A\u06CC\u062F",
      "\u062E\u0648\u0627\u0633\u062A\u06CC\u0645",
      "\u062E\u0648\u0627\u0647",
      "\u062E\u0648\u0627\u0647\u062F",
      "\u062E\u0648\u0627\u0647\u0645",
      "\u062E\u0648\u0627\u0647\u0646\u062F",
      "\u062E\u0648\u0627\u0647\u06CC",
      "\u062E\u0648\u0627\u0647\u06CC\u062F",
      "\u062E\u0648\u0627\u0647\u06CC\u0645",
      "\u062E\u0648\u0628",
      "\u062E\u0648\u062F",
      "\u062E\u0648\u062F \u0628\u0647 \u062E\u0648\u062F",
      "\u062E\u0648\u062F\u0628\u0647 \u062E\u0648\u062F\u06CC",
      "\u062E\u0648\u062F\u062A",
      "\u062E\u0648\u062F\u062A\u0627\u0646",
      "\u062E\u0648\u062F\u062A\u0648",
      "\u062E\u0648\u062F\u0634",
      "\u062E\u0648\u062F\u0634\u0627\u0646",
      "\u062E\u0648\u062F\u0645",
      "\u062E\u0648\u062F\u0645\u0627\u0646",
      "\u062E\u0648\u062F\u0645\u0648",
      "\u062E\u0648\u0634",
      "\u062E\u0648\u0634\u0628\u062E\u062A\u0627\u0646\u0647",
      "\u062E\u0648\u06CC\u0634",
      "\u062E\u0648\u06CC\u0634\u062A\u0646",
      "\u062E\u0648\u06CC\u0634\u062A\u0646\u0645",
      "\u062E\u06CC\u0627\u0647",
      "\u062E\u06CC\u0631",
      "\u062E\u06CC\u0631\u0647",
      "\u062E\u06CC\u0644\u06CC",
      "\u062F",
      "\u062F\u0627",
      "\u062F\u0627\u0627\u0645",
      "\u062F\u0627\u0627\u0645\u0627",
      "\u062F\u0627\u062E\u0644",
      "\u062F\u0627\u062F",
      "\u062F\u0627\u062F\u0645",
      "\u062F\u0627\u062F\u0646",
      "\u062F\u0627\u062F\u0646\u062F",
      "\u062F\u0627\u062F\u0647",
      "\u062F\u0627\u062F\u06CC",
      "\u062F\u0627\u062F\u06CC\u062F",
      "\u062F\u0627\u062F\u06CC\u0645",
      "\u062F\u0627\u0631",
      "\u062F\u0627\u0631\u0627\u0633\u062A",
      "\u062F\u0627\u0631\u062F",
      "\u062F\u0627\u0631\u0645",
      "\u062F\u0627\u0631\u0646\u062F",
      "\u062F\u0627\u0631\u06CC",
      "\u062F\u0627\u0631\u06CC\u062F",
      "\u062F\u0627\u0631\u06CC\u0645",
      "\u062F\u0627\u0634\u062A",
      "\u062F\u0627\u0634\u062A\u0645",
      "\u062F\u0627\u0634\u062A\u0646",
      "\u062F\u0627\u0634\u062A\u0646\u062F",
      "\u062F\u0627\u0634\u062A\u0647",
      "\u062F\u0627\u0634\u062A\u06CC",
      "\u062F\u0627\u0634\u062A\u06CC\u062F",
      "\u062F\u0627\u0634\u062A\u06CC\u0645",
      "\u062F\u0627\u0645\u0645",
      "\u062F\u0627\u0646\u0633\u062A",
      "\u062F\u0627\u0646\u0646\u062F",
      "\u062F\u0627\u06CC\u0645",
      "\u062F\u0627\u06CC\u0645\u0627",
      "\u062F\u0631",
      "\u062F\u0631 \u0628\u0627\u0631\u0647",
      "\u062F\u0631 \u0628\u0627\u0631\u0647\u064C",
      "\u062F\u0631 \u062B\u0627\u0646\u06CC",
      "\u062F\u0631 \u0645\u062C\u0645\u0648\u0639",
      "\u062F\u0631 \u0646\u0647\u0627\u06CC\u062A",
      "\u062F\u0631 \u0648\u0627\u0642\u0639",
      "\u062F\u0631 \u06A9\u0644",
      "\u062F\u0631 \u06A9\u0646\u0627\u0631",
      "\u062F\u0631\u0627\u06CC\u0646 \u0645\u06CC\u0627\u0646",
      "\u062F\u0631\u0628\u0627\u0631\u0647",
      "\u062F\u0631\u062D\u0627\u0644\u06CC \u06A9\u0647",
      "\u062F\u0631\u062D\u0627\u0644\u06CC\u06A9\u0647",
      "\u062F\u0631\u0633\u062A",
      "\u062F\u0631\u0633\u062A \u0648 \u062D\u0633\u0627\u0628\u06CC",
      "\u062F\u0631\u0633\u062A\u0647",
      "\u062F\u0631\u0635\u0648\u0631\u062A\u06CC \u06A9\u0647",
      "\u062F\u0631\u0639\u06CC\u0646 \u062D\u0627\u0644",
      "\u062F\u0631\u0645\u062C\u0645\u0648\u0639",
      "\u062F\u0631\u0648\u0627\u0642\u0639",
      "\u062F\u0631\u0648\u0646",
      "\u062F\u0631\u06CC\u063A",
      "\u062F\u0631\u06CC\u063A\u0627",
      "\u062F\u0631\u06CC\u0646",
      "\u062F\u0633\u062A\u0647 \u062F\u0633\u062A\u0647",
      "\u062F\u0634\u0645\u0646\u06CC\u0645",
      "\u062F\u0642\u06CC\u0642\u0627",
      "\u062F\u0645",
      "\u062F\u0646\u0628\u0627\u0644\u0650",
      "\u062F\u0647",
      "\u062F\u0647\u062F",
      "\u062F\u0647\u0645",
      "\u062F\u0647\u0646\u062F",
      "\u062F\u0647\u06CC",
      "\u062F\u0647\u06CC\u062F",
      "\u062F\u0647\u06CC\u0645",
      "\u062F\u0648",
      "\u062F\u0648 \u0631\u0648\u0632\u0647",
      "\u062F\u0648\u0628\u0627\u0631\u0647",
      "\u062F\u0648\u0645",
      "\u062F\u06CC\u062F\u0647",
      "\u062F\u06CC\u0631",
      "\u062F\u06CC\u0631\u062A",
      "\u062F\u06CC\u0631\u0645",
      "\u062F\u06CC\u0631\u0648\u0632",
      "\u062F\u06CC\u0634\u0628",
      "\u062F\u06CC\u0648\u0627\u0646\u0647\u200C\u0627\u06CC",
      "\u062F\u06CC\u0648\u06CC",
      "\u062F\u06CC\u06AF\u0631",
      "\u062F\u06CC\u06AF\u0631\u0627\u0646",
      "\u062F\u06CC\u06AF\u0631\u06CC",
      "\u062F\u06CC\u06AF\u0647",
      "\u0630",
      "\u0630\u0627\u062A\u0627\u064B",
      "\u0631",
      "\u0631\u0627",
      "\u0631\u0627\u062C\u0639 \u0628\u0647",
      "\u0631\u0627\u062D\u062A",
      "\u0631\u0627\u0633\u0627",
      "\u0631\u0627\u0633\u062A",
      "\u0631\u0627\u0633\u062A\u06CC",
      "\u0631\u0633\u0645\u0627",
      "\u0631\u0633\u06CC\u062F",
      "\u0631\u0633\u06CC\u062F\u0647",
      "\u0631\u0634\u062A\u0647",
      "\u0631\u0641\u062A",
      "\u0631\u0641\u062A\u0627\u0631\u0647\u0627\u0633\u062A",
      "\u0631\u0641\u062A\u0647",
      "\u0631\u0646\u062C\u0646\u062F",
      "\u0631\u0647\u06AF\u0634\u0627\u0633\u062A",
      "\u0631\u0648",
      "\u0631\u0648\u0627\u0633\u062A",
      "\u0631\u0648\u0628",
      "\u0631\u0648\u0628\u0631\u0648\u0633\u062A",
      "\u0631\u0648\u0632",
      "\u0631\u0648\u0632 \u0628\u0647 \u0631\u0648\u0632",
      "\u0631\u0648\u0632\u0627\u0646\u0647",
      "\u0631\u0648\u0632\u0647 \u0627\u06CC\u0645",
      "\u0631\u0648\u0632\u0647 \u0633\u062A",
      "\u0631\u0648\u0632\u0647 \u0645",
      "\u0631\u0648\u0632\u0647\u0627\u06CC",
      "\u0631\u0648\u0632\u0647\u200C\u0627\u06CC",
      "\u0631\u0648\u0634",
      "\u0631\u0648\u06CC",
      "\u0631\u0648\u06CC\u0634",
      "\u0631\u0648\u06CC\u0650",
      "\u0631\u06CC\u0632\u06CC",
      "\u0632",
      "\u0632\u0634\u062A\u06A9\u0627\u0631\u0627\u0646\u0646\u062F",
      "\u0632\u0645\u0627\u0646",
      "\u0632\u0645\u0627\u0646\u06CC",
      "\u0632\u0645\u06CC\u0646\u0647",
      "\u0632\u0646\u0646\u062F",
      "\u0632\u0647\u06CC",
      "\u0632\u0648\u062F",
      "\u0632\u0648\u062F\u062A\u0631",
      "\u0632\u06CC\u0627\u062F",
      "\u0632\u06CC\u0627\u062F\u0647",
      "\u0632\u06CC\u0631",
      "\u0632\u06CC\u0631\u0627",
      "\u0632\u06CC\u0631\u0650",
      "\u0632\u06CC\u0631\u0686\u0634\u0645\u06CC",
      "\u0633",
      "\u0633\u0627\u0628\u0642",
      "\u0633\u0627\u062E\u062A\u0647",
      "\u0633\u0627\u062F\u0647 \u0627\u0646\u062F",
      "\u0633\u0627\u0632\u06CC",
      "\u0633\u0627\u0644\u0627\u0646\u0647",
      "\u0633\u0627\u0644\u062A\u0647",
      "\u0633\u0627\u0644\u0645\u200C\u062A\u0631",
      "\u0633\u0627\u0644\u0647\u0627\u0633\u062A",
      "\u0633\u0627\u0644\u06CC\u0627\u0646\u0647",
      "\u0633\u0627\u06A9\u0646\u0646\u062F",
      "\u0633\u0627\u06CC\u0631",
      "\u0633\u062E\u062A",
      "\u0633\u062E\u062A\u0647",
      "\u0633\u0631",
      "\u0633\u0631\u0627\u0633\u0631",
      "\u0633\u0631\u0627\u0646\u062C\u0627\u0645",
      "\u0633\u0631\u0627\u067E\u0627",
      "\u0633\u0631\u06CC",
      "\u0633\u0631\u06CC\u0639",
      "\u0633\u0631\u06CC\u0639\u0627",
      "\u0633\u0631\u06CC\u0639\u0627\u064B",
      "\u0633\u0631\u06CC\u0650",
      "\u0633\u0639\u06CC",
      "\u0633\u0645\u062A\u0650",
      "\u0633\u0647 \u0628\u0627\u0631\u0647",
      "\u0633\u0647\u0648\u0627\u064B",
      "\u0633\u0648\u0645",
      "\u0633\u0648\u06CC",
      "\u0633\u0648\u06CC\u0650",
      "\u0633\u067E\u0633",
      "\u0633\u06CC\u0627\u0647 \u0686\u0627\u0644\u0647 \u0647\u0627\u0633\u062A",
      "\u0633\u06CC\u062E",
      "\u0634",
      "\u0634\u0627\u0646",
      "\u0634\u0627\u0647\u062F\u0646\u062F",
      "\u0634\u0627\u0647\u062F\u06CC\u0645",
      "\u0634\u0627\u06CC\u062F",
      "\u0634\u0628\u0647\u0627\u0633\u062A",
      "\u0634\u062E\u0635\u0627",
      "\u0634\u062E\u0635\u0627\u064B",
      "\u0634\u062F",
      "\u0634\u062F\u0645",
      "\u0634\u062F\u0646",
      "\u0634\u062F\u0646\u062F",
      "\u0634\u062F\u0647",
      "\u0634\u062F\u06CC",
      "\u0634\u062F\u06CC\u062F",
      "\u0634\u062F\u06CC\u062F\u0627",
      "\u0634\u062F\u06CC\u062F\u0627\u064B",
      "\u0634\u062F\u06CC\u0645",
      "\u0634\u0634",
      "\u0634\u0634 \u0646\u062F\u0627\u0634\u062A\u0647",
      "\u0634\u0645\u0627",
      "\u0634\u0645\u0627\u0631\u06CC",
      "\u0634\u0645\u0627\u0633\u062A",
      "\u0634\u0645\u0627\u06CC\u0646\u062F",
      "\u0634\u0646\u0627\u0633\u06CC",
      "\u0634\u0648",
      "\u0634\u0648\u062F",
      "\u0634\u0648\u0631\u0627\u0633\u062A",
      "\u0634\u0648\u0642\u0645",
      "\u0634\u0648\u0645",
      "\u0634\u0648\u0646\u062F",
      "\u0634\u0648\u0646\u062F\u0647",
      "\u0634\u0648\u06CC",
      "\u0634\u0648\u06CC\u062F",
      "\u0634\u0648\u06CC\u0645",
      "\u0634\u06CC\u0631\u06CC\u0646",
      "\u0634\u06CC\u0631\u06CC\u0646\u0647",
      "\u0634\u06CC\u06A9",
      "\u0635",
      "\u0635\u062F",
      "\u0635\u062F\u062F\u0631\u0635\u062F",
      "\u0635\u0631\u0641\u0627",
      "\u0635\u0631\u0641\u0627\u064B",
      "\u0635\u0631\u06CC\u062D\u0627\u064B",
      "\u0635\u0646\u062F\u0648\u0642 \u0647\u0627\u0633\u062A",
      "\u0635\u0648\u0631\u062A",
      "\u0636",
      "\u0636\u062F\u0650\u0651",
      "\u0636\u062F\u0651\u0650",
      "\u0636\u0645\u0646",
      "\u0636\u0645\u0646\u0627\u064B",
      "\u0637",
      "\u0637\u0628\u0639\u0627",
      "\u0637\u0628\u0639\u0627\u064B",
      "\u0637\u0628\u0642\u0650",
      "\u0637\u0628\u06CC\u0639\u062A\u0627",
      "\u0637\u0631\u0641",
      "\u0637\u0631\u06CC\u0642",
      "\u0637\u0644\u0628\u06A9\u0627\u0631\u0627\u0646\u0647",
      "\u0637\u0648\u0631",
      "\u0637\u06CC",
      "\u0638",
      "\u0638\u0627\u0647\u0631\u0627",
      "\u0638\u0627\u0647\u0631\u0627\u064B",
      "\u0639",
      "\u0639\u0627\u062C\u0632\u0627\u0646\u0647",
      "\u0639\u0627\u0642\u0628\u062A",
      "\u0639\u0628\u0627\u0631\u062A\u0646\u062F",
      "\u0639\u062C\u0628",
      "\u0639\u062C\u0648\u0644\u0627\u0646\u0647",
      "\u0639\u062F\u0645",
      "\u0639\u0631\u0641\u0627\u0646\u06CC",
      "\u0639\u0642\u0628",
      "\u0639\u0642\u0628\u0650",
      "\u0639\u0644\u0627\u0648\u0647 \u0628\u0631",
      "\u0639\u0644\u0627\u0648\u0647 \u0628\u0631 \u0622\u0646",
      "\u0639\u0644\u0627\u0648\u0647 \u0628\u0631\u0622\u0646",
      "\u0639\u0644\u0646\u0627\u064B",
      "\u0639\u0644\u0651\u062A\u0650",
      "\u0639\u0644\u06CC \u0627\u0644\u0638\u0627\u0647\u0631",
      "\u0639\u0644\u06CC \u0631\u063A\u0645",
      "\u0639\u0644\u06CC\u0631\u063A\u0645",
      "\u0639\u0644\u06CC\u0647",
      "\u0639\u0645\u062F\u0627",
      "\u0639\u0645\u062F\u0627\u064B",
      "\u0639\u0645\u062F\u062A\u0627",
      "\u0639\u0645\u062F\u062A\u0627\u064B",
      "\u0639\u0645\u062F\u0647",
      "\u0639\u0645\u0644",
      "\u0639\u0645\u0644\u0627",
      "\u0639\u0645\u0644\u0627\u064B",
      "\u0639\u0645\u0644\u06CC \u0627\u0646\u062F",
      "\u0639\u0645\u0648\u0645",
      "\u0639\u0645\u0648\u0645\u0627",
      "\u0639\u0645\u0648\u0645\u0627\u064B",
      "\u0639\u0646\u0642\u0631\u06CC\u0628",
      "\u0639\u0646\u0648\u0627\u0646",
      "\u0639\u0646\u0648\u0627\u0646\u0650",
      "\u0639\u06CC\u0646\u0627\u064B",
      "\u063A",
      "\u063A\u0627\u0644\u0628\u0627",
      "\u063A\u0632\u0627\u0644\u0627\u0646",
      "\u063A\u06CC\u0631",
      "\u063A\u06CC\u0631\u0642\u0627\u0646\u0648\u0646\u06CC",
      "\u0641",
      "\u0641\u0627\u0642\u062F",
      "\u0641\u0628\u0647\u0627",
      "\u0641\u0631",
      "\u0641\u0631\u062F\u0627",
      "\u0641\u0639\u0644\u0627",
      "\u0641\u0639\u0644\u0627\u064B",
      "\u0641\u0642\u0637",
      "\u0641\u0644\u0627\u0646",
      "\u0641\u0644\u0630\u0627",
      "\u0641\u0648\u0642",
      "\u0641\u06A9\u0631",
      "\u0642",
      "\u0642\u0627\u0627\u0644\u0646\u062F",
      "\u0642\u0627\u0628\u0644",
      "\u0642\u0627\u0637\u0628\u0647",
      "\u0642\u0627\u0637\u0639\u0627\u0646\u0647",
      "\u0642\u0627\u0639\u062F\u062A\u0627\u064B",
      "\u0642\u0627\u0646\u0648\u0646\u0627\u064B",
      "\u0642\u0628\u0644",
      "\u0642\u0628\u0644\u0627",
      "\u0642\u0628\u0644\u0627\u064B",
      "\u0642\u0628\u0644\u0646\u062F",
      "\u0642\u062F\u0631",
      "\u0642\u062F\u0631\u06CC",
      "\u0642\u0635\u062F\u0650",
      "\u0642\u0636\u0627\u06CC\u0627\u0633\u062A",
      "\u0642\u0637\u0639\u0627",
      "\u0642\u0637\u0639\u0627\u064B",
      "\u0644",
      "\u0644\u0627\u0627\u0642\u0644",
      "\u0644\u0627\u062C\u0631\u0645",
      "\u0644\u0628",
      "\u0644\u0630\u0627",
      "\u0644\u0632\u0648\u0645\u0627\u064B",
      "\u0644\u0637\u0641\u0627",
      "\u0644\u0637\u0641\u0627\u064B",
      "\u0644\u06CC\u06A9\u0646",
      "\u0645",
      "\u0645\u0627",
      "\u0645\u0627\u062F\u0627\u0645\u06CC",
      "\u0645\u0627\u0633\u062A",
      "\u0645\u0627\u0645\u0627\u0646 \u0645\u0627\u0645\u0627\u0646 \u06AF\u0648\u06CC\u0627\u0646",
      "\u0645\u0627\u0646",
      "\u0645\u0627\u0646\u0646\u062F",
      "\u0645\u0627\u0646\u0646\u062F\u0650",
      "\u0645\u0628\u0627\u062F\u0627",
      "\u0645\u062A\u0624\u0633\u0641\u0627\u0646\u0647",
      "\u0645\u062A\u0627\u0633\u0641\u0627\u0646\u0647",
      "\u0645\u062A\u0639\u0627\u0642\u0628\u0627",
      "\u0645\u062A\u0641\u0627\u0648\u062A\u0646\u062F",
      "\u0645\u062B\u0644",
      "\u0645\u062B\u0644\u0627",
      "\u0645\u062B\u0644\u0650",
      "\u0645\u062C\u0627\u0646\u06CC",
      "\u0645\u062C\u0628\u0648\u0631\u0646\u062F",
      "\u0645\u062C\u062F\u062F\u0627",
      "\u0645\u062C\u062F\u062F\u0627\u064B",
      "\u0645\u062C\u0645\u0648\u0639\u0627",
      "\u0645\u062C\u0645\u0648\u0639\u0627\u064B",
      "\u0645\u062D\u062A\u0627\u062C\u0646\u062F",
      "\u0645\u062D\u06A9\u0645",
      "\u0645\u062D\u06A9\u0645\u200C\u062A\u0631",
      "\u0645\u062E\u0627\u0644\u0641\u0646\u062F",
      "\u0645\u062E\u062A\u0644\u0641",
      "\u0645\u062E\u0635\u0648\u0635\u0627\u064B",
      "\u0645\u062F\u0627\u0645",
      "\u0645\u062F\u062A",
      "\u0645\u062F\u062A\u0647\u0627\u0633\u062A",
      "\u0645\u062F\u0651\u062A\u06CC",
      "\u0645\u0630\u0647\u0628\u06CC \u0627\u0646\u062F",
      "\u0645\u0631\u0627",
      "\u0645\u0631\u062A\u0628",
      "\u0645\u0631\u062F\u0627\u0646\u0647",
      "\u0645\u0631\u062F\u0645",
      "\u0645\u0631\u062F\u0645 \u0627\u0646\u062F",
      "\u0645\u0631\u0633\u06CC",
      "\u0645\u0633\u062A\u062D\u0636\u0631\u06CC\u062F",
      "\u0645\u0633\u062A\u0642\u06CC\u0645\u0627",
      "\u0645\u0633\u062A\u0646\u062F",
      "\u0645\u0633\u0644\u0645\u0627",
      "\u0645\u0634\u062A",
      "\u0645\u0634\u062A\u0631\u06A9\u0627\u064B",
      "\u0645\u0634\u063A\u0648\u0644\u0646\u062F",
      "\u0645\u0637\u0645\u0627\u0646\u0627",
      "\u0645\u0637\u0645\u0627\u0646\u0645",
      "\u0645\u0637\u0645\u06CC\u0646\u0627",
      "\u0645\u0639 \u0627\u0644\u0627\u0633\u0641",
      "\u0645\u0639 \u0630\u0644\u06A9",
      "\u0645\u0639\u062A\u0642\u062F\u0645",
      "\u0645\u0639\u062A\u0642\u062F\u0646\u062F",
      "\u0645\u0639\u062A\u0642\u062F\u06CC\u0645",
      "\u0645\u0639\u062F\u0648\u062F",
      "\u0645\u0639\u0630\u0648\u0631\u06CC\u0645",
      "\u0645\u0639\u0644\u0648\u0645\u0647",
      "\u0645\u0639\u0645\u0648\u0644\u0627",
      "\u0645\u0639\u0645\u0648\u0644\u0627\u064B",
      "\u0645\u0639\u0645\u0648\u0644\u06CC",
      "\u0645\u063A\u0631\u0636\u0627\u0646\u0647",
      "\u0645\u0641\u06CC\u062F\u0646\u062F",
      "\u0645\u0642\u0627\u0628\u0644",
      "\u0645\u0642\u062F\u0627\u0631",
      "\u0645\u0642\u0635\u0631\u0646\u062F",
      "\u0645\u0642\u0635\u0631\u06CC",
      "\u0645\u0644\u06CC\u0627\u0631\u062F",
      "\u0645\u0644\u06CC\u0648\u0646",
      "\u0645\u0645\u06A9\u0646",
      "\u0645\u0645\u06CC\u0632\u06CC\u0647\u0627\u0633\u062A",
      "\u0645\u0646",
      "\u0645\u0646\u062A\u0647\u06CC",
      "\u0645\u0646\u0637\u0642\u06CC",
      "\u0645\u0646\u06CC",
      "\u0645\u0648\u0627\u062C\u0647\u0646\u062F",
      "\u0645\u0648\u0627\u0631\u062F",
      "\u0645\u0648\u062C\u0648\u062F\u0646\u062F",
      "\u0645\u0648\u0631\u062F",
      "\u0645\u0648\u0642\u062A\u0627",
      "\u0645\u06A9\u0631\u0631",
      "\u0645\u06A9\u0631\u0631\u0627\u064B",
      "\u0645\u06AF\u0631",
      "\u0645\u06AF\u0631 \u0622\u0646 \u06A9\u0647",
      "\u0645\u06AF\u0631 \u0627\u06CC\u0646 \u06A9\u0647",
      "\u0645\u06AF\u0648",
      "\u0645\u06CC",
      "\u0645\u06CC\u0627\u0646",
      "\u0645\u06CC\u0632\u0627\u0646",
      "\u0645\u06CC\u0644\u06CC\u0627\u0631\u062F",
      "\u0645\u06CC\u0644\u06CC\u0648\u0646",
      "\u0645\u06CC\u06A9\u0646\u062F",
      "\u0645\u06CC\u06A9\u0646\u0645",
      "\u0645\u06CC\u06A9\u0646\u0646\u062F",
      "\u0645\u06CC\u06A9\u0646\u06CC",
      "\u0645\u06CC\u06A9\u0646\u06CC\u062F",
      "\u0645\u06CC\u06A9\u0646\u06CC\u0645",
      "\u0645\u06CC\u200C\u062A\u0648\u0627\u0646\u062F",
      "\u0645\u06CC\u200C\u062E\u0648\u0627\u0647\u06CC\u0645",
      "\u0645\u06CC\u200C\u062F\u0627\u0646\u062F",
      "\u0645\u06CC\u200C\u0631\u0633\u062F",
      "\u0645\u06CC\u200C\u0631\u0648\u062F",
      "\u0645\u06CC\u200C\u0634\u0648\u062F",
      "\u0645\u06CC\u200C\u06A9\u0646\u0645",
      "\u0645\u06CC\u200C\u06A9\u0646\u0646\u062F",
      "\u0645\u06CC\u200C\u06A9\u0646\u06CC\u0645",
      "\u0646",
      "\u0646\u0627\u0627\u0645\u06CC\u062F",
      "\u0646\u0627\u062E\u0648\u0627\u0633\u062A\u0647",
      "\u0646\u0627\u0631\u0627\u0636\u06CC \u0627\u0646\u062F",
      "\u0646\u0627\u0634\u06CC",
      "\u0646\u0627\u0645",
      "\u0646\u0627\u06AF\u0627\u0647",
      "\u0646\u0627\u06AF\u0632\u06CC\u0631",
      "\u0646\u0627\u06AF\u0647\u0627\u0646",
      "\u0646\u0627\u06AF\u0647\u0627\u0646\u06CC",
      "\u0646\u0628\u0627\u06CC\u062F",
      "\u0646\u0628\u0634",
      "\u0646\u0628\u0648\u062F",
      "\u0646\u062E\u0633\u062A",
      "\u0646\u062E\u0633\u062A\u06CC\u0646",
      "\u0646\u062E\u0648\u0627\u0647\u062F",
      "\u0646\u062E\u0648\u0627\u0647\u0645",
      "\u0646\u062E\u0648\u0627\u0647\u0646\u062F",
      "\u0646\u062E\u0648\u0627\u0647\u06CC",
      "\u0646\u062E\u0648\u0627\u0647\u06CC\u062F",
      "\u0646\u062E\u0648\u0627\u0647\u06CC\u0645",
      "\u0646\u062E\u0648\u062F\u06CC",
      "\u0646\u062F\u0627\u0631\u062F",
      "\u0646\u062F\u0627\u0631\u0645",
      "\u0646\u062F\u0627\u0631\u0646\u062F",
      "\u0646\u062F\u0627\u0631\u06CC",
      "\u0646\u062F\u0627\u0631\u06CC\u062F",
      "\u0646\u062F\u0627\u0631\u06CC\u0645",
      "\u0646\u062F\u0627\u0634\u062A",
      "\u0646\u062F\u0627\u0634\u062A\u0645",
      "\u0646\u062F\u0627\u0634\u062A\u0646\u062F",
      "\u0646\u062F\u0627\u0634\u062A\u0647",
      "\u0646\u062F\u0627\u0634\u062A\u06CC",
      "\u0646\u062F\u0627\u0634\u062A\u06CC\u062F",
      "\u0646\u062F\u0627\u0634\u062A\u06CC\u0645",
      "\u0646\u0632\u062F",
      "\u0646\u0632\u062F\u0650",
      "\u0646\u0632\u062F\u06CC\u06A9",
      "\u0646\u0632\u062F\u06CC\u06A9\u0650",
      "\u0646\u0633\u0628\u062A\u0627",
      "\u0646\u0634\u0627\u0646",
      "\u0646\u0634\u062F\u0647",
      "\u0646\u0638\u06CC\u0631",
      "\u0646\u0641\u0631\u0646\u062F",
      "\u0646\u0645\u0627\u06CC\u062F",
      "\u0646\u0645\u0648\u062F\u0647",
      "\u0646\u0645\u06CC",
      "\u0646\u0645\u06CC\u200C\u0634\u0648\u062F",
      "\u0646\u0645\u06CC\u200C\u06A9\u0646\u062F",
      "\u0646\u0647",
      "\u0646\u0647 \u062A\u0646\u0647\u0627",
      "\u0646\u0647\u0627\u06CC\u062A\u0627",
      "\u0646\u0647\u0627\u06CC\u062A\u0627\u064B",
      "\u0646\u0648\u0639",
      "\u0646\u0648\u0639\u0627\u064B",
      "\u0646\u0648\u0639\u06CC",
      "\u0646\u06A9\u0631\u062F\u0647",
      "\u0646\u06A9\u0646",
      "\u0646\u06A9\u0646\u062F",
      "\u0646\u06A9\u0646\u0645",
      "\u0646\u06A9\u0646\u0646\u062F",
      "\u0646\u06A9\u0646\u06CC",
      "\u0646\u06A9\u0646\u06CC\u062F",
      "\u0646\u06A9\u0646\u06CC\u0645",
      "\u0646\u06AF\u0627\u0647",
      "\u0646\u06AF\u0648",
      "\u0646\u06CC\u0627\u0632\u0645\u0646\u062F\u0646\u062F",
      "\u0646\u06CC\u0632",
      "\u0646\u06CC\u0633\u062A",
      "\u0646\u06CC\u0633\u062A\u0645",
      "\u0646\u06CC\u0633\u062A\u0646\u062F",
      "\u0646\u06CC\u0633\u062A\u06CC\u0645",
      "\u0646\u06CC\u0645\u06CC",
      "\u0647",
      "\u0647\u0627",
      "\u0647\u0627\u06CC",
      "\u0647\u0627\u06CC\u06CC",
      "\u0647\u0628\u0686",
      "\u0647\u0631",
      "\u0647\u0631 \u0627\u0632 \u06AF\u0627\u0647\u06CC",
      "\u0647\u0631 \u0686\u0646\u062F",
      "\u0647\u0631 \u0686\u0646\u062F \u06A9\u0647",
      "\u0647\u0631 \u0686\u0647",
      "\u0647\u0631\u0686\u0646\u062F",
      "\u0647\u0631\u0686\u0647",
      "\u0647\u0631\u06A9\u0633",
      "\u0647\u0631\u06AF\u0627\u0647",
      "\u0647\u0631\u06AF\u0632",
      "\u0647\u0632\u0627\u0631",
      "\u0647\u0633\u062A",
      "\u0647\u0633\u062A\u0645",
      "\u0647\u0633\u062A\u0646\u062F",
      "\u0647\u0633\u062A\u06CC",
      "\u0647\u0633\u062A\u06CC\u062F",
      "\u0647\u0633\u062A\u06CC\u0645",
      "\u0647\u0641\u062A",
      "\u0647\u0642 \u0647\u0642 \u06A9\u0646\u0627\u0646",
      "\u0647\u0645",
      "\u0647\u0645 \u0627\u06A9\u0646\u0648\u0646",
      "\u0647\u0645 \u0627\u06CC\u0646\u06A9",
      "\u0647\u0645\u0627\u0646",
      "\u0647\u0645\u0627\u0646 \u0637\u0648\u0631 \u06A9\u0647",
      "\u0647\u0645\u0627\u0646 \u06AF\u0648\u0646\u0647 \u06A9\u0647",
      "\u0647\u0645\u0627\u0646\u0627",
      "\u0647\u0645\u0627\u0646\u0646\u062F",
      "\u0647\u0645\u0627\u0646\u0647\u0627",
      "\u0647\u0645\u062F\u06CC\u06AF\u0631",
      "\u0647\u0645\u0632\u0645\u0627\u0646",
      "\u0647\u0645\u0647",
      "\u0647\u0645\u0647 \u0631\u0648\u0632\u0647",
      "\u0647\u0645\u0647 \u0633\u0627\u0644\u0647",
      "\u0647\u0645\u0647 \u0634\u0627\u0646",
      "\u0647\u0645\u0647\u064C",
      "\u0647\u0645\u0647\u200C\u0627\u0634",
      "\u0647\u0645\u0648\u0627\u0631\u0647",
      "\u0647\u0645\u0686\u0646\u0627\u0646",
      "\u0647\u0645\u0686\u0646\u0627\u0646 \u06A9\u0647",
      "\u0647\u0645\u0686\u0646\u06CC\u0646",
      "\u0647\u0645\u0686\u0648\u0646",
      "\u0647\u0645\u0686\u06CC\u0646",
      "\u0647\u0645\u06AF\u0627\u0646",
      "\u0647\u0645\u06AF\u06CC",
      "\u0647\u0645\u06CC\u0634\u0647",
      "\u0647\u0645\u06CC\u0646",
      "\u0647\u0645\u06CC\u0646 \u06A9\u0647",
      "\u0647\u0646\u0648\u0632",
      "\u0647\u0646\u06AF\u0627\u0645",
      "\u0647\u0646\u06AF\u0627\u0645\u0650",
      "\u0647\u0646\u06AF\u0627\u0645\u06CC",
      "\u0647\u0646\u06AF\u0627\u0645\u06CC \u06A9\u0647",
      "\u0647\u0648\u06CC",
      "\u0647\u06CC",
      "\u0647\u06CC\u0686",
      "\u0647\u06CC\u0686 \u06AF\u0627\u0647",
      "\u0647\u06CC\u0686\u06A9\u062F\u0627\u0645",
      "\u0647\u06CC\u0686\u06A9\u0633",
      "\u0647\u06CC\u0686\u06AF\u0627\u0647",
      "\u0647\u06CC\u0686\u06AF\u0648\u0646\u0647",
      "\u0647\u06CC\u0686\u06CC",
      "\u0648",
      "\u0648 \u0644\u0627 \u063A\u06CC\u0631",
      "\u0648\u0627\u0628\u0633\u062A\u0647 \u0627\u0646\u062F",
      "\u0648\u0627\u0642\u0639\u0627",
      "\u0648\u0627\u0642\u0639\u0627\u064B",
      "\u0648\u0627\u0642\u0639\u06CC",
      "\u0648\u0627\u0642\u0641\u0646\u062F",
      "\u0648\u0627\u0645\u0627",
      "\u0648\u0627\u06CC",
      "\u0648\u062C\u0648\u062F",
      "\u0648\u062D\u0634\u062A \u0632\u062F\u0647",
      "\u0648\u0633\u0637\u0650",
      "\u0648\u0636\u0639",
      "\u0648\u0642\u062A\u06CC",
      "\u0648\u0642\u062A\u06CC \u06A9\u0647",
      "\u0648\u0642\u062A\u06CC\u06A9\u0647",
      "\u0648\u0644\u06CC",
      "\u0648\u06AF\u0631\u0646\u0647",
      "\u0648\u06AF\u0648",
      "\u0648\u06CC",
      "\u0648\u06CC\u0627",
      "\u0648\u06CC\u0698\u0647",
      "\u0651\u0647",
      "\u066A",
      "\u067E",
      "\u067E\u0627\u0631\u0633\u0627\u0644",
      "\u067E\u0627\u0631\u0633\u0627\u06CC\u0627\u0646\u0647",
      "\u067E\u0627\u0631\u0647\u200C\u0627\u06CC",
      "\u067E\u0627\u0639\u06CC\u0646\u0650",
      "\u067E\u0627\u06CC\u06CC\u0646 \u062A\u0631\u0646\u062F",
      "\u067E\u062F\u0631\u0627\u0646\u0647",
      "\u067E\u0631\u0633\u0627\u0646",
      "\u067E\u0631\u0648\u0631\u062F\u06AF\u0627\u0631\u0627",
      "\u067E\u0631\u06CC\u0631\u0648\u0632",
      "\u067E\u0633",
      "\u067E\u0633 \u0627\u0632",
      "\u067E\u0633 \u0641\u0631\u062F\u0627",
      "\u067E\u0634\u062A",
      "\u067E\u0634\u062A\u0648\u0627\u0646\u0647 \u0627\u0646\u062F",
      "\u067E\u0634\u06CC\u0645\u0648\u0646\u06CC",
      "\u067E\u0646\u062C",
      "\u067E\u0647\u0646 \u0634\u062F\u0647",
      "\u067E\u06CC",
      "\u067E\u06CC \u062F\u0631\u067E\u06CC",
      "\u067E\u06CC\u062F\u0627",
      "\u067E\u06CC\u062F\u0627\u0633\u062A",
      "\u067E\u06CC\u0631\u0627\u0645\u0648\u0646",
      "\u067E\u06CC\u0634",
      "\u067E\u06CC\u0634\u0627\u067E\u06CC\u0634",
      "\u067E\u06CC\u0634\u062A\u0631",
      "\u067E\u06CC\u0634\u0650",
      "\u067E\u06CC\u0648\u0633\u062A\u0647",
      "\u0686",
      "\u0686\u0627\u067E\u0644\u0648\u0633\u0627\u0646\u0647",
      "\u0686\u062A",
      "\u0686\u062A\u0647",
      "\u0686\u0631\u0627",
      "\u0686\u0631\u0627 \u06A9\u0647",
      "\u0686\u0634\u0645 \u0628\u0633\u062A\u0647",
      "\u0686\u0637\u0648\u0631",
      "\u0686\u0642\u062F\u0631",
      "\u0686\u0646\u0627\u0646",
      "\u0686\u0646\u0627\u0646\u0686\u0647",
      "\u0686\u0646\u0627\u0646\u06A9\u0647",
      "\u0686\u0646\u062F",
      "\u0686\u0646\u062F \u0631\u0648\u0632\u0647",
      "\u0686\u0646\u062F\u0627\u0646",
      "\u0686\u0646\u062F\u0647",
      "\u0686\u0646\u062F\u06CC\u0646",
      "\u0686\u0646\u06CC\u0646",
      "\u0686\u0647",
      "\u0686\u0647 \u0628\u0633\u0627",
      "\u0686\u0647 \u0637\u0648\u0631",
      "\u0686\u0647\u0627\u0631",
      "\u0686\u0648",
      "\u0686\u0648\u0646",
      "\u0686\u06A9\u0627\u0631",
      "\u0686\u06AF\u0648\u0646\u0647",
      "\u0686\u06CC",
      "\u0686\u06CC\u0632",
      "\u0686\u06CC\u0632\u06CC",
      "\u0686\u06CC\u0632\u06CC\u0633\u062A",
      "\u0686\u06CC\u0633\u062A",
      "\u0686\u06CC\u0647",
      "\u0698",
      "\u06A9",
      "\u06A9\u0627\u0631\u0646\u062F",
      "\u06A9\u0627\u0634",
      "\u06A9\u0627\u0634\u06A9\u06CC",
      "\u06A9\u0627\u0645\u0644",
      "\u06A9\u0627\u0645\u0644\u0627",
      "\u06A9\u0627\u0645\u0644\u0627\u064B",
      "\u06A9\u062A\u0628\u0627",
      "\u06A9\u062C\u0627",
      "\u06A9\u062C\u0627\u0633\u062A",
      "\u06A9\u062F\u0627\u0645",
      "\u06A9\u0631\u062F",
      "\u06A9\u0631\u062F\u0645",
      "\u06A9\u0631\u062F\u0646",
      "\u06A9\u0631\u062F\u0646\u062F",
      "\u06A9\u0631\u062F\u0647",
      "\u06A9\u0631\u062F\u06CC",
      "\u06A9\u0631\u062F\u06CC\u062F",
      "\u06A9\u0631\u062F\u06CC\u0645",
      "\u06A9\u0633",
      "\u06A9\u0633\u0627\u0646\u06CC",
      "\u06A9\u0633\u06CC",
      "\u06A9\u0644",
      "\u06A9\u0644\u0627",
      "\u06A9\u0644\u06CC",
      "\u06A9\u0644\u06CC\u0647",
      "\u06A9\u0645",
      "\u06A9\u0645 \u06A9\u0645",
      "\u06A9\u0645\u0627\x7F\u0627\u06CC\u0646\u06A9\u0647",
      "\u06A9\u0645\u0627\u06A9\u0627\u0646",
      "\u06A9\u0645\u062A\u0631",
      "\u06A9\u0645\u062A\u0631\u0647",
      "\u06A9\u0645\u062A\u0631\u06CC",
      "\u06A9\u0645\u06CC",
      "\u06A9\u0646",
      "\u06A9\u0646\u0627\u0631",
      "\u06A9\u0646\u0627\u0631\u0634",
      "\u06A9\u0646\u0627\u0631\u0650",
      "\u06A9\u0646\u0627\u06CC\u0647\u200C\u0627\u06CC",
      "\u06A9\u0646\u062F",
      "\u06A9\u0646\u0645",
      "\u06A9\u0646\u0646\u062F",
      "\u06A9\u0646\u0646\u062F\u0647",
      "\u06A9\u0646\u0648\u0646",
      "\u06A9\u0646\u0648\u0646\u06CC",
      "\u06A9\u0646\u06CC",
      "\u06A9\u0646\u06CC\u062F",
      "\u06A9\u0646\u06CC\u0645",
      "\u06A9\u0647",
      "\u06A9\u0648",
      "\u06A9\u064E\u06CC",
      "\u06A9\u06CC",
      "\u06AF",
      "\u06AF\u0627\u0647",
      "\u06AF\u0627\u0647\u06CC",
      "\u06AF\u0630\u0627\u0631\u06CC",
      "\u06AF\u0630\u0627\u0634\u062A\u0647",
      "\u06AF\u0630\u0634\u062A\u0647",
      "\u06AF\u0631\u062F\u062F",
      "\u06AF\u0631\u062F\u0646\u062F",
      "\u06AF\u0631\u0641\u062A",
      "\u06AF\u0631\u0641\u062A\u0627\u0631\u0646\u062F",
      "\u06AF\u0631\u0641\u062A\u0645",
      "\u06AF\u0631\u0641\u062A\u0646",
      "\u06AF\u0631\u0641\u062A\u0646\u062F",
      "\u06AF\u0631\u0641\u062A\u0647",
      "\u06AF\u0631\u0641\u062A\u06CC",
      "\u06AF\u0631\u0641\u062A\u06CC\u062F",
      "\u06AF\u0631\u0641\u062A\u06CC\u0645",
      "\u06AF\u0631\u0648\u0647\u06CC",
      "\u06AF\u0631\u0686\u0647",
      "\u06AF\u0641\u062A",
      "\u06AF\u0641\u062A\u0645",
      "\u06AF\u0641\u062A\u0646",
      "\u06AF\u0641\u062A\u0646\u062F",
      "\u06AF\u0641\u062A\u0647",
      "\u06AF\u0641\u062A\u06CC",
      "\u06AF\u0641\u062A\u06CC\u062F",
      "\u06AF\u0641\u062A\u06CC\u0645",
      "\u06AF\u0647",
      "\u06AF\u0647\u06AF\u0627\u0647",
      "\u06AF\u0648",
      "\u06AF\u0648\u0646\u0647",
      "\u06AF\u0648\u06CC",
      "\u06AF\u0648\u06CC\u0627",
      "\u06AF\u0648\u06CC\u062F",
      "\u06AF\u0648\u06CC\u0645",
      "\u06AF\u0648\u06CC\u0646\u062F",
      "\u06AF\u0648\u06CC\u06CC",
      "\u06AF\u0648\u06CC\u06CC\u062F",
      "\u06AF\u0648\u06CC\u06CC\u0645",
      "\u06AF\u06CC\u0631",
      "\u06AF\u06CC\u0631\u062F",
      "\u06AF\u06CC\u0631\u0645",
      "\u06AF\u06CC\u0631\u0646\u062F",
      "\u06AF\u06CC\u0631\u06CC",
      "\u06AF\u06CC\u0631\u06CC\u062F",
      "\u06AF\u06CC\u0631\u06CC\u0645",
      "\u06CC",
      "\u06CC\u0627",
      "\u06CC\u0627\u0628",
      "\u06CC\u0627\u0628\u062F",
      "\u06CC\u0627\u0628\u0645",
      "\u06CC\u0627\u0628\u0646\u062F",
      "\u06CC\u0627\u0628\u06CC",
      "\u06CC\u0627\u0628\u06CC\u062F",
      "\u06CC\u0627\u0628\u06CC\u0645",
      "\u06CC\u0627\u0631\u0628",
      "\u06CC\u0627\u0641\u062A",
      "\u06CC\u0627\u0641\u062A\u0645",
      "\u06CC\u0627\u0641\u062A\u0646",
      "\u06CC\u0627\u0641\u062A\u0647",
      "\u06CC\u0627\u0641\u062A\u06CC",
      "\u06CC\u0627\u0641\u062A\u06CC\u062F",
      "\u06CC\u0627\u0641\u062A\u06CC\u0645",
      "\u06CC\u0639\u0646\u06CC",
      "\u06CC\u0642\u06CC\u0646\u0627",
      "\u06CC\u0642\u06CC\u0646\u0627\u064B",
      "\u06CC\u0647",
      "\u06CC\u0648\u0627\u0634 \u06CC\u0648\u0627\u0634",
      "\u06CC\u06A9",
      "\u06CC\u06A9 \u062C\u0648\u0631\u06CC",
      "\u06CC\u06A9 \u06A9\u0645",
      "\u06CC\u06A9 \u06A9\u0645\u06CC",
      "\u06CC\u06A9\u062F\u06CC\u06AF\u0631",
      "\u06CC\u06A9\u0631\u06CC\u0632",
      "\u06CC\u06A9\u0633\u0627\u0644",
      "\u06CC\u06A9\u0647\u0632\u0627\u0631",
      "\u06CC\u06A9\u06CC",
      "\u06F0",
      "\u06F1",
      "\u06F2",
      "\u06F3",
      "\u06F4",
      "\u06F5",
      "\u06F6",
      "\u06F7",
      "\u06F8",
      "\u06F9",
      "\u2026",
      "\uFEFF\u0648",
      "\u06A9\u0646",
      "\u06A9\u0631\u062F",
      "\u06A9\u0631\u062F\u0646",
      "\u0628\u0627\u0634",
      "\u0628\u0648\u062F",
      "\u0628\u0648\u062F\u0646",
      "\u0634\u0648",
      "\u0634\u062F",
      "\u0634\u062F\u0646",
      "\u062F\u0627\u0631",
      "\u062F\u0627\u0634\u062A",
      "\u062F\u0627\u0634\u062A\u0646",
      "\u062E\u0648\u0627\u0647",
      "\u062E\u0648\u0627\u0633\u062A",
      "\u062E\u0648\u0627\u0633\u062A\u0646",
      "\u06AF\u0648\u06CC",
      "\u06AF\u0641\u062A",
      "\u06AF\u0641\u062A\u0646",
      "\u06AF\u06CC\u0631",
      "\u06AF\u0631\u0641\u062A",
      "\u06AF\u0631\u0641\u062A\u0646",
      "\u0622\u06CC",
      "\u0622\u0645\u062F",
      "\u0622\u0645\u062F\u0646",
      "\u062A\u0648\u0627\u0646",
      "\u062A\u0648\u0627\u0646\u0633\u062A",
      "\u062A\u0648\u0627\u0646\u0633\u062A\u0646",
      "\u06CC\u0627\u0628",
      "\u06CC\u0627\u0641\u062A",
      "\u06CC\u0627\u0641\u062A\u0646",
      "\u0622\u0648\u0631",
      "\u0622\u0648\u0631\u062F",
      "\u0622\u0648\u0631\u062F\u0646",
      "\u062F\u06CC\u06AF\u0631\u0627\u0646",
      "\u0647\u0645\u0686\u0646\u0627\u0646",
      "\u0645\u062F\u062A",
      "\u0686\u06CC\u0632",
      "\u0633\u0627\u06CC\u0631",
      "\u062C\u0627",
      "\u0637\u06CC",
      "\u06A9\u0644",
      "\u06A9\u0646\u0648\u0646\u06CC",
      "\u0628\u06CC\u0631\u0648\u0646",
      "\u0645\u062B\u0644\u0627",
      "\u06A9\u0627\u0645\u0644",
      "\u06A9\u0627\u0645\u0644\u0627",
      "\u0622\u0646\u06A9\u0647",
      "\u0645\u0648\u0627\u0631\u062F",
      "\u0648\u0627\u0642\u0639\u06CC",
      "\u0627\u0645\u0648\u0631",
      "\u0627\u06A9\u0646\u0648\u0646",
      "\u0628\u0637\u0648\u0631",
      "\u0628\u062E\u0634\u06CC",
      "\u062A\u062D\u062A",
      "\u0686\u06AF\u0648\u0646\u0647",
      "\u0639\u062F\u0645",
      "\u0646\u0648\u0639\u06CC",
      "\u062D\u0627\u0636\u0631",
      "\u0648\u0636\u0639",
      "\u0645\u0642\u0627\u0628\u0644",
      "\u06A9\u0646\u0627\u0631",
      "\u062E\u0648\u06CC\u0634",
      "\u0646\u06AF\u0627\u0647",
      "\u062F\u0631\u0648\u0646",
      "\u0632\u0645\u0627\u0646\u06CC",
      "\u0628\u0646\u0627\u0628\u0631\u0627\u06CC\u0646",
      "\u062A\u0648",
      "\u062E\u06CC\u0644\u06CC",
      "\u0628\u0632\u0631\u06AF",
      "\u062E\u0648\u062F\u0634",
      "\u062C\u0632",
      "\u0627\u06CC\u0646\u062C\u0627",
      "\u0645\u062E\u062A\u0644\u0641",
      "\u062A\u0648\u0633\u0637",
      "\u0646\u0648\u0639",
      "\u0647\u0645\u0686\u0646\u06CC\u0646",
      "\u0622\u0646\u062C\u0627",
      "\u0642\u0628\u0644",
      "\u062C\u0646\u0627\u062D",
      "\u0627\u06CC\u0646\u0647\u0627",
      "\u0637\u0648\u0631",
      "\u0634\u0627\u06CC\u062F",
      "\u0627\u06CC\u0634\u0627\u0646",
      "\u062C\u0647\u062A",
      "\u0637\u0631\u06CC\u0642",
      "\u0645\u0627\u0646\u0646\u062F",
      "\u067E\u06CC\u062F\u0627",
      "\u0645\u0645\u06A9\u0646",
      "\u06A9\u0633\u0627\u0646\u06CC",
      "\u062C\u0627\u06CC",
      "\u06A9\u0633\u06CC",
      "\u063A\u06CC\u0631",
      "\u0628\u06CC",
      "\u0642\u0627\u0628\u0644",
      "\u062F\u0631\u0628\u0627\u0631\u0647",
      "\u062C\u062F\u06CC\u062F",
      "\u0648\u0642\u062A\u06CC",
      "\u0627\u062E\u06CC\u0631",
      "\u0686\u0631\u0627",
      "\u0628\u06CC\u0634",
      "\u0631\u0648\u06CC",
      "\u0637\u0631\u0641",
      "\u062C\u0631\u06CC\u0627\u0646",
      "\u0632\u06CC\u0631",
      "\u0622\u0646\u0686\u0647",
      "\u0627\u0644\u0628\u062A\u0647",
      "\u0641\u0642\u0637",
      "\u0686\u06CC\u0632\u06CC",
      "\u0686\u0648\u0646",
      "\u0628\u0631\u0627\u0628\u0631",
      "\u0647\u0646\u0648\u0632",
      "\u0628\u062E\u0634",
      "\u0632\u0645\u06CC\u0646\u0647",
      "\u0628\u06CC\u0646",
      "\u0628\u062F\u0648\u0646",
      "\u0627\u0633\u062A\u0641\u0627\u062F",
      "\u0647\u0645\u0627\u0646",
      "\u0646\u0634\u0627\u0646",
      "\u0628\u0633\u06CC\u0627\u0631\u06CC",
      "\u0628\u0639\u062F",
      "\u0639\u0645\u0644",
      "\u0631\u0648\u0632",
      "\u0627\u0639\u0644\u0627\u0645",
      "\u0686\u0646\u062F",
      "\u0622\u0646\u0627\u0646",
      "\u0628\u0644\u06A9\u0647",
      "\u0627\u0645\u0631\u0648\u0632",
      "\u062A\u0645\u0627\u0645",
      "\u0628\u06CC\u0634\u062A\u0631",
      "\u0622\u06CC\u0627",
      "\u0628\u0631\u062E\u06CC",
      "\u0639\u0644\u06CC\u0647",
      "\u062F\u06CC\u06AF\u0631\u06CC",
      "\u0648\u06CC\u0698\u0647",
      "\u06AF\u0630\u0634\u062A\u0647",
      "\u0627\u0646\u062C\u0627\u0645",
      "\u062D\u062A\u06CC",
      "\u062F\u0627\u062F\u0647",
      "\u0633\u0648\u06CC",
      "\u0648\u0644\u06CC",
      "\u0632\u0645\u0627\u0646",
      "\u062D\u0627\u0644",
      "\u062A\u0646\u0647\u0627",
      "\u0628\u0633\u06CC\u0627\u0631",
      "\u06CC\u0639\u0646\u06CC",
      "\u0639\u0646\u0648\u0627\u0646",
      "\u0647\u0645\u06CC\u0646",
      "\u0647\u0628\u0686",
      "\u067E\u06CC\u0634",
      "\u0648\u06CC",
      "\u06CC\u06A9\u06CC",
      "\u0627\u06CC\u0646\u06A9\u0647",
      "\u0648\u062C\u0648\u062F",
      "\u0634\u0645\u0627",
      "\u067E\u0633",
      "\u0686\u0646\u06CC\u0646",
      "\u0645\u06CC\u0627\u0646",
      "\u0645\u0648\u0631\u062F",
      "\u0686\u0647",
      "\u0627\u06AF\u0631",
      "\u0647\u0645\u0647",
      "\u0646\u0647",
      "\u062F\u06CC\u06AF\u0631",
      "\u0622\u0646\u0647\u0627",
      "\u0628\u0627\u06CC\u062F",
      "\u0647\u0631",
      "\u0627\u0648",
      "\u0645\u0627",
      "\u0645\u0646",
      "\u062A\u0627",
      "\u0646\u06CC\u0632",
      "\u0627\u0645\u0627",
      "\u06CC\u06A9",
      "\u062E\u0648\u062F",
      "\u0628\u0631",
      "\u06CC\u0627",
      "\u0647\u0645",
      "\u0631\u0627",
      "\u0627\u06CC\u0646",
      "\u0628\u0627",
      "\u0622\u0646",
      "\u0628\u0631\u0627\u06CC",
      "\u0648",
      "\u062F\u0631",
      "\u0628\u0647",
      "\u06A9\u0647",
      "\u0627\u0632",
      "!",
      '"',
      "#",
      "(",
      ")",
      "*",
      "-",
      ".",
      "/",
      ":",
      "[",
      "]",
      "\xAB",
      "\xBB",
      "\u060C",
      "\u061B",
      "\u061F",
      "\u06F0",
      "\u06F1",
      "\u06F2",
      "\u06F3",
      "\u06F4",
      "\u06F5",
      "\u06F6",
      "\u06F7",
      "\u06F8",
      "\u06F9",
      "\u2026",
      "$",
      "",
      "\u0648",
      "\u062F\u0631",
      "\u0628\u0647",
      "\u0627\u0632",
      "\u0643\u0647",
      "\u0645\u064A",
      "\u0627\u064A\u0646",
      "\u0627\u0633\u062A",
      "\u0631\u0627",
      "\u0628\u0627",
      "\u0647\u0627\u064A",
      "\u0628\u0631\u0627\u064A",
      "\u0622\u0646",
      "\u064A\u0643",
      "\u0634\u0648\u062F",
      "\u0634\u062F\u0647",
      "\u062E\u0648\u062F",
      "\u0647\u0627",
      "\u0643\u0631\u062F",
      "\u0634\u062F",
      "\u0627\u064A",
      "\u062A\u0627",
      "\u0643\u0646\u062F",
      "\u0628\u0631",
      "\u0628\u0648\u062F",
      "\u06AF\u0641\u062A",
      "\u0646\u064A\u0632",
      "\u0648\u064A",
      "\u0647\u0645",
      "\u0643\u0646\u0646\u062F",
      "\u062F\u0627\u0631\u062F",
      "\u0645\u0627",
      "\u0643\u0631\u062F\u0647",
      "\u064A\u0627",
      "\u0627\u0645\u0627",
      "\u0628\u0627\u064A\u062F",
      "\u062F\u0648",
      "\u0627\u0646\u062F",
      "\u0647\u0631",
      "\u062E\u0648\u0627\u0647\u062F",
      "\u0627\u0648",
      "\u0645\u0648\u0631\u062F",
      "\u0622\u0646\u0647\u0627",
      "\u0628\u0627\u0634\u062F",
      "\u062F\u064A\u06AF\u0631",
      "\u0645\u0631\u062F\u0645",
      "\u0646\u0645\u064A",
      "\u0628\u064A\u0646",
      "\u067E\u064A\u0634",
      "\u067E\u0633",
      "\u0627\u06AF\u0631",
      "\u0647\u0645\u0647",
      "\u0635\u0648\u0631\u062A",
      "\u064A\u0643\u064A",
      "\u0647\u0633\u062A\u0646\u062F",
      "\u0628\u064A",
      "\u0645\u0646",
      "\u062F\u0647\u062F",
      "\u0647\u0632\u0627\u0631",
      "\u0646\u064A\u0633\u062A",
      "\u0627\u0633\u062A\u0641\u0627\u062F\u0647",
      "\u062F\u0627\u062F",
      "\u062F\u0627\u0634\u062A\u0647",
      "\u062F\u0627\u0634\u062A",
      "\u0686\u0647",
      "\u0647\u0645\u0686\u0646\u064A\u0646",
      "\u0643\u0631\u062F\u0646\u062F",
      "\u062F\u0627\u062F\u0647",
      "\u0628\u0648\u062F\u0647",
      "\u062F\u0627\u0631\u0646\u062F",
      "\u0647\u0645\u064A\u0646",
      "\u0645\u064A\u0644\u064A\u0648\u0646",
      "\u0633\u0648\u064A",
      "\u0634\u0648\u0646\u062F",
      "\u0628\u064A\u0634\u062A\u0631",
      "\u0628\u0633\u064A\u0627\u0631",
      "\u0631\u0648\u064A",
      "\u06AF\u0631\u0641\u062A\u0647",
      "\u0647\u0627\u064A\u064A",
      "\u062A\u0648\u0627\u0646\u062F",
      "\u0627\u0648\u0644",
      "\u0646\u0627\u0645",
      "\u0647\u064A\u0686",
      "\u0686\u0646\u062F",
      "\u062C\u062F\u064A\u062F",
      "\u0628\u064A\u0634",
      "\u0634\u062F\u0646",
      "\u0643\u0631\u062F\u0646",
      "\u0643\u0646\u064A\u0645",
      "\u0646\u0634\u0627\u0646",
      "\u062D\u062A\u064A",
      "\u0627\u064A\u0646\u0643\u0647",
      "\u0648\u0644\u06CC",
      "\u062A\u0648\u0633\u0637",
      "\u0686\u0646\u064A\u0646",
      "\u0628\u0631\u062E\u064A",
      "\u0646\u0647",
      "\u062F\u064A\u0631\u0648\u0632",
      "\u062F\u0648\u0645",
      "\u062F\u0631\u0628\u0627\u0631\u0647",
      "\u0628\u0639\u062F",
      "\u0645\u062E\u062A\u0644\u0641",
      "\u06AF\u064A\u0631\u062F",
      "\u0634\u0645\u0627",
      "\u06AF\u0641\u062A\u0647",
      "\u0622\u0646\u0627\u0646",
      "\u0628\u0627\u0631",
      "\u0637\u0648\u0631",
      "\u06AF\u0631\u0641\u062A",
      "\u062F\u0647\u0646\u062F",
      "\u06AF\u0630\u0627\u0631\u064A",
      "\u0628\u0633\u064A\u0627\u0631\u064A",
      "\u0637\u064A",
      "\u0628\u0648\u062F\u0646\u062F",
      "\u0645\u064A\u0644\u064A\u0627\u0631\u062F",
      "\u0628\u062F\u0648\u0646",
      "\u062A\u0645\u0627\u0645",
      "\u0643\u0644",
      "\u062A\u0631  \u0628\u0631\u0627\u0633\u0627\u0633",
      "\u0634\u062F\u0646\u062F",
      "\u062A\u0631\u064A\u0646",
      "\u0627\u0645\u0631\u0648\u0632",
      "\u0628\u0627\u0634\u0646\u062F",
      "\u0646\u062F\u0627\u0631\u062F",
      "\u0686\u0648\u0646",
      "\u0642\u0627\u0628\u0644",
      "\u06AF\u0648\u064A\u062F",
      "\u062F\u064A\u06AF\u0631\u064A",
      "\u0647\u0645\u0627\u0646",
      "\u062E\u0648\u0627\u0647\u0646\u062F",
      "\u0642\u0628\u0644",
      "\u0622\u0645\u062F\u0647",
      "\u0627\u0643\u0646\u0648\u0646",
      "\u062A\u062D\u062A",
      "\u0637\u0631\u064A\u0642",
      "\u06AF\u064A\u0631\u064A",
      "\u062C\u0627\u064A",
      "\u0647\u0646\u0648\u0632",
      "\u0686\u0631\u0627",
      "\u0627\u0644\u0628\u062A\u0647",
      "\u0643\u0646\u064A\u062F",
      "\u0633\u0627\u0632\u064A",
      "\u0633\u0648\u0645",
      "\u0643\u0646\u0645",
      "\u0628\u0644\u0643\u0647",
      "\u0632\u064A\u0631",
      "\u062A\u0648\u0627\u0646\u0646\u062F",
      "\u0636\u0645\u0646",
      "\u0641\u0642\u0637",
      "\u0628\u0648\u062F\u0646",
      "\u062D\u0642",
      "\u0622\u064A\u062F",
      "\u0648\u0642\u062A\u064A",
      "\u0627\u0634",
      "\u064A\u0627\u0628\u062F",
      "\u0646\u062E\u0633\u062A\u064A\u0646",
      "\u0645\u0642\u0627\u0628\u0644",
      "\u062E\u062F\u0645\u0627\u062A",
      "\u0627\u0645\u0633\u0627\u0644",
      "\u062A\u0627\u0643\u0646\u0648\u0646",
      "\u0645\u0627\u0646\u0646\u062F",
      "\u062A\u0627\u0632\u0647",
      "\u0622\u0648\u0631\u062F",
      "\u0641\u0643\u0631",
      "\u0622\u0646\u0686\u0647",
      "\u0646\u062E\u0633\u062A",
      "\u0646\u0634\u062F\u0647",
      "\u0634\u0627\u064A\u062F",
      "\u0686\u0647\u0627\u0631",
      "\u062C\u0631\u064A\u0627\u0646",
      "\u067E\u0646\u062C",
      "\u0633\u0627\u062E\u062A\u0647",
      "\u0632\u064A\u0631\u0627",
      "\u0646\u0632\u062F\u064A\u0643",
      "\u0628\u0631\u062F\u0627\u0631\u064A",
      "\u0643\u0633\u064A",
      "\u0631\u064A\u0632\u064A",
      "\u0631\u0641\u062A",
      "\u06AF\u0631\u062F\u062F",
      "\u0645\u062B\u0644",
      "\u0622\u0645\u062F",
      "\u0627\u0645",
      "\u0628\u0647\u062A\u0631\u064A\u0646",
      "\u062F\u0627\u0646\u0633\u062A",
      "\u0643\u0645\u062A\u0631",
      "\u062F\u0627\u062F\u0646",
      "\u062A\u0645\u0627\u0645\u064A",
      "\u062C\u0644\u0648\u06AF\u064A\u0631\u064A",
      "\u0628\u064A\u0634\u062A\u0631\u064A",
      "\u0627\u064A\u0645",
      "\u0646\u0627\u0634\u064A",
      "\u0686\u064A\u0632\u064A",
      "\u0622\u0646\u0643\u0647",
      "\u0628\u0627\u0644\u0627",
      "\u0628\u0646\u0627\u0628\u0631\u0627\u064A\u0646",
      "\u0627\u064A\u0634\u0627\u0646",
      "\u0628\u0639\u0636\u064A",
      "\u062F\u0627\u062F\u0646\u062F",
      "\u062F\u0627\u0634\u062A\u0646\u062F",
      "\u0628\u0631\u062E\u0648\u0631\u062F\u0627\u0631",
      "\u0646\u062E\u0648\u0627\u0647\u062F",
      "\u0647\u0646\u06AF\u0627\u0645",
      "\u0646\u0628\u0627\u064A\u062F",
      "\u063A\u064A\u0631",
      "\u0646\u0628\u0648\u062F",
      "\u062F\u064A\u062F\u0647",
      "\u0648\u06AF\u0648",
      "\u062F\u0627\u0631\u064A\u0645",
      "\u0686\u06AF\u0648\u0646\u0647",
      "\u0628\u0646\u062F\u064A",
      "\u062E\u0648\u0627\u0633\u062A",
      "\u0641\u0648\u0642",
      "\u062F\u0647",
      "\u0646\u0648\u0639\u064A",
      "\u0647\u0633\u062A\u064A\u0645",
      "\u062F\u064A\u06AF\u0631\u0627\u0646",
      "\u0647\u0645\u0686\u0646\u0627\u0646",
      "\u0633\u0631\u0627\u0633\u0631",
      "\u0646\u062F\u0627\u0631\u0646\u062F",
      "\u06AF\u0631\u0648\u0647\u064A",
      "\u0633\u0639\u064A",
      "\u0631\u0648\u0632\u0647\u0627\u064A",
      "\u0622\u0646\u062C\u0627",
      "\u064A\u0643\u062F\u064A\u06AF\u0631",
      "\u0643\u0631\u062F\u0645",
      "\u0628\u064A\u0633\u062A",
      "\u0628\u0631\u0648\u0632",
      "\u0633\u067E\u0633",
      "\u0631\u0641\u062A\u0647",
      "\u0622\u0648\u0631\u062F\u0647",
      "\u0646\u0645\u0627\u064A\u062F",
      "\u0628\u0627\u0634\u064A\u0645",
      "\u06AF\u0648\u064A\u0646\u062F",
      "\u0632\u064A\u0627\u062F",
      "\u062E\u0648\u064A\u0634",
      "\u0647\u0645\u0648\u0627\u0631\u0647",
      "\u06AF\u0630\u0627\u0634\u062A\u0647",
      "\u0634\u0634  \u0646\u062F\u0627\u0634\u062A\u0647",
      "\u0634\u0646\u0627\u0633\u064A",
      "\u062E\u0648\u0627\u0647\u064A\u0645",
      "\u0622\u0628\u0627\u062F",
      "\u062F\u0627\u0634\u062A\u0646",
      "\u0646\u0638\u064A\u0631",
      "\u0647\u0645\u0686\u0648\u0646",
      "\u0628\u0627\u0631\u0647",
      "\u0646\u0643\u0631\u062F\u0647",
      "\u0634\u0627\u0646",
      "\u0633\u0627\u0628\u0642",
      "\u0647\u0641\u062A",
      "\u062F\u0627\u0646\u0646\u062F",
      "\u062C\u0627\u064A\u064A",
      "\u0628\u06CC",
      "\u062C\u0632",
      "\u0632\u06CC\u0631\u0650",
      "\u0631\u0648\u06CC\u0650",
      "\u0633\u0631\u06CC\u0650",
      "\u062A\u0648\u06CC\u0650",
      "\u062C\u0644\u0648\u06CC\u0650",
      "\u067E\u06CC\u0634\u0650",
      "\u0639\u0642\u0628\u0650",
      "\u0628\u0627\u0644\u0627\u06CC\u0650",
      "\u062E\u0627\u0631\u062C\u0650",
      "\u0648\u0633\u0637\u0650",
      "\u0628\u06CC\u0631\u0648\u0646\u0650",
      "\u0633\u0648\u06CC\u0650",
      "\u06A9\u0646\u0627\u0631\u0650",
      "\u067E\u0627\u0639\u06CC\u0646\u0650",
      "\u0646\u0632\u062F\u0650",
      "\u0646\u0632\u062F\u06CC\u06A9\u0650",
      "\u062F\u0646\u0628\u0627\u0644\u0650",
      "\u062D\u062F\u0648\u062F\u0650",
      "\u0628\u0631\u0627\u0628\u0631\u0650",
      "\u0637\u0628\u0642\u0650",
      "\u0645\u0627\u0646\u0646\u062F\u0650",
      "\u0636\u062F\u0651\u0650",
      "\u0647\u0646\u06AF\u0627\u0645\u0650",
      "\u0628\u0631\u0627\u06CC\u0650",
      "\u0645\u062B\u0644\u0650",
      "\u0628\u0627\u0631\u0629",
      "\u0627\u062B\u0631\u0650",
      "\u062A\u0648\u0644\u0650",
      "\u0639\u0644\u0651\u062A\u0650",
      "\u0633\u0645\u062A\u0650",
      "\u0639\u0646\u0648\u0627\u0646\u0650",
      "\u0642\u0635\u062F\u0650",
      "\u0631\u0648\u0628",
      "\u062C\u062F\u0627",
      "\u06A9\u06CC",
      "\u06A9\u0647",
      "\u0686\u06CC\u0633\u062A",
      "\u0647\u0633\u062A",
      "\u06A9\u062C\u0627",
      "\u06A9\u062C\u0627\u0633\u062A",
      "\u06A9\u064E\u06CC",
      "\u0686\u0637\u0648\u0631",
      "\u06A9\u062F\u0627\u0645",
      "\u0622\u06CC\u0627",
      "\u0645\u06AF\u0631",
      "\u0686\u0646\u062F\u06CC\u0646",
      "\u06CC\u06A9",
      "\u0686\u06CC\u0632\u06CC",
      "\u062F\u06CC\u06AF\u0631",
      "\u06A9\u0633\u06CC",
      "\u0628\u0639\u0631\u06CC",
      "\u0647\u06CC\u0686",
      "\u0686\u06CC\u0632",
      "\u062C\u0627",
      "\u06A9\u0633",
      "\u0647\u0631\u06AF\u0632",
      "\u06CC\u0627",
      "\u062A\u0646\u0647\u0627",
      "\u0628\u0644\u06A9\u0647",
      "\u062E\u06CC\u0627\u0647",
      "\u0628\u0644\u0647",
      "\u0628\u0644\u06CC",
      "\u0622\u0631\u0647",
      "\u0622\u0631\u06CC",
      "\u0645\u0631\u0633\u06CC",
      "\u0627\u0644\u0628\u062A\u0651\u0647",
      "\u0644\u0637\u0641\u0627\u064B",
      "\u0651\u0647",
      "\u0627\u0646\u06A9\u0647",
      "\u0648\u0642\u062A\u06CC\u06A9\u0647",
      "\u0647\u0645\u06CC\u0646",
      "\u067E\u06CC\u0634",
      "\u0645\u062F\u0651\u062A\u06CC",
      "\u0647\u0646\u06AF\u0627\u0645\u06CC",
      "\u0645\u0627\u0646",
      "\u062A\u0627\u0646"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/fr.js
var require_fr = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "a",
      "\xE0",
      "\xE2",
      "abord",
      "afin",
      "ah",
      "ai",
      "aie",
      "ainsi",
      "allaient",
      "allo",
      "all\xF4",
      "allons",
      "apr\xE8s",
      "assez",
      "attendu",
      "au",
      "aucun",
      "aucune",
      "aujourd",
      "aujourd'hui",
      "auquel",
      "aura",
      "auront",
      "aussi",
      "autre",
      "autres",
      "aux",
      "auxquelles",
      "auxquels",
      "avaient",
      "avais",
      "avait",
      "avant",
      "avec",
      "avoir",
      "ayant",
      "b",
      "bah",
      "beaucoup",
      "bien",
      "bigre",
      "boum",
      "bravo",
      "brrr",
      "c",
      "\xE7a",
      "car",
      "ce",
      "ceci",
      "cela",
      "celle",
      "celle-ci",
      "celle-l\xE0",
      "celles",
      "celles-ci",
      "celles-l\xE0",
      "celui",
      "celui-ci",
      "celui-l\xE0",
      "cent",
      "cependant",
      "certain",
      "certaine",
      "certaines",
      "certains",
      "certes",
      "ces",
      "cet",
      "cette",
      "ceux",
      "ceux-ci",
      "ceux-l\xE0",
      "chacun",
      "chaque",
      "cher",
      "ch\xE8re",
      "ch\xE8res",
      "chers",
      "chez",
      "chiche",
      "chut",
      "ci",
      "cinq",
      "cinquantaine",
      "cinquante",
      "cinquanti\xE8me",
      "cinqui\xE8me",
      "clac",
      "clic",
      "combien",
      "comme",
      "comment",
      "compris",
      "concernant",
      "contre",
      "couic",
      "crac",
      "d",
      "da",
      "dans",
      "de",
      "debout",
      "dedans",
      "dehors",
      "del\xE0",
      "depuis",
      "derri\xE8re",
      "des",
      "d\xE8s",
      "d\xE9sormais",
      "desquelles",
      "desquels",
      "dessous",
      "dessus",
      "deux",
      "deuxi\xE8me",
      "deuxi\xE8mement",
      "devant",
      "devers",
      "devra",
      "diff\xE9rent",
      "diff\xE9rente",
      "diff\xE9rentes",
      "diff\xE9rents",
      "dire",
      "divers",
      "diverse",
      "diverses",
      "dix",
      "dix-huit",
      "dixi\xE8me",
      "dix-neuf",
      "dix-sept",
      "doit",
      "doivent",
      "donc",
      "dont",
      "douze",
      "douzi\xE8me",
      "dring",
      "du",
      "duquel",
      "durant",
      "e",
      "effet",
      "eh",
      "elle",
      "elle-m\xEAme",
      "elles",
      "elles-m\xEAmes",
      "en",
      "encore",
      "entre",
      "envers",
      "environ",
      "es",
      "\xE8s",
      "est",
      "et",
      "etant",
      "\xE9taient",
      "\xE9tais",
      "\xE9tait",
      "\xE9tant",
      "etc",
      "\xE9t\xE9",
      "etre",
      "\xEAtre",
      "eu",
      "euh",
      "eux",
      "eux-m\xEAmes",
      "except\xE9",
      "f",
      "fa\xE7on",
      "fais",
      "faisaient",
      "faisant",
      "fait",
      "feront",
      "fi",
      "flac",
      "floc",
      "font",
      "g",
      "gens",
      "h",
      "ha",
      "h\xE9",
      "hein",
      "h\xE9las",
      "hem",
      "hep",
      "hi",
      "ho",
      "hol\xE0",
      "hop",
      "hormis",
      "hors",
      "hou",
      "houp",
      "hue",
      "hui",
      "huit",
      "huiti\xE8me",
      "hum",
      "hurrah",
      "i",
      "il",
      "ils",
      "importe",
      "j",
      "je",
      "jusqu",
      "jusque",
      "k",
      "l",
      "la",
      "l\xE0",
      "laquelle",
      "las",
      "le",
      "lequel",
      "les",
      "l\xE8s",
      "lesquelles",
      "lesquels",
      "leur",
      "leurs",
      "longtemps",
      "lorsque",
      "lui",
      "lui-m\xEAme",
      "m",
      "ma",
      "maint",
      "mais",
      "malgr\xE9",
      "me",
      "m\xEAme",
      "m\xEAmes",
      "merci",
      "mes",
      "mien",
      "mienne",
      "miennes",
      "miens",
      "mille",
      "mince",
      "moi",
      "moi-m\xEAme",
      "moins",
      "mon",
      "moyennant",
      "n",
      "na",
      "ne",
      "n\xE9anmoins",
      "neuf",
      "neuvi\xE8me",
      "ni",
      "nombreuses",
      "nombreux",
      "non",
      "nos",
      "notre",
      "n\xF4tre",
      "n\xF4tres",
      "nous",
      "nous-m\xEAmes",
      "nul",
      "o",
      "o|",
      "\xF4",
      "oh",
      "oh\xE9",
      "ol\xE9",
      "oll\xE9",
      "on",
      "ont",
      "onze",
      "onzi\xE8me",
      "ore",
      "ou",
      "o\xF9",
      "ouf",
      "ouias",
      "oust",
      "ouste",
      "outre",
      "p",
      "paf",
      "pan",
      "par",
      "parmi",
      "partant",
      "particulier",
      "particuli\xE8re",
      "particuli\xE8rement",
      "pas",
      "pass\xE9",
      "pendant",
      "personne",
      "peu",
      "peut",
      "peuvent",
      "peux",
      "pff",
      "pfft",
      "pfut",
      "pif",
      "plein",
      "plouf",
      "plus",
      "plusieurs",
      "plut\xF4t",
      "pouah",
      "pour",
      "pourquoi",
      "premier",
      "premi\xE8re",
      "premi\xE8rement",
      "pr\xE8s",
      "proche",
      "psitt",
      "puisque",
      "q",
      "qu",
      "quand",
      "quant",
      "quanta",
      "quant-\xE0-soi",
      "quarante",
      "quatorze",
      "quatre",
      "quatre-vingt",
      "quatri\xE8me",
      "quatri\xE8mement",
      "que",
      "quel",
      "quelconque",
      "quelle",
      "quelles",
      "quelque",
      "quelques",
      "quelqu'un",
      "quels",
      "qui",
      "quiconque",
      "quinze",
      "quoi",
      "quoique",
      "r",
      "revoici",
      "revoil\xE0",
      "rien",
      "s",
      "sa",
      "sacrebleu",
      "sans",
      "sapristi",
      "sauf",
      "se",
      "seize",
      "selon",
      "sept",
      "septi\xE8me",
      "sera",
      "seront",
      "ses",
      "si",
      "sien",
      "sienne",
      "siennes",
      "siens",
      "sinon",
      "six",
      "sixi\xE8me",
      "soi",
      "soi-m\xEAme",
      "soit",
      "soixante",
      "son",
      "sont",
      "sous",
      "stop",
      "suis",
      "suivant",
      "sur",
      "surtout",
      "t",
      "ta",
      "tac",
      "tant",
      "te",
      "t\xE9",
      "tel",
      "telle",
      "tellement",
      "telles",
      "tels",
      "tenant",
      "tes",
      "tic",
      "tien",
      "tienne",
      "tiennes",
      "tiens",
      "toc",
      "toi",
      "toi-m\xEAme",
      "ton",
      "touchant",
      "toujours",
      "tous",
      "tout",
      "toute",
      "toutes",
      "treize",
      "trente",
      "tr\xE8s",
      "trois",
      "troisi\xE8me",
      "troisi\xE8mement",
      "trop",
      "tsoin",
      "tsouin",
      "tu",
      "u",
      "un",
      "une",
      "unes",
      "uns",
      "v",
      "va",
      "vais",
      "vas",
      "v\xE9",
      "vers",
      "via",
      "vif",
      "vifs",
      "vingt",
      "vivat",
      "vive",
      "vives",
      "vlan",
      "voici",
      "voil\xE0",
      "vont",
      "vos",
      "votre",
      "v\xF4tre",
      "v\xF4tres",
      "vous",
      "vous-m\xEAmes",
      "vu",
      "w",
      "x",
      "y",
      "z",
      "zut",
      "\uFEFFalors",
      "aucuns",
      "bon",
      "devrait",
      "dos",
      "droite",
      "d\xE9but",
      "essai",
      "faites",
      "fois",
      "force",
      "haut",
      "ici",
      "juste",
      "maintenant",
      "mine",
      "mot",
      "nomm\xE9s",
      "nouveaux",
      "parce",
      "parole",
      "personnes",
      "pi\xE8ce",
      "plupart",
      "seulement",
      "soyez",
      "sujet",
      "tandis",
      "valeur",
      "voie",
      "voient",
      "\xE9tat",
      "\xE9tions"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/gl.js
var require_gl = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "a",
      "a\xEDnda",
      "al\xED",
      "aquel",
      "aquela",
      "aquelas",
      "aqueles",
      "aquilo",
      "aqu\xED",
      "ao",
      "aos",
      "as",
      "as\xED",
      "\xE1",
      "ben",
      "cando",
      "che",
      "co",
      "coa",
      "comigo",
      "con",
      "connosco",
      "contigo",
      "convosco",
      "coas",
      "cos",
      "cun",
      "cuns",
      "cunha",
      "cunhas",
      "da",
      "dalgunha",
      "dalgunhas",
      "dalg\xFAn",
      "dalg\xFAns",
      "das",
      "de",
      "del",
      "dela",
      "delas",
      "deles",
      "desde",
      "deste",
      "do",
      "dos",
      "dun",
      "duns",
      "dunha",
      "dunhas",
      "e",
      "el",
      "ela",
      "elas",
      "eles",
      "en",
      "era",
      "eran",
      "esa",
      "esas",
      "ese",
      "eses",
      "esta",
      "estar",
      "estaba",
      "est\xE1",
      "est\xE1n",
      "este",
      "estes",
      "estiven",
      "estou",
      "eu",
      "\xE9",
      "facer",
      "foi",
      "foron",
      "fun",
      "hab\xEDa",
      "hai",
      "iso",
      "isto",
      "la",
      "las",
      "lle",
      "lles",
      "lo",
      "los",
      "mais",
      "me",
      "meu",
      "meus",
      "min",
      "mi\xF1a",
      "mi\xF1as",
      "moi",
      "na",
      "nas",
      "neste",
      "nin",
      "no",
      "non",
      "nos",
      "nosa",
      "nosas",
      "noso",
      "nosos",
      "n\xF3s",
      "nun",
      "nunha",
      "nuns",
      "nunhas",
      "o",
      "os",
      "ou",
      "\xF3",
      "\xF3s",
      "para",
      "pero",
      "pode",
      "pois",
      "pola",
      "polas",
      "polo",
      "polos",
      "por",
      "que",
      "se",
      "sen\xF3n",
      "ser",
      "seu",
      "seus",
      "sexa",
      "sido",
      "sobre",
      "s\xFAa",
      "s\xFAas",
      "tam\xE9n",
      "tan",
      "te",
      "ten",
      "te\xF1en",
      "te\xF1o",
      "ter",
      "teu",
      "teus",
      "ti",
      "tido",
      "ti\xF1a",
      "tiven",
      "t\xFAa",
      "t\xFAas",
      "un",
      "unha",
      "unhas",
      "uns",
      "vos",
      "vosa",
      "vosas",
      "voso",
      "vosos",
      "v\xF3s"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/it.js
var require_it = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "a",
      "adesso",
      "ai",
      "al",
      "alla",
      "allo",
      "allora",
      "altre",
      "altri",
      "altro",
      "anche",
      "ancora",
      "avere",
      "aveva",
      "avevano",
      "ben",
      "buono",
      "che",
      "chi",
      "cinque",
      "comprare",
      "con",
      "consecutivi",
      "consecutivo",
      "cosa",
      "cui",
      "da",
      "del",
      "della",
      "dello",
      "dentro",
      "deve",
      "devo",
      "di",
      "doppio",
      "due",
      "e",
      "ecco",
      "fare",
      "fine",
      "fino",
      "fra",
      "gente",
      "giu",
      "ha",
      "hai",
      "hanno",
      "ho",
      "il",
      "indietro",
      "invece",
      "io",
      "la",
      "lavoro",
      "le",
      "lei",
      "lo",
      "loro",
      "lui",
      "lungo",
      "ma",
      "me",
      "meglio",
      "molta",
      "molti",
      "molto",
      "nei",
      "nella",
      "no",
      "noi",
      "nome",
      "nostro",
      "nove",
      "nuovi",
      "nuovo",
      "o",
      "oltre",
      "ora",
      "otto",
      "peggio",
      "pero",
      "persone",
      "piu",
      "poco",
      "primo",
      "promesso",
      "qua",
      "quarto",
      "quasi",
      "quattro",
      "quello",
      "questo",
      "qui",
      "quindi",
      "quinto",
      "rispetto",
      "sara",
      "secondo",
      "sei",
      "sembra",
      "sembrava",
      "senza",
      "sette",
      "sia",
      "siamo",
      "siete",
      "solo",
      "sono",
      "sopra",
      "soprattutto",
      "sotto",
      "stati",
      "stato",
      "stesso",
      "su",
      "subito",
      "sul",
      "sulla",
      "tanto",
      "te",
      "tempo",
      "terzo",
      "tra",
      "tre",
      "triplo",
      "ultimo",
      "un",
      "una",
      "uno",
      "va",
      "vai",
      "voi",
      "volte",
      "vostro",
      "a",
      "abbastanza",
      "accidenti",
      "ad",
      "affinche",
      "agli",
      "ahime",
      "ahim\xC3",
      "alcuna",
      "alcuni",
      "alcuno",
      "all",
      "alle",
      "altrimenti",
      "altrui",
      "anni",
      "anno",
      "ansa",
      "assai",
      "attesa",
      "avanti",
      "avendo",
      "avente",
      "aver",
      "avete",
      "avuta",
      "avute",
      "avuti",
      "avuto",
      "basta",
      "bene",
      "benissimo",
      "berlusconi",
      "brava",
      "bravo",
      "c",
      "casa",
      "caso",
      "cento",
      "certa",
      "certe",
      "certi",
      "certo",
      "chicchessia",
      "chiunque",
      "ci",
      "ciascuna",
      "ciascuno",
      "cima",
      "cio",
      "ci\xC3",
      "cioe",
      "cio\xC3",
      "circa",
      "citta",
      "citt\xC3",
      "codesta",
      "codesti",
      "codesto",
      "cogli",
      "coi",
      "col",
      "colei",
      "coll",
      "coloro",
      "colui",
      "come",
      "concernente",
      "consiglio",
      "contro",
      "cortesia",
      "cos",
      "cosi",
      "cos\xC3",
      "d",
      "dagli",
      "dai",
      "dal",
      "dall",
      "dalla",
      "dalle",
      "dallo",
      "davanti",
      "degli",
      "dei",
      "dell",
      "delle",
      "detto",
      "dice",
      "dietro",
      "dire",
      "dirimpetto",
      "dopo",
      "dove",
      "dovra",
      "dovr\xC3",
      "dunque",
      "durante",
      "\xC3",
      "ed",
      "egli",
      "ella",
      "eppure",
      "era",
      "erano",
      "esse",
      "essendo",
      "esser",
      "essere",
      "essi",
      "ex",
      "fa",
      "fatto",
      "favore",
      "fin",
      "finalmente",
      "finche",
      "forse",
      "fuori",
      "gia",
      "gi\xC3",
      "giacche",
      "giorni",
      "giorno",
      "gli",
      "gliela",
      "gliele",
      "glieli",
      "glielo",
      "gliene",
      "grande",
      "grazie",
      "gruppo",
      "i",
      "ieri",
      "improvviso",
      "in",
      "infatti",
      "insieme",
      "intanto",
      "intorno",
      "l",
      "l\xC3",
      "li",
      "lontano",
      "macche",
      "magari",
      "mai",
      "male",
      "malgrado",
      "malissimo",
      "medesimo",
      "mediante",
      "meno",
      "mentre",
      "mesi",
      "mezzo",
      "mi",
      "mia",
      "mie",
      "miei",
      "mila",
      "miliardi",
      "milioni",
      "ministro",
      "mio",
      "moltissimo",
      "ne",
      "negli",
      "nel",
      "nell",
      "nelle",
      "nello",
      "nemmeno",
      "neppure",
      "nessuna",
      "nessuno",
      "niente",
      "non",
      "nondimeno",
      "nostra",
      "nostre",
      "nostri",
      "nulla",
      "od",
      "oggi",
      "ogni",
      "ognuna",
      "ognuno",
      "oppure",
      "ore",
      "osi",
      "ossia",
      "paese",
      "parecchi",
      "parecchie",
      "parecchio",
      "parte",
      "partendo",
      "peccato",
      "per",
      "perche",
      "perch\xC3",
      "percio",
      "perci\xC3",
      "perfino",
      "per\xC3",
      "piedi",
      "pieno",
      "piglia",
      "pi\xC3",
      "po",
      "pochissimo",
      "poi",
      "poiche",
      "press",
      "prima",
      "proprio",
      "puo",
      "pu\xC3",
      "pure",
      "purtroppo",
      "qualche",
      "qualcuna",
      "qualcuno",
      "quale",
      "quali",
      "qualunque",
      "quando",
      "quanta",
      "quante",
      "quanti",
      "quanto",
      "quantunque",
      "quel",
      "quella",
      "quelli",
      "quest",
      "questa",
      "queste",
      "questi",
      "riecco",
      "salvo",
      "sar\xC3",
      "sarebbe",
      "scopo",
      "scorso",
      "se",
      "seguente",
      "sempre",
      "si",
      "solito",
      "sta",
      "staranno",
      "stata",
      "state",
      "sua",
      "successivo",
      "sue",
      "sugli",
      "sui",
      "sull",
      "sulle",
      "sullo",
      "suo",
      "suoi",
      "tale",
      "talvolta",
      "ti",
      "tranne",
      "troppo",
      "tu",
      "tua",
      "tue",
      "tuo",
      "tuoi",
      "tutta",
      "tuttavia",
      "tutte",
      "tutti",
      "tutto",
      "uguali",
      "uomo",
      "vale",
      "varia",
      "varie",
      "vario",
      "verso",
      "vi",
      "via",
      "vicino",
      "visto",
      "vita",
      "volta",
      "vostra",
      "vostre",
      "vostri"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/ko.js
var require_ko = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "\uC544",
      "\uD734",
      "\uC544\uC774\uAD6C",
      "\uC544\uC774\uCFE0",
      "\uC544\uC774\uACE0",
      "\uC5B4",
      "\uB098",
      "\uC6B0\uB9AC",
      "\uC800\uD76C",
      "\uB530\uB77C",
      "\uC758\uD574",
      "\uC744",
      "\uB97C",
      "\uC5D0",
      "\uC758",
      "\uAC00",
      "\uC73C\uB85C",
      "\uB85C",
      "\uC5D0\uAC8C",
      "\uBFD0\uC774\uB2E4",
      "\uC758\uAC70\uD558\uC5EC",
      "\uADFC\uAC70\uD558\uC5EC",
      "\uC785\uAC01\uD558\uC5EC",
      "\uAE30\uC900\uC73C\uB85C",
      "\uC608\uD558\uBA74",
      "\uC608\uB97C \uB4E4\uBA74",
      "\uC608\uB97C \uB4E4\uC790\uBA74",
      "\uC800",
      "\uC18C\uC778",
      "\uC18C\uC0DD",
      "\uC800\uD76C",
      "\uC9C0\uB9D0\uACE0",
      "\uD558\uC9C0\uB9C8",
      "\uD558\uC9C0\uB9C8\uB77C",
      "\uB2E4\uB978",
      "\uBB3C\uB860",
      "\uB610\uD55C",
      "\uADF8\uB9AC\uACE0",
      "\uBE44\uAE38\uC218 \uC5C6\uB2E4",
      "\uD574\uC11C\uB294 \uC548\uB41C\uB2E4",
      "\uBFD0\uB9CC \uC544\uB2C8\uB77C",
      "\uB9CC\uC774 \uC544\uB2C8\uB2E4",
      "\uB9CC\uC740 \uC544\uB2C8\uB2E4",
      "\uB9C9\uB860\uD558\uACE0",
      "\uAD00\uACC4\uC5C6\uC774",
      "\uADF8\uCE58\uC9C0 \uC54A\uB2E4",
      "\uADF8\uB7EC\uB098",
      "\uADF8\uB7F0\uB370",
      "\uD558\uC9C0\uB9CC",
      "\uB4E0\uAC04\uC5D0",
      "\uB17C\uD558\uC9C0 \uC54A\uB2E4",
      "\uB530\uC9C0\uC9C0 \uC54A\uB2E4",
      "\uC124\uC0AC",
      "\uBE44\uB85D",
      "\uB354\uB77C\uB3C4",
      "\uC544\uB2C8\uBA74",
      "\uB9CC \uBABB\uD558\uB2E4",
      "\uD558\uB294 \uD3B8\uC774 \uB0AB\uB2E4",
      "\uBD88\uBB38\uD558\uACE0",
      "\uD5A5\uD558\uC5EC",
      "\uD5A5\uD574\uC11C",
      "\uD5A5\uD558\uB2E4",
      "\uCABD\uC73C\uB85C",
      "\uD2C8\uD0C0",
      "\uC774\uC6A9\uD558\uC5EC",
      "\uD0C0\uB2E4",
      "\uC624\uB974\uB2E4",
      "\uC81C\uC678\uD558\uACE0",
      "\uC774 \uC678\uC5D0",
      "\uC774 \uBC16\uC5D0",
      "\uD558\uC5EC\uC57C",
      "\uBE44\uB85C\uC18C",
      "\uD55C\uB2E4\uBA74 \uBAB0\uB77C\uB3C4",
      "\uC678\uC5D0\uB3C4",
      "\uC774\uACF3",
      "\uC5EC\uAE30",
      "\uBD80\uD130",
      "\uAE30\uC810\uC73C\uB85C",
      "\uB530\uB77C\uC11C",
      "\uD560 \uC0DD\uAC01\uC774\uB2E4",
      "\uD558\uB824\uACE0\uD558\uB2E4",
      "\uC774\uB9AC\uD558\uC5EC",
      "\uADF8\uB9AC\uD558\uC5EC",
      "\uADF8\uB807\uAC8C \uD568\uC73C\uB85C\uC368",
      "\uD558\uC9C0\uB9CC",
      "\uC77C\uB54C",
      "\uD560\uB54C",
      "\uC55E\uC5D0\uC11C",
      "\uC911\uC5D0\uC11C",
      "\uBCF4\uB294\uB370\uC11C",
      "\uC73C\uB85C\uC368",
      "\uB85C\uC368",
      "\uAE4C\uC9C0",
      "\uD574\uC57C\uD55C\uB2E4",
      "\uC77C\uAC83\uC774\uB2E4",
      "\uBC18\uB4DC\uC2DC",
      "\uD560\uC904\uC54C\uB2E4",
      "\uD560\uC218\uC788\uB2E4",
      "\uD560\uC218\uC788\uC5B4",
      "\uC784\uC5D0 \uD2C0\uB9BC\uC5C6\uB2E4",
      "\uD55C\uB2E4\uBA74",
      "\uB4F1",
      "\uB4F1\uB4F1",
      "\uC81C",
      "\uACA8\uC6B0",
      "\uB2E8\uC9C0",
      "\uB2E4\uB9CC",
      "\uD560\uBFD0",
      "\uB529\uB3D9",
      "\uB315\uADF8",
      "\uB300\uD574\uC11C",
      "\uB300\uD558\uC5EC",
      "\uB300\uD558\uBA74",
      "\uD6E8\uC52C",
      "\uC5BC\uB9C8\uB098",
      "\uC5BC\uB9C8\uB9CC\uD07C",
      "\uC5BC\uB9C8\uD07C",
      "\uB0A8\uC9D3",
      "\uC5EC",
      "\uC5BC\uB9C8\uAC04",
      "\uC57D\uAC04",
      "\uB2E4\uC18C",
      "\uC880",
      "\uC870\uAE08",
      "\uB2E4\uC218",
      "\uBA87",
      "\uC5BC\uB9C8",
      "\uC9C0\uB9CC",
      "\uD558\uBB3C\uBA70",
      "\uB610\uD55C",
      "\uADF8\uB7EC\uB098",
      "\uADF8\uB807\uC9C0\uB9CC",
      "\uD558\uC9C0\uB9CC",
      "\uC774\uC678\uC5D0\uB3C4",
      "\uB300\uD574 \uB9D0\uD558\uC790\uBA74",
      "\uBFD0\uC774\uB2E4",
      "\uB2E4\uC74C\uC5D0",
      "\uBC18\uB300\uB85C",
      "\uBC18\uB300\uB85C \uB9D0\uD558\uC790\uBA74",
      "\uC774\uC640 \uBC18\uB300\uB85C",
      "\uBC14\uAFB8\uC5B4\uC11C \uB9D0\uD558\uBA74",
      "\uBC14\uAFB8\uC5B4\uC11C \uD55C\uB2E4\uBA74",
      "\uB9CC\uC57D",
      "\uADF8\uB807\uC9C0\uC54A\uC73C\uBA74",
      "\uAE4C\uC545",
      "\uD22D",
      "\uB531",
      "\uC090\uAC71\uAC70\uB9AC\uB2E4",
      "\uBCF4\uB4DC\uB4DD",
      "\uBE44\uAC71\uAC70\uB9AC\uB2E4",
      "\uAF48\uB2F9",
      "\uC751\uB2F9",
      "\uD574\uC57C\uD55C\uB2E4",
      "\uC5D0 \uAC00\uC11C",
      "\uAC01",
      "\uAC01\uAC01",
      "\uC5EC\uB7EC\uBD84",
      "\uAC01\uC885",
      "\uAC01\uC790",
      "\uC81C\uAC01\uAE30",
      "\uD558\uB3C4\uB85D\uD558\uB2E4",
      "\uC640",
      "\uACFC",
      "\uADF8\uB7EC\uBBC0\uB85C",
      "\uADF8\uB798\uC11C",
      "\uACE0\uB85C",
      "\uD55C \uAE4C\uB2ED\uC5D0",
      "\uD558\uAE30 \uB54C\uBB38\uC5D0",
      "\uAC70\uB2C8\uC640",
      "\uC774\uC9C0\uB9CC",
      "\uB300\uD558\uC5EC",
      "\uAD00\uD558\uC5EC",
      "\uAD00\uD55C",
      "\uACFC\uC5F0",
      "\uC2E4\uB85C",
      "\uC544\uB2C8\uB098\uB2E4\uB97C\uAC00",
      "\uC0DD\uAC01\uD55C\uB300\uB85C",
      "\uC9C4\uC9DC\uB85C",
      "\uD55C\uC801\uC774\uC788\uB2E4",
      "\uD558\uACE4\uD558\uC600\uB2E4",
      "\uD558",
      "\uD558\uD558",
      "\uD5C8\uD5C8",
      "\uC544\uD558",
      "\uAC70\uBC14",
      "\uC640",
      "\uC624",
      "\uC65C",
      "\uC5B4\uC9F8\uC11C",
      "\uBB34\uC5C7\uB54C\uBB38\uC5D0",
      "\uC5B4\uCC0C",
      "\uD558\uACA0\uB294\uAC00",
      "\uBB34\uC2A8",
      "\uC5B4\uB514",
      "\uC5B4\uB290\uACF3",
      "\uB354\uAD70\uB2E4\uB098",
      "\uD558\uBB3C\uBA70",
      "\uB354\uC6B1\uC774\uB294",
      "\uC5B4\uB290\uB54C",
      "\uC5B8\uC81C",
      "\uC57C",
      "\uC774\uBD10",
      "\uC5B4\uC774",
      "\uC5EC\uBCF4\uC2DC\uC624",
      "\uD750\uD750",
      "\uD765",
      "\uD734",
      "\uD5C9\uD5C9",
      "\uD5D0\uB5A1\uD5D0\uB5A1",
      "\uC601\uCC28",
      "\uC5EC\uCC28",
      "\uC5B4\uAE30\uC5EC\uCC28",
      "\uB059\uB059",
      "\uC544\uC57C",
      "\uC557",
      "\uC544\uC57C",
      "\uCF78\uCF78",
      "\uC878\uC878",
      "\uC88D\uC88D",
      "\uB69D\uB69D",
      "\uC8FC\uB8E9\uC8FC\uB8E9",
      "\uC1A8",
      "\uC6B0\uB974\uB974",
      "\uADF8\uB798\uB3C4",
      "\uB610",
      "\uADF8\uB9AC\uACE0",
      "\uBC14\uAFB8\uC5B4\uB9D0\uD558\uBA74",
      "\uBC14\uAFB8\uC5B4\uB9D0\uD558\uC790\uBA74",
      "\uD639\uC740",
      "\uD639\uC2DC",
      "\uB2F5\uB2E4",
      "\uBC0F",
      "\uADF8\uC5D0 \uB530\uB974\uB294",
      "\uB54C\uAC00 \uB418\uC5B4",
      "\uC989",
      "\uC9C0\uB4E0\uC9C0",
      "\uC124\uB839",
      "\uAC00\uB839",
      "\uD558\uB354\uB77C\uB3C4",
      "\uD560\uC9C0\uB77C\uB3C4",
      "\uC77C\uC9C0\uB77C\uB3C4",
      "\uC9C0\uB4E0\uC9C0",
      "\uBA87",
      "\uAC70\uC758",
      "\uD558\uB9C8\uD130\uBA74",
      "\uC778\uC820",
      "\uC774\uC820",
      "\uB41C\uBC14\uC5D0\uC57C",
      "\uB41C\uC774\uC0C1",
      "\uB9CC\uD07C",
      "\uC5B4\uCC0C\uB40F\uB4E0",
      "\uADF8\uC704\uC5D0",
      "\uAC8C\uB2E4\uAC00",
      "\uC810\uC5D0\uC11C \uBCF4\uC544",
      "\uBE44\uCD94\uC5B4 \uBCF4\uC544",
      "\uACE0\uB824\uD558\uBA74",
      "\uD558\uAC8C\uB420\uAC83\uC774\uB2E4",
      "\uC77C\uAC83\uC774\uB2E4",
      "\uBE44\uAD50\uC801",
      "\uC880",
      "\uBCF4\uB2E4\uB354",
      "\uBE44\uD558\uBA74",
      "\uC2DC\uD0A4\uB2E4",
      "\uD558\uAC8C\uD558\uB2E4",
      "\uD560\uB9CC\uD558\uB2E4",
      "\uC758\uD574\uC11C",
      "\uC5F0\uC774\uC11C",
      "\uC774\uC5B4\uC11C",
      "\uC787\uB530\uB77C",
      "\uB4A4\uB530\uB77C",
      "\uB4A4\uC774\uC5B4",
      "\uACB0\uAD6D",
      "\uC758\uC9C0\uD558\uC5EC",
      "\uAE30\uB300\uC5EC",
      "\uD1B5\uD558\uC5EC",
      "\uC790\uB9C8\uC790",
      "\uB354\uC6B1\uB354",
      "\uBD88\uAD6C\uD558\uACE0",
      "\uC5BC\uB9C8\uB4E0\uC9C0",
      "\uB9C8\uC74C\uB300\uB85C",
      "\uC8FC\uC800\uD558\uC9C0 \uC54A\uACE0",
      "\uACE7",
      "\uC989\uC2DC",
      "\uBC14\uB85C",
      "\uB2F9\uC7A5",
      "\uD558\uC790\uB9C8\uC790",
      "\uBC16\uC5D0 \uC548\uB41C\uB2E4",
      "\uD558\uBA74\uB41C\uB2E4",
      "\uADF8\uB798",
      "\uADF8\uB807\uC9C0",
      "\uC694\uCEE8\uB300",
      "\uB2E4\uC2DC \uB9D0\uD558\uC790\uBA74",
      "\uBC14\uAFD4 \uB9D0\uD558\uBA74",
      "\uC989",
      "\uAD6C\uCCB4\uC801\uC73C\uB85C",
      "\uB9D0\uD558\uC790\uBA74",
      "\uC2DC\uC791\uD558\uC5EC",
      "\uC2DC\uCD08\uC5D0",
      "\uC774\uC0C1",
      "\uD5C8",
      "\uD5C9",
      "\uD5C8\uAC71",
      "\uBC14\uC640\uAC19\uC774",
      "\uD574\uB3C4\uC88B\uB2E4",
      "\uD574\uB3C4\uB41C\uB2E4",
      "\uAC8C\uB2E4\uAC00",
      "\uB354\uAD6C\uB098",
      "\uD558\uBB3C\uBA70",
      "\uC640\uB974\uB974",
      "\uD30D",
      "\uD37D",
      "\uD384\uB801",
      "\uB3D9\uC548",
      "\uC774\uB798",
      "\uD558\uACE0\uC788\uC5C8\uB2E4",
      "\uC774\uC5C8\uB2E4",
      "\uC5D0\uC11C",
      "\uB85C\uBD80\uD130",
      "\uAE4C\uC9C0",
      "\uC608\uD558\uBA74",
      "\uD588\uC5B4\uC694",
      "\uD574\uC694",
      "\uD568\uAED8",
      "\uAC19\uC774",
      "\uB354\uBD88\uC5B4",
      "\uB9C8\uC800",
      "\uB9C8\uC800\uB3C4",
      "\uC591\uC790",
      "\uBAA8\uB450",
      "\uC2B5\uB2C8\uB2E4",
      "\uAC00\uAE4C\uC2A4\uB85C",
      "\uD558\uB824\uACE0\uD558\uB2E4",
      "\uC988\uC74C\uD558\uC5EC",
      "\uB2E4\uB978",
      "\uB2E4\uB978 \uBC29\uBA74\uC73C\uB85C",
      "\uD574\uBD10\uC694",
      "\uC2B5\uB2C8\uAE4C",
      "\uD588\uC5B4\uC694",
      "\uB9D0\uD560\uAC83\uB3C4 \uC5C6\uACE0",
      "\uBB34\uB98E\uC4F0\uACE0",
      "\uAC1C\uC758\uCE58\uC54A\uACE0",
      "\uD558\uB294\uAC83\uB9CC \uBABB\uD558\uB2E4",
      "\uD558\uB294\uAC83\uC774 \uB0AB\uB2E4",
      "\uB9E4",
      "\uB9E4\uBC88",
      "\uB4E4",
      "\uBAA8",
      "\uC5B4\uB290\uAC83",
      "\uC5B4\uB290",
      "\uB85C\uC368",
      "\uAC16\uACE0\uB9D0\uD558\uC790\uBA74",
      "\uC5B4\uB514",
      "\uC5B4\uB290\uCABD",
      "\uC5B4\uB290\uAC83",
      "\uC5B4\uB290\uD574",
      "\uC5B4\uB290 \uB144\uB3C4",
      "\uB77C \uD574\uB3C4",
      "\uC5B8\uC820\uAC00",
      "\uC5B4\uB5A4\uAC83",
      "\uC5B4\uB290\uAC83",
      "\uC800\uAE30",
      "\uC800\uCABD",
      "\uC800\uAC83",
      "\uADF8\uB54C",
      "\uADF8\uB7FC",
      "\uADF8\uB7EC\uBA74",
      "\uC694\uB9CC\uD55C\uAC78",
      "\uADF8\uB798",
      "\uADF8\uB54C",
      "\uC800\uAC83\uB9CC\uD07C",
      "\uADF8\uC800",
      "\uC774\uB974\uAE30\uAE4C\uC9C0",
      "\uD560 \uC904 \uC548\uB2E4",
      "\uD560 \uD798\uC774 \uC788\uB2E4",
      "\uB108",
      "\uB108\uD76C",
      "\uB2F9\uC2E0",
      "\uC5B4\uCC0C",
      "\uC124\uB9C8",
      "\uCC28\uB77C\uB9AC",
      "\uD560\uC9C0\uC5B8\uC815",
      "\uD560\uC9C0\uB77C\uB3C4",
      "\uD560\uB9DD\uC815",
      "\uD560\uC9C0\uC5B8\uC815",
      "\uAD6C\uD1A0\uD558\uB2E4",
      "\uAC8C\uC6B0\uB2E4",
      "\uD1A0\uD558\uB2E4",
      "\uBA54\uC4F0\uAC81\uB2E4",
      "\uC606\uC0AC\uB78C",
      "\uD264",
      "\uCCC7",
      "\uC758\uAC70\uD558\uC5EC",
      "\uADFC\uAC70\uD558\uC5EC",
      "\uC758\uD574",
      "\uB530\uB77C",
      "\uD798\uC785\uC5B4",
      "\uADF8",
      "\uB2E4\uC74C",
      "\uBC84\uAE08",
      "\uB450\uBC88\uC9F8\uB85C",
      "\uAE30\uD0C0",
      "\uCCAB\uBC88\uC9F8\uB85C",
      "\uB098\uBA38\uC9C0\uB294",
      "\uADF8\uC911\uC5D0\uC11C",
      "\uACAC\uC9C0\uC5D0\uC11C",
      "\uD615\uC2DD\uC73C\uB85C \uC4F0\uC5EC",
      "\uC785\uC7A5\uC5D0\uC11C",
      "\uC704\uD574\uC11C",
      "\uB2E8\uC9C0",
      "\uC758\uD574\uB418\uB2E4",
      "\uD558\uB3C4\uB85D\uC2DC\uD0A4\uB2E4",
      "\uBFD0\uB9CC\uC544\uB2C8\uB77C",
      "\uBC18\uB300\uB85C",
      "\uC804\uD6C4",
      "\uC804\uC790",
      "\uC55E\uC758\uAC83",
      "\uC7A0\uC2DC",
      "\uC7A0\uAE50",
      "\uD558\uBA74\uC11C",
      "\uADF8\uB807\uC9C0\uB9CC",
      "\uB2E4\uC74C\uC5D0",
      "\uADF8\uB7EC\uD55C\uC989",
      "\uADF8\uB7F0\uC989",
      "\uB0A8\uB4E4",
      "\uC544\uBB34\uAC70\uB098",
      "\uC5B4\uCC0C\uD558\uB4E0\uC9C0",
      "\uAC19\uB2E4",
      "\uBE44\uC2B7\uD558\uB2E4",
      "\uC608\uCEE8\uB300",
      "\uC774\uB7F4\uC815\uB3C4\uB85C",
      "\uC5B4\uB5BB\uAC8C",
      "\uB9CC\uC57D",
      "\uB9CC\uC77C",
      "\uC704\uC5D0\uC11C \uC11C\uC220\uD55C\uBC14\uC640\uAC19\uC774",
      "\uC778 \uB4EF\uD558\uB2E4",
      "\uD558\uC9C0 \uC54A\uB294\uB2E4\uBA74",
      "\uB9CC\uC57D\uC5D0",
      "\uBB34\uC5C7",
      "\uBB34\uC2A8",
      "\uC5B4\uB290",
      "\uC5B4\uB5A4",
      "\uC544\uB798\uC717",
      "\uC870\uCC28",
      "\uD55C\uB370",
      "\uADF8\uB7FC\uC5D0\uB3C4 \uBD88\uAD6C\uD558\uACE0",
      "\uC5EC\uC804\uD788",
      "\uC2EC\uC9C0\uC5B4",
      "\uAE4C\uC9C0\uB3C4",
      "\uC870\uCC28\uB3C4",
      "\uD558\uC9C0 \uC54A\uB3C4\uB85D",
      "\uC54A\uAE30 \uC704\uD558\uC5EC",
      "\uB54C",
      "\uC2DC\uAC01",
      "\uBB34\uB835",
      "\uC2DC\uAC04",
      "\uB3D9\uC548",
      "\uC5B4\uB54C",
      "\uC5B4\uB5A0\uD55C",
      "\uD558\uC5EC\uAE08",
      "\uB124",
      "\uC608",
      "\uC6B0\uC120",
      "\uB204\uAD6C",
      "\uB204\uAC00 \uC54C\uACA0\uB294\uAC00",
      "\uC544\uBB34\uB3C4",
      "\uC904\uC740\uBAA8\uB978\uB2E4",
      "\uC904\uC740 \uBAB0\uB78F\uB2E4",
      "\uD558\uB294 \uAE40\uC5D0",
      "\uACB8\uC0AC\uACB8\uC0AC",
      "\uD558\uB294\uBC14",
      "\uADF8\uB7F0 \uAE4C\uB2ED\uC5D0",
      "\uD55C \uC774\uC720\uB294",
      "\uADF8\uB7EC\uB2C8",
      "\uADF8\uB7EC\uB2C8\uAE4C",
      "\uB54C\uBB38\uC5D0",
      "\uADF8",
      "\uB108\uD76C",
      "\uADF8\uB4E4",
      "\uB108\uD76C\uB4E4",
      "\uD0C0\uC778",
      "\uAC83",
      "\uAC83\uB4E4",
      "\uB108",
      "\uC704\uD558\uC5EC",
      "\uACF5\uB3D9\uC73C\uB85C",
      "\uB3D9\uC2DC\uC5D0",
      "\uD558\uAE30 \uC704\uD558\uC5EC",
      "\uC5B4\uCC0C\uD558\uC5EC",
      "\uBB34\uC5C7\uB54C\uBB38\uC5D0",
      "\uBD95\uBD95",
      "\uC719\uC719",
      "\uB098",
      "\uC6B0\uB9AC",
      "\uC5C9\uC5C9",
      "\uD718\uC775",
      "\uC719\uC719",
      "\uC624\uD638",
      "\uC544\uD558",
      "\uC5B4\uCA0B\uB4E0",
      "\uB9CC \uBABB\uD558\uB2E4",
      "\uD558\uAE30\uBCF4\uB2E4\uB294",
      "\uCC28\uB77C\uB9AC",
      "\uD558\uB294 \uD3B8\uC774 \uB0AB\uB2E4",
      "\uD750\uD750",
      "\uB180\uB77C\uB2E4",
      "\uC0C1\uB300\uC801\uC73C\uB85C \uB9D0\uD558\uC790\uBA74",
      "\uB9C8\uCE58",
      "\uC544\uB2C8\uB77C\uBA74",
      "\uC27F",
      "\uADF8\uB807\uC9C0 \uC54A\uC73C\uBA74",
      "\uADF8\uB807\uC9C0 \uC54A\uB2E4\uBA74",
      "\uC548 \uADF8\uB7EC\uBA74",
      "\uC544\uB2C8\uC5C8\uB2E4\uBA74",
      "\uD558\uB4E0\uC9C0",
      "\uC544\uB2C8\uBA74",
      "\uC774\uB77C\uBA74",
      "\uC88B\uC544",
      "\uC54C\uC558\uC5B4",
      "\uD558\uB294\uAC83\uB3C4",
      "\uADF8\uB9CC\uC774\uB2E4",
      "\uC5B4\uCA54\uC218 \uC5C6\uB2E4",
      "\uD558\uB098",
      "\uC77C",
      "\uC77C\uBC18\uC801\uC73C\uB85C",
      "\uC77C\uB2E8",
      "\uD55C\uCF20\uC73C\uB85C\uB294",
      "\uC624\uC790\uB9C8\uC790",
      "\uC774\uB807\uAC8C\uB418\uBA74",
      "\uC774\uC640\uAC19\uB2E4\uBA74",
      "\uC804\uBD80",
      "\uD55C\uB9C8\uB514",
      "\uD55C\uD56D\uBAA9",
      "\uADFC\uAC70\uB85C",
      "\uD558\uAE30\uC5D0",
      "\uC544\uC6B8\uB7EC",
      "\uD558\uC9C0 \uC54A\uB3C4\uB85D",
      "\uC54A\uAE30 \uC704\uD574\uC11C",
      "\uC774\uB974\uAE30\uAE4C\uC9C0",
      "\uC774 \uB418\uB2E4",
      "\uB85C \uC778\uD558\uC5EC",
      "\uAE4C\uB2ED\uC73C\uB85C",
      "\uC774\uC720\uB9CC\uC73C\uB85C",
      "\uC774\uB85C \uC778\uD558\uC5EC",
      "\uADF8\uB798\uC11C",
      "\uC774 \uB54C\uBB38\uC5D0",
      "\uADF8\uB7EC\uBBC0\uB85C",
      "\uADF8\uB7F0 \uAE4C\uB2ED\uC5D0",
      "\uC54C \uC218 \uC788\uB2E4",
      "\uACB0\uB860\uC744 \uB0BC \uC218 \uC788\uB2E4",
      "\uC73C\uB85C \uC778\uD558\uC5EC",
      "\uC788\uB2E4",
      "\uC5B4\uB5A4\uAC83",
      "\uAD00\uACC4\uAC00 \uC788\uB2E4",
      "\uAD00\uB828\uC774 \uC788\uB2E4",
      "\uC5F0\uAD00\uB418\uB2E4",
      "\uC5B4\uB5A4\uAC83\uB4E4",
      "\uC5D0 \uB300\uD574",
      "\uC774\uB9AC\uD558\uC5EC",
      "\uADF8\uB9AC\uD558\uC5EC",
      "\uC5EC\uBD80",
      "\uD558\uAE30\uBCF4\uB2E4\uB294",
      "\uD558\uB290\uB2C8",
      "\uD558\uBA74 \uD560\uC218\uB85D",
      "\uC6B4\uC6B4",
      "\uC774\uB7EC\uC774\uB7EC\uD558\uB2E4",
      "\uD558\uAD6C\uB098",
      "\uD558\uB3C4\uB2E4",
      "\uB2E4\uC2DC\uB9D0\uD558\uBA74",
      "\uB2E4\uC74C\uC73C\uB85C",
      "\uC5D0 \uC788\uB2E4",
      "\uC5D0 \uB2EC\uB824 \uC788\uB2E4",
      "\uC6B0\uB9AC",
      "\uC6B0\uB9AC\uB4E4",
      "\uC624\uD788\uB824",
      "\uD558\uAE30\uB294\uD55C\uB370",
      "\uC5B4\uB5BB\uAC8C",
      "\uC5B4\uB5BB\uD574",
      "\uC5B4\uCC0C\uB40F\uC5B4",
      "\uC5B4\uB54C",
      "\uC5B4\uC9F8\uC11C",
      "\uBCF8\uB300\uB85C",
      "\uC790",
      "\uC774",
      "\uC774\uCABD",
      "\uC5EC\uAE30",
      "\uC774\uAC83",
      "\uC774\uBC88",
      "\uC774\uB807\uAC8C\uB9D0\uD558\uC790\uBA74",
      "\uC774\uB7F0",
      "\uC774\uB7EC\uD55C",
      "\uC774\uC640 \uAC19\uC740",
      "\uC694\uB9CC\uD07C",
      "\uC694\uB9CC\uD55C \uAC83",
      "\uC5BC\uB9C8 \uC548 \uB418\uB294 \uAC83",
      "\uC774\uB9CC\uD07C",
      "\uC774 \uC815\uB3C4\uC758",
      "\uC774\uB807\uAC8C \uB9CE\uC740 \uAC83",
      "\uC774\uC640 \uAC19\uB2E4",
      "\uC774\uB54C",
      "\uC774\uB807\uAD6C\uB098",
      "\uAC83\uACFC \uAC19\uC774",
      "\uB07C\uC775",
      "\uC090\uAC71",
      "\uB530\uC704",
      "\uC640 \uAC19\uC740 \uC0AC\uB78C\uB4E4",
      "\uBD80\uB958\uC758 \uC0AC\uB78C\uB4E4",
      "\uC65C\uB0D0\uD558\uBA74",
      "\uC911\uC758\uD558\uB098",
      "\uC624\uC9C1",
      "\uC624\uB85C\uC9C0",
      "\uC5D0 \uD55C\uD558\uB2E4",
      "\uD558\uAE30\uB9CC \uD558\uBA74",
      "\uB3C4\uCC29\uD558\uB2E4",
      "\uAE4C\uC9C0 \uBBF8\uCE58\uB2E4",
      "\uB3C4\uB2EC\uD558\uB2E4",
      "\uC815\uB3C4\uC5D0 \uC774\uB974\uB2E4",
      "\uD560 \uC9C0\uACBD\uC774\uB2E4",
      "\uACB0\uACFC\uC5D0 \uC774\uB974\uB2E4",
      "\uAD00\uD574\uC11C\uB294",
      "\uC5EC\uB7EC\uBD84",
      "\uD558\uACE0 \uC788\uB2E4",
      "\uD55C \uD6C4",
      "\uD63C\uC790",
      "\uC790\uAE30",
      "\uC790\uAE30\uC9D1",
      "\uC790\uC2E0",
      "\uC6B0\uC5D0 \uC885\uD569\uD55C\uAC83\uACFC\uAC19\uC774",
      "\uCD1D\uC801\uC73C\uB85C \uBCF4\uBA74",
      "\uCD1D\uC801\uC73C\uB85C \uB9D0\uD558\uBA74",
      "\uCD1D\uC801\uC73C\uB85C",
      "\uB300\uB85C \uD558\uB2E4",
      "\uC73C\uB85C\uC11C",
      "\uCC38",
      "\uADF8\uB9CC\uC774\uB2E4",
      "\uD560 \uB530\uB984\uC774\uB2E4",
      "\uCFF5",
      "\uD0D5\uD0D5",
      "\uCF85\uCF85",
      "\uB465\uB465",
      "\uBD10",
      "\uBD10\uB77C",
      "\uC544\uC774\uC57C",
      "\uC544\uB2C8",
      "\uC640\uC544",
      "\uC751",
      "\uC544\uC774",
      "\uCC38\uB098",
      "\uB144",
      "\uC6D4",
      "\uC77C",
      "\uB839",
      "\uC601",
      "\uC77C",
      "\uC774",
      "\uC0BC",
      "\uC0AC",
      "\uC624",
      "\uC721",
      "\uB959",
      "\uCE60",
      "\uD314",
      "\uAD6C",
      "\uC774\uCC9C\uC721",
      "\uC774\uCC9C\uCE60",
      "\uC774\uCC9C\uD314",
      "\uC774\uCC9C\uAD6C",
      "\uD558\uB098",
      "\uB458",
      "\uC14B",
      "\uB137",
      "\uB2E4\uC12F",
      "\uC5EC\uC12F",
      "\uC77C\uACF1",
      "\uC5EC\uB35F",
      "\uC544\uD649",
      "\uB839",
      "\uC601"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/nl.js
var require_nl = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "aan",
      "af",
      "al",
      "als",
      "bij",
      "dan",
      "dat",
      "die",
      "dit",
      "een",
      "en",
      "er",
      "had",
      "heb",
      "hem",
      "het",
      "hij",
      "hoe",
      "hun",
      "ik",
      "in",
      "is",
      "je",
      "kan",
      "me",
      "men",
      "met",
      "mij",
      "nog",
      "nu",
      "of",
      "ons",
      "ook",
      "te",
      "tot",
      "uit",
      "van",
      "was",
      "wat",
      "we",
      "wel",
      "wij",
      "zal",
      "ze",
      "zei",
      "zij",
      "zo",
      "zou",
      "aan",
      "aangaande",
      "aangezien",
      "achter",
      "achterna",
      "afgelopen",
      "al",
      "aldaar",
      "aldus",
      "alhoewel",
      "alias",
      "alle",
      "allebei",
      "alleen",
      "alsnog",
      "altijd",
      "altoos",
      "ander",
      "andere",
      "anders",
      "anderszins",
      "behalve",
      "behoudens",
      "beide",
      "beiden",
      "ben",
      "beneden",
      "bent",
      "bepaald",
      "betreffende",
      "bij",
      "binnen",
      "binnenin",
      "boven",
      "bovenal",
      "bovendien",
      "bovengenoemd",
      "bovenstaand",
      "bovenvermeld",
      "buiten",
      "daar",
      "daarheen",
      "daarin",
      "daarna",
      "daarnet",
      "daarom",
      "daarop",
      "daarvanlangs",
      "dan",
      "dat",
      "de",
      "die",
      "dikwijls",
      "dit",
      "door",
      "doorgaand",
      "dus",
      "echter",
      "eer",
      "eerdat",
      "eerder",
      "eerlang",
      "eerst",
      "elk",
      "elke",
      "en",
      "enig",
      "enigszins",
      "enkel",
      "er",
      "erdoor",
      "even",
      "eveneens",
      "evenwel",
      "gauw",
      "gedurende",
      "geen",
      "gehad",
      "gekund",
      "geleden",
      "gelijk",
      "gemoeten",
      "gemogen",
      "geweest",
      "gewoon",
      "gewoonweg",
      "haar",
      "had",
      "hadden",
      "hare",
      "heb",
      "hebben",
      "hebt",
      "heeft",
      "hem",
      "hen",
      "het",
      "hierbeneden",
      "hierboven",
      "hij",
      "hoe",
      "hoewel",
      "hun",
      "hunne",
      "ik",
      "ikzelf",
      "in",
      "inmiddels",
      "inzake",
      "is",
      "jezelf",
      "jij",
      "jijzelf",
      "jou",
      "jouw",
      "jouwe",
      "juist",
      "jullie",
      "kan",
      "klaar",
      "kon",
      "konden",
      "krachtens",
      "kunnen",
      "kunt",
      "later",
      "liever",
      "maar",
      "mag",
      "meer",
      "met",
      "mezelf",
      "mij",
      "mijn",
      "mijnent",
      "mijner",
      "mijzelf",
      "misschien",
      "mocht",
      "mochten",
      "moest",
      "moesten",
      "moet",
      "moeten",
      "mogen",
      "na",
      "naar",
      "nadat",
      "net",
      "niet",
      "noch",
      "nog",
      "nogal",
      "nu",
      "of",
      "ofschoon",
      "om",
      "omdat",
      "omhoog",
      "omlaag",
      "omstreeks",
      "omtrent",
      "omver",
      "onder",
      "ondertussen",
      "ongeveer",
      "ons",
      "onszelf",
      "onze",
      "ook",
      "op",
      "opnieuw",
      "opzij",
      "over",
      "overeind",
      "overigens",
      "pas",
      "precies",
      "reeds",
      "rond",
      "rondom",
      "sedert",
      "sinds",
      "sindsdien",
      "slechts",
      "sommige",
      "spoedig",
      "steeds",
      "tamelijk",
      "tenzij",
      "terwijl",
      "thans",
      "tijdens",
      "toch",
      "toen",
      "toenmaals",
      "toenmalig",
      "tot",
      "totdat",
      "tussen",
      "uit",
      "uitgezonderd",
      "vaakwat",
      "van",
      "vandaan",
      "vanuit",
      "vanwege",
      "veeleer",
      "verder",
      "vervolgens",
      "vol",
      "volgens",
      "voor",
      "vooraf",
      "vooral",
      "vooralsnog",
      "voorbij",
      "voordat",
      "voordezen",
      "voordien",
      "voorheen",
      "voorop",
      "vooruit",
      "vrij",
      "vroeg",
      "waar",
      "waarom",
      "wanneer",
      "want",
      "waren",
      "was",
      "weer",
      "weg",
      "wegens",
      "wel",
      "weldra",
      "welk",
      "welke",
      "wie",
      "wiens",
      "wier",
      "wij",
      "wijzelf",
      "zal",
      "ze",
      "zelfs",
      "zichzelf",
      "zij",
      "zijn",
      "zijne",
      "zo",
      "zodra",
      "zonder",
      "zou",
      "zouden",
      "zowat",
      "zulke",
      "zullen",
      "zult"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/pl.js
var require_pl = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "a",
      "aby",
      "ach",
      "acz",
      "aczkolwiek",
      "aj",
      "albo",
      "ale",
      "alez",
      "ale\u017C",
      "ani",
      "az",
      "a\u017C",
      "bardziej",
      "bardzo",
      "bo",
      "bowiem",
      "by",
      "byli",
      "bynajmniej",
      "byc",
      "by\u0107",
      "byl",
      "by\u0142",
      "byla",
      "bylo",
      "byly",
      "by\u0142a",
      "by\u0142o",
      "by\u0142y",
      "bedzie",
      "b\u0119dzie",
      "beda",
      "b\u0119d\u0105",
      "cali",
      "cala",
      "ca\u0142a",
      "caly",
      "ca\u0142y",
      "ci",
      "cie",
      "ci\u0119",
      "ciebie",
      "co",
      "cokolwiek",
      "cos",
      "co\u015B",
      "czasami",
      "czasem",
      "czemu",
      "czy",
      "czyli",
      "daleko",
      "dla",
      "dlaczego",
      "dlatego",
      "do",
      "dobrze",
      "dokad",
      "dok\u0105d",
      "dosc",
      "do\u015B\u0107",
      "duzo",
      "du\u017Co",
      "dwa",
      "dwaj",
      "dwie",
      "dwoje",
      "dzis",
      "dzi\u015B",
      "dzisiaj",
      "gdy",
      "gdyby",
      "gdyz",
      "gdy\u017C",
      "gdzie",
      "gdziekolwiek",
      "gdzies",
      "gdzie\u015B",
      "go",
      "i",
      "ich",
      "ile",
      "im",
      "inna",
      "inne",
      "inny",
      "innych",
      "iz",
      "i\u017C",
      "ja",
      "j\u0105",
      "jak",
      "jakas",
      "jaka\u015B",
      "jakby",
      "jaki",
      "jakichs",
      "jakich\u015B",
      "jakie",
      "jakis",
      "jaki\u015B",
      "jakiz",
      "jaki\u017C",
      "jakkolwiek",
      "jako",
      "jakos",
      "jako\u015B",
      "je",
      "jeden",
      "jedna",
      "jedno",
      "jednak",
      "jednakze",
      "jednak\u017Ce",
      "jego",
      "jej",
      "jemu",
      "jest",
      "jestem",
      "jeszcze",
      "jesli",
      "je\u015Bli",
      "jezeli",
      "je\u017Celi",
      "juz",
      "ju\u017C",
      "kazdy",
      "ka\u017Cdy",
      "kiedy",
      "kilka",
      "kims",
      "kim\u015B",
      "kto",
      "ktokolwiek",
      "ktos",
      "kto\u015B",
      "ktora",
      "ktore",
      "kt\xF3re",
      "ktorego",
      "ktorej",
      "ktory",
      "ktorych",
      "ktorym",
      "ktorzy",
      "kt\xF3ra",
      "kt\xF3rego",
      "kt\xF3rej",
      "kt\xF3ry",
      "kt\xF3rych",
      "kt\xF3rym",
      "kt\xF3rzy",
      "ku",
      "lat",
      "lecz",
      "lub",
      "ma",
      "maj\u0105",
      "ma\u0142o",
      "mam",
      "mi",
      "mimo",
      "miedzy",
      "mi\u0119dzy",
      "mna",
      "mn\u0105",
      "mnie",
      "moga",
      "mog\u0105",
      "moi",
      "moim",
      "moja",
      "moje",
      "moze",
      "mo\u017Ce",
      "mozliwe",
      "mozna",
      "mo\u017Cliwe",
      "mo\u017Cna",
      "moj",
      "m\xF3j",
      "mu",
      "musi",
      "my",
      "na",
      "nad",
      "nam",
      "nami",
      "nas",
      "nasi",
      "nasz",
      "nasza",
      "nasze",
      "naszego",
      "naszych",
      "natomiast",
      "natychmiast",
      "nawet",
      "nia",
      "ni\u0105",
      "nic",
      "nich",
      "nie",
      "niech",
      "niego",
      "niej",
      "niemu",
      "nigdy",
      "nim",
      "nimi",
      "niz",
      "ni\u017C",
      "no",
      "o",
      "obok",
      "od",
      "oko\u0142o",
      "on",
      "ona",
      "one",
      "oni",
      "ono",
      "oraz",
      "oto",
      "owszem",
      "pan",
      "pana",
      "pani",
      "po",
      "pod",
      "podczas",
      "pomimo",
      "ponad",
      "poniewaz",
      "poniewa\u017C",
      "powinien",
      "powinna",
      "powinni",
      "powinno",
      "poza",
      "prawie",
      "przeciez",
      "przecie\u017C",
      "przed",
      "przede",
      "przedtem",
      "przez",
      "przy",
      "roku",
      "rowniez",
      "r\xF3wnie\u017C",
      "sam",
      "sama",
      "s\u0105",
      "sie",
      "si\u0119",
      "skad",
      "sk\u0105d",
      "sobie",
      "soba",
      "sob\u0105",
      "sposob",
      "spos\xF3b",
      "swoje",
      "ta",
      "tak",
      "taka",
      "taki",
      "takie",
      "takze",
      "tak\u017Ce",
      "tam",
      "te",
      "tego",
      "tej",
      "ten",
      "teraz",
      "te\u017C",
      "to",
      "toba",
      "tob\u0105",
      "tobie",
      "totez",
      "tote\u017C",
      "trzeba",
      "tu",
      "tutaj",
      "twoi",
      "twoim",
      "twoja",
      "twoje",
      "twym",
      "twoj",
      "tw\xF3j",
      "ty",
      "tych",
      "tylko",
      "tym",
      "u",
      "w",
      "wam",
      "wami",
      "was",
      "wasz",
      "wasza",
      "wasze",
      "we",
      "wed\u0142ug",
      "wiele",
      "wielu",
      "wi\u0119c",
      "wi\u0119cej",
      "wszyscy",
      "wszystkich",
      "wszystkie",
      "wszystkim",
      "wszystko",
      "wtedy",
      "wy",
      "wlasnie",
      "w\u0142a\u015Bnie",
      "z",
      "za",
      "zapewne",
      "zawsze",
      "ze",
      "znowu",
      "znow",
      "zn\xF3w",
      "zostal",
      "zosta\u0142",
      "zaden",
      "zadna",
      "zadne",
      "zadnych",
      "ze",
      "zeby",
      "\u017Caden",
      "\u017Cadna",
      "\u017Cadne",
      "\u017Cadnych",
      "\u017Ce",
      "\u017Ceby"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/pt.js
var require_pt = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "a",
      "\xE0",
      "adeus",
      "agora",
      "a\xED",
      "ainda",
      "al\xE9m",
      "algo",
      "algumas",
      "alguns",
      "ali",
      "ano",
      "anos",
      "antes",
      "ao",
      "aos",
      "apenas",
      "apoio",
      "ap\xF3s",
      "aquela",
      "aquelas",
      "aquele",
      "aqueles",
      "aqui",
      "aquilo",
      "\xE1rea",
      "as",
      "\xE0s",
      "assim",
      "at\xE9",
      "atr\xE1s",
      "atrav\xE9s",
      "baixo",
      "bastante",
      "bem",
      "boa",
      "boas",
      "bom",
      "bons",
      "breve",
      "c\xE1",
      "cada",
      "catorze",
      "cedo",
      "cento",
      "certamente",
      "certeza",
      "cima",
      "cinco",
      "coisa",
      "com",
      "como",
      "conselho",
      "contra",
      "custa",
      "da",
      "d\xE1",
      "d\xE3o",
      "daquela",
      "daquelas",
      "daquele",
      "daqueles",
      "dar",
      "das",
      "de",
      "debaixo",
      "demais",
      "dentro",
      "depois",
      "desde",
      "dessa",
      "dessas",
      "desse",
      "desses",
      "desta",
      "destas",
      "deste",
      "destes",
      "deve",
      "dever\xE1",
      "dez",
      "dezanove",
      "dezasseis",
      "dezassete",
      "dezoito",
      "dia",
      "diante",
      "diz",
      "dizem",
      "dizer",
      "do",
      "dois",
      "dos",
      "doze",
      "duas",
      "d\xFAvida",
      "e",
      "\xE9",
      "ela",
      "elas",
      "ele",
      "eles",
      "em",
      "embora",
      "entre",
      "era",
      "\xE9s",
      "essa",
      "essas",
      "esse",
      "esses",
      "esta",
      "est\xE1",
      "est\xE3o",
      "estar",
      "estas",
      "est\xE1s",
      "estava",
      "este",
      "estes",
      "esteve",
      "estive",
      "estivemos",
      "estiveram",
      "estiveste",
      "estivestes",
      "estou",
      "eu",
      "exemplo",
      "fa\xE7o",
      "falta",
      "favor",
      "faz",
      "fazeis",
      "fazem",
      "fazemos",
      "fazer",
      "fazes",
      "fez",
      "fim",
      "final",
      "foi",
      "fomos",
      "for",
      "foram",
      "forma",
      "foste",
      "fostes",
      "fui",
      "geral",
      "grande",
      "grandes",
      "grupo",
      "h\xE1",
      "hoje",
      "hora",
      "horas",
      "isso",
      "isto",
      "j\xE1",
      "l\xE1",
      "lado",
      "local",
      "logo",
      "longe",
      "lugar",
      "maior",
      "maioria",
      "mais",
      "mal",
      "mas",
      "m\xE1ximo",
      "me",
      "meio",
      "menor",
      "menos",
      "m\xEAs",
      "meses",
      "meu",
      "meus",
      "mil",
      "minha",
      "minhas",
      "momento",
      "muito",
      "muitos",
      "na",
      "nada",
      "n\xE3o",
      "naquela",
      "naquelas",
      "naquele",
      "naqueles",
      "nas",
      "nem",
      "nenhuma",
      "nessa",
      "nessas",
      "nesse",
      "nesses",
      "nesta",
      "nestas",
      "neste",
      "nestes",
      "n\xEDvel",
      "no",
      "noite",
      "nome",
      "nos",
      "n\xF3s",
      "nossa",
      "nossas",
      "nosso",
      "nossos",
      "nova",
      "novas",
      "nove",
      "novo",
      "novos",
      "num",
      "numa",
      "n\xFAmero",
      "nunca",
      "o",
      "obra",
      "obrigada",
      "obrigado",
      "oitava",
      "oitavo",
      "oito",
      "onde",
      "ontem",
      "onze",
      "os",
      "ou",
      "outra",
      "outras",
      "outro",
      "outros",
      "para",
      "parece",
      "parte",
      "partir",
      "paucas",
      "pela",
      "pelas",
      "pelo",
      "pelos",
      "perto",
      "pode",
      "p\xF4de",
      "podem",
      "poder",
      "p\xF5e",
      "p\xF5em",
      "ponto",
      "pontos",
      "por",
      "porque",
      "porqu\xEA",
      "posi\xE7\xE3o",
      "poss\xEDvel",
      "possivelmente",
      "posso",
      "pouca",
      "pouco",
      "poucos",
      "primeira",
      "primeiras",
      "primeiro",
      "primeiros",
      "pr\xF3pria",
      "pr\xF3prias",
      "pr\xF3prio",
      "pr\xF3prios",
      "pr\xF3xima",
      "pr\xF3ximas",
      "pr\xF3ximo",
      "pr\xF3ximos",
      "puderam",
      "qu\xE1is",
      "qual",
      "quando",
      "quanto",
      "quarta",
      "quarto",
      "quatro",
      "que",
      "qu\xEA",
      "quem",
      "quer",
      "quereis",
      "querem",
      "queremas",
      "queres",
      "quero",
      "quest\xE3o",
      "quinta",
      "quinto",
      "quinze",
      "rela\xE7\xE3o",
      "sabe",
      "sabem",
      "s\xE3o",
      "se",
      "segunda",
      "segundo",
      "sei",
      "seis",
      "sem",
      "sempre",
      "ser",
      "seria",
      "sete",
      "s\xE9tima",
      "s\xE9timo",
      "seu",
      "seus",
      "sexta",
      "sexto",
      "sim",
      "sistema",
      "sob",
      "sobre",
      "sois",
      "somos",
      "sou",
      "sua",
      "suas",
      "tal",
      "talvez",
      "tamb\xE9m",
      "tanta",
      "tantas",
      "tanto",
      "t\xE3o",
      "tarde",
      "te",
      "tem",
      "t\xEAm",
      "temos",
      "tendes",
      "tenho",
      "tens",
      "ter",
      "terceira",
      "terceiro",
      "teu",
      "teus",
      "teve",
      "tive",
      "tivemos",
      "tiveram",
      "tiveste",
      "tivestes",
      "toda",
      "todas",
      "todo",
      "todos",
      "trabalho",
      "tr\xEAs",
      "treze",
      "tu",
      "tua",
      "tuas",
      "tudo",
      "um",
      "uma",
      "umas",
      "uns",
      "vai",
      "vais",
      "v\xE3o",
      "v\xE1rios",
      "vem",
      "v\xEAm",
      "vens",
      "ver",
      "vez",
      "vezes",
      "viagem",
      "vindo",
      "vinte",
      "voc\xEA",
      "voc\xEAs",
      "vos",
      "v\xF3s",
      "vossa",
      "vossas",
      "vosso",
      "vossos",
      "zero"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/ro.js
var require_ro = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "a",
      "abia",
      "acea",
      "aceasta",
      "aceast\u0103",
      "aceea",
      "aceeasi",
      "acei",
      "aceia",
      "acel",
      "acela",
      "acelasi",
      "acele",
      "acelea",
      "acest",
      "acesta",
      "aceste",
      "acestea",
      "acestei",
      "acestia",
      "acestui",
      "ace\u015Fti",
      "ace\u015Ftia",
      "acolo",
      "acord",
      "acum",
      "adica",
      "ai",
      "aia",
      "aib\u0103",
      "aici",
      "aiurea",
      "al",
      "ala",
      "alaturi",
      "ale",
      "alea",
      "alt",
      "alta",
      "altceva",
      "altcineva",
      "alte",
      "altfel",
      "alti",
      "altii",
      "altul",
      "am",
      "anume",
      "apoi",
      "ar",
      "are",
      "as",
      "asa",
      "asemenea",
      "asta",
      "astazi",
      "astea",
      "astfel",
      "ast\u0103zi",
      "asupra",
      "atare",
      "atat",
      "atata",
      "atatea",
      "atatia",
      "ati",
      "atit",
      "atita",
      "atitea",
      "atitia",
      "atunci",
      "au",
      "avea",
      "avem",
      "ave\u0163i",
      "avut",
      "azi",
      "a\u015F",
      "a\u015Fadar",
      "a\u0163i",
      "b",
      "ba",
      "bine",
      "bucur",
      "bun\u0103",
      "c",
      "ca",
      "cam",
      "cand",
      "capat",
      "care",
      "careia",
      "carora",
      "caruia",
      "cat",
      "catre",
      "caut",
      "ce",
      "cea",
      "ceea",
      "cei",
      "ceilalti",
      "cel",
      "cele",
      "celor",
      "ceva",
      "chiar",
      "ci",
      "cinci",
      "cind",
      "cine",
      "cineva",
      "cit",
      "cita",
      "cite",
      "citeva",
      "citi",
      "citiva",
      "conform",
      "contra",
      "cu",
      "cui",
      "cum",
      "cumva",
      "cur\xE2nd",
      "cur\xEEnd",
      "c\xE2nd",
      "c\xE2t",
      "c\xE2te",
      "c\xE2tva",
      "c\xE2\u0163i",
      "c\xEEnd",
      "c\xEEt",
      "c\xEEte",
      "c\xEEtva",
      "c\xEE\u0163i",
      "c\u0103",
      "c\u0103ci",
      "c\u0103rei",
      "c\u0103ror",
      "c\u0103rui",
      "c\u0103tre",
      "d",
      "da",
      "daca",
      "dac\u0103",
      "dar",
      "dat",
      "datorit\u0103",
      "dat\u0103",
      "dau",
      "de",
      "deasupra",
      "deci",
      "decit",
      "degraba",
      "deja",
      "deoarece",
      "departe",
      "desi",
      "despre",
      "de\u015Fi",
      "din",
      "dinaintea",
      "dintr",
      "dintr-",
      "dintre",
      "doar",
      "doi",
      "doilea",
      "dou\u0103",
      "drept",
      "dupa",
      "dup\u0103",
      "d\u0103",
      "e",
      "ea",
      "ei",
      "el",
      "ele",
      "era",
      "eram",
      "este",
      "eu",
      "exact",
      "e\u015Fti",
      "f",
      "face",
      "fara",
      "fata",
      "fel",
      "fi",
      "fie",
      "fiecare",
      "fii",
      "fim",
      "fiu",
      "fi\u0163i",
      "foarte",
      "fost",
      "frumos",
      "f\u0103r\u0103",
      "g",
      "geaba",
      "gra\u0163ie",
      "h",
      "halb\u0103",
      "i",
      "ia",
      "iar",
      "ieri",
      "ii",
      "il",
      "imi",
      "in",
      "inainte",
      "inapoi",
      "inca",
      "incit",
      "insa",
      "intr",
      "intre",
      "isi",
      "iti",
      "j",
      "k",
      "l",
      "la",
      "le",
      "li",
      "lor",
      "lui",
      "l\xE2ng\u0103",
      "l\xEEng\u0103",
      "m",
      "ma",
      "mai",
      "mare",
      "mea",
      "mei",
      "mele",
      "mereu",
      "meu",
      "mi",
      "mie",
      "mine",
      "mod",
      "mult",
      "multa",
      "multe",
      "multi",
      "mult\u0103",
      "mul\u0163i",
      "mul\u0163umesc",
      "m\xE2ine",
      "m\xEEine",
      "m\u0103",
      "n",
      "ne",
      "nevoie",
      "ni",
      "nici",
      "niciodata",
      "nic\u0103ieri",
      "nimeni",
      "nimeri",
      "nimic",
      "niste",
      "ni\u015Fte",
      "noastre",
      "noastr\u0103",
      "noi",
      "noroc",
      "nostri",
      "nostru",
      "nou",
      "noua",
      "nou\u0103",
      "no\u015Ftri",
      "nu",
      "numai",
      "o",
      "opt",
      "or",
      "ori",
      "oricare",
      "orice",
      "oricine",
      "oricum",
      "oric\xE2nd",
      "oric\xE2t",
      "oric\xEEnd",
      "oric\xEEt",
      "oriunde",
      "p",
      "pai",
      "parca",
      "patra",
      "patru",
      "patrulea",
      "pe",
      "pentru",
      "peste",
      "pic",
      "pina",
      "plus",
      "poate",
      "pot",
      "prea",
      "prima",
      "primul",
      "prin",
      "printr-",
      "putini",
      "pu\u0163in",
      "pu\u0163ina",
      "pu\u0163in\u0103",
      "p\xE2n\u0103",
      "p\xEEn\u0103",
      "r",
      "rog",
      "s",
      "sa",
      "sa-mi",
      "sa-ti",
      "sai",
      "sale",
      "sau",
      "se",
      "si",
      "sint",
      "sintem",
      "spate",
      "spre",
      "sub",
      "sunt",
      "suntem",
      "sunte\u0163i",
      "sus",
      "sut\u0103",
      "s\xEEnt",
      "s\xEEntem",
      "s\xEEnte\u0163i",
      "s\u0103",
      "s\u0103i",
      "s\u0103u",
      "t",
      "ta",
      "tale",
      "te",
      "ti",
      "timp",
      "tine",
      "toata",
      "toate",
      "toat\u0103",
      "tocmai",
      "tot",
      "toti",
      "totul",
      "totusi",
      "totu\u015Fi",
      "to\u0163i",
      "trei",
      "treia",
      "treilea",
      "tu",
      "tuturor",
      "t\u0103i",
      "t\u0103u",
      "u",
      "ul",
      "ului",
      "un",
      "una",
      "unde",
      "undeva",
      "unei",
      "uneia",
      "unele",
      "uneori",
      "unii",
      "unor",
      "unora",
      "unu",
      "unui",
      "unuia",
      "unul",
      "v",
      "va",
      "vi",
      "voastre",
      "voastr\u0103",
      "voi",
      "vom",
      "vor",
      "vostru",
      "vou\u0103",
      "vo\u015Ftri",
      "vreme",
      "vreo",
      "vreun",
      "v\u0103",
      "x",
      "z",
      "zece",
      "zero",
      "zi",
      "zice",
      "\xEEi",
      "\xEEl",
      "\xEEmi",
      "\xEEmpotriva",
      "\xEEn",
      "\xEEnainte",
      "\xEEnaintea",
      "\xEEncotro",
      "\xEEnc\xE2t",
      "\xEEnc\xEEt",
      "\xEEntre",
      "\xEEntruc\xE2t",
      "\xEEntruc\xEEt",
      "\xEE\u0163i",
      "\u0103la",
      "\u0103lea",
      "\u0103sta",
      "\u0103stea",
      "\u0103\u015Ftia",
      "\u015Fapte",
      "\u015Fase",
      "\u015Fi",
      "\u015Ftiu",
      "\u0163i",
      "\u0163ie"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/ru.js
var require_ru = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "\u0430",
      "\u0435",
      "\u0438",
      "\u0436",
      "\u043C",
      "\u043E",
      "\u043D\u0430",
      "\u043D\u0435",
      "\u043D\u0438",
      "\u043E\u0431",
      "\u043D\u043E",
      "\u043E\u043D",
      "\u043C\u043D\u0435",
      "\u043C\u043E\u0438",
      "\u043C\u043E\u0436",
      "\u043E\u043D\u0430",
      "\u043E\u043D\u0438",
      "\u043E\u043D\u043E",
      "\u043C\u043D\u043E\u0439",
      "\u043C\u043D\u043E\u0433\u043E",
      "\u043C\u043D\u043E\u0433\u043E\u0447\u0438\u0441\u043B\u0435\u043D\u043D\u043E\u0435",
      "\u043C\u043D\u043E\u0433\u043E\u0447\u0438\u0441\u043B\u0435\u043D\u043D\u0430\u044F",
      "\u043C\u043D\u043E\u0433\u043E\u0447\u0438\u0441\u043B\u0435\u043D\u043D\u044B\u0435",
      "\u043C\u043D\u043E\u0433\u043E\u0447\u0438\u0441\u043B\u0435\u043D\u043D\u044B\u0439",
      "\u043C\u043D\u043E\u044E",
      "\u043C\u043E\u0439",
      "\u043C\u043E\u0433",
      "\u043C\u043E\u0433\u0443\u0442",
      "\u043C\u043E\u0436\u043D\u043E",
      "\u043C\u043E\u0436\u0435\u0442",
      "\u043C\u043E\u0436\u0445\u043E",
      "\u043C\u043E\u0440",
      "\u043C\u043E\u044F",
      "\u043C\u043E\u0451",
      "\u043C\u043E\u0447\u044C",
      "\u043D\u0430\u0434",
      "\u043D\u0435\u0435",
      "\u043E\u0431\u0430",
      "\u043D\u0430\u043C",
      "\u043D\u0435\u043C",
      "\u043D\u0430\u043C\u0438",
      "\u043D\u0438\u043C\u0438",
      "\u043C\u0438\u043C\u043E",
      "\u043D\u0435\u043C\u043D\u043E\u0433\u043E",
      "\u043E\u0434\u043D\u043E\u0439",
      "\u043E\u0434\u043D\u043E\u0433\u043E",
      "\u043C\u0435\u043D\u0435\u0435",
      "\u043E\u0434\u043D\u0430\u0436\u0434\u044B",
      "\u043E\u0434\u043D\u0430\u043A\u043E",
      "\u043C\u0435\u043D\u044F",
      "\u043D\u0435\u043C\u0443",
      "\u043C\u0435\u043D\u044C\u0448\u0435",
      "\u043D\u0435\u0439",
      "\u043D\u0430\u0432\u0435\u0440\u0445\u0443",
      "\u043D\u0435\u0433\u043E",
      "\u043D\u0438\u0436\u0435",
      "\u043C\u0430\u043B\u043E",
      "\u043D\u0430\u0434\u043E",
      "\u043E\u0434\u0438\u043D",
      "\u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u044C",
      "\u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u044B\u0439",
      "\u043D\u0430\u0437\u0430\u0434",
      "\u043D\u0430\u0438\u0431\u043E\u043B\u0435\u0435",
      "\u043D\u0435\u0434\u0430\u0432\u043D\u043E",
      "\u043C\u0438\u043B\u043B\u0438\u043E\u043D\u043E\u0432",
      "\u043D\u0435\u0434\u0430\u043B\u0435\u043A\u043E",
      "\u043C\u0435\u0436\u0434\u0443",
      "\u043D\u0438\u0437\u043A\u043E",
      "\u043C\u0435\u043B\u044F",
      "\u043D\u0435\u043B\u044C\u0437\u044F",
      "\u043D\u0438\u0431\u0443\u0434\u044C",
      "\u043D\u0435\u043F\u0440\u0435\u0440\u044B\u0432\u043D\u043E",
      "\u043D\u0430\u043A\u043E\u043D\u0435\u0446",
      "\u043D\u0438\u043A\u043E\u0433\u0434\u0430",
      "\u043D\u0438\u043A\u0443\u0434\u0430",
      "\u043D\u0430\u0441",
      "\u043D\u0430\u0448",
      "\u043D\u0435\u0442",
      "\u043D\u0435\u044E",
      "\u043D\u0435\u0451",
      "\u043D\u0438\u0445",
      "\u043C\u0438\u0440\u0430",
      "\u043D\u0430\u0448\u0430",
      "\u043D\u0430\u0448\u0435",
      "\u043D\u0430\u0448\u0438",
      "\u043D\u0438\u0447\u0435\u0433\u043E",
      "\u043D\u0430\u0447\u0430\u043B\u0430",
      "\u043D\u0435\u0440\u0435\u0434\u043A\u043E",
      "\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E",
      "\u043E\u0431\u044B\u0447\u043D\u043E",
      "\u043E\u043F\u044F\u0442\u044C",
      "\u043E\u043A\u043E\u043B\u043E",
      "\u043C\u044B",
      "\u043D\u0443",
      "\u043D\u0445",
      "\u043E\u0442",
      "\u043E\u0442\u043E\u0432\u0441\u044E\u0434\u0443",
      "\u043E\u0441\u043E\u0431\u0435\u043D\u043D\u043E",
      "\u043D\u0443\u0436\u043D\u043E",
      "\u043E\u0447\u0435\u043D\u044C",
      "\u043E\u0442\u0441\u044E\u0434\u0430",
      "\u0432",
      "\u0432\u043E",
      "\u0432\u043E\u043D",
      "\u0432\u043D\u0438\u0437",
      "\u0432\u043D\u0438\u0437\u0443",
      "\u0432\u043E\u043A\u0440\u0443\u0433",
      "\u0432\u043E\u0442",
      "\u0432\u043E\u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u044C",
      "\u0432\u043E\u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u044B\u0439",
      "\u0432\u043E\u0441\u0435\u043C\u044C",
      "\u0432\u043E\u0441\u044C\u043C\u043E\u0439",
      "\u0432\u0432\u0435\u0440\u0445",
      "\u0432\u0430\u043C",
      "\u0432\u0430\u043C\u0438",
      "\u0432\u0430\u0436\u043D\u043E\u0435",
      "\u0432\u0430\u0436\u043D\u0430\u044F",
      "\u0432\u0430\u0436\u043D\u044B\u0435",
      "\u0432\u0430\u0436\u043D\u044B\u0439",
      "\u0432\u0434\u0430\u043B\u0438",
      "\u0432\u0435\u0437\u0434\u0435",
      "\u0432\u0435\u0434\u044C",
      "\u0432\u0430\u0441",
      "\u0432\u0430\u0448",
      "\u0432\u0430\u0448\u0430",
      "\u0432\u0430\u0448\u0435",
      "\u0432\u0430\u0448\u0438",
      "\u0432\u043F\u0440\u043E\u0447\u0435\u043C",
      "\u0432\u0435\u0441\u044C",
      "\u0432\u0434\u0440\u0443\u0433",
      "\u0432\u044B",
      "\u0432\u0441\u0435",
      "\u0432\u0442\u043E\u0440\u043E\u0439",
      "\u0432\u0441\u0435\u043C",
      "\u0432\u0441\u0435\u043C\u0438",
      "\u0432\u0440\u0435\u043C\u0435\u043D\u0438",
      "\u0432\u0440\u0435\u043C\u044F",
      "\u0432\u0441\u0435\u043C\u0443",
      "\u0432\u0441\u0435\u0433\u043E",
      "\u0432\u0441\u0435\u0433\u0434\u0430",
      "\u0432\u0441\u0435\u0445",
      "\u0432\u0441\u0435\u044E",
      "\u0432\u0441\u044E",
      "\u0432\u0441\u044F",
      "\u0432\u0441\u0451",
      "\u0432\u0441\u044E\u0434\u0443",
      "\u0433",
      "\u0433\u043E\u0434",
      "\u0433\u043E\u0432\u043E\u0440\u0438\u043B",
      "\u0433\u043E\u0432\u043E\u0440\u0438\u0442",
      "\u0433\u043E\u0434\u0430",
      "\u0433\u043E\u0434\u0443",
      "\u0433\u0434\u0435",
      "\u0434\u0430",
      "\u0435\u0435",
      "\u0437\u0430",
      "\u0438\u0437",
      "\u043B\u0438",
      "\u0436\u0435",
      "\u0438\u043C",
      "\u0434\u043E",
      "\u043F\u043E",
      "\u0438\u043C\u0438",
      "\u043F\u043E\u0434",
      "\u0438\u043D\u043E\u0433\u0434\u0430",
      "\u0434\u043E\u0432\u043E\u043B\u044C\u043D\u043E",
      "\u0438\u043C\u0435\u043D\u043D\u043E",
      "\u0434\u043E\u043B\u0433\u043E",
      "\u043F\u043E\u0437\u0436\u0435",
      "\u0431\u043E\u043B\u0435\u0435",
      "\u0434\u043E\u043B\u0436\u043D\u043E",
      "\u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430",
      "\u0437\u043D\u0430\u0447\u0438\u0442",
      "\u0438\u043C\u0435\u0442\u044C",
      "\u0431\u043E\u043B\u044C\u0448\u0435",
      "\u043F\u043E\u043A\u0430",
      "\u0435\u043C\u0443",
      "\u0438\u043C\u044F",
      "\u043F\u043E\u0440",
      "\u043F\u043E\u0440\u0430",
      "\u043F\u043E\u0442\u043E\u043C",
      "\u043F\u043E\u0442\u043E\u043C\u0443",
      "\u043F\u043E\u0441\u043B\u0435",
      "\u043F\u043E\u0447\u0435\u043C\u0443",
      "\u043F\u043E\u0447\u0442\u0438",
      "\u043F\u043E\u0441\u0440\u0435\u0434\u0438",
      "\u0435\u0439",
      "\u0434\u0432\u0430",
      "\u0434\u0432\u0435",
      "\u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u044C",
      "\u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u044B\u0439",
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C",
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044B\u0439",
      "\u0434\u0432\u0443\u0445",
      "\u0435\u0433\u043E",
      "\u0434\u0435\u043B",
      "\u0438\u043B\u0438",
      "\u0431\u0435\u0437",
      "\u0434\u0435\u043D\u044C",
      "\u0437\u0430\u043D\u044F\u0442",
      "\u0437\u0430\u043D\u044F\u0442\u0430",
      "\u0437\u0430\u043D\u044F\u0442\u043E",
      "\u0437\u0430\u043D\u044F\u0442\u044B",
      "\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043B\u044C\u043D\u043E",
      "\u0434\u0430\u0432\u043D\u043E",
      "\u0434\u0435\u0432\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u044C",
      "\u0434\u0435\u0432\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u044B\u0439",
      "\u0434\u0435\u0432\u044F\u0442\u044C",
      "\u0434\u0435\u0432\u044F\u0442\u044B\u0439",
      "\u0434\u0430\u0436\u0435",
      "\u0430\u043B\u043B\u043E",
      "\u0436\u0438\u0437\u043D\u044C",
      "\u0434\u0430\u043B\u0435\u043A\u043E",
      "\u0431\u043B\u0438\u0437\u043A\u043E",
      "\u0437\u0434\u0435\u0441\u044C",
      "\u0434\u0430\u043B\u044C\u0448\u0435",
      "\u0434\u043B\u044F",
      "\u043B\u0435\u0442",
      "\u0437\u0430\u0442\u043E",
      "\u0434\u0430\u0440\u043E\u043C",
      "\u043F\u0435\u0440\u0432\u044B\u0439",
      "\u043F\u0435\u0440\u0435\u0434",
      "\u0437\u0430\u0442\u0435\u043C",
      "\u0437\u0430\u0447\u0435\u043C",
      "\u043B\u0438\u0448\u044C",
      "\u0434\u0435\u0441\u044F\u0442\u044C",
      "\u0434\u0435\u0441\u044F\u0442\u044B\u0439",
      "\u0435\u044E",
      "\u0435\u0451",
      "\u0438\u0445",
      "\u0431\u044B",
      "\u0435\u0449\u0435",
      "\u043F\u0440\u0438",
      "\u0431\u044B\u043B",
      "\u043F\u0440\u043E",
      "\u043F\u0440\u043E\u0446\u0435\u043D\u0442\u043E\u0432",
      "\u043F\u0440\u043E\u0442\u0438\u0432",
      "\u043F\u0440\u043E\u0441\u0442\u043E",
      "\u0431\u044B\u0432\u0430\u0435\u0442",
      "\u0431\u044B\u0432\u044C",
      "\u0435\u0441\u043B\u0438",
      "\u043B\u044E\u0434\u0438",
      "\u0431\u044B\u043B\u0430",
      "\u0431\u044B\u043B\u0438",
      "\u0431\u044B\u043B\u043E",
      "\u0431\u0443\u0434\u0435\u043C",
      "\u0431\u0443\u0434\u0435\u0442",
      "\u0431\u0443\u0434\u0435\u0442\u0435",
      "\u0431\u0443\u0434\u0435\u0448\u044C",
      "\u043F\u0440\u0435\u043A\u0440\u0430\u0441\u043D\u043E",
      "\u0431\u0443\u0434\u0443",
      "\u0431\u0443\u0434\u044C",
      "\u0431\u0443\u0434\u0442\u043E",
      "\u0431\u0443\u0434\u0443\u0442",
      "\u0435\u0449\u0451",
      "\u043F\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u044C",
      "\u043F\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u044B\u0439",
      "\u0434\u0440\u0443\u0433\u043E",
      "\u0434\u0440\u0443\u0433\u043E\u0435",
      "\u0434\u0440\u0443\u0433\u043E\u0439",
      "\u0434\u0440\u0443\u0433\u0438\u0435",
      "\u0434\u0440\u0443\u0433\u0430\u044F",
      "\u0434\u0440\u0443\u0433\u0438\u0445",
      "\u0435\u0441\u0442\u044C",
      "\u043F\u044F\u0442\u044C",
      "\u0431\u044B\u0442\u044C",
      "\u043B\u0443\u0447\u0448\u0435",
      "\u043F\u044F\u0442\u044B\u0439",
      "\u043A",
      "\u043A\u043E\u043C",
      "\u043A\u043E\u043D\u0435\u0447\u043D\u043E",
      "\u043A\u043E\u043C\u0443",
      "\u043A\u043E\u0433\u043E",
      "\u043A\u043E\u0433\u0434\u0430",
      "\u043A\u043E\u0442\u043E\u0440\u043E\u0439",
      "\u043A\u043E\u0442\u043E\u0440\u043E\u0433\u043E",
      "\u043A\u043E\u0442\u043E\u0440\u0430\u044F",
      "\u043A\u043E\u0442\u043E\u0440\u044B\u0435",
      "\u043A\u043E\u0442\u043E\u0440\u044B\u0439",
      "\u043A\u043E\u0442\u043E\u0440\u044B\u0445",
      "\u043A\u0435\u043C",
      "\u043A\u0430\u0436\u0434\u043E\u0435",
      "\u043A\u0430\u0436\u0434\u0430\u044F",
      "\u043A\u0430\u0436\u0434\u044B\u0435",
      "\u043A\u0430\u0436\u0434\u044B\u0439",
      "\u043A\u0430\u0436\u0435\u0442\u0441\u044F",
      "\u043A\u0430\u043A",
      "\u043A\u0430\u043A\u043E\u0439",
      "\u043A\u0430\u043A\u0430\u044F",
      "\u043A\u0442\u043E",
      "\u043A\u0440\u043E\u043C\u0435",
      "\u043A\u0443\u0434\u0430",
      "\u043A\u0440\u0443\u0433\u043E\u043C",
      "\u0441",
      "\u0442",
      "\u0443",
      "\u044F",
      "\u0442\u0430",
      "\u0442\u0435",
      "\u0443\u0436",
      "\u0441\u043E",
      "\u0442\u043E",
      "\u0442\u043E\u043C",
      "\u0441\u043D\u043E\u0432\u0430",
      "\u0442\u043E\u043C\u0443",
      "\u0441\u043E\u0432\u0441\u0435\u043C",
      "\u0442\u043E\u0433\u043E",
      "\u0442\u043E\u0433\u0434\u0430",
      "\u0442\u043E\u0436\u0435",
      "\u0441\u043E\u0431\u043E\u0439",
      "\u0442\u043E\u0431\u043E\u0439",
      "\u0441\u043E\u0431\u043E\u044E",
      "\u0442\u043E\u0431\u043E\u044E",
      "\u0441\u043D\u0430\u0447\u0430\u043B\u0430",
      "\u0442\u043E\u043B\u044C\u043A\u043E",
      "\u0443\u043C\u0435\u0442\u044C",
      "\u0442\u043E\u0442",
      "\u0442\u043E\u044E",
      "\u0445\u043E\u0440\u043E\u0448\u043E",
      "\u0445\u043E\u0442\u0435\u0442\u044C",
      "\u0445\u043E\u0447\u0435\u0448\u044C",
      "\u0445\u043E\u0442\u044C",
      "\u0445\u043E\u0442\u044F",
      "\u0441\u0432\u043E\u0435",
      "\u0441\u0432\u043E\u0438",
      "\u0442\u0432\u043E\u0439",
      "\u0441\u0432\u043E\u0435\u0439",
      "\u0441\u0432\u043E\u0435\u0433\u043E",
      "\u0441\u0432\u043E\u0438\u0445",
      "\u0441\u0432\u043E\u044E",
      "\u0442\u0432\u043E\u044F",
      "\u0442\u0432\u043E\u0451",
      "\u0440\u0430\u0437",
      "\u0443\u0436\u0435",
      "\u0441\u0430\u043C",
      "\u0442\u0430\u043C",
      "\u0442\u0435\u043C",
      "\u0447\u0435\u043C",
      "\u0441\u0430\u043C\u0430",
      "\u0441\u0430\u043C\u0438",
      "\u0442\u0435\u043C\u0438",
      "\u0441\u0430\u043C\u043E",
      "\u0440\u0430\u043D\u043E",
      "\u0441\u0430\u043C\u043E\u043C",
      "\u0441\u0430\u043C\u043E\u043C\u0443",
      "\u0441\u0430\u043C\u043E\u0439",
      "\u0441\u0430\u043C\u043E\u0433\u043E",
      "\u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u044C",
      "\u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u044B\u0439",
      "\u0441\u0430\u043C\u0438\u043C",
      "\u0441\u0430\u043C\u0438\u043C\u0438",
      "\u0441\u0430\u043C\u0438\u0445",
      "\u0441\u0430\u043C\u0443",
      "\u0441\u0435\u043C\u044C",
      "\u0447\u0435\u043C\u0443",
      "\u0440\u0430\u043D\u044C\u0448\u0435",
      "\u0441\u0435\u0439\u0447\u0430\u0441",
      "\u0447\u0435\u0433\u043E",
      "\u0441\u0435\u0433\u043E\u0434\u043D\u044F",
      "\u0441\u0435\u0431\u0435",
      "\u0442\u0435\u0431\u0435",
      "\u0441\u0435\u0430\u043E\u0439",
      "\u0447\u0435\u043B\u043E\u0432\u0435\u043A",
      "\u0440\u0430\u0437\u0432\u0435",
      "\u0442\u0435\u043F\u0435\u0440\u044C",
      "\u0441\u0435\u0431\u044F",
      "\u0442\u0435\u0431\u044F",
      "\u0441\u0435\u0434\u044C\u043C\u043E\u0439",
      "\u0441\u043F\u0430\u0441\u0438\u0431\u043E",
      "\u0441\u043B\u0438\u0448\u043A\u043E\u043C",
      "\u0442\u0430\u043A",
      "\u0442\u0430\u043A\u043E\u0435",
      "\u0442\u0430\u043A\u043E\u0439",
      "\u0442\u0430\u043A\u0438\u0435",
      "\u0442\u0430\u043A\u0436\u0435",
      "\u0442\u0430\u043A\u0430\u044F",
      "\u0441\u0438\u0445",
      "\u0442\u0435\u0445",
      "\u0447\u0430\u0449\u0435",
      "\u0447\u0435\u0442\u0432\u0435\u0440\u0442\u044B\u0439",
      "\u0447\u0435\u0440\u0435\u0437",
      "\u0447\u0430\u0441\u0442\u043E",
      "\u0448\u0435\u0441\u0442\u043E\u0439",
      "\u0448\u0435\u0441\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u044C",
      "\u0448\u0435\u0441\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u044B\u0439",
      "\u0448\u0435\u0441\u0442\u044C",
      "\u0447\u0435\u0442\u044B\u0440\u0435",
      "\u0447\u0435\u0442\u044B\u0440\u043D\u0430\u0434\u0446\u0430\u0442\u044C",
      "\u0447\u0435\u0442\u044B\u0440\u043D\u0430\u0434\u0446\u0430\u0442\u044B\u0439",
      "\u0441\u043A\u043E\u043B\u044C\u043A\u043E",
      "\u0441\u043A\u0430\u0437\u0430\u043B",
      "\u0441\u043A\u0430\u0437\u0430\u043B\u0430",
      "\u0441\u043A\u0430\u0437\u0430\u0442\u044C",
      "\u0442\u0443",
      "\u0442\u044B",
      "\u0442\u0440\u0438",
      "\u044D\u0442\u0430",
      "\u044D\u0442\u0438",
      "\u0447\u0442\u043E",
      "\u044D\u0442\u043E",
      "\u0447\u0442\u043E\u0431",
      "\u044D\u0442\u043E\u043C",
      "\u044D\u0442\u043E\u043C\u0443",
      "\u044D\u0442\u043E\u0439",
      "\u044D\u0442\u043E\u0433\u043E",
      "\u0447\u0442\u043E\u0431\u044B",
      "\u044D\u0442\u043E\u0442",
      "\u0441\u0442\u0430\u043B",
      "\u0442\u0443\u0434\u0430",
      "\u044D\u0442\u0438\u043C",
      "\u044D\u0442\u0438\u043C\u0438",
      "\u0440\u044F\u0434\u043E\u043C",
      "\u0442\u0440\u0438\u043D\u0430\u0434\u0446\u0430\u0442\u044C",
      "\u0442\u0440\u0438\u043D\u0430\u0434\u0446\u0430\u0442\u044B\u0439",
      "\u044D\u0442\u0438\u0445",
      "\u0442\u0440\u0435\u0442\u0438\u0439",
      "\u0442\u0443\u0442",
      "\u044D\u0442\u0443",
      "\u0441\u0443\u0442\u044C",
      "\u0447\u0443\u0442\u044C",
      "\u0442\u044B\u0441\u044F\u0447"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/sv.js
var require_sv = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "aderton",
      "adertonde",
      "adj\xF6",
      "aldrig",
      "alla",
      "allas",
      "allt",
      "alltid",
      "allts\xE5",
      "\xE4n",
      "andra",
      "andras",
      "annan",
      "annat",
      "\xE4nnu",
      "artonde",
      "artonn",
      "\xE5tminstone",
      "att",
      "\xE5tta",
      "\xE5ttio",
      "\xE5ttionde",
      "\xE5ttonde",
      "av",
      "\xE4ven",
      "b\xE5da",
      "b\xE5das",
      "bakom",
      "bara",
      "b\xE4st",
      "b\xE4ttre",
      "beh\xF6va",
      "beh\xF6vas",
      "beh\xF6vde",
      "beh\xF6vt",
      "beslut",
      "beslutat",
      "beslutit",
      "bland",
      "blev",
      "bli",
      "blir",
      "blivit",
      "bort",
      "borta",
      "bra",
      "d\xE5",
      "dag",
      "dagar",
      "dagarna",
      "dagen",
      "d\xE4r",
      "d\xE4rf\xF6r",
      "de",
      "del",
      "delen",
      "dem",
      "den",
      "deras",
      "dess",
      "det",
      "detta",
      "dig",
      "din",
      "dina",
      "dit",
      "ditt",
      "dock",
      "du",
      "efter",
      "eftersom",
      "elfte",
      "eller",
      "elva",
      "en",
      "enkel",
      "enkelt",
      "enkla",
      "enligt",
      "er",
      "era",
      "ert",
      "ett",
      "ettusen",
      "f\xE5",
      "fanns",
      "f\xE5r",
      "f\xE5tt",
      "fem",
      "femte",
      "femtio",
      "femtionde",
      "femton",
      "femtonde",
      "fick",
      "fin",
      "finnas",
      "finns",
      "fj\xE4rde",
      "fjorton",
      "fjortonde",
      "fler",
      "flera",
      "flesta",
      "f\xF6ljande",
      "f\xF6r",
      "f\xF6re",
      "f\xF6rl\xE5t",
      "f\xF6rra",
      "f\xF6rsta",
      "fram",
      "framf\xF6r",
      "fr\xE5n",
      "fyra",
      "fyrtio",
      "fyrtionde",
      "g\xE5",
      "g\xE4lla",
      "g\xE4ller",
      "g\xE4llt",
      "g\xE5r",
      "g\xE4rna",
      "g\xE5tt",
      "genast",
      "genom",
      "gick",
      "gjorde",
      "gjort",
      "god",
      "goda",
      "godare",
      "godast",
      "g\xF6r",
      "g\xF6ra",
      "gott",
      "ha",
      "hade",
      "haft",
      "han",
      "hans",
      "har",
      "h\xE4r",
      "heller",
      "hellre",
      "helst",
      "helt",
      "henne",
      "hennes",
      "hit",
      "h\xF6g",
      "h\xF6ger",
      "h\xF6gre",
      "h\xF6gst",
      "hon",
      "honom",
      "hundra",
      "hundraen",
      "hundraett",
      "hur",
      "i",
      "ibland",
      "idag",
      "ig\xE5r",
      "igen",
      "imorgon",
      "in",
      "inf\xF6r",
      "inga",
      "ingen",
      "ingenting",
      "inget",
      "innan",
      "inne",
      "inom",
      "inte",
      "inuti",
      "ja",
      "jag",
      "j\xE4mf\xF6rt",
      "kan",
      "kanske",
      "knappast",
      "kom",
      "komma",
      "kommer",
      "kommit",
      "kr",
      "kunde",
      "kunna",
      "kunnat",
      "kvar",
      "l\xE4nge",
      "l\xE4ngre",
      "l\xE5ngsam",
      "l\xE5ngsammare",
      "l\xE5ngsammast",
      "l\xE5ngsamt",
      "l\xE4ngst",
      "l\xE5ngt",
      "l\xE4tt",
      "l\xE4ttare",
      "l\xE4ttast",
      "legat",
      "ligga",
      "ligger",
      "lika",
      "likst\xE4lld",
      "likst\xE4llda",
      "lilla",
      "lite",
      "liten",
      "litet",
      "man",
      "m\xE5nga",
      "m\xE5ste",
      "med",
      "mellan",
      "men",
      "mer",
      "mera",
      "mest",
      "mig",
      "min",
      "mina",
      "mindre",
      "minst",
      "mitt",
      "mittemot",
      "m\xF6jlig",
      "m\xF6jligen",
      "m\xF6jligt",
      "m\xF6jligtvis",
      "mot",
      "mycket",
      "n\xE5gon",
      "n\xE5gonting",
      "n\xE5got",
      "n\xE5gra",
      "n\xE4r",
      "n\xE4sta",
      "ned",
      "nederst",
      "nedersta",
      "nedre",
      "nej",
      "ner",
      "ni",
      "nio",
      "nionde",
      "nittio",
      "nittionde",
      "nitton",
      "nittonde",
      "n\xF6dv\xE4ndig",
      "n\xF6dv\xE4ndiga",
      "n\xF6dv\xE4ndigt",
      "n\xF6dv\xE4ndigtvis",
      "nog",
      "noll",
      "nr",
      "nu",
      "nummer",
      "och",
      "ocks\xE5",
      "ofta",
      "oftast",
      "olika",
      "olikt",
      "om",
      "oss",
      "\xF6ver",
      "\xF6vermorgon",
      "\xF6verst",
      "\xF6vre",
      "p\xE5",
      "rakt",
      "r\xE4tt",
      "redan",
      "redigera",
      "s\xE5",
      "sade",
      "s\xE4ga",
      "s\xE4ger",
      "sagt",
      "samma",
      "s\xE4mre",
      "s\xE4mst",
      "se",
      "sedan",
      "senare",
      "senast",
      "sent",
      "sex",
      "sextio",
      "sextionde",
      "sexton",
      "sextonde",
      "sig",
      "sin",
      "sina",
      "sist",
      "sista",
      "siste",
      "sitt",
      "sj\xE4tte",
      "sju",
      "sjunde",
      "sjuttio",
      "sjuttionde",
      "sjutton",
      "sjuttonde",
      "ska",
      "skall",
      "skulle",
      "slutligen",
      "sm\xE5",
      "sm\xE5tt",
      "snart",
      "som",
      "stor",
      "stora",
      "st\xF6rre",
      "st\xF6rst",
      "stort",
      "tack",
      "tidig",
      "tidigare",
      "tidigast",
      "tidigt",
      "till",
      "tills",
      "tillsammans",
      "tio",
      "tionde",
      "tjugo",
      "tjugoen",
      "tjugoett",
      "tjugonde",
      "tjugotre",
      "tjugotv\xE5",
      "tjungo",
      "tolfte",
      "tolv",
      "tre",
      "tredje",
      "trettio",
      "trettionde",
      "tretton",
      "trettonde",
      "tv\xE5",
      "tv\xE5hundra",
      "under",
      "upp",
      "ur",
      "urs\xE4kt",
      "ut",
      "utan",
      "utanf\xF6r",
      "ute",
      "vad",
      "v\xE4nster",
      "v\xE4nstra",
      "v\xE5r",
      "vara",
      "v\xE5ra",
      "varf\xF6r",
      "varifr\xE5n",
      "varit",
      "varken",
      "v\xE4rre",
      "vars\xE5god",
      "vart",
      "v\xE5rt",
      "vem",
      "vems",
      "verkligen",
      "vi",
      "vid",
      "vidare",
      "viktig",
      "viktigare",
      "viktigast",
      "viktigt",
      "vilka",
      "vilken",
      "vilket",
      "vill",
      "\xE4r",
      "\xE5r",
      "\xE4ven",
      "dessa",
      "wikitext",
      "wikipedia",
      "tyngre",
      "tung",
      "tyngst",
      "kall",
      "var",
      "minimum",
      "min",
      "max",
      "maximum",
      "\xF6kning",
      "\xF6ka",
      "kallar",
      "hj\xE4lp",
      "anv\xE4nder",
      "betydligt",
      "s\xE4tt",
      "denna",
      "detta",
      "det",
      "hj\xE4lpa",
      "anv\xE4nds",
      "best\xE5r",
      "tr\xE4nger",
      "igenom",
      "denna",
      "ut\xF6ka",
      "utarmat",
      "ungef\xE4r",
      "sprids",
      "betydligt",
      "omgivande",
      "via",
      "huvudartikel",
      "exempel",
      "exempelvis",
      "vanligt",
      "per",
      "st\xF6rsta",
      "stor",
      "ord",
      "ordet",
      "kallas",
      "p\xE5b\xF6rjad",
      "h\xF6ra",
      "fr\xE4mst",
      "ihop",
      "antalet",
      "the",
      "uttryck",
      "uttrycket",
      "\xE4ndra",
      "presenteras",
      "presenterades",
      "t\xE4nka",
      "delar",
      "s\xF6ka",
      "h\xE4mta",
      "inneh\xE5ll",
      "definera",
      "anv\xE4nda",
      "pekar",
      "ist\xE4llet",
      "st\xE4llet",
      "pekar",
      "standard",
      "vanligaste",
      "heter",
      "precist",
      "felaktigt",
      "k\xE4llor",
      "h\xF6ga",
      "mottagare",
      "eng",
      "bildade",
      "bytte",
      "bildades",
      "grundades",
      "svar",
      "betyder",
      "betydelse",
      "m\xF6jligheter",
      "m\xF6jlig",
      "m\xF6jlighet",
      "syfte",
      "gamla",
      "tio\xE5rig",
      "\xE5r",
      "\xF6verg\xE5ngsperiod",
      "ers\xE4ttas",
      "anv\xE4ndes",
      "anv\xE4nds",
      "utg\xF6rs",
      "drygt",
      "alla",
      "allt",
      "allts\xE5",
      "andra",
      "att",
      "bara",
      "bli",
      "blir",
      "borde",
      "bra",
      "mitt",
      "ser",
      "dem",
      "den",
      "denna",
      "det",
      "detta",
      "dig",
      "din",
      "dock",
      "dom",
      "d\xE4r",
      "edit",
      "efter",
      "eftersom",
      "eller",
      "ett",
      "fast",
      "fel",
      "fick",
      "finns",
      "fram",
      "fr\xE5n",
      "f\xE5r",
      "f\xE5tt",
      "f\xF6r",
      "f\xF6rsta",
      "genom",
      "ger",
      "g\xE5r",
      "g\xF6r",
      "g\xF6ra",
      "hade",
      "han",
      "har",
      "hela",
      "helt",
      "honom",
      "hur",
      "h\xE4r",
      "iaf",
      "igen",
      "ingen",
      "inget",
      "inte",
      "jag",
      "kan",
      "kanske",
      "kommer",
      "lika",
      "lite",
      "man",
      "med",
      "men",
      "mer",
      "mig",
      "min",
      "mot",
      "mycket",
      "m\xE5nga",
      "m\xE5ste",
      "nog",
      "n\xE4r",
      "n\xE5gon",
      "n\xE5got",
      "n\xE5gra",
      "n\xE5n",
      "n\xE5t",
      "och",
      "ocks\xE5",
      "r\xE4tt",
      "samma",
      "sedan",
      "sen",
      "sig",
      "sin",
      "sj\xE4lv",
      "ska",
      "skulle",
      "som",
      "s\xE4tt",
      "tar",
      "till",
      "tror",
      "tycker",
      "typ",
      "upp",
      "utan",
      "vad",
      "var",
      "vara",
      "vet",
      "vid",
      "vilket",
      "vill",
      "v\xE4l",
      "\xE4ven",
      "\xF6ver",
      "f\xF6rekommer",
      "varierar",
      "representera",
      "representerar",
      "itu",
      "p\xE5b\xF6rjades",
      "le",
      "\xE5tg\xE4rder",
      "\xE5tg\xE4rd",
      "s\xE5dant",
      "s\xE4rskilt",
      "eftersom",
      "som",
      "efter",
      "syftet",
      "syfte",
      "ersatts",
      "ers\xE4tts",
      "ersatt",
      "ers\xE4tt",
      "tagits",
      "byter",
      "ben\xE4mningar",
      "ler",
      "\xE4rvs",
      "\xE4rv",
      "\xE4rvd",
      "januari",
      "februari",
      "mars",
      "april",
      "maj",
      "juni",
      "juli",
      "augusti",
      "september",
      "oktober",
      "november",
      "december",
      "on",
      "\xF6vriga",
      "anv\xE4nts",
      "anv\xE4nd",
      "anv\xE4nds",
      "anv\xE4nt",
      "syftar",
      "ex",
      "sv\xE5rt",
      "sv\xE5r",
      "l\xE4tt",
      "l\xE4tta",
      "l\xE4ttast",
      "l\xE4ttare",
      "sv\xE5rare",
      "sv\xE5rast",
      "list",
      "anv\xE4ndningsomr\xE5de",
      "anv\xE4ndningsomr\xE5den",
      "vissa",
      "ii",
      "hembyggda",
      "krav",
      "lugnt",
      "\xE4nd\xE5",
      "stycken",
      "styck",
      "l\xE5nga",
      "korta",
      "sm\xE5",
      "stora",
      "smala",
      "tjocka",
      "b\xF6rjan",
      "tungt",
      "l\xE4tt",
      "tim",
      "st",
      "kg",
      "km",
      "tid",
      "ny",
      "gammal",
      "nyare",
      "antal",
      "snabbare",
      "b\xF6rjade",
      "ansvar",
      "ansvarar",
      "b\xE5de",
      "ca",
      "l\xE5g",
      "h\xF6g",
      "ro",
      "ton",
      "kap",
      "of",
      "and",
      "vars",
      "kr/km",
      "r\xF6r",
      "g\xE4llande",
      "placeras",
      "placerades",
      "t\xE4ckt",
      "samt",
      "hos",
      "s\xE5dana",
      "endast",
      "tillst\xE5nd",
      "beror",
      "p\xE5",
      "marken",
      "minska",
      "orsaker",
      "l\xF6sningar",
      "problem",
      "namn",
      "f\xF6rv\xE4ntas",
      "f\xF6rv\xE4ntan",
      "f\xF6rv\xE4ntats",
      "varning",
      "utf\xE4rdas",
      "utf\xE4rda",
      "km/h",
      "n\xE5dde",
      "stod",
      "omr\xE5det",
      "omr\xE5den",
      "k\xE4lla",
      "beh\xF6vs",
      "drabbade",
      "drabbat",
      "which",
      "top",
      "that",
      "l\xE4gre",
      "allm\xE4nt",
      "drog",
      "drar",
      "enorma",
      "\xE4nda",
      "enda",
      "officiella",
      "bekr\xE4ftats",
      "bekr\xE4ftas",
      "fall",
      "sjunker",
      "ned\xE5t",
      "v\xE4rms",
      "samtidigt",
      "efterf\xF6ljd",
      "problematik",
      "upp\xE5t",
      "utom",
      "f\xF6rutom",
      "h\xF6rnet",
      "s\xF6t",
      "salt",
      "svag",
      "stark",
      "ren",
      "smutsig",
      "f\xF6rr",
      "tiden",
      "m\xE5ngdag",
      "tisdag",
      "onsdag",
      "torsdag",
      "fredag",
      "l\xF6rdag",
      "s\xF6ndag",
      "m\xE5ndagar",
      "tisdagar",
      "onsdagar",
      "torsdagar",
      "fredagar",
      "l\xF6rdagar",
      "s\xF6ndagar",
      "efterlikna",
      "som",
      "lik",
      "bergis",
      "bekymmer",
      "s\xE5",
      "lista",
      "dig",
      "dej",
      "mig",
      "mej",
      "fri",
      "vanlig",
      "ovanlig",
      "s\xE4llan",
      "ofta",
      "avskiljs",
      "use",
      "sl\xE4kte",
      "sl\xE4ktet",
      "sl\xE4kt",
      "kategori",
      "kategoriseras",
      "rensas",
      "renas",
      "timmar",
      "minuter",
      "sekunder"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/tr.js
var require_tr = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "a",
      "acaba",
      "alt\u0131",
      "altm\u0131\u015F",
      "ama",
      "ancak",
      "arada",
      "art\u0131k",
      "asla",
      "asl\u0131nda",
      "asl\u0131nda",
      "ayr\u0131ca",
      "az",
      "bana",
      "bazen",
      "baz\u0131",
      "baz\u0131lar\u0131",
      "belki",
      "ben",
      "benden",
      "beni",
      "benim",
      "beri",
      "be\u015F",
      "bile",
      "bilhassa",
      "bin",
      "bir",
      "biraz",
      "bir\xE7o\u011Fu",
      "bir\xE7ok",
      "biri",
      "birisi",
      "birka\xE7",
      "bir\u015Fey",
      "biz",
      "bizden",
      "bize",
      "bizi",
      "bizim",
      "b\xF6yle",
      "b\xF6ylece",
      "bu",
      "buna",
      "bunda",
      "bundan",
      "bunlar",
      "bunlar\u0131",
      "bunlar\u0131n",
      "bunu",
      "bunun",
      "burada",
      "b\xFCt\xFCn",
      "\xE7o\u011Fu",
      "\xE7o\u011Funu",
      "\xE7ok",
      "\xE7\xFCnk\xFC",
      "da",
      "daha",
      "dahi",
      "dan",
      "de",
      "defa",
      "de\u011Fil",
      "di\u011Fer",
      "di\u011Feri",
      "di\u011Ferleri",
      "diye",
      "doksan",
      "dokuz",
      "dolay\u0131",
      "dolay\u0131s\u0131yla",
      "d\xF6rt",
      "e",
      "edecek",
      "eden",
      "ederek",
      "edilecek",
      "ediliyor",
      "edilmesi",
      "ediyor",
      "e\u011Fer",
      "elbette",
      "elli",
      "en",
      "etmesi",
      "etti",
      "etti\u011Fi",
      "etti\u011Fini",
      "fakat",
      "falan",
      "filan",
      "gene",
      "gere\u011Fi",
      "gerek",
      "gibi",
      "g\xF6re",
      "hala",
      "halde",
      "halen",
      "hangi",
      "hangisi",
      "hani",
      "hatta",
      "hem",
      "hen\xFCz",
      "hep",
      "hepsi",
      "her",
      "herhangi",
      "herkes",
      "herkese",
      "herkesi",
      "herkesin",
      "hi\xE7",
      "hi\xE7bir",
      "hi\xE7biri",
      "i",
      "\u0131",
      "i\xE7in",
      "i\xE7inde",
      "iki",
      "ile",
      "ilgili",
      "ise",
      "i\u015Fte",
      "itibaren",
      "itibariyle",
      "ka\xE7",
      "kadar",
      "kar\u015F\u0131n",
      "kendi",
      "kendilerine",
      "kendine",
      "kendini",
      "kendisi",
      "kendisine",
      "kendisini",
      "kez",
      "ki",
      "kim",
      "kime",
      "kimi",
      "kimin",
      "kimisi",
      "kimse",
      "k\u0131rk",
      "madem",
      "mi",
      "m\u0131",
      "milyar",
      "milyon",
      "mu",
      "m\xFC",
      "nas\u0131l",
      "ne",
      "neden",
      "nedenle",
      "nerde",
      "nerede",
      "nereye",
      "neyse",
      "ni\xE7in",
      "nin",
      "n\u0131n",
      "niye",
      "nun",
      "n\xFCn",
      "o",
      "\xF6b\xFCr",
      "olan",
      "olarak",
      "oldu",
      "oldu\u011Fu",
      "oldu\u011Funu",
      "olduklar\u0131n\u0131",
      "olmad\u0131",
      "olmad\u0131\u011F\u0131",
      "olmak",
      "olmas\u0131",
      "olmayan",
      "olmaz",
      "olsa",
      "olsun",
      "olup",
      "olur",
      "olur",
      "olursa",
      "oluyor",
      "on",
      "\xF6n",
      "ona",
      "\xF6nce",
      "ondan",
      "onlar",
      "onlara",
      "onlardan",
      "onlar\u0131",
      "onlar\u0131n",
      "onu",
      "onun",
      "orada",
      "\xF6te",
      "\xF6t\xFCr\xFC",
      "otuz",
      "\xF6yle",
      "oysa",
      "pek",
      "ra\u011Fmen",
      "sana",
      "sanki",
      "sanki",
      "\u015Fayet",
      "\u015Fekilde",
      "sekiz",
      "seksen",
      "sen",
      "senden",
      "seni",
      "senin",
      "\u015Fey",
      "\u015Feyden",
      "\u015Feye",
      "\u015Feyi",
      "\u015Feyler",
      "\u015Fimdi",
      "siz",
      "siz",
      "sizden",
      "sizden",
      "size",
      "sizi",
      "sizi",
      "sizin",
      "sizin",
      "sonra",
      "\u015F\xF6yle",
      "\u015Fu",
      "\u015Funa",
      "\u015Funlar\u0131",
      "\u015Funu",
      "ta",
      "tabii",
      "tam",
      "tamam",
      "tamamen",
      "taraf\u0131ndan",
      "trilyon",
      "t\xFCm",
      "t\xFCm\xFC",
      "u",
      "\xFC",
      "\xFC\xE7",
      "un",
      "\xFCn",
      "\xFCzere",
      "var",
      "vard\u0131",
      "ve",
      "veya",
      "ya",
      "yani",
      "yapacak",
      "yap\u0131lan",
      "yap\u0131lmas\u0131",
      "yap\u0131yor",
      "yapmak",
      "yapt\u0131",
      "yapt\u0131\u011F\u0131",
      "yapt\u0131\u011F\u0131n\u0131",
      "yapt\u0131klar\u0131",
      "ye",
      "yedi",
      "yerine",
      "yetmi\u015F",
      "yi",
      "y\u0131",
      "yine",
      "yirmi",
      "yoksa",
      "yu",
      "y\xFCz",
      "zaten",
      "zira"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/vi.js
var require_vi = __commonJS((exports, module) => {
  module.exports = {
    stopwords: [
      "a l\xF4",
      "a ha",
      "ai",
      "ai ai",
      "ai n\u1EA5y",
      "ai \u0111\xF3",
      "al\xF4",
      "amen",
      "anh",
      "anh \u1EA5y",
      "ba",
      "ba ba",
      "ba b\u1EA3n",
      "ba c\xF9ng",
      "ba h\u1ECD",
      "ba ng\xE0y",
      "ba ng\xF4i",
      "ba t\u0103ng",
      "bao gi\u1EDD",
      "bao l\xE2u",
      "bao nhi\xEAu",
      "bao n\u1EA3",
      "bay bi\u1EBFn",
      "bi\u1EBFt",
      "bi\u1EBFt bao",
      "bi\u1EBFt bao nhi\xEAu",
      "bi\u1EBFt ch\u1EAFc",
      "bi\u1EBFt ch\u1EEBng n\xE0o",
      "bi\u1EBFt m\xECnh",
      "bi\u1EBFt m\u1EA5y",
      "bi\u1EBFt th\u1EBF",
      "bi\u1EBFt tr\u01B0\u1EDBc",
      "bi\u1EBFt vi\u1EC7c",
      "bi\u1EBFt \u0111\xE2u",
      "bi\u1EBFt \u0111\xE2u ch\u1EEBng",
      "bi\u1EBFt \u0111\xE2u \u0111\u1EA5y",
      "bi\u1EBFt \u0111\u01B0\u1EE3c",
      "bu\u1ED5i",
      "bu\u1ED5i l\xE0m",
      "bu\u1ED5i m\u1EDBi",
      "bu\u1ED5i ng\xE0y",
      "bu\u1ED5i s\u1EDBm",
      "b\xE0",
      "b\xE0 \u1EA5y",
      "b\xE0i",
      "b\xE0i b\xE1c",
      "b\xE0i b\u1ECF",
      "b\xE0i c\xE1i",
      "b\xE1c",
      "b\xE1n",
      "b\xE1n c\u1EA5p",
      "b\xE1n d\u1EA1",
      "b\xE1n th\u1EBF",
      "b\xE2y b\u1EA9y",
      "b\xE2y ch\u1EEB",
      "b\xE2y gi\u1EDD",
      "b\xE2y nhi\xEAu",
      "b\xE8n",
      "b\xE9ng",
      "b\xEAn",
      "b\xEAn b\u1ECB",
      "b\xEAn c\xF3",
      "b\xEAn c\u1EA1nh",
      "b\xF4ng",
      "b\u01B0\u1EDBc",
      "b\u01B0\u1EDBc kh\u1ECFi",
      "b\u01B0\u1EDBc t\u1EDBi",
      "b\u01B0\u1EDBc \u0111i",
      "b\u1EA1n",
      "b\u1EA3n",
      "b\u1EA3n b\u1ED9",
      "b\u1EA3n ri\xEAng",
      "b\u1EA3n th\xE2n",
      "b\u1EA3n \xFD",
      "b\u1EA5t ch\u1EE3t",
      "b\u1EA5t c\u1EE9",
      "b\u1EA5t gi\xE1c",
      "b\u1EA5t k\xEC",
      "b\u1EA5t k\u1EC3",
      "b\u1EA5t k\u1EF3",
      "b\u1EA5t lu\u1EADn",
      "b\u1EA5t ng\u1EDD",
      "b\u1EA5t nh\u01B0\u1EE3c",
      "b\u1EA5t qu\xE1",
      "b\u1EA5t qu\xE1 ch\u1EC9",
      "b\u1EA5t th\xECnh l\xECnh",
      "b\u1EA5t t\u1EED",
      "b\u1EA5t \u0111\u1ED3",
      "b\u1EA5y",
      "b\u1EA5y ch\u1EA7y",
      "b\u1EA5y ch\u1EEB",
      "b\u1EA5y gi\u1EDD",
      "b\u1EA5y l\xE2u",
      "b\u1EA5y l\xE2u nay",
      "b\u1EA5y nay",
      "b\u1EA5y nhi\xEAu",
      "b\u1EADp b\xE0 b\u1EADp b\xF5m",
      "b\u1EADp b\xF5m",
      "b\u1EAFt \u0111\u1EA7u",
      "b\u1EAFt \u0111\u1EA7u t\u1EEB",
      "b\u1EB1ng",
      "b\u1EB1ng c\u1EE9",
      "b\u1EB1ng kh\xF4ng",
      "b\u1EB1ng ng\u01B0\u1EDDi",
      "b\u1EB1ng nhau",
      "b\u1EB1ng nh\u01B0",
      "b\u1EB1ng n\xE0o",
      "b\u1EB1ng n\u1EA5y",
      "b\u1EB1ng v\xE0o",
      "b\u1EB1ng \u0111\u01B0\u1EE3c",
      "b\u1EB1ng \u1EA5y",
      "b\u1EC3n",
      "b\u1EC7t",
      "b\u1ECB",
      "b\u1ECB ch\xFA",
      "b\u1ECB v\xEC",
      "b\u1ECF",
      "b\u1ECF b\xE0",
      "b\u1ECF cha",
      "b\u1ECF cu\u1ED9c",
      "b\u1ECF kh\xF4ng",
      "b\u1ECF l\u1EA1i",
      "b\u1ECF m\xECnh",
      "b\u1ECF m\u1EA5t",
      "b\u1ECF m\u1EB9",
      "b\u1ECF nh\u1ECF",
      "b\u1ECF qu\xE1",
      "b\u1ECF ra",
      "b\u1ECF ri\xEAng",
      "b\u1ECF vi\u1EC7c",
      "b\u1ECF xa",
      "b\u1ED7ng",
      "b\u1ED7ng ch\u1ED1c",
      "b\u1ED7ng d\u01B0ng",
      "b\u1ED7ng kh\xF4ng",
      "b\u1ED7ng nhi\xEAn",
      "b\u1ED7ng nh\u01B0ng",
      "b\u1ED7ng th\u1EA5y",
      "b\u1ED7ng \u0111\xE2u",
      "b\u1ED9",
      "b\u1ED9 thu\u1ED9c",
      "b\u1ED9 \u0111i\u1EC1u",
      "b\u1ED9i ph\u1EA7n",
      "b\u1EDB",
      "b\u1EDFi",
      "b\u1EDFi ai",
      "b\u1EDFi ch\u01B0ng",
      "b\u1EDFi nh\u01B0ng",
      "b\u1EDFi sao",
      "b\u1EDFi th\u1EBF",
      "b\u1EDFi th\u1EBF cho n\xEAn",
      "b\u1EDFi t\u1EA1i",
      "b\u1EDFi v\xEC",
      "b\u1EDFi v\u1EADy",
      "b\u1EDFi \u0111\xE2u",
      "b\u1EE9c",
      "cao",
      "cao l\xE2u",
      "cao r\xE1o",
      "cao r\u0103ng",
      "cao sang",
      "cao s\u1ED1",
      "cao th\u1EA5p",
      "cao th\u1EBF",
      "cao xa",
      "cha",
      "cha ch\u1EA3",
      "chao \xF4i",
      "chia s\u1EBB",
      "chi\u1EBFc",
      "cho",
      "cho bi\u1EBFt",
      "cho ch\u1EAFc",
      "cho hay",
      "cho nhau",
      "cho n\xEAn",
      "cho r\u1EB1ng",
      "cho r\u1ED3i",
      "cho th\u1EA5y",
      "cho tin",
      "cho t\u1EDBi",
      "cho t\u1EDBi khi",
      "cho v\u1EC1",
      "cho \u0103n",
      "cho \u0111ang",
      "cho \u0111\u01B0\u1EE3c",
      "cho \u0111\u1EBFn",
      "cho \u0111\u1EBFn khi",
      "cho \u0111\u1EBFn n\u1ED7i",
      "choa",
      "chu cha",
      "chui cha",
      "chung",
      "chung cho",
      "chung chung",
      "chung cu\u1ED9c",
      "chung c\u1EE5c",
      "chung nhau",
      "chung qui",
      "chung quy",
      "chung quy l\u1EA1i",
      "chung \xE1i",
      "chuy\u1EC3n",
      "chuy\u1EC3n t\u1EF1",
      "chuy\u1EC3n \u0111\u1EA1t",
      "chuy\u1EC7n",
      "chu\u1EA9n b\u1ECB",
      "ch\xE0nh ch\u1EA1nh",
      "ch\xED ch\u1EBFt",
      "ch\xEDnh",
      "ch\xEDnh b\u1EA3n",
      "ch\xEDnh gi\u1EEFa",
      "ch\xEDnh l\xE0",
      "ch\xEDnh th\u1ECB",
      "ch\xEDnh \u0111i\u1EC3m",
      "ch\xF9n ch\xF9n",
      "ch\xF9n ch\u0169n",
      "ch\xFA",
      "ch\xFA d\u1EABn",
      "ch\xFA kh\xE1ch",
      "ch\xFA m\xE0y",
      "ch\xFA m\xECnh",
      "ch\xFAng",
      "ch\xFAng m\xECnh",
      "ch\xFAng ta",
      "ch\xFAng t\xF4i",
      "ch\xFAng \xF4ng",
      "ch\u0103n ch\u1EAFn",
      "ch\u0103ng",
      "ch\u0103ng ch\u1EAFc",
      "ch\u0103ng n\u1EEFa",
      "ch\u01A1i",
      "ch\u01A1i h\u1ECD",
      "ch\u01B0a",
      "ch\u01B0a bao gi\u1EDD",
      "ch\u01B0a ch\u1EAFc",
      "ch\u01B0a c\xF3",
      "ch\u01B0a c\u1EA7n",
      "ch\u01B0a d\xF9ng",
      "ch\u01B0a d\u1EC5",
      "ch\u01B0a k\u1EC3",
      "ch\u01B0a t\xEDnh",
      "ch\u01B0a t\u1EEBng",
      "ch\u1EA7m ch\u1EADp",
      "ch\u1EADc",
      "ch\u1EAFc",
      "ch\u1EAFc ch\u1EAFn",
      "ch\u1EAFc d\u1EA1",
      "ch\u1EAFc h\u1EB3n",
      "ch\u1EAFc l\xF2ng",
      "ch\u1EAFc ng\u01B0\u1EDDi",
      "ch\u1EAFc v\xE0o",
      "ch\u1EAFc \u0103n",
      "ch\u1EB3ng l\u1EBD",
      "ch\u1EB3ng nh\u1EEFng",
      "ch\u1EB3ng n\u1EEFa",
      "ch\u1EB3ng ph\u1EA3i",
      "ch\u1EBFt n\u1ED7i",
      "ch\u1EBFt th\u1EADt",
      "ch\u1EBFt ti\u1EC7t",
      "ch\u1EC9",
      "ch\u1EC9 ch\xEDnh",
      "ch\u1EC9 c\xF3",
      "ch\u1EC9 l\xE0",
      "ch\u1EC9 t\xEAn",
      "ch\u1EC9n",
      "ch\u1ECB",
      "ch\u1ECB b\u1ED9",
      "ch\u1ECB \u1EA5y",
      "ch\u1ECBu",
      "ch\u1ECBu ch\u01B0a",
      "ch\u1ECBu l\u1EDDi",
      "ch\u1ECBu t\u1ED1t",
      "ch\u1ECBu \u0103n",
      "ch\u1ECDn",
      "ch\u1ECDn b\xEAn",
      "ch\u1ECDn ra",
      "ch\u1ED1c ch\u1ED1c",
      "ch\u1EDB",
      "ch\u1EDB chi",
      "ch\u1EDB g\xEC",
      "ch\u1EDB kh\xF4ng",
      "ch\u1EDB k\u1EC3",
      "ch\u1EDB nh\u01B0",
      "ch\u1EE3t",
      "ch\u1EE3t nghe",
      "ch\u1EE3t nh\xECn",
      "ch\u1EE7n",
      "ch\u1EE9",
      "ch\u1EE9 ai",
      "ch\u1EE9 c\xF2n",
      "ch\u1EE9 g\xEC",
      "ch\u1EE9 kh\xF4ng",
      "ch\u1EE9 kh\xF4ng ph\u1EA3i",
      "ch\u1EE9 l\u1EA1i",
      "ch\u1EE9 l\u1ECB",
      "ch\u1EE9 nh\u01B0",
      "ch\u1EE9 sao",
      "coi b\u1ED9",
      "coi m\xF2i",
      "con",
      "con con",
      "con d\u1EA1",
      "con nh\xE0",
      "con t\xEDnh",
      "cu c\u1EADu",
      "cu\u1ED1i",
      "cu\u1ED1i c\xF9ng",
      "cu\u1ED1i \u0111i\u1EC3m",
      "cu\u1ED1n",
      "cu\u1ED9c",
      "c\xE0ng",
      "c\xE0ng c\xE0ng",
      "c\xE0ng hay",
      "c\xE1 nh\xE2n",
      "c\xE1c",
      "c\xE1c c\u1EADu",
      "c\xE1ch",
      "c\xE1ch b\u1EE9c",
      "c\xE1ch kh\xF4ng",
      "c\xE1ch nhau",
      "c\xE1ch \u0111\u1EC1u",
      "c\xE1i",
      "c\xE1i g\xEC",
      "c\xE1i h\u1ECD",
      "c\xE1i \u0111\xE3",
      "c\xE1i \u0111\xF3",
      "c\xE1i \u1EA5y",
      "c\xE2u h\u1ECFi",
      "c\xE2y",
      "c\xE2y n\u01B0\u1EDBc",
      "c\xF2n",
      "c\xF2n nh\u01B0",
      "c\xF2n n\u1EEFa",
      "c\xF2n th\u1EDDi gian",
      "c\xF2n v\u1EC1",
      "c\xF3",
      "c\xF3 ai",
      "c\xF3 chuy\u1EC7n",
      "c\xF3 ch\u0103ng",
      "c\xF3 ch\u0103ng l\xE0",
      "c\xF3 ch\u1EE9",
      "c\xF3 c\u01A1",
      "c\xF3 d\u1EC5",
      "c\xF3 h\u1ECD",
      "c\xF3 khi",
      "c\xF3 ng\xE0y",
      "c\xF3 ng\u01B0\u1EDDi",
      "c\xF3 nhi\u1EC1u",
      "c\xF3 nh\xE0",
      "c\xF3 ph\u1EA3i",
      "c\xF3 s\u1ED1",
      "c\xF3 th\xE1ng",
      "c\xF3 th\u1EBF",
      "c\xF3 th\u1EC3",
      "c\xF3 v\u1EBB",
      "c\xF3 \xFD",
      "c\xF3 \u0103n",
      "c\xF3 \u0111i\u1EC1u",
      "c\xF3 \u0111i\u1EC1u ki\u1EC7n",
      "c\xF3 \u0111\xE1ng",
      "c\xF3 \u0111\xE2u",
      "c\xF3 \u0111\u01B0\u1EE3c",
      "c\xF3c kh\xF4",
      "c\xF4",
      "c\xF4 m\xECnh",
      "c\xF4 qu\u1EA3",
      "c\xF4 t\u0103ng",
      "c\xF4 \u1EA5y",
      "c\xF4ng nhi\xEAn",
      "c\xF9ng",
      "c\xF9ng chung",
      "c\xF9ng c\u1EF1c",
      "c\xF9ng nhau",
      "c\xF9ng tu\u1ED5i",
      "c\xF9ng t\u1ED9t",
      "c\xF9ng v\u1EDBi",
      "c\xF9ng \u0103n",
      "c\u0103n",
      "c\u0103n c\xE1i",
      "c\u0103n c\u1EAFt",
      "c\u0103n t\xEDnh",
      "c\u0169ng",
      "c\u0169ng nh\u01B0",
      "c\u0169ng n\xEAn",
      "c\u0169ng th\u1EBF",
      "c\u0169ng v\u1EADy",
      "c\u0169ng v\u1EADy th\xF4i",
      "c\u0169ng \u0111\u01B0\u1EE3c",
      "c\u01A1",
      "c\u01A1 ch\u1EC9",
      "c\u01A1 ch\u1EEBng",
      "c\u01A1 c\xF9ng",
      "c\u01A1 d\u1EABn",
      "c\u01A1 h\u1ED3",
      "c\u01A1 h\u1ED9i",
      "c\u01A1 m\xE0",
      "c\u01A1n",
      "c\u1EA3",
      "c\u1EA3 nghe",
      "c\u1EA3 ngh\u0129",
      "c\u1EA3 ng\xE0y",
      "c\u1EA3 ng\u01B0\u1EDDi",
      "c\u1EA3 nh\xE0",
      "c\u1EA3 n\u0103m",
      "c\u1EA3 th\u1EA3y",
      "c\u1EA3 th\u1EC3",
      "c\u1EA3 tin",
      "c\u1EA3 \u0103n",
      "c\u1EA3 \u0111\u1EBFn",
      "c\u1EA3m th\u1EA5y",
      "c\u1EA3m \u01A1n",
      "c\u1EA5p",
      "c\u1EA5p s\u1ED1",
      "c\u1EA5p tr\u1EF1c ti\u1EBFp",
      "c\u1EA7n",
      "c\u1EA7n c\u1EA5p",
      "c\u1EA7n g\xEC",
      "c\u1EA7n s\u1ED1",
      "c\u1EADt l\u1EF1c",
      "c\u1EADt s\u1EE9c",
      "c\u1EADu",
      "c\u1ED5 lai",
      "c\u1EE5 th\u1EC3",
      "c\u1EE5 th\u1EC3 l\xE0",
      "c\u1EE5 th\u1EC3 nh\u01B0",
      "c\u1EE7a",
      "c\u1EE7a ng\u1ECDt",
      "c\u1EE7a tin",
      "c\u1EE9",
      "c\u1EE9 nh\u01B0",
      "c\u1EE9 vi\u1EC7c",
      "c\u1EE9 \u0111i\u1EC3m",
      "c\u1EF1c l\u1EF1c",
      "do",
      "do v\xEC",
      "do v\u1EADy",
      "do \u0111\xF3",
      "duy",
      "duy ch\u1EC9",
      "duy c\xF3",
      "d\xE0i",
      "d\xE0i l\u1EDDi",
      "d\xE0i ra",
      "d\xE0nh",
      "d\xE0nh d\xE0nh",
      "d\xE0o",
      "d\xEC",
      "d\xF9",
      "d\xF9 cho",
      "d\xF9 d\xEC",
      "d\xF9 g\xEC",
      "d\xF9 r\u1EB1ng",
      "d\xF9 sao",
      "d\xF9ng",
      "d\xF9ng cho",
      "d\xF9ng h\u1EBFt",
      "d\xF9ng l\xE0m",
      "d\xF9ng \u0111\u1EBFn",
      "d\u01B0\u1EDBi",
      "d\u01B0\u1EDBi n\u01B0\u1EDBc",
      "d\u1EA1",
      "d\u1EA1 b\xE1n",
      "d\u1EA1 con",
      "d\u1EA1 d\xE0i",
      "d\u1EA1 d\u1EA1",
      "d\u1EA1 kh\xE1ch",
      "d\u1EA7n d\xE0",
      "d\u1EA7n d\u1EA7n",
      "d\u1EA7u sao",
      "d\u1EABn",
      "d\u1EABu",
      "d\u1EABu m\xE0",
      "d\u1EABu r\u1EB1ng",
      "d\u1EABu sao",
      "d\u1EC5",
      "d\u1EC5 d\xF9ng",
      "d\u1EC5 g\xEC",
      "d\u1EC5 khi\u1EBFn",
      "d\u1EC5 nghe",
      "d\u1EC5 ng\u01B0\u01A1i",
      "d\u1EC5 nh\u01B0 ch\u01A1i",
      "d\u1EC5 s\u1EE3",
      "d\u1EC5 s\u1EED d\u1EE5ng",
      "d\u1EC5 th\u01B0\u1EDDng",
      "d\u1EC5 th\u1EA5y",
      "d\u1EC5 \u0103n",
      "d\u1EC5 \u0111\xE2u",
      "d\u1EDF ch\u1EEBng",
      "d\u1EEF",
      "d\u1EEF c\xE1ch",
      "em",
      "em em",
      "gi\xE1 tr\u1ECB",
      "gi\xE1 tr\u1ECB th\u1EF1c t\u1EBF",
      "gi\u1EA3m",
      "gi\u1EA3m ch\xEDnh",
      "gi\u1EA3m th\u1EA5p",
      "gi\u1EA3m th\u1EBF",
      "gi\u1ED1ng",
      "gi\u1ED1ng ng\u01B0\u1EDDi",
      "gi\u1ED1ng nhau",
      "gi\u1ED1ng nh\u01B0",
      "gi\u1EDD",
      "gi\u1EDD l\xE2u",
      "gi\u1EDD n\xE0y",
      "gi\u1EDD \u0111i",
      "gi\u1EDD \u0111\xE2y",
      "gi\u1EDD \u0111\u1EBFn",
      "gi\u1EEF",
      "gi\u1EEF l\u1EA5y",
      "gi\u1EEF \xFD",
      "gi\u1EEFa",
      "gi\u1EEFa l\xFAc",
      "g\xE2y",
      "g\xE2y cho",
      "g\xE2y gi\u1ED1ng",
      "g\xE2y ra",
      "g\xE2y th\xEAm",
      "g\xEC",
      "g\xEC g\xEC",
      "g\xEC \u0111\xF3",
      "g\u1EA7n",
      "g\u1EA7n b\xEAn",
      "g\u1EA7n h\u1EBFt",
      "g\u1EA7n ng\xE0y",
      "g\u1EA7n nh\u01B0",
      "g\u1EA7n xa",
      "g\u1EA7n \u0111\xE2y",
      "g\u1EA7n \u0111\u1EBFn",
      "g\u1EB7p",
      "g\u1EB7p kh\xF3 kh\u0103n",
      "g\u1EB7p ph\u1EA3i",
      "g\u1ED3m",
      "hay",
      "hay bi\u1EBFt",
      "hay hay",
      "hay kh\xF4ng",
      "hay l\xE0",
      "hay l\xE0m",
      "hay nh\u1EC9",
      "hay n\xF3i",
      "hay sao",
      "hay tin",
      "hay \u0111\xE2u",
      "hi\u1EC3u",
      "hi\u1EC7n nay",
      "hi\u1EC7n t\u1EA1i",
      "ho\xE0n to\xE0n",
      "ho\u1EB7c",
      "ho\u1EB7c l\xE0",
      "h\xE3y",
      "h\xE3y c\xF2n",
      "h\u01A1n",
      "h\u01A1n c\u1EA3",
      "h\u01A1n h\u1EBFt",
      "h\u01A1n l\xE0",
      "h\u01A1n n\u1EEFa",
      "h\u01A1n tr\u01B0\u1EDBc",
      "h\u1EA7u h\u1EBFt",
      "h\u1EBFt",
      "h\u1EBFt chuy\u1EC7n",
      "h\u1EBFt c\u1EA3",
      "h\u1EBFt c\u1EE7a",
      "h\u1EBFt n\xF3i",
      "h\u1EBFt r\xE1o",
      "h\u1EBFt r\u1ED3i",
      "h\u1EBFt \xFD",
      "h\u1ECD",
      "h\u1ECD g\u1EA7n",
      "h\u1ECD xa",
      "h\u1ECFi",
      "h\u1ECFi l\u1EA1i",
      "h\u1ECFi xem",
      "h\u1ECFi xin",
      "h\u1ED7 tr\u1EE3",
      "khi",
      "khi kh\xE1c",
      "khi kh\xF4ng",
      "khi n\xE0o",
      "khi n\xEAn",
      "khi tr\u01B0\u1EDBc",
      "khi\u1EBFn",
      "kho\u1EA3ng",
      "kho\u1EA3ng c\xE1ch",
      "kho\u1EA3ng kh\xF4ng",
      "kh\xE1",
      "kh\xE1 t\u1ED1t",
      "kh\xE1c",
      "kh\xE1c g\xEC",
      "kh\xE1c kh\xE1c",
      "kh\xE1c nhau",
      "kh\xE1c n\xE0o",
      "kh\xE1c th\u01B0\u1EDDng",
      "kh\xE1c xa",
      "kh\xE1ch",
      "kh\xF3",
      "kh\xF3 bi\u1EBFt",
      "kh\xF3 ch\u01A1i",
      "kh\xF3 kh\u0103n",
      "kh\xF3 l\xE0m",
      "kh\xF3 m\u1EDF",
      "kh\xF3 nghe",
      "kh\xF3 ngh\u0129",
      "kh\xF3 n\xF3i",
      "kh\xF3 th\u1EA5y",
      "kh\xF3 tr\xE1nh",
      "kh\xF4ng",
      "kh\xF4ng ai",
      "kh\xF4ng bao gi\u1EDD",
      "kh\xF4ng bao l\xE2u",
      "kh\xF4ng bi\u1EBFt",
      "kh\xF4ng b\xE1n",
      "kh\xF4ng ch\u1EC9",
      "kh\xF4ng c\xF2n",
      "kh\xF4ng c\xF3",
      "kh\xF4ng c\xF3 g\xEC",
      "kh\xF4ng c\xF9ng",
      "kh\xF4ng c\u1EA7n",
      "kh\xF4ng c\u1EE9",
      "kh\xF4ng d\xF9ng",
      "kh\xF4ng g\xEC",
      "kh\xF4ng hay",
      "kh\xF4ng kh\u1ECFi",
      "kh\xF4ng k\u1EC3",
      "kh\xF4ng ngo\xE0i",
      "kh\xF4ng nh\u1EADn",
      "kh\xF4ng nh\u1EEFng",
      "kh\xF4ng ph\u1EA3i",
      "kh\xF4ng ph\u1EA3i kh\xF4ng",
      "kh\xF4ng th\u1EC3",
      "kh\xF4ng t\xEDnh",
      "kh\xF4ng \u0111i\u1EC1u ki\u1EC7n",
      "kh\xF4ng \u0111\u01B0\u1EE3c",
      "kh\xF4ng \u0111\u1EA7y",
      "kh\xF4ng \u0111\u1EC3",
      "kh\u1EB3ng \u0111\u1ECBnh",
      "kh\u1ECFi",
      "kh\u1ECFi n\xF3i",
      "k\u1EC3",
      "k\u1EC3 c\u1EA3",
      "k\u1EC3 nh\u01B0",
      "k\u1EC3 t\u1EDBi",
      "k\u1EC3 t\u1EEB",
      "li\xEAn quan",
      "lo\u1EA1i",
      "lo\u1EA1i t\u1EEB",
      "lu\xF4n",
      "lu\xF4n c\u1EA3",
      "lu\xF4n lu\xF4n",
      "lu\xF4n tay",
      "l\xE0",
      "l\xE0 c\xF9ng",
      "l\xE0 l\xE0",
      "l\xE0 nhi\u1EC1u",
      "l\xE0 ph\u1EA3i",
      "l\xE0 th\u1EBF n\xE0o",
      "l\xE0 v\xEC",
      "l\xE0 \xEDt",
      "l\xE0m",
      "l\xE0m b\u1EB1ng",
      "l\xE0m cho",
      "l\xE0m d\u1EA7n d\u1EA7n",
      "l\xE0m g\xEC",
      "l\xE0m l\xF2ng",
      "l\xE0m l\u1EA1i",
      "l\xE0m l\u1EA5y",
      "l\xE0m m\u1EA5t",
      "l\xE0m ngay",
      "l\xE0m nh\u01B0",
      "l\xE0m n\xEAn",
      "l\xE0m ra",
      "l\xE0m ri\xEAng",
      "l\xE0m sao",
      "l\xE0m theo",
      "l\xE0m th\u1EBF n\xE0o",
      "l\xE0m tin",
      "l\xE0m t\xF4i",
      "l\xE0m t\u0103ng",
      "l\xE0m t\u1EA1i",
      "l\xE0m t\u1EAFp l\u1EF1",
      "l\xE0m v\xEC",
      "l\xE0m \u0111\xFAng",
      "l\xE0m \u0111\u01B0\u1EE3c",
      "l\xE2u",
      "l\xE2u c\xE1c",
      "l\xE2u l\xE2u",
      "l\xE2u nay",
      "l\xE2u ng\xE0y",
      "l\xEAn",
      "l\xEAn cao",
      "l\xEAn c\u01A1n",
      "l\xEAn m\u1EA1nh",
      "l\xEAn ng\xF4i",
      "l\xEAn n\u01B0\u1EDBc",
      "l\xEAn s\u1ED1",
      "l\xEAn xu\u1ED1ng",
      "l\xEAn \u0111\u1EBFn",
      "l\xF2ng",
      "l\xF2ng kh\xF4ng",
      "l\xFAc",
      "l\xFAc kh\xE1c",
      "l\xFAc l\xE2u",
      "l\xFAc n\xE0o",
      "l\xFAc n\xE0y",
      "l\xFAc s\xE1ng",
      "l\xFAc tr\u01B0\u1EDBc",
      "l\xFAc \u0111i",
      "l\xFAc \u0111\xF3",
      "l\xFAc \u0111\u1EBFn",
      "l\xFAc \u1EA5y",
      "l\xFD do",
      "l\u01B0\u1EE3ng",
      "l\u01B0\u1EE3ng c\u1EA3",
      "l\u01B0\u1EE3ng s\u1ED1",
      "l\u01B0\u1EE3ng t\u1EEB",
      "l\u1EA1i",
      "l\u1EA1i b\u1ED9",
      "l\u1EA1i c\xE1i",
      "l\u1EA1i c\xF2n",
      "l\u1EA1i gi\u1ED1ng",
      "l\u1EA1i l\xE0m",
      "l\u1EA1i ng\u01B0\u1EDDi",
      "l\u1EA1i n\xF3i",
      "l\u1EA1i n\u1EEFa",
      "l\u1EA1i qu\u1EA3",
      "l\u1EA1i th\xF4i",
      "l\u1EA1i \u0103n",
      "l\u1EA1i \u0111\xE2y",
      "l\u1EA5y",
      "l\u1EA5y c\xF3",
      "l\u1EA5y c\u1EA3",
      "l\u1EA5y gi\u1ED1ng",
      "l\u1EA5y l\xE0m",
      "l\u1EA5y l\xFD do",
      "l\u1EA5y l\u1EA1i",
      "l\u1EA5y ra",
      "l\u1EA5y r\xE1o",
      "l\u1EA5y sau",
      "l\u1EA5y s\u1ED1",
      "l\u1EA5y th\xEAm",
      "l\u1EA5y th\u1EBF",
      "l\u1EA5y v\xE0o",
      "l\u1EA5y xu\u1ED1ng",
      "l\u1EA5y \u0111\u01B0\u1EE3c",
      "l\u1EA5y \u0111\u1EC3",
      "l\u1EA7n",
      "l\u1EA7n kh\xE1c",
      "l\u1EA7n l\u1EA7n",
      "l\u1EA7n n\xE0o",
      "l\u1EA7n n\xE0y",
      "l\u1EA7n sang",
      "l\u1EA7n sau",
      "l\u1EA7n theo",
      "l\u1EA7n tr\u01B0\u1EDBc",
      "l\u1EA7n t\xECm",
      "l\u1EDBn",
      "l\u1EDBn l\xEAn",
      "l\u1EDBn nh\u1ECF",
      "l\u1EDDi",
      "l\u1EDDi ch\xFA",
      "l\u1EDDi n\xF3i",
      "mang",
      "mang l\u1EA1i",
      "mang mang",
      "mang n\u1EB7ng",
      "mang v\u1EC1",
      "mu\u1ED1n",
      "m\xE0",
      "m\xE0 c\u1EA3",
      "m\xE0 kh\xF4ng",
      "m\xE0 l\u1EA1i",
      "m\xE0 th\xF4i",
      "m\xE0 v\u1EABn",
      "m\xECnh",
      "m\u1EA1nh",
      "m\u1EA5t",
      "m\u1EA5t c\xF2n",
      "m\u1ECDi",
      "m\u1ECDi gi\u1EDD",
      "m\u1ECDi khi",
      "m\u1ECDi l\xFAc",
      "m\u1ECDi ng\u01B0\u1EDDi",
      "m\u1ECDi n\u01A1i",
      "m\u1ECDi s\u1EF1",
      "m\u1ECDi th\u1EE9",
      "m\u1ECDi vi\u1EC7c",
      "m\u1ED1i",
      "m\u1ED7i",
      "m\u1ED7i l\xFAc",
      "m\u1ED7i l\u1EA7n",
      "m\u1ED7i m\u1ED9t",
      "m\u1ED7i ng\xE0y",
      "m\u1ED7i ng\u01B0\u1EDDi",
      "m\u1ED9t",
      "m\u1ED9t c\xE1ch",
      "m\u1ED9t c\u01A1n",
      "m\u1ED9t khi",
      "m\u1ED9t l\xFAc",
      "m\u1ED9t s\u1ED1",
      "m\u1ED9t v\xE0i",
      "m\u1ED9t \xEDt",
      "m\u1EDBi",
      "m\u1EDBi hay",
      "m\u1EDBi r\u1ED3i",
      "m\u1EDBi \u0111\xE2y",
      "m\u1EDF",
      "m\u1EDF mang",
      "m\u1EDF n\u01B0\u1EDBc",
      "m\u1EDF ra",
      "m\u1EE3",
      "m\u1EE9c",
      "nay",
      "ngay",
      "ngay b\xE2y gi\u1EDD",
      "ngay c\u1EA3",
      "ngay khi",
      "ngay khi \u0111\u1EBFn",
      "ngay l\xFAc",
      "ngay l\xFAc n\xE0y",
      "ngay l\u1EADp t\u1EE9c",
      "ngay th\u1EADt",
      "ngay t\u1EE9c kh\u1EAFc",
      "ngay t\u1EE9c th\xEC",
      "ngay t\u1EEB",
      "nghe",
      "nghe ch\u1EEBng",
      "nghe hi\u1EC3u",
      "nghe kh\xF4ng",
      "nghe l\u1EA1i",
      "nghe nh\xECn",
      "nghe nh\u01B0",
      "nghe n\xF3i",
      "nghe ra",
      "nghe r\xF5",
      "nghe th\u1EA5y",
      "nghe tin",
      "nghe tr\u1EF1c ti\u1EBFp",
      "nghe \u0111\xE2u",
      "nghe \u0111\xE2u nh\u01B0",
      "nghe \u0111\u01B0\u1EE3c",
      "nghen",
      "nghi\u1EC5m nhi\xEAn",
      "ngh\u0129",
      "ngh\u0129 l\u1EA1i",
      "ngh\u0129 ra",
      "ngh\u0129 t\u1EDBi",
      "ngh\u0129 xa",
      "ngh\u0129 \u0111\u1EBFn",
      "ngh\u1EC9m",
      "ngo\xE0i",
      "ngo\xE0i n\xE0y",
      "ngo\xE0i ra",
      "ngo\xE0i xa",
      "ngo\u1EA3i",
      "ngu\u1ED3n",
      "ng\xE0y",
      "ng\xE0y c\xE0ng",
      "ng\xE0y c\u1EA5p",
      "ng\xE0y gi\u1EDD",
      "ng\xE0y ng\xE0y",
      "ng\xE0y n\xE0o",
      "ng\xE0y n\xE0y",
      "ng\xE0y n\u1ECD",
      "ng\xE0y qua",
      "ng\xE0y r\xE0y",
      "ng\xE0y th\xE1ng",
      "ng\xE0y x\u01B0a",
      "ng\xE0y x\u1EEDa",
      "ng\xE0y \u0111\u1EBFn",
      "ng\xE0y \u1EA5y",
      "ng\xF4i",
      "ng\xF4i nh\xE0",
      "ng\xF4i th\u1EE9",
      "ng\xF5 h\u1EA7u",
      "ng\u0103n ng\u1EAFt",
      "ng\u01B0\u01A1i",
      "ng\u01B0\u1EDDi",
      "ng\u01B0\u1EDDi h\u1ECFi",
      "ng\u01B0\u1EDDi kh\xE1c",
      "ng\u01B0\u1EDDi kh\xE1ch",
      "ng\u01B0\u1EDDi m\xECnh",
      "ng\u01B0\u1EDDi nghe",
      "ng\u01B0\u1EDDi ng\u01B0\u1EDDi",
      "ng\u01B0\u1EDDi nh\u1EADn",
      "ng\u1ECDn",
      "ng\u1ECDn ngu\u1ED3n",
      "ng\u1ECDt",
      "ng\u1ED3i",
      "ng\u1ED3i b\u1EC7t",
      "ng\u1ED3i kh\xF4ng",
      "ng\u1ED3i sau",
      "ng\u1ED3i tr\u1EC7t",
      "ng\u1ED9 nh\u1EE1",
      "nhanh",
      "nhanh l\xEAn",
      "nhanh tay",
      "nhau",
      "nhi\xEAn h\u1EADu",
      "nhi\u1EC1u",
      "nhi\u1EC1u \xEDt",
      "nhi\u1EC7t li\u1EC7t",
      "nhung nh\u0103ng",
      "nh\xE0",
      "nh\xE0 chung",
      "nh\xE0 kh\xF3",
      "nh\xE0 l\xE0m",
      "nh\xE0 ngo\xE0i",
      "nh\xE0 ng\u01B0\u01A1i",
      "nh\xE0 t\xF4i",
      "nh\xE0 vi\u1EC7c",
      "nh\xE2n d\u1ECBp",
      "nh\xE2n ti\u1EC7n",
      "nh\xE9",
      "nh\xECn",
      "nh\xECn chung",
      "nh\xECn l\u1EA1i",
      "nh\xECn nh\u1EADn",
      "nh\xECn theo",
      "nh\xECn th\u1EA5y",
      "nh\xECn xu\u1ED1ng",
      "nh\xF3m",
      "nh\xF3n nh\xE9n",
      "nh\u01B0",
      "nh\u01B0 ai",
      "nh\u01B0 ch\u01A1i",
      "nh\u01B0 kh\xF4ng",
      "nh\u01B0 l\xE0",
      "nh\u01B0 nhau",
      "nh\u01B0 qu\u1EA3",
      "nh\u01B0 sau",
      "nh\u01B0 th\u01B0\u1EDDng",
      "nh\u01B0 th\u1EBF",
      "nh\u01B0 th\u1EBF n\xE0o",
      "nh\u01B0 th\u1EC3",
      "nh\u01B0 tr\xEAn",
      "nh\u01B0 tr\u01B0\u1EDBc",
      "nh\u01B0 tu\u1ED3ng",
      "nh\u01B0 v\u1EADy",
      "nh\u01B0 \xFD",
      "nh\u01B0ng",
      "nh\u01B0ng m\xE0",
      "nh\u01B0\u1EE3c b\u1EB1ng",
      "nh\u1EA5t",
      "nh\u1EA5t lo\u1EA1t",
      "nh\u1EA5t lu\u1EADt",
      "nh\u1EA5t l\xE0",
      "nh\u1EA5t m\u1EF1c",
      "nh\u1EA5t nh\u1EA5t",
      "nh\u1EA5t quy\u1EBFt",
      "nh\u1EA5t sinh",
      "nh\u1EA5t thi\u1EBFt",
      "nh\u1EA5t th\xEC",
      "nh\u1EA5t t\xE2m",
      "nh\u1EA5t t\u1EC1",
      "nh\u1EA5t \u0111\xE1n",
      "nh\u1EA5t \u0111\u1ECBnh",
      "nh\u1EADn",
      "nh\u1EADn bi\u1EBFt",
      "nh\u1EADn h\u1ECD",
      "nh\u1EADn l\xE0m",
      "nh\u1EADn nhau",
      "nh\u1EADn ra",
      "nh\u1EADn th\u1EA5y",
      "nh\u1EADn vi\u1EC7c",
      "nh\u1EADn \u0111\u01B0\u1EE3c",
      "nh\u1EB1m",
      "nh\u1EB1m khi",
      "nh\u1EB1m l\xFAc",
      "nh\u1EB1m v\xE0o",
      "nh\u1EB1m \u0111\u1EC3",
      "nh\u1EC9",
      "nh\u1ECF",
      "nh\u1ECF ng\u01B0\u1EDDi",
      "nh\u1EDB",
      "nh\u1EDB b\u1EADp b\xF5m",
      "nh\u1EDB l\u1EA1i",
      "nh\u1EDB l\u1EA5y",
      "nh\u1EDB ra",
      "nh\u1EDD",
      "nh\u1EDD chuy\u1EC3n",
      "nh\u1EDD c\xF3",
      "nh\u1EDD nh\u1EDD",
      "nh\u1EDD \u0111\xF3",
      "nh\u1EE1 ra",
      "nh\u1EEFng",
      "nh\u1EEFng ai",
      "nh\u1EEFng khi",
      "nh\u1EEFng l\xE0",
      "nh\u1EEFng l\xFAc",
      "nh\u1EEFng mu\u1ED1n",
      "nh\u1EEFng nh\u01B0",
      "n\xE0o",
      "n\xE0o c\u0169ng",
      "n\xE0o hay",
      "n\xE0o l\xE0",
      "n\xE0o ph\u1EA3i",
      "n\xE0o \u0111\xE2u",
      "n\xE0o \u0111\xF3",
      "n\xE0y",
      "n\xE0y n\u1ECD",
      "n\xEAn",
      "n\xEAn chi",
      "n\xEAn ch\u0103ng",
      "n\xEAn l\xE0m",
      "n\xEAn ng\u01B0\u1EDDi",
      "n\xEAn tr\xE1nh",
      "n\xF3",
      "n\xF3c",
      "n\xF3i",
      "n\xF3i b\xF4ng",
      "n\xF3i chung",
      "n\xF3i kh\xF3",
      "n\xF3i l\xE0",
      "n\xF3i l\xEAn",
      "n\xF3i l\u1EA1i",
      "n\xF3i nh\u1ECF",
      "n\xF3i ph\u1EA3i",
      "n\xF3i qua",
      "n\xF3i ra",
      "n\xF3i ri\xEAng",
      "n\xF3i r\xF5",
      "n\xF3i th\xEAm",
      "n\xF3i th\u1EADt",
      "n\xF3i to\u1EB9t",
      "n\xF3i tr\u01B0\u1EDBc",
      "n\xF3i t\u1ED1t",
      "n\xF3i v\u1EDBi",
      "n\xF3i xa",
      "n\xF3i \xFD",
      "n\xF3i \u0111\u1EBFn",
      "n\xF3i \u0111\u1EE7",
      "n\u0103m",
      "n\u0103m th\xE1ng",
      "n\u01A1i",
      "n\u01A1i n\u01A1i",
      "n\u01B0\u1EDBc",
      "n\u01B0\u1EDBc b\xE0i",
      "n\u01B0\u1EDBc c\xF9ng",
      "n\u01B0\u1EDBc l\xEAn",
      "n\u01B0\u1EDBc n\u1EB7ng",
      "n\u01B0\u1EDBc qu\u1EA3",
      "n\u01B0\u1EDBc xu\u1ED1ng",
      "n\u01B0\u1EDBc \u0103n",
      "n\u01B0\u1EDBc \u0111\u1EBFn",
      "n\u1EA5y",
      "n\u1EB7ng",
      "n\u1EB7ng c\u0103n",
      "n\u1EB7ng m\xECnh",
      "n\u1EB7ng v\u1EC1",
      "n\u1EBFu",
      "n\u1EBFu c\xF3",
      "n\u1EBFu c\u1EA7n",
      "n\u1EBFu kh\xF4ng",
      "n\u1EBFu m\xE0",
      "n\u1EBFu nh\u01B0",
      "n\u1EBFu th\u1EBF",
      "n\u1EBFu v\u1EADy",
      "n\u1EBFu \u0111\u01B0\u1EE3c",
      "n\u1EC1n",
      "n\u1ECD",
      "n\u1EDB",
      "n\u1EE9c n\u1EDF",
      "n\u1EEFa",
      "n\u1EEFa khi",
      "n\u1EEFa l\xE0",
      "n\u1EEFa r\u1ED3i",
      "oai o\xE1i",
      "o\xE1i",
      "pho",
      "ph\xE8",
      "ph\xE8 ph\xE8",
      "ph\xEDa",
      "ph\xEDa b\xEAn",
      "ph\xEDa b\u1EA1n",
      "ph\xEDa d\u01B0\u1EDBi",
      "ph\xEDa sau",
      "ph\xEDa trong",
      "ph\xEDa tr\xEAn",
      "ph\xEDa tr\u01B0\u1EDBc",
      "ph\xF3c",
      "ph\xF3t",
      "ph\xF9 h\u1EE3p",
      "ph\u0103n ph\u1EAFt",
      "ph\u01B0\u01A1ng chi",
      "ph\u1EA3i",
      "ph\u1EA3i bi\u1EBFt",
      "ph\u1EA3i chi",
      "ph\u1EA3i ch\u0103ng",
      "ph\u1EA3i c\xE1ch",
      "ph\u1EA3i c\xE1i",
      "ph\u1EA3i gi\u1EDD",
      "ph\u1EA3i khi",
      "ph\u1EA3i kh\xF4ng",
      "ph\u1EA3i l\u1EA1i",
      "ph\u1EA3i l\u1EDDi",
      "ph\u1EA3i ng\u01B0\u1EDDi",
      "ph\u1EA3i nh\u01B0",
      "ph\u1EA3i r\u1ED3i",
      "ph\u1EA3i tay",
      "ph\u1EA7n",
      "ph\u1EA7n l\u1EDBn",
      "ph\u1EA7n nhi\u1EC1u",
      "ph\u1EA7n n\xE0o",
      "ph\u1EA7n sau",
      "ph\u1EA7n vi\u1EC7c",
      "ph\u1EAFt",
      "ph\u1EC9 phui",
      "ph\u1ECFng",
      "ph\u1ECFng nh\u01B0",
      "ph\u1ECFng n\u01B0\u1EDBc",
      "ph\u1ECFng theo",
      "ph\u1ECFng t\xEDnh",
      "ph\u1ED1c",
      "ph\u1EE5t",
      "ph\u1EE9t",
      "qua",
      "qua chuy\u1EC7n",
      "qua kh\u1ECFi",
      "qua l\u1EA1i",
      "qua l\u1EA7n",
      "qua ng\xE0y",
      "qua tay",
      "qua th\xEC",
      "qua \u0111i",
      "quan tr\u1ECDng",
      "quan tr\u1ECDng v\u1EA5n \u0111\u1EC1",
      "quan t\xE2m",
      "quay",
      "quay b\u01B0\u1EDBc",
      "quay l\u1EA1i",
      "quay s\u1ED1",
      "quay \u0111i",
      "qu\xE1",
      "qu\xE1 b\xE1n",
      "qu\xE1 b\u1ED9",
      "qu\xE1 gi\u1EDD",
      "qu\xE1 l\u1EDDi",
      "qu\xE1 m\u1EE9c",
      "qu\xE1 nhi\u1EC1u",
      "qu\xE1 tay",
      "qu\xE1 th\xEC",
      "qu\xE1 tin",
      "qu\xE1 tr\xECnh",
      "qu\xE1 tu\u1ED5i",
      "qu\xE1 \u0111\xE1ng",
      "qu\xE1 \u01B0",
      "qu\u1EA3",
      "qu\u1EA3 l\xE0",
      "qu\u1EA3 th\u1EADt",
      "qu\u1EA3 th\u1EBF",
      "qu\u1EA3 v\u1EADy",
      "qu\u1EADn",
      "ra",
      "ra b\xE0i",
      "ra b\u1ED9",
      "ra ch\u01A1i",
      "ra g\xEC",
      "ra l\u1EA1i",
      "ra l\u1EDDi",
      "ra ng\xF4i",
      "ra ng\u01B0\u1EDDi",
      "ra sao",
      "ra tay",
      "ra v\xE0o",
      "ra \xFD",
      "ra \u0111i\u1EC1u",
      "ra \u0111\xE2y",
      "ren r\xE9n",
      "riu r\xEDu",
      "ri\xEAng",
      "ri\xEAng t\u1EEBng",
      "ri\u1EC7t",
      "r\xE0y",
      "r\xE1o",
      "r\xE1o c\u1EA3",
      "r\xE1o n\u01B0\u1EDBc",
      "r\xE1o tr\u1ECDi",
      "r\xE9n",
      "r\xE9n b\u01B0\u1EDBc",
      "r\xEDch",
      "r\xF3n r\xE9n",
      "r\xF5",
      "r\xF5 l\xE0",
      "r\xF5 th\u1EADt",
      "r\xFAt c\u1EE5c",
      "r\u0103ng",
      "r\u0103ng r\u0103ng",
      "r\u1EA5t",
      "r\u1EA5t l\xE2u",
      "r\u1EB1ng",
      "r\u1EB1ng l\xE0",
      "r\u1ED1t cu\u1ED9c",
      "r\u1ED1t c\u1EE5c",
      "r\u1ED3i",
      "r\u1ED3i n\u1EEFa",
      "r\u1ED3i ra",
      "r\u1ED3i sao",
      "r\u1ED3i sau",
      "r\u1ED3i tay",
      "r\u1ED3i th\xEC",
      "r\u1ED3i xem",
      "r\u1ED3i \u0111\xE2y",
      "r\u1EE9a",
      "sa s\u1EA3",
      "sang",
      "sang n\u0103m",
      "sang s\xE1ng",
      "sang tay",
      "sao",
      "sao b\u1EA3n",
      "sao b\u1EB1ng",
      "sao cho",
      "sao v\u1EADy",
      "sao \u0111ang",
      "sau",
      "sau ch\xF3t",
      "sau cu\u1ED1i",
      "sau c\xF9ng",
      "sau h\u1EBFt",
      "sau n\xE0y",
      "sau n\u1EEFa",
      "sau sau",
      "sau \u0111\xE2y",
      "sau \u0111\xF3",
      "so",
      "so v\u1EDBi",
      "song le",
      "su\xFDt",
      "su\xFDt n\u1EEFa",
      "s\xE1ng",
      "s\xE1ng ng\xE0y",
      "s\xE1ng r\xF5",
      "s\xE1ng th\u1EBF",
      "s\xE1ng \xFD",
      "s\xEC",
      "s\xEC s\xEC",
      "s\u1EA5t",
      "s\u1EAFp",
      "s\u1EAFp \u0111\u1EB7t",
      "s\u1EBD",
      "s\u1EBD bi\u1EBFt",
      "s\u1EBD hay",
      "s\u1ED1",
      "s\u1ED1 cho bi\u1EBFt",
      "s\u1ED1 c\u1EE5 th\u1EC3",
      "s\u1ED1 lo\u1EA1i",
      "s\u1ED1 l\xE0",
      "s\u1ED1 ng\u01B0\u1EDDi",
      "s\u1ED1 ph\u1EA7n",
      "s\u1ED1 thi\u1EBFu",
      "s\u1ED1t s\u1ED9t",
      "s\u1EDBm",
      "s\u1EDBm ng\xE0y",
      "s\u1EDF d\u0129",
      "s\u1EED d\u1EE5ng",
      "s\u1EF1",
      "s\u1EF1 th\u1EBF",
      "s\u1EF1 vi\u1EC7c",
      "tanh",
      "tanh tanh",
      "tay",
      "tay quay",
      "tha h\u1ED3",
      "tha h\u1ED3 ch\u01A1i",
      "tha h\u1ED3 \u0103n",
      "than \xF4i",
      "thanh",
      "thanh ba",
      "thanh chuy\u1EC3n",
      "thanh kh\xF4ng",
      "thanh thanh",
      "thanh t\xEDnh",
      "thanh \u0111i\u1EC1u ki\u1EC7n",
      "thanh \u0111i\u1EC3m",
      "thay \u0111\u1ED5i",
      "thay \u0111\u1ED5i t\xECnh tr\u1EA1ng",
      "theo",
      "theo b\u01B0\u1EDBc",
      "theo nh\u01B0",
      "theo tin",
      "thi tho\u1EA3ng",
      "thi\u1EBFu",
      "thi\u1EBFu g\xEC",
      "thi\u1EBFu \u0111i\u1EC3m",
      "tho\u1EA1t",
      "tho\u1EA1t nghe",
      "tho\u1EA1t nhi\xEAn",
      "tho\u1EAFt",
      "thu\u1EA7n",
      "thu\u1EA7n \xE1i",
      "thu\u1ED9c",
      "thu\u1ED9c b\xE0i",
      "thu\u1ED9c c\xE1ch",
      "thu\u1ED9c l\u1EA1i",
      "thu\u1ED9c t\u1EEB",
      "th\xE0",
      "th\xE0 l\xE0",
      "th\xE0 r\u1EB1ng",
      "th\xE0nh ra",
      "th\xE0nh th\u1EED",
      "th\xE1i qu\xE1",
      "th\xE1ng",
      "th\xE1ng ng\xE0y",
      "th\xE1ng n\u0103m",
      "th\xE1ng th\xE1ng",
      "th\xEAm",
      "th\xEAm chuy\u1EC7n",
      "th\xEAm gi\u1EDD",
      "th\xEAm v\xE0o",
      "th\xEC",
      "th\xEC gi\u1EDD",
      "th\xEC l\xE0",
      "th\xEC ph\u1EA3i",
      "th\xEC ra",
      "th\xEC th\xF4i",
      "th\xECnh l\xECnh",
      "th\xEDch",
      "th\xEDch c\u1EE9",
      "th\xEDch thu\u1ED9c",
      "th\xEDch t\u1EF1",
      "th\xEDch \xFD",
      "th\xEDm",
      "th\xF4i",
      "th\xF4i vi\u1EC7c",
      "th\xFAng th\u1EAFng",
      "th\u01B0\u01A1ng \xF4i",
      "th\u01B0\u1EDDng",
      "th\u01B0\u1EDDng b\u1ECB",
      "th\u01B0\u1EDDng hay",
      "th\u01B0\u1EDDng khi",
      "th\u01B0\u1EDDng s\u1ED1",
      "th\u01B0\u1EDDng s\u1EF1",
      "th\u01B0\u1EDDng th\xF4i",
      "th\u01B0\u1EDDng th\u01B0\u1EDDng",
      "th\u01B0\u1EDDng t\xEDnh",
      "th\u01B0\u1EDDng t\u1EA1i",
      "th\u01B0\u1EDDng xu\u1EA5t hi\u1EC7n",
      "th\u01B0\u1EDDng \u0111\u1EBFn",
      "th\u1EA3o h\xE8n",
      "th\u1EA3o n\xE0o",
      "th\u1EA5p",
      "th\u1EA5p c\u01A1",
      "th\u1EA5p th\u1ECFm",
      "th\u1EA5p xu\u1ED1ng",
      "th\u1EA5y",
      "th\u1EA5y th\xE1ng",
      "th\u1EA9y",
      "th\u1EADm",
      "th\u1EADm ch\xED",
      "th\u1EADm c\u1EA5p",
      "th\u1EADm t\u1EEB",
      "th\u1EADt",
      "th\u1EADt ch\u1EAFc",
      "th\u1EADt l\xE0",
      "th\u1EADt l\u1EF1c",
      "th\u1EADt qu\u1EA3",
      "th\u1EADt ra",
      "th\u1EADt s\u1EF1",
      "th\u1EADt th\xE0",
      "th\u1EADt t\u1ED1t",
      "th\u1EADt v\u1EADy",
      "th\u1EBF",
      "th\u1EBF chu\u1EA9n b\u1ECB",
      "th\u1EBF l\xE0",
      "th\u1EBF l\u1EA1i",
      "th\u1EBF m\xE0",
      "th\u1EBF n\xE0o",
      "th\u1EBF n\xEAn",
      "th\u1EBF ra",
      "th\u1EBF s\u1EF1",
      "th\u1EBF th\xEC",
      "th\u1EBF th\xF4i",
      "th\u1EBF th\u01B0\u1EDDng",
      "th\u1EBF th\u1EBF",
      "th\u1EBF \xE0",
      "th\u1EBF \u0111\xF3",
      "th\u1EBFch",
      "th\u1EC9nh tho\u1EA3ng",
      "th\u1ECFm",
      "th\u1ED1c",
      "th\u1ED1c th\xE1o",
      "th\u1ED1t",
      "th\u1ED1t nhi\xEAn",
      "th\u1ED1t n\xF3i",
      "th\u1ED1t th\xF4i",
      "th\u1ED9c",
      "th\u1EDDi gian",
      "th\u1EDDi gian s\u1EED d\u1EE5ng",
      "th\u1EDDi gian t\xEDnh",
      "th\u1EDDi \u0111i\u1EC3m",
      "th\u1EE5c m\u1EA1ng",
      "th\u1EE9",
      "th\u1EE9 b\u1EA3n",
      "th\u1EE9 \u0111\u1EBFn",
      "th\u1EEDa",
      "th\u1EF1c hi\u1EC7n",
      "th\u1EF1c hi\u1EC7n \u0111\xFAng",
      "th\u1EF1c ra",
      "th\u1EF1c s\u1EF1",
      "th\u1EF1c t\u1EBF",
      "th\u1EF1c v\u1EADy",
      "tin",
      "tin th\xEAm",
      "tin v\xE0o",
      "ti\u1EBFp theo",
      "ti\u1EBFp t\u1EE5c",
      "ti\u1EBFp \u0111\xF3",
      "ti\u1EC7n th\u1EC3",
      "to\xE0",
      "to\xE9 kh\xF3i",
      "to\u1EB9t",
      "trong",
      "trong khi",
      "trong l\xFAc",
      "trong m\xECnh",
      "trong ngo\xE0i",
      "trong n\xE0y",
      "trong s\u1ED1",
      "trong v\xF9ng",
      "trong \u0111\xF3",
      "trong \u1EA5y",
      "tr\xE1nh",
      "tr\xE1nh kh\u1ECFi",
      "tr\xE1nh ra",
      "tr\xE1nh t\xECnh tr\u1EA1ng",
      "tr\xE1nh xa",
      "tr\xEAn",
      "tr\xEAn b\u1ED9",
      "tr\xEAn d\u01B0\u1EDBi",
      "tr\u01B0\u1EDBc",
      "tr\u01B0\u1EDBc h\u1EBFt",
      "tr\u01B0\u1EDBc khi",
      "tr\u01B0\u1EDBc kia",
      "tr\u01B0\u1EDBc nay",
      "tr\u01B0\u1EDBc ng\xE0y",
      "tr\u01B0\u1EDBc nh\u1EA5t",
      "tr\u01B0\u1EDBc sau",
      "tr\u01B0\u1EDBc ti\xEAn",
      "tr\u01B0\u1EDBc tu\u1ED5i",
      "tr\u01B0\u1EDBc \u0111\xE2y",
      "tr\u01B0\u1EDBc \u0111\xF3",
      "tr\u1EA3",
      "tr\u1EA3 c\u1EE7a",
      "tr\u1EA3 l\u1EA1i",
      "tr\u1EA3 ngay",
      "tr\u1EA3 tr\u01B0\u1EDBc",
      "tr\u1EBFu tr\xE1o",
      "tr\u1EC3n",
      "tr\u1EC7t",
      "tr\u1EC7u tr\u1EA1o",
      "tr\u1ECFng",
      "tr\u1EDDi \u0111\u1EA5t \u01A1i",
      "tr\u1EDF th\xE0nh",
      "tr\u1EEB phi",
      "tr\u1EF1c ti\u1EBFp",
      "tr\u1EF1c ti\u1EBFp l\xE0m",
      "tuy",
      "tuy c\xF3",
      "tuy l\xE0",
      "tuy nhi\xEAn",
      "tuy r\u1EB1ng",
      "tuy th\u1EBF",
      "tuy v\u1EADy",
      "tuy \u0111\xE3",
      "tuy\u1EC7t nhi\xEAn",
      "tu\u1EA7n t\u1EF1",
      "tu\u1ED1t lu\u1ED1t",
      "tu\u1ED1t tu\u1ED3n tu\u1ED9t",
      "tu\u1ED1t tu\u1ED9t",
      "tu\u1ED5i",
      "tu\u1ED5i c\u1EA3",
      "tu\u1ED5i t\xF4i",
      "t\xE0 t\xE0",
      "t\xEAn",
      "t\xEAn ch\xEDnh",
      "t\xEAn c\xE1i",
      "t\xEAn h\u1ECD",
      "t\xEAn t\u1EF1",
      "t\xEAnh",
      "t\xEAnh t\xEAnh",
      "t\xECm",
      "t\xECm b\u1EA1n",
      "t\xECm c\xE1ch",
      "t\xECm hi\u1EC3u",
      "t\xECm ra",
      "t\xECm vi\u1EC7c",
      "t\xECnh tr\u1EA1ng",
      "t\xEDnh",
      "t\xEDnh c\xE1ch",
      "t\xEDnh c\u0103n",
      "t\xEDnh ng\u01B0\u1EDDi",
      "t\xEDnh ph\u1ECFng",
      "t\xEDnh t\u1EEB",
      "t\xEDt m\xF9",
      "t\xF2 te",
      "t\xF4i",
      "t\xF4i con",
      "t\xF4ng t\u1ED1c",
      "t\xF9 t\xEC",
      "t\u0103m t\u1EAFp",
      "t\u0103ng",
      "t\u0103ng ch\xFAng",
      "t\u0103ng c\u1EA5p",
      "t\u0103ng gi\u1EA3m",
      "t\u0103ng th\xEAm",
      "t\u0103ng th\u1EBF",
      "t\u1EA1i",
      "t\u1EA1i l\xF2ng",
      "t\u1EA1i n\u01A1i",
      "t\u1EA1i sao",
      "t\u1EA1i t\xF4i",
      "t\u1EA1i v\xEC",
      "t\u1EA1i \u0111\xE2u",
      "t\u1EA1i \u0111\xE2y",
      "t\u1EA1i \u0111\xF3",
      "t\u1EA1o",
      "t\u1EA1o c\u01A1 h\u1ED9i",
      "t\u1EA1o n\xEAn",
      "t\u1EA1o ra",
      "t\u1EA1o \xFD",
      "t\u1EA1o \u0111i\u1EC1u ki\u1EC7n",
      "t\u1EA5m",
      "t\u1EA5m b\u1EA3n",
      "t\u1EA5m c\xE1c",
      "t\u1EA5n",
      "t\u1EA5n t\u1EDBi",
      "t\u1EA5t c\u1EA3",
      "t\u1EA5t c\u1EA3 bao nhi\xEAu",
      "t\u1EA5t th\u1EA3y",
      "t\u1EA5t t\u1EA7n t\u1EADt",
      "t\u1EA5t t\u1EADt",
      "t\u1EADp trung",
      "t\u1EAFp",
      "t\u1EAFp l\u1EF1",
      "t\u1EAFp t\u1EAFp",
      "t\u1ECDt",
      "t\u1ECF ra",
      "t\u1ECF v\u1EBB",
      "t\u1ED1c t\u1EA3",
      "t\u1ED1i \u01B0",
      "t\u1ED1t",
      "t\u1ED1t b\u1EA1n",
      "t\u1ED1t b\u1ED9",
      "t\u1ED1t h\u01A1n",
      "t\u1ED1t m\u1ED1i",
      "t\u1ED1t ng\xE0y",
      "t\u1ED9t",
      "t\u1ED9t c\xF9ng",
      "t\u1EDB",
      "t\u1EDBi",
      "t\u1EDBi g\u1EA7n",
      "t\u1EDBi m\u1EE9c",
      "t\u1EDBi n\u01A1i",
      "t\u1EDBi th\xEC",
      "t\u1EE9c th\xEC",
      "t\u1EE9c t\u1ED1c",
      "t\u1EEB",
      "t\u1EEB c\u0103n",
      "t\u1EEB gi\u1EDD",
      "t\u1EEB khi",
      "t\u1EEB lo\u1EA1i",
      "t\u1EEB nay",
      "t\u1EEB th\u1EBF",
      "t\u1EEB t\xEDnh",
      "t\u1EEB t\u1EA1i",
      "t\u1EEB t\u1EEB",
      "t\u1EEB \xE1i",
      "t\u1EEB \u0111i\u1EC1u",
      "t\u1EEB \u0111\xF3",
      "t\u1EEB \u1EA5y",
      "t\u1EEBng",
      "t\u1EEBng c\xE1i",
      "t\u1EEBng gi\u1EDD",
      "t\u1EEBng nh\xE0",
      "t\u1EEBng ph\u1EA7n",
      "t\u1EEBng th\u1EDDi gian",
      "t\u1EEBng \u0111\u01A1n v\u1ECB",
      "t\u1EEBng \u1EA5y",
      "t\u1EF1",
      "t\u1EF1 cao",
      "t\u1EF1 khi",
      "t\u1EF1 l\u01B0\u1EE3ng",
      "t\u1EF1 t\xEDnh",
      "t\u1EF1 t\u1EA1o",
      "t\u1EF1 v\xEC",
      "t\u1EF1 \xFD",
      "t\u1EF1 \u0103n",
      "t\u1EF1u trung",
      "veo",
      "veo veo",
      "vi\u1EC7c",
      "vi\u1EC7c g\xEC",
      "vung thi\xEAn \u0111\u1ECBa",
      "vung t\xE0n t\xE1n",
      "vung t\xE1n t\xE0n",
      "v\xE0",
      "v\xE0i",
      "v\xE0i ba",
      "v\xE0i ng\u01B0\u1EDDi",
      "v\xE0i nh\xE0",
      "v\xE0i n\u01A1i",
      "v\xE0i t\xEAn",
      "v\xE0i \u0111i\u1EC1u",
      "v\xE0o",
      "v\xE0o g\u1EB7p",
      "v\xE0o kho\u1EA3ng",
      "v\xE0o l\xFAc",
      "v\xE0o v\xF9ng",
      "v\xE0o \u0111\u1EBFn",
      "v\xE2ng",
      "v\xE2ng ch\u1ECBu",
      "v\xE2ng d\u1EA1",
      "v\xE2ng v\xE2ng",
      "v\xE2ng \xFD",
      "v\xE8o",
      "v\xE8o v\xE8o",
      "v\xEC",
      "v\xEC ch\u01B0ng",
      "v\xEC r\u1EB1ng",
      "v\xEC sao",
      "v\xEC th\u1EBF",
      "v\xEC v\u1EADy",
      "v\xED b\u1EB1ng",
      "v\xED d\xF9",
      "v\xED ph\u1ECFng",
      "v\xED th\u1EED",
      "v\xF4 h\xECnh trung",
      "v\xF4 k\u1EC3",
      "v\xF4 lu\u1EADn",
      "v\xF4 v\xE0n",
      "v\xF9ng",
      "v\xF9ng l\xEAn",
      "v\xF9ng n\u01B0\u1EDBc",
      "v\u0103ng t\xEA",
      "v\u01B0\u1EE3t",
      "v\u01B0\u1EE3t kh\u1ECFi",
      "v\u01B0\u1EE3t qu\xE1",
      "v\u1EA1n nh\u1EA5t",
      "v\u1EA3 ch\u0103ng",
      "v\u1EA3 l\u1EA1i",
      "v\u1EA5n \u0111\u1EC1",
      "v\u1EA5n \u0111\u1EC1 quan tr\u1ECDng",
      "v\u1EABn",
      "v\u1EABn th\u1EBF",
      "v\u1EADy",
      "v\u1EADy l\xE0",
      "v\u1EADy m\xE0",
      "v\u1EADy n\xEAn",
      "v\u1EADy ra",
      "v\u1EADy th\xEC",
      "v\u1EADy \u01B0",
      "v\u1EC1",
      "v\u1EC1 kh\xF4ng",
      "v\u1EC1 n\u01B0\u1EDBc",
      "v\u1EC1 ph\u1EA7n",
      "v\u1EC1 sau",
      "v\u1EC1 tay",
      "v\u1ECB tr\xED",
      "v\u1ECB t\u1EA5t",
      "v\u1ED1n d\u0129",
      "v\u1EDBi",
      "v\u1EDBi l\u1EA1i",
      "v\u1EDBi nhau",
      "v\u1EDF",
      "v\u1EE5t",
      "v\u1EEBa",
      "v\u1EEBa khi",
      "v\u1EEBa l\xFAc",
      "v\u1EEBa m\u1EDBi",
      "v\u1EEBa qua",
      "v\u1EEBa r\u1ED3i",
      "v\u1EEBa v\u1EEBa",
      "xa",
      "xa c\xE1ch",
      "xa g\u1EA7n",
      "xa nh\xE0",
      "xa tanh",
      "xa t\u1EAFp",
      "xa xa",
      "xa x\u1EA3",
      "xem",
      "xem l\u1EA1i",
      "xem ra",
      "xem s\u1ED1",
      "xin",
      "xin g\u1EB7p",
      "xin v\xE2ng",
      "xi\u1EBFt bao",
      "xon x\xF3n",
      "xo\xE0nh xo\u1EA1ch",
      "xo\xE9t",
      "xo\u1EB3n",
      "xo\u1EB9t",
      "xu\u1EA5t hi\u1EC7n",
      "xu\u1EA5t k\xEC b\u1EA5t \xFD",
      "xu\u1EA5t k\u1EF3 b\u1EA5t \xFD",
      "xu\u1EC3",
      "xu\u1ED1ng",
      "x\u0103m x\xFAi",
      "x\u0103m x\u0103m",
      "x\u0103m x\u1EAFm",
      "x\u1EA3y ra",
      "x\u1EC1nh x\u1EC7ch",
      "x\u1EC7p",
      "x\u1EED l\xFD",
      "y\xEAu c\u1EA7u",
      "\xE0",
      "\xE0 n\xE0y",
      "\xE0 \u01A1i",
      "\xE0o",
      "\xE0o v\xE0o",
      "\xE0o \xE0o",
      "\xE1",
      "\xE1 \xE0",
      "\xE1i",
      "\xE1i ch\xE0",
      "\xE1i d\xE0",
      "\xE1ng",
      "\xE1ng nh\u01B0",
      "\xE2u l\xE0",
      "\xEDt",
      "\xEDt bi\u1EBFt",
      "\xEDt c\xF3",
      "\xEDt h\u01A1n",
      "\xEDt khi",
      "\xEDt l\xE2u",
      "\xEDt nhi\u1EC1u",
      "\xEDt nh\u1EA5t",
      "\xEDt n\u1EEFa",
      "\xEDt qu\xE1",
      "\xEDt ra",
      "\xEDt th\xF4i",
      "\xEDt th\u1EA5y",
      "\xF4 hay",
      "\xF4 h\xF4",
      "\xF4 k\xEA",
      "\xF4 k\xECa",
      "\xF4i chao",
      "\xF4i th\xF4i",
      "\xF4ng",
      "\xF4ng nh\u1ECF",
      "\xF4ng t\u1EA1o",
      "\xF4ng t\u1EEB",
      "\xF4ng \u1EA5y",
      "\xF4ng \u1ED5ng",
      "\xFAi",
      "\xFAi ch\xE0",
      "\xFAi d\xE0o",
      "\xFD",
      "\xFD ch\u1EEBng",
      "\xFD da",
      "\xFD ho\u1EB7c",
      "\u0103n",
      "\u0103n chung",
      "\u0103n ch\u1EAFc",
      "\u0103n ch\u1ECBu",
      "\u0103n cu\u1ED9c",
      "\u0103n h\u1EBFt",
      "\u0103n h\u1ECFi",
      "\u0103n l\xE0m",
      "\u0103n ng\u01B0\u1EDDi",
      "\u0103n ng\u1ED3i",
      "\u0103n qu\xE1",
      "\u0103n ri\xEAng",
      "\u0103n s\xE1ng",
      "\u0103n tay",
      "\u0103n tr\xEAn",
      "\u0103n v\u1EC1",
      "\u0111ang",
      "\u0111ang tay",
      "\u0111ang th\xEC",
      "\u0111i\u1EC1u",
      "\u0111i\u1EC1u g\xEC",
      "\u0111i\u1EC1u ki\u1EC7n",
      "\u0111i\u1EC3m",
      "\u0111i\u1EC3m ch\xEDnh",
      "\u0111i\u1EC3m g\u1EB7p",
      "\u0111i\u1EC3m \u0111\u1EA7u ti\xEAn",
      "\u0111\xE0nh \u0111\u1EA1ch",
      "\u0111\xE1ng",
      "\u0111\xE1ng k\u1EC3",
      "\u0111\xE1ng l\xED",
      "\u0111\xE1ng l\xFD",
      "\u0111\xE1ng l\u1EBD",
      "\u0111\xE1ng s\u1ED1",
      "\u0111\xE1nh gi\xE1",
      "\u0111\xE1nh \u0111\xF9ng",
      "\u0111\xE1o \u0111\u1EC3",
      "\u0111\xE2u",
      "\u0111\xE2u c\xF3",
      "\u0111\xE2u c\u0169ng",
      "\u0111\xE2u nh\u01B0",
      "\u0111\xE2u n\xE0o",
      "\u0111\xE2u ph\u1EA3i",
      "\u0111\xE2u \u0111\xE2u",
      "\u0111\xE2u \u0111\xE2y",
      "\u0111\xE2u \u0111\xF3",
      "\u0111\xE2y",
      "\u0111\xE2y n\xE0y",
      "\u0111\xE2y r\u1ED3i",
      "\u0111\xE2y \u0111\xF3",
      "\u0111\xE3",
      "\u0111\xE3 hay",
      "\u0111\xE3 kh\xF4ng",
      "\u0111\xE3 l\xE0",
      "\u0111\xE3 l\xE2u",
      "\u0111\xE3 th\u1EBF",
      "\u0111\xE3 v\u1EADy",
      "\u0111\xE3 \u0111\u1EE7",
      "\u0111\xF3",
      "\u0111\xF3 \u0111\xE2y",
      "\u0111\xFAng",
      "\u0111\xFAng ng\xE0y",
      "\u0111\xFAng ra",
      "\u0111\xFAng tu\u1ED5i",
      "\u0111\xFAng v\u1EDBi",
      "\u0111\u01A1n v\u1ECB",
      "\u0111\u01B0a",
      "\u0111\u01B0a cho",
      "\u0111\u01B0a chuy\u1EC7n",
      "\u0111\u01B0a em",
      "\u0111\u01B0a ra",
      "\u0111\u01B0a tay",
      "\u0111\u01B0a tin",
      "\u0111\u01B0a t\u1EDBi",
      "\u0111\u01B0a v\xE0o",
      "\u0111\u01B0a v\u1EC1",
      "\u0111\u01B0a xu\u1ED1ng",
      "\u0111\u01B0a \u0111\u1EBFn",
      "\u0111\u01B0\u1EE3c",
      "\u0111\u01B0\u1EE3c c\xE1i",
      "\u0111\u01B0\u1EE3c l\u1EDDi",
      "\u0111\u01B0\u1EE3c n\u01B0\u1EDBc",
      "\u0111\u01B0\u1EE3c tin",
      "\u0111\u1EA1i lo\u1EA1i",
      "\u0111\u1EA1i nh\xE2n",
      "\u0111\u1EA1i ph\xE0m",
      "\u0111\u1EA1i \u0111\u1EC3",
      "\u0111\u1EA1t",
      "\u0111\u1EA3m b\u1EA3o",
      "\u0111\u1EA7u ti\xEAn",
      "\u0111\u1EA7y",
      "\u0111\u1EA7y n\u0103m",
      "\u0111\u1EA7y ph\xE8",
      "\u0111\u1EA7y tu\u1ED5i",
      "\u0111\u1EB7c bi\u1EC7t",
      "\u0111\u1EB7t",
      "\u0111\u1EB7t l\xE0m",
      "\u0111\u1EB7t m\xECnh",
      "\u0111\u1EB7t m\u1EE9c",
      "\u0111\u1EB7t ra",
      "\u0111\u1EB7t tr\u01B0\u1EDBc",
      "\u0111\u1EB7t \u0111\u1EC3",
      "\u0111\u1EBFn",
      "\u0111\u1EBFn bao gi\u1EDD",
      "\u0111\u1EBFn c\xF9ng",
      "\u0111\u1EBFn c\xF9ng c\u1EF1c",
      "\u0111\u1EBFn c\u1EA3",
      "\u0111\u1EBFn gi\u1EDD",
      "\u0111\u1EBFn g\u1EA7n",
      "\u0111\u1EBFn hay",
      "\u0111\u1EBFn khi",
      "\u0111\u1EBFn l\xFAc",
      "\u0111\u1EBFn l\u1EDDi",
      "\u0111\u1EBFn nay",
      "\u0111\u1EBFn ng\xE0y",
      "\u0111\u1EBFn n\u01A1i",
      "\u0111\u1EBFn n\u1ED7i",
      "\u0111\u1EBFn th\xEC",
      "\u0111\u1EBFn th\u1EBF",
      "\u0111\u1EBFn tu\u1ED5i",
      "\u0111\u1EBFn xem",
      "\u0111\u1EBFn \u0111i\u1EC1u",
      "\u0111\u1EBFn \u0111\xE2u",
      "\u0111\u1EC1u",
      "\u0111\u1EC1u b\u01B0\u1EDBc",
      "\u0111\u1EC1u nhau",
      "\u0111\u1EC1u \u0111\u1EC1u",
      "\u0111\u1EC3",
      "\u0111\u1EC3 cho",
      "\u0111\u1EC3 gi\u1ED1ng",
      "\u0111\u1EC3 kh\xF4ng",
      "\u0111\u1EC3 l\xF2ng",
      "\u0111\u1EC3 l\u1EA1i",
      "\u0111\u1EC3 m\xE0",
      "\u0111\u1EC3 ph\u1EA7n",
      "\u0111\u1EC3 \u0111\u01B0\u1EE3c",
      "\u0111\u1EC3 \u0111\u1EBFn n\u1ED7i",
      "\u0111\u1ED1i v\u1EDBi",
      "\u0111\u1ED3ng th\u1EDDi",
      "\u0111\u1EE7",
      "\u0111\u1EE7 d\xF9ng",
      "\u0111\u1EE7 n\u01A1i",
      "\u0111\u1EE7 s\u1ED1",
      "\u0111\u1EE7 \u0111i\u1EC1u",
      "\u0111\u1EE7 \u0111i\u1EC3m",
      "\u01A1",
      "\u01A1 hay",
      "\u01A1 k\xECa",
      "\u01A1i",
      "\u01A1i l\xE0",
      "\u01B0",
      "\u1EA1",
      "\u1EA1 \u01A1i",
      "\u1EA5y",
      "\u1EA5y l\xE0",
      "\u1EA7u \u01A1",
      "\u1EAFt",
      "\u1EAFt h\u1EB3n",
      "\u1EAFt l\xE0",
      "\u1EAFt ph\u1EA3i",
      "\u1EAFt th\u1EADt",
      "\u1ED1i d\xE0o",
      "\u1ED1i gi\u1EDDi",
      "\u1ED1i gi\u1EDDi \u01A1i",
      "\u1ED3",
      "\u1ED3 \u1ED3",
      "\u1ED5ng",
      "\u1EDB",
      "\u1EDB n\xE0y",
      "\u1EDD",
      "\u1EDD \u1EDD",
      "\u1EDF",
      "\u1EDF l\u1EA1i",
      "\u1EDF nh\u01B0",
      "\u1EDF nh\u1EDD",
      "\u1EDF n\u0103m",
      "\u1EDF tr\xEAn",
      "\u1EDF v\xE0o",
      "\u1EDF \u0111\xE2y",
      "\u1EDF \u0111\xF3",
      "\u1EDF \u0111\u01B0\u1EE3c",
      "\u1EE7a",
      "\u1EE9 h\u1EF1",
      "\u1EE9 \u1EEB",
      "\u1EEB",
      "\u1EEB nh\xE9",
      "\u1EEB th\xEC",
      "\u1EEB \xE0o",
      "\u1EEB \u1EEB",
      "\u1EED"
    ]
  };
});

// node_modules/keyword-extractor/lib/stopwords/stopwords.js
var require_stopwords = __commonJS((exports, module) => {
  module.exports = {
    ar: require_ar().stopwords,
    cs: require_cs().stopwords,
    da: require_da().stopwords,
    de: require_de().stopwords,
    en: require_en().stopwords,
    es: require_es().stopwords,
    fa: require_fa().stopwords,
    fr: require_fr().stopwords,
    gl: require_gl().stopwords,
    it: require_it().stopwords,
    ko: require_ko().stopwords,
    nl: require_nl().stopwords,
    pl: require_pl().stopwords,
    pt: require_pt().stopwords,
    ro: require_ro().stopwords,
    ru: require_ru().stopwords,
    sv: require_sv().stopwords,
    tr: require_tr().stopwords,
    vi: require_vi().stopwords
  };
});

// node_modules/keyword-extractor/lib/keyword_extractor.js
var require_keyword_extractor = __commonJS((exports, module) => {
  var supported_language_codes = [
    "ar",
    "cs",
    "da",
    "de",
    "en",
    "es",
    "fa",
    "fr",
    "gl",
    "it",
    "ko",
    "nl",
    "pl",
    "pt",
    "ro",
    "ru",
    "sv",
    "tr",
    "vi"
  ];
  var stopwords = require_stopwords();
  function extract(str2, options = {
    remove_digits: true,
    return_changed_case: true
  }) {
    if (!str2) {
      return [];
    }
    const return_changed_case = options.return_changed_case;
    const return_chained_words = options.return_chained_words;
    const remove_digits = options.remove_digits;
    let _language = options.language || "en";
    const _remove_duplicates = options.remove_duplicates || false;
    const return_max_ngrams = options.return_max_ngrams;
    _language = sanitize_language(_language);
    const text = str2.replace(/(<([^>]+)>)/gi, "").trim();
    if (!text) {
      return [];
    } else {
      const words = text.split(/\s/);
      const unchanged_words = [];
      const low_words = [];
      for (let x2 = 0;x2 < words.length; x2++) {
        let w2 = words[x2].match(/https?:\/\/.*[\r\n]*/g) ? words[x2] : words[x2].replace(/\.|,|;|!|\?|\(|\)|:|"|^'|'$|\u201C|\u201D|\u2018|\u2019/g, "");
        if (w2.length === 1) {
          w2 = w2.replace(/_|@|&|#/g, "");
        }
        const digits_match = w2.match(/\d/g);
        if (remove_digits && digits_match && digits_match.length === w2.length) {
          w2 = "";
        }
        if (w2.length > 0) {
          low_words.push(w2.toLowerCase());
          unchanged_words.push(w2);
        }
      }
      let results = [];
      const _stopwords = options.stopwords || getStopwords({ language: _language });
      let _last_result_word_index = 0;
      let _start_result_word_index = 0;
      let _unbroken_word_chain = false;
      for (let y2 = 0;y2 < low_words.length; y2++) {
        if (_stopwords.indexOf(low_words[y2]) < 0) {
          if (_last_result_word_index !== y2 - 1) {
            _start_result_word_index = y2;
            _unbroken_word_chain = false;
          } else {
            _unbroken_word_chain = true;
          }
          const result_word = return_changed_case && !unchanged_words[y2].match(/https?:\/\/.*[\r\n]*/g) ? low_words[y2] : unchanged_words[y2];
          if (return_max_ngrams && _unbroken_word_chain && !return_chained_words && return_max_ngrams > y2 - _start_result_word_index && _last_result_word_index === y2 - 1) {
            const change_pos = results.length - 1 < 0 ? 0 : results.length - 1;
            results[change_pos] = results[change_pos] ? results[change_pos] + " " + result_word : result_word;
          } else if (return_chained_words && _last_result_word_index === y2 - 1) {
            const change_pos = results.length - 1 < 0 ? 0 : results.length - 1;
            results[change_pos] = results[change_pos] ? results[change_pos] + " " + result_word : result_word;
          } else {
            results.push(result_word);
          }
          _last_result_word_index = y2;
        } else {
          _unbroken_word_chain = false;
        }
      }
      if (_remove_duplicates) {
        results = results.filter((v2, i, a) => a.indexOf(v2) === i);
      }
      return results;
    }
  }
  function getStopwords(options) {
    options = options || {};
    let _language = options.language || "en";
    _language = sanitize_language(_language);
    return stopwords[_language];
  }
  function sanitize_language(requested_language) {
    const error_message = "Language must be one of [" + supported_language_codes.join(", ") + "]";
    if (typeof requested_language !== "string") {
      throw new Error(error_message);
    }
    const _requested_language = requested_language.length === 2 ? requested_language : get_language_mapping(requested_language);
    if (supported_language_codes.indexOf(_requested_language) < 0) {
      throw new Error(error_message);
    }
    return _requested_language;
  }
  function get_language_mapping(requested_language) {
    if (typeof requested_language !== "string") {
      return "";
    }
    const mapping = {
      arabic: "ar",
      czech: "cs",
      danish: "da",
      dutch: "nl",
      english: "en",
      french: "fr",
      galician: "gl",
      german: "de",
      italian: "it",
      korean: "ko",
      persian: "fa",
      polish: "pl",
      portuguese: "pt",
      romanian: "ro",
      russian: "ru",
      spanish: "es",
      swedish: "sv",
      turkish: "tr",
      vietnam: "vt"
    };
    return mapping[requested_language] || "";
  }
  module.exports = {
    getStopwords,
    extract,
    supported_language_codes
  };
});

// node_modules/universalify/index.js
var require_universalify = __commonJS((exports) => {
  exports.fromCallback = function(fn2) {
    return Object.defineProperty(function(...args) {
      if (typeof args[args.length - 1] === "function")
        fn2.apply(this, args);
      else {
        return new Promise((resolve2, reject) => {
          fn2.call(this, ...args, (err, res) => err != null ? reject(err) : resolve2(res));
        });
      }
    }, "name", { value: fn2.name });
  };
  exports.fromPromise = function(fn2) {
    return Object.defineProperty(function(...args) {
      const cb = args[args.length - 1];
      if (typeof cb !== "function")
        return fn2.apply(this, args);
      else
        fn2.apply(this, args.slice(0, -1)).then((r) => cb(null, r), cb);
    }, "name", { value: fn2.name });
  };
});

// node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS((exports, module) => {
  var constants = import.meta.require("constants");
  var origCwd = process.cwd;
  var cwd = null;
  var platform2 = process.env.GRACEFUL_FS_PLATFORM || process.platform;
  process.cwd = function() {
    if (!cwd)
      cwd = origCwd.call(process);
    return cwd;
  };
  try {
    process.cwd();
  } catch (er2) {
  }
  if (typeof process.chdir === "function") {
    chdir = process.chdir;
    process.chdir = function(d) {
      cwd = null;
      chdir.call(process, d);
    };
    if (Object.setPrototypeOf)
      Object.setPrototypeOf(process.chdir, chdir);
  }
  var chdir;
  module.exports = patch;
  function patch(fs) {
    if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
      patchLchmod(fs);
    }
    if (!fs.lutimes) {
      patchLutimes(fs);
    }
    fs.chown = chownFix(fs.chown);
    fs.fchown = chownFix(fs.fchown);
    fs.lchown = chownFix(fs.lchown);
    fs.chmod = chmodFix(fs.chmod);
    fs.fchmod = chmodFix(fs.fchmod);
    fs.lchmod = chmodFix(fs.lchmod);
    fs.chownSync = chownFixSync(fs.chownSync);
    fs.fchownSync = chownFixSync(fs.fchownSync);
    fs.lchownSync = chownFixSync(fs.lchownSync);
    fs.chmodSync = chmodFixSync(fs.chmodSync);
    fs.fchmodSync = chmodFixSync(fs.fchmodSync);
    fs.lchmodSync = chmodFixSync(fs.lchmodSync);
    fs.stat = statFix(fs.stat);
    fs.fstat = statFix(fs.fstat);
    fs.lstat = statFix(fs.lstat);
    fs.statSync = statFixSync(fs.statSync);
    fs.fstatSync = statFixSync(fs.fstatSync);
    fs.lstatSync = statFixSync(fs.lstatSync);
    if (fs.chmod && !fs.lchmod) {
      fs.lchmod = function(path, mode, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs.lchmodSync = function() {
      };
    }
    if (fs.chown && !fs.lchown) {
      fs.lchown = function(path, uid, gid, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs.lchownSync = function() {
      };
    }
    if (platform2 === "win32") {
      fs.rename = typeof fs.rename !== "function" ? fs.rename : function(fs$rename) {
        function rename(from, to2, cb) {
          var start = Date.now();
          var backoff = 0;
          fs$rename(from, to2, function CB(er2) {
            if (er2 && (er2.code === "EACCES" || er2.code === "EPERM" || er2.code === "EBUSY") && Date.now() - start < 60000) {
              setTimeout(function() {
                fs.stat(to2, function(stater, st2) {
                  if (stater && stater.code === "ENOENT")
                    fs$rename(from, to2, CB);
                  else
                    cb(er2);
                });
              }, backoff);
              if (backoff < 100)
                backoff += 10;
              return;
            }
            if (cb)
              cb(er2);
          });
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(rename, fs$rename);
        return rename;
      }(fs.rename);
    }
    fs.read = typeof fs.read !== "function" ? fs.read : function(fs$read) {
      function read(fd, buffer, offset, length, position, callback_) {
        var callback;
        if (callback_ && typeof callback_ === "function") {
          var eagCounter = 0;
          callback = function(er2, _3, __) {
            if (er2 && er2.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              return fs$read.call(fs, fd, buffer, offset, length, position, callback);
            }
            callback_.apply(this, arguments);
          };
        }
        return fs$read.call(fs, fd, buffer, offset, length, position, callback);
      }
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(read, fs$read);
      return read;
    }(fs.read);
    fs.readSync = typeof fs.readSync !== "function" ? fs.readSync : function(fs$readSync) {
      return function(fd, buffer, offset, length, position) {
        var eagCounter = 0;
        while (true) {
          try {
            return fs$readSync.call(fs, fd, buffer, offset, length, position);
          } catch (er2) {
            if (er2.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              continue;
            }
            throw er2;
          }
        }
      };
    }(fs.readSync);
    function patchLchmod(fs2) {
      fs2.lchmod = function(path, mode, callback) {
        fs2.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
          if (err) {
            if (callback)
              callback(err);
            return;
          }
          fs2.fchmod(fd, mode, function(err2) {
            fs2.close(fd, function(err22) {
              if (callback)
                callback(err2 || err22);
            });
          });
        });
      };
      fs2.lchmodSync = function(path, mode) {
        var fd = fs2.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);
        var threw = true;
        var ret;
        try {
          ret = fs2.fchmodSync(fd, mode);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs2.closeSync(fd);
            } catch (er2) {
            }
          } else {
            fs2.closeSync(fd);
          }
        }
        return ret;
      };
    }
    function patchLutimes(fs2) {
      if (constants.hasOwnProperty("O_SYMLINK") && fs2.futimes) {
        fs2.lutimes = function(path, at2, mt2, cb) {
          fs2.open(path, constants.O_SYMLINK, function(er2, fd) {
            if (er2) {
              if (cb)
                cb(er2);
              return;
            }
            fs2.futimes(fd, at2, mt2, function(er3) {
              fs2.close(fd, function(er22) {
                if (cb)
                  cb(er3 || er22);
              });
            });
          });
        };
        fs2.lutimesSync = function(path, at2, mt2) {
          var fd = fs2.openSync(path, constants.O_SYMLINK);
          var ret;
          var threw = true;
          try {
            ret = fs2.futimesSync(fd, at2, mt2);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs2.closeSync(fd);
              } catch (er2) {
              }
            } else {
              fs2.closeSync(fd);
            }
          }
          return ret;
        };
      } else if (fs2.futimes) {
        fs2.lutimes = function(_a2, _b, _c, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs2.lutimesSync = function() {
        };
      }
    }
    function chmodFix(orig) {
      if (!orig)
        return orig;
      return function(target, mode, cb) {
        return orig.call(fs, target, mode, function(er2) {
          if (chownErOk(er2))
            er2 = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chmodFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, mode) {
        try {
          return orig.call(fs, target, mode);
        } catch (er2) {
          if (!chownErOk(er2))
            throw er2;
        }
      };
    }
    function chownFix(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid, cb) {
        return orig.call(fs, target, uid, gid, function(er2) {
          if (chownErOk(er2))
            er2 = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chownFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid) {
        try {
          return orig.call(fs, target, uid, gid);
        } catch (er2) {
          if (!chownErOk(er2))
            throw er2;
        }
      };
    }
    function statFix(orig) {
      if (!orig)
        return orig;
      return function(target, options, cb) {
        if (typeof options === "function") {
          cb = options;
          options = null;
        }
        function callback(er2, stats) {
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          if (cb)
            cb.apply(this, arguments);
        }
        return options ? orig.call(fs, target, options, callback) : orig.call(fs, target, callback);
      };
    }
    function statFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, options) {
        var stats = options ? orig.call(fs, target, options) : orig.call(fs, target);
        if (stats) {
          if (stats.uid < 0)
            stats.uid += 4294967296;
          if (stats.gid < 0)
            stats.gid += 4294967296;
        }
        return stats;
      };
    }
    function chownErOk(er2) {
      if (!er2)
        return true;
      if (er2.code === "ENOSYS")
        return true;
      var nonroot = !process.getuid || process.getuid() !== 0;
      if (nonroot) {
        if (er2.code === "EINVAL" || er2.code === "EPERM")
          return true;
      }
      return false;
    }
  }
});

// node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS((exports, module) => {
  var Stream = import.meta.require("stream").Stream;
  module.exports = legacy;
  function legacy(fs) {
    return {
      ReadStream,
      WriteStream
    };
    function ReadStream(path, options) {
      if (!(this instanceof ReadStream))
        return new ReadStream(path, options);
      Stream.call(this);
      var self2 = this;
      this.path = path;
      this.fd = null;
      this.readable = true;
      this.paused = false;
      this.flags = "r";
      this.mode = 438;
      this.bufferSize = 64 * 1024;
      options = options || {};
      var keys = Object.keys(options);
      for (var index = 0, length = keys.length;index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }
      if (this.encoding)
        this.setEncoding(this.encoding);
      if (this.start !== undefined) {
        if (typeof this.start !== "number") {
          throw TypeError("start must be a Number");
        }
        if (this.end === undefined) {
          this.end = Infinity;
        } else if (typeof this.end !== "number") {
          throw TypeError("end must be a Number");
        }
        if (this.start > this.end) {
          throw new Error("start must be <= end");
        }
        this.pos = this.start;
      }
      if (this.fd !== null) {
        process.nextTick(function() {
          self2._read();
        });
        return;
      }
      fs.open(this.path, this.flags, this.mode, function(err, fd) {
        if (err) {
          self2.emit("error", err);
          self2.readable = false;
          return;
        }
        self2.fd = fd;
        self2.emit("open", fd);
        self2._read();
      });
    }
    function WriteStream(path, options) {
      if (!(this instanceof WriteStream))
        return new WriteStream(path, options);
      Stream.call(this);
      this.path = path;
      this.fd = null;
      this.writable = true;
      this.flags = "w";
      this.encoding = "binary";
      this.mode = 438;
      this.bytesWritten = 0;
      options = options || {};
      var keys = Object.keys(options);
      for (var index = 0, length = keys.length;index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }
      if (this.start !== undefined) {
        if (typeof this.start !== "number") {
          throw TypeError("start must be a Number");
        }
        if (this.start < 0) {
          throw new Error("start must be >= zero");
        }
        this.pos = this.start;
      }
      this.busy = false;
      this._queue = [];
      if (this.fd === null) {
        this._open = fs.open;
        this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
        this.flush();
      }
    }
  }
});

// node_modules/graceful-fs/clone.js
var require_clone = __commonJS((exports, module) => {
  module.exports = clone;
  var getPrototypeOf = Object.getPrototypeOf || function(obj) {
    return obj.__proto__;
  };
  function clone(obj) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (obj instanceof Object)
      var copy = { __proto__: getPrototypeOf(obj) };
    else
      var copy = Object.create(null);
    Object.getOwnPropertyNames(obj).forEach(function(key) {
      Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
    });
    return copy;
  }
});

// node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS((exports, module) => {
  var fs = import.meta.require("fs");
  var polyfills = require_polyfills();
  var legacy = require_legacy_streams();
  var clone = require_clone();
  var util = import.meta.require("util");
  var gracefulQueue;
  var previousSymbol;
  if (typeof Symbol === "function" && typeof Symbol.for === "function") {
    gracefulQueue = Symbol.for("graceful-fs.queue");
    previousSymbol = Symbol.for("graceful-fs.previous");
  } else {
    gracefulQueue = "___graceful-fs.queue";
    previousSymbol = "___graceful-fs.previous";
  }
  function noop() {
  }
  function publishQueue(context, queue2) {
    Object.defineProperty(context, gracefulQueue, {
      get: function() {
        return queue2;
      }
    });
  }
  var debug = noop;
  if (util.debuglog)
    debug = util.debuglog("gfs4");
  else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
    debug = function() {
      var m = util.format.apply(util, arguments);
      m = "GFS4: " + m.split(/\n/).join(`
GFS4: `);
      console.error(m);
    };
  if (!fs[gracefulQueue]) {
    queue = global[gracefulQueue] || [];
    publishQueue(fs, queue);
    fs.close = function(fs$close) {
      function close(fd, cb) {
        return fs$close.call(fs, fd, function(err) {
          if (!err) {
            resetQueue();
          }
          if (typeof cb === "function")
            cb.apply(this, arguments);
        });
      }
      Object.defineProperty(close, previousSymbol, {
        value: fs$close
      });
      return close;
    }(fs.close);
    fs.closeSync = function(fs$closeSync) {
      function closeSync(fd) {
        fs$closeSync.apply(fs, arguments);
        resetQueue();
      }
      Object.defineProperty(closeSync, previousSymbol, {
        value: fs$closeSync
      });
      return closeSync;
    }(fs.closeSync);
    if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
      process.on("exit", function() {
        debug(fs[gracefulQueue]);
        import.meta.require("assert").equal(fs[gracefulQueue].length, 0);
      });
    }
  }
  var queue;
  if (!global[gracefulQueue]) {
    publishQueue(global, fs[gracefulQueue]);
  }
  module.exports = patch(clone(fs));
  if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
    module.exports = patch(fs);
    fs.__patched = true;
  }
  function patch(fs2) {
    polyfills(fs2);
    fs2.gracefulify = patch;
    fs2.createReadStream = createReadStream;
    fs2.createWriteStream = createWriteStream;
    var fs$readFile = fs2.readFile;
    fs2.readFile = readFile3;
    function readFile3(path, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$readFile(path, options, cb);
      function go$readFile(path2, options2, cb2, startTime) {
        return fs$readFile(path2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$readFile, [path2, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$writeFile = fs2.writeFile;
    fs2.writeFile = writeFile2;
    function writeFile2(path, data, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$writeFile(path, data, options, cb);
      function go$writeFile(path2, data2, options2, cb2, startTime) {
        return fs$writeFile(path2, data2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$writeFile, [path2, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$appendFile = fs2.appendFile;
    if (fs$appendFile)
      fs2.appendFile = appendFile;
    function appendFile(path, data, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$appendFile(path, data, options, cb);
      function go$appendFile(path2, data2, options2, cb2, startTime) {
        return fs$appendFile(path2, data2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$appendFile, [path2, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$copyFile = fs2.copyFile;
    if (fs$copyFile)
      fs2.copyFile = copyFile;
    function copyFile(src, dest, flags, cb) {
      if (typeof flags === "function") {
        cb = flags;
        flags = 0;
      }
      return go$copyFile(src, dest, flags, cb);
      function go$copyFile(src2, dest2, flags2, cb2, startTime) {
        return fs$copyFile(src2, dest2, flags2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$readdir = fs2.readdir;
    fs2.readdir = readdir2;
    var noReaddirOptionVersions = /^v[0-5]\./;
    function readdir2(path, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir(path2, options2, cb2, startTime) {
        return fs$readdir(path2, fs$readdirCallback(path2, options2, cb2, startTime));
      } : function go$readdir(path2, options2, cb2, startTime) {
        return fs$readdir(path2, options2, fs$readdirCallback(path2, options2, cb2, startTime));
      };
      return go$readdir(path, options, cb);
      function fs$readdirCallback(path2, options2, cb2, startTime) {
        return function(err, files) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([
              go$readdir,
              [path2, options2, cb2],
              err,
              startTime || Date.now(),
              Date.now()
            ]);
          else {
            if (files && files.sort)
              files.sort();
            if (typeof cb2 === "function")
              cb2.call(this, err, files);
          }
        };
      }
    }
    if (process.version.substr(0, 4) === "v0.8") {
      var legStreams = legacy(fs2);
      ReadStream = legStreams.ReadStream;
      WriteStream = legStreams.WriteStream;
    }
    var fs$ReadStream = fs2.ReadStream;
    if (fs$ReadStream) {
      ReadStream.prototype = Object.create(fs$ReadStream.prototype);
      ReadStream.prototype.open = ReadStream$open;
    }
    var fs$WriteStream = fs2.WriteStream;
    if (fs$WriteStream) {
      WriteStream.prototype = Object.create(fs$WriteStream.prototype);
      WriteStream.prototype.open = WriteStream$open;
    }
    Object.defineProperty(fs2, "ReadStream", {
      get: function() {
        return ReadStream;
      },
      set: function(val) {
        ReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(fs2, "WriteStream", {
      get: function() {
        return WriteStream;
      },
      set: function(val) {
        WriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileReadStream = ReadStream;
    Object.defineProperty(fs2, "FileReadStream", {
      get: function() {
        return FileReadStream;
      },
      set: function(val) {
        FileReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileWriteStream = WriteStream;
    Object.defineProperty(fs2, "FileWriteStream", {
      get: function() {
        return FileWriteStream;
      },
      set: function(val) {
        FileWriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    function ReadStream(path, options) {
      if (this instanceof ReadStream)
        return fs$ReadStream.apply(this, arguments), this;
      else
        return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
    }
    function ReadStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          if (that.autoClose)
            that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
          that.read();
        }
      });
    }
    function WriteStream(path, options) {
      if (this instanceof WriteStream)
        return fs$WriteStream.apply(this, arguments), this;
      else
        return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
    }
    function WriteStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
        }
      });
    }
    function createReadStream(path, options) {
      return new fs2.ReadStream(path, options);
    }
    function createWriteStream(path, options) {
      return new fs2.WriteStream(path, options);
    }
    var fs$open = fs2.open;
    fs2.open = open;
    function open(path, flags, mode, cb) {
      if (typeof mode === "function")
        cb = mode, mode = null;
      return go$open(path, flags, mode, cb);
      function go$open(path2, flags2, mode2, cb2, startTime) {
        return fs$open(path2, flags2, mode2, function(err, fd) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$open, [path2, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    return fs2;
  }
  function enqueue(elem) {
    debug("ENQUEUE", elem[0].name, elem[1]);
    fs[gracefulQueue].push(elem);
    retry();
  }
  var retryTimer;
  function resetQueue() {
    var now = Date.now();
    for (var i = 0;i < fs[gracefulQueue].length; ++i) {
      if (fs[gracefulQueue][i].length > 2) {
        fs[gracefulQueue][i][3] = now;
        fs[gracefulQueue][i][4] = now;
      }
    }
    retry();
  }
  function retry() {
    clearTimeout(retryTimer);
    retryTimer = undefined;
    if (fs[gracefulQueue].length === 0)
      return;
    var elem = fs[gracefulQueue].shift();
    var fn2 = elem[0];
    var args = elem[1];
    var err = elem[2];
    var startTime = elem[3];
    var lastTime = elem[4];
    if (startTime === undefined) {
      debug("RETRY", fn2.name, args);
      fn2.apply(null, args);
    } else if (Date.now() - startTime >= 60000) {
      debug("TIMEOUT", fn2.name, args);
      var cb = args.pop();
      if (typeof cb === "function")
        cb.call(null, err);
    } else {
      var sinceAttempt = Date.now() - lastTime;
      var sinceStart = Math.max(lastTime - startTime, 1);
      var desiredDelay = Math.min(sinceStart * 1.2, 100);
      if (sinceAttempt >= desiredDelay) {
        debug("RETRY", fn2.name, args);
        fn2.apply(null, args.concat([startTime]));
      } else {
        fs[gracefulQueue].push(elem);
      }
    }
    if (retryTimer === undefined) {
      retryTimer = setTimeout(retry, 0);
    }
  }
});

// node_modules/fs-extra/lib/fs/index.js
var require_fs = __commonJS((exports) => {
  var u2 = require_universalify().fromCallback;
  var fs = require_graceful_fs();
  var api = [
    "access",
    "appendFile",
    "chmod",
    "chown",
    "close",
    "copyFile",
    "fchmod",
    "fchown",
    "fdatasync",
    "fstat",
    "fsync",
    "ftruncate",
    "futimes",
    "lchmod",
    "lchown",
    "link",
    "lstat",
    "mkdir",
    "mkdtemp",
    "open",
    "opendir",
    "readdir",
    "readFile",
    "readlink",
    "realpath",
    "rename",
    "rm",
    "rmdir",
    "stat",
    "symlink",
    "truncate",
    "unlink",
    "utimes",
    "writeFile"
  ].filter((key) => {
    return typeof fs[key] === "function";
  });
  Object.assign(exports, fs);
  api.forEach((method) => {
    exports[method] = u2(fs[method]);
  });
  exports.exists = function(filename, callback) {
    if (typeof callback === "function") {
      return fs.exists(filename, callback);
    }
    return new Promise((resolve2) => {
      return fs.exists(filename, resolve2);
    });
  };
  exports.read = function(fd, buffer, offset, length, position, callback) {
    if (typeof callback === "function") {
      return fs.read(fd, buffer, offset, length, position, callback);
    }
    return new Promise((resolve2, reject) => {
      fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer2) => {
        if (err)
          return reject(err);
        resolve2({ bytesRead, buffer: buffer2 });
      });
    });
  };
  exports.write = function(fd, buffer, ...args) {
    if (typeof args[args.length - 1] === "function") {
      return fs.write(fd, buffer, ...args);
    }
    return new Promise((resolve2, reject) => {
      fs.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
        if (err)
          return reject(err);
        resolve2({ bytesWritten, buffer: buffer2 });
      });
    });
  };
  exports.readv = function(fd, buffers, ...args) {
    if (typeof args[args.length - 1] === "function") {
      return fs.readv(fd, buffers, ...args);
    }
    return new Promise((resolve2, reject) => {
      fs.readv(fd, buffers, ...args, (err, bytesRead, buffers2) => {
        if (err)
          return reject(err);
        resolve2({ bytesRead, buffers: buffers2 });
      });
    });
  };
  exports.writev = function(fd, buffers, ...args) {
    if (typeof args[args.length - 1] === "function") {
      return fs.writev(fd, buffers, ...args);
    }
    return new Promise((resolve2, reject) => {
      fs.writev(fd, buffers, ...args, (err, bytesWritten, buffers2) => {
        if (err)
          return reject(err);
        resolve2({ bytesWritten, buffers: buffers2 });
      });
    });
  };
  if (typeof fs.realpath.native === "function") {
    exports.realpath.native = u2(fs.realpath.native);
  } else {
    process.emitWarning("fs.realpath.native is not a function. Is fs being monkey-patched?", "Warning", "fs-extra-WARN0003");
  }
});

// node_modules/fs-extra/lib/mkdirs/utils.js
var require_utils = __commonJS((exports, module) => {
  var path = import.meta.require("path");
  exports.checkPath = function checkPath(pth) {
    if (process.platform === "win32") {
      const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path.parse(pth).root, ""));
      if (pathHasInvalidWinCharacters) {
        const error = new Error(`Path contains invalid characters: ${pth}`);
        error.code = "EINVAL";
        throw error;
      }
    }
  };
});

// node_modules/fs-extra/lib/mkdirs/make-dir.js
var require_make_dir = __commonJS((exports, module) => {
  var fs = require_fs();
  var { checkPath } = require_utils();
  var getMode = (options) => {
    const defaults = { mode: 511 };
    if (typeof options === "number")
      return options;
    return { ...defaults, ...options }.mode;
  };
  exports.makeDir = async (dir, options) => {
    checkPath(dir);
    return fs.mkdir(dir, {
      mode: getMode(options),
      recursive: true
    });
  };
  exports.makeDirSync = (dir, options) => {
    checkPath(dir);
    return fs.mkdirSync(dir, {
      mode: getMode(options),
      recursive: true
    });
  };
});

// node_modules/fs-extra/lib/mkdirs/index.js
var require_mkdirs = __commonJS((exports, module) => {
  var u2 = require_universalify().fromPromise;
  var { makeDir: _makeDir, makeDirSync } = require_make_dir();
  var makeDir = u2(_makeDir);
  module.exports = {
    mkdirs: makeDir,
    mkdirsSync: makeDirSync,
    mkdirp: makeDir,
    mkdirpSync: makeDirSync,
    ensureDir: makeDir,
    ensureDirSync: makeDirSync
  };
});

// node_modules/fs-extra/lib/path-exists/index.js
var require_path_exists = __commonJS((exports, module) => {
  var u2 = require_universalify().fromPromise;
  var fs = require_fs();
  function pathExists(path) {
    return fs.access(path).then(() => true).catch(() => false);
  }
  module.exports = {
    pathExists: u2(pathExists),
    pathExistsSync: fs.existsSync
  };
});

// node_modules/fs-extra/lib/util/utimes.js
var require_utimes = __commonJS((exports, module) => {
  var fs = require_graceful_fs();
  function utimesMillis(path, atime, mtime, callback) {
    fs.open(path, "r+", (err, fd) => {
      if (err)
        return callback(err);
      fs.futimes(fd, atime, mtime, (futimesErr) => {
        fs.close(fd, (closeErr) => {
          if (callback)
            callback(futimesErr || closeErr);
        });
      });
    });
  }
  function utimesMillisSync(path, atime, mtime) {
    const fd = fs.openSync(path, "r+");
    fs.futimesSync(fd, atime, mtime);
    return fs.closeSync(fd);
  }
  module.exports = {
    utimesMillis,
    utimesMillisSync
  };
});

// node_modules/fs-extra/lib/util/stat.js
var require_stat = __commonJS((exports, module) => {
  var fs = require_fs();
  var path = import.meta.require("path");
  var util = import.meta.require("util");
  function getStats(src, dest, opts) {
    const statFunc = opts.dereference ? (file) => fs.stat(file, { bigint: true }) : (file) => fs.lstat(file, { bigint: true });
    return Promise.all([
      statFunc(src),
      statFunc(dest).catch((err) => {
        if (err.code === "ENOENT")
          return null;
        throw err;
      })
    ]).then(([srcStat, destStat]) => ({ srcStat, destStat }));
  }
  function getStatsSync(src, dest, opts) {
    let destStat;
    const statFunc = opts.dereference ? (file) => fs.statSync(file, { bigint: true }) : (file) => fs.lstatSync(file, { bigint: true });
    const srcStat = statFunc(src);
    try {
      destStat = statFunc(dest);
    } catch (err) {
      if (err.code === "ENOENT")
        return { srcStat, destStat: null };
      throw err;
    }
    return { srcStat, destStat };
  }
  function checkPaths(src, dest, funcName, opts, cb) {
    util.callbackify(getStats)(src, dest, opts, (err, stats) => {
      if (err)
        return cb(err);
      const { srcStat, destStat } = stats;
      if (destStat) {
        if (areIdentical(srcStat, destStat)) {
          const srcBaseName = path.basename(src);
          const destBaseName = path.basename(dest);
          if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
            return cb(null, { srcStat, destStat, isChangingCase: true });
          }
          return cb(new Error("Source and destination must not be the same."));
        }
        if (srcStat.isDirectory() && !destStat.isDirectory()) {
          return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`));
        }
        if (!srcStat.isDirectory() && destStat.isDirectory()) {
          return cb(new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`));
        }
      }
      if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
        return cb(new Error(errMsg(src, dest, funcName)));
      }
      return cb(null, { srcStat, destStat });
    });
  }
  function checkPathsSync(src, dest, funcName, opts) {
    const { srcStat, destStat } = getStatsSync(src, dest, opts);
    if (destStat) {
      if (areIdentical(srcStat, destStat)) {
        const srcBaseName = path.basename(src);
        const destBaseName = path.basename(dest);
        if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
          return { srcStat, destStat, isChangingCase: true };
        }
        throw new Error("Source and destination must not be the same.");
      }
      if (srcStat.isDirectory() && !destStat.isDirectory()) {
        throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
      }
      if (!srcStat.isDirectory() && destStat.isDirectory()) {
        throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);
      }
    }
    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
      throw new Error(errMsg(src, dest, funcName));
    }
    return { srcStat, destStat };
  }
  function checkParentPaths(src, srcStat, dest, funcName, cb) {
    const srcParent = path.resolve(path.dirname(src));
    const destParent = path.resolve(path.dirname(dest));
    if (destParent === srcParent || destParent === path.parse(destParent).root)
      return cb();
    fs.stat(destParent, { bigint: true }, (err, destStat) => {
      if (err) {
        if (err.code === "ENOENT")
          return cb();
        return cb(err);
      }
      if (areIdentical(srcStat, destStat)) {
        return cb(new Error(errMsg(src, dest, funcName)));
      }
      return checkParentPaths(src, srcStat, destParent, funcName, cb);
    });
  }
  function checkParentPathsSync(src, srcStat, dest, funcName) {
    const srcParent = path.resolve(path.dirname(src));
    const destParent = path.resolve(path.dirname(dest));
    if (destParent === srcParent || destParent === path.parse(destParent).root)
      return;
    let destStat;
    try {
      destStat = fs.statSync(destParent, { bigint: true });
    } catch (err) {
      if (err.code === "ENOENT")
        return;
      throw err;
    }
    if (areIdentical(srcStat, destStat)) {
      throw new Error(errMsg(src, dest, funcName));
    }
    return checkParentPathsSync(src, srcStat, destParent, funcName);
  }
  function areIdentical(srcStat, destStat) {
    return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev;
  }
  function isSrcSubdir(src, dest) {
    const srcArr = path.resolve(src).split(path.sep).filter((i) => i);
    const destArr = path.resolve(dest).split(path.sep).filter((i) => i);
    return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true);
  }
  function errMsg(src, dest, funcName) {
    return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
  }
  module.exports = {
    checkPaths,
    checkPathsSync,
    checkParentPaths,
    checkParentPathsSync,
    isSrcSubdir,
    areIdentical
  };
});

// node_modules/fs-extra/lib/copy/copy.js
var require_copy = __commonJS((exports, module) => {
  var fs = require_graceful_fs();
  var path = import.meta.require("path");
  var mkdirs = require_mkdirs().mkdirs;
  var pathExists = require_path_exists().pathExists;
  var utimesMillis = require_utimes().utimesMillis;
  var stat2 = require_stat();
  function copy(src, dest, opts, cb) {
    if (typeof opts === "function" && !cb) {
      cb = opts;
      opts = {};
    } else if (typeof opts === "function") {
      opts = { filter: opts };
    }
    cb = cb || function() {
    };
    opts = opts || {};
    opts.clobber = "clobber" in opts ? !!opts.clobber : true;
    opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
    if (opts.preserveTimestamps && process.arch === "ia32") {
      process.emitWarning(`Using the preserveTimestamps option in 32-bit node is not recommended;

` + "\tsee https://github.com/jprichardson/node-fs-extra/issues/269", "Warning", "fs-extra-WARN0001");
    }
    stat2.checkPaths(src, dest, "copy", opts, (err, stats) => {
      if (err)
        return cb(err);
      const { srcStat, destStat } = stats;
      stat2.checkParentPaths(src, srcStat, dest, "copy", (err2) => {
        if (err2)
          return cb(err2);
        runFilter(src, dest, opts, (err3, include) => {
          if (err3)
            return cb(err3);
          if (!include)
            return cb();
          checkParentDir(destStat, src, dest, opts, cb);
        });
      });
    });
  }
  function checkParentDir(destStat, src, dest, opts, cb) {
    const destParent = path.dirname(dest);
    pathExists(destParent, (err, dirExists) => {
      if (err)
        return cb(err);
      if (dirExists)
        return getStats(destStat, src, dest, opts, cb);
      mkdirs(destParent, (err2) => {
        if (err2)
          return cb(err2);
        return getStats(destStat, src, dest, opts, cb);
      });
    });
  }
  function runFilter(src, dest, opts, cb) {
    if (!opts.filter)
      return cb(null, true);
    Promise.resolve(opts.filter(src, dest)).then((include) => cb(null, include), (error) => cb(error));
  }
  function getStats(destStat, src, dest, opts, cb) {
    const stat3 = opts.dereference ? fs.stat : fs.lstat;
    stat3(src, (err, srcStat) => {
      if (err)
        return cb(err);
      if (srcStat.isDirectory())
        return onDir(srcStat, destStat, src, dest, opts, cb);
      else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
        return onFile(srcStat, destStat, src, dest, opts, cb);
      else if (srcStat.isSymbolicLink())
        return onLink(destStat, src, dest, opts, cb);
      else if (srcStat.isSocket())
        return cb(new Error(`Cannot copy a socket file: ${src}`));
      else if (srcStat.isFIFO())
        return cb(new Error(`Cannot copy a FIFO pipe: ${src}`));
      return cb(new Error(`Unknown file: ${src}`));
    });
  }
  function onFile(srcStat, destStat, src, dest, opts, cb) {
    if (!destStat)
      return copyFile(srcStat, src, dest, opts, cb);
    return mayCopyFile(srcStat, src, dest, opts, cb);
  }
  function mayCopyFile(srcStat, src, dest, opts, cb) {
    if (opts.overwrite) {
      fs.unlink(dest, (err) => {
        if (err)
          return cb(err);
        return copyFile(srcStat, src, dest, opts, cb);
      });
    } else if (opts.errorOnExist) {
      return cb(new Error(`'${dest}' already exists`));
    } else
      return cb();
  }
  function copyFile(srcStat, src, dest, opts, cb) {
    fs.copyFile(src, dest, (err) => {
      if (err)
        return cb(err);
      if (opts.preserveTimestamps)
        return handleTimestampsAndMode(srcStat.mode, src, dest, cb);
      return setDestMode(dest, srcStat.mode, cb);
    });
  }
  function handleTimestampsAndMode(srcMode, src, dest, cb) {
    if (fileIsNotWritable(srcMode)) {
      return makeFileWritable(dest, srcMode, (err) => {
        if (err)
          return cb(err);
        return setDestTimestampsAndMode(srcMode, src, dest, cb);
      });
    }
    return setDestTimestampsAndMode(srcMode, src, dest, cb);
  }
  function fileIsNotWritable(srcMode) {
    return (srcMode & 128) === 0;
  }
  function makeFileWritable(dest, srcMode, cb) {
    return setDestMode(dest, srcMode | 128, cb);
  }
  function setDestTimestampsAndMode(srcMode, src, dest, cb) {
    setDestTimestamps(src, dest, (err) => {
      if (err)
        return cb(err);
      return setDestMode(dest, srcMode, cb);
    });
  }
  function setDestMode(dest, srcMode, cb) {
    return fs.chmod(dest, srcMode, cb);
  }
  function setDestTimestamps(src, dest, cb) {
    fs.stat(src, (err, updatedSrcStat) => {
      if (err)
        return cb(err);
      return utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime, cb);
    });
  }
  function onDir(srcStat, destStat, src, dest, opts, cb) {
    if (!destStat)
      return mkDirAndCopy(srcStat.mode, src, dest, opts, cb);
    return copyDir(src, dest, opts, cb);
  }
  function mkDirAndCopy(srcMode, src, dest, opts, cb) {
    fs.mkdir(dest, (err) => {
      if (err)
        return cb(err);
      copyDir(src, dest, opts, (err2) => {
        if (err2)
          return cb(err2);
        return setDestMode(dest, srcMode, cb);
      });
    });
  }
  function copyDir(src, dest, opts, cb) {
    fs.readdir(src, (err, items) => {
      if (err)
        return cb(err);
      return copyDirItems(items, src, dest, opts, cb);
    });
  }
  function copyDirItems(items, src, dest, opts, cb) {
    const item = items.pop();
    if (!item)
      return cb();
    return copyDirItem(items, item, src, dest, opts, cb);
  }
  function copyDirItem(items, item, src, dest, opts, cb) {
    const srcItem = path.join(src, item);
    const destItem = path.join(dest, item);
    runFilter(srcItem, destItem, opts, (err, include) => {
      if (err)
        return cb(err);
      if (!include)
        return copyDirItems(items, src, dest, opts, cb);
      stat2.checkPaths(srcItem, destItem, "copy", opts, (err2, stats) => {
        if (err2)
          return cb(err2);
        const { destStat } = stats;
        getStats(destStat, srcItem, destItem, opts, (err3) => {
          if (err3)
            return cb(err3);
          return copyDirItems(items, src, dest, opts, cb);
        });
      });
    });
  }
  function onLink(destStat, src, dest, opts, cb) {
    fs.readlink(src, (err, resolvedSrc) => {
      if (err)
        return cb(err);
      if (opts.dereference) {
        resolvedSrc = path.resolve(process.cwd(), resolvedSrc);
      }
      if (!destStat) {
        return fs.symlink(resolvedSrc, dest, cb);
      } else {
        fs.readlink(dest, (err2, resolvedDest) => {
          if (err2) {
            if (err2.code === "EINVAL" || err2.code === "UNKNOWN")
              return fs.symlink(resolvedSrc, dest, cb);
            return cb(err2);
          }
          if (opts.dereference) {
            resolvedDest = path.resolve(process.cwd(), resolvedDest);
          }
          if (stat2.isSrcSubdir(resolvedSrc, resolvedDest)) {
            return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
          }
          if (stat2.isSrcSubdir(resolvedDest, resolvedSrc)) {
            return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
          }
          return copyLink(resolvedSrc, dest, cb);
        });
      }
    });
  }
  function copyLink(resolvedSrc, dest, cb) {
    fs.unlink(dest, (err) => {
      if (err)
        return cb(err);
      return fs.symlink(resolvedSrc, dest, cb);
    });
  }
  module.exports = copy;
});

// node_modules/fs-extra/lib/copy/copy-sync.js
var require_copy_sync = __commonJS((exports, module) => {
  var fs = require_graceful_fs();
  var path = import.meta.require("path");
  var mkdirsSync = require_mkdirs().mkdirsSync;
  var utimesMillisSync = require_utimes().utimesMillisSync;
  var stat2 = require_stat();
  function copySync(src, dest, opts) {
    if (typeof opts === "function") {
      opts = { filter: opts };
    }
    opts = opts || {};
    opts.clobber = "clobber" in opts ? !!opts.clobber : true;
    opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
    if (opts.preserveTimestamps && process.arch === "ia32") {
      process.emitWarning(`Using the preserveTimestamps option in 32-bit node is not recommended;

` + "\tsee https://github.com/jprichardson/node-fs-extra/issues/269", "Warning", "fs-extra-WARN0002");
    }
    const { srcStat, destStat } = stat2.checkPathsSync(src, dest, "copy", opts);
    stat2.checkParentPathsSync(src, srcStat, dest, "copy");
    if (opts.filter && !opts.filter(src, dest))
      return;
    const destParent = path.dirname(dest);
    if (!fs.existsSync(destParent))
      mkdirsSync(destParent);
    return getStats(destStat, src, dest, opts);
  }
  function getStats(destStat, src, dest, opts) {
    const statSync2 = opts.dereference ? fs.statSync : fs.lstatSync;
    const srcStat = statSync2(src);
    if (srcStat.isDirectory())
      return onDir(srcStat, destStat, src, dest, opts);
    else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
      return onFile(srcStat, destStat, src, dest, opts);
    else if (srcStat.isSymbolicLink())
      return onLink(destStat, src, dest, opts);
    else if (srcStat.isSocket())
      throw new Error(`Cannot copy a socket file: ${src}`);
    else if (srcStat.isFIFO())
      throw new Error(`Cannot copy a FIFO pipe: ${src}`);
    throw new Error(`Unknown file: ${src}`);
  }
  function onFile(srcStat, destStat, src, dest, opts) {
    if (!destStat)
      return copyFile(srcStat, src, dest, opts);
    return mayCopyFile(srcStat, src, dest, opts);
  }
  function mayCopyFile(srcStat, src, dest, opts) {
    if (opts.overwrite) {
      fs.unlinkSync(dest);
      return copyFile(srcStat, src, dest, opts);
    } else if (opts.errorOnExist) {
      throw new Error(`'${dest}' already exists`);
    }
  }
  function copyFile(srcStat, src, dest, opts) {
    fs.copyFileSync(src, dest);
    if (opts.preserveTimestamps)
      handleTimestamps(srcStat.mode, src, dest);
    return setDestMode(dest, srcStat.mode);
  }
  function handleTimestamps(srcMode, src, dest) {
    if (fileIsNotWritable(srcMode))
      makeFileWritable(dest, srcMode);
    return setDestTimestamps(src, dest);
  }
  function fileIsNotWritable(srcMode) {
    return (srcMode & 128) === 0;
  }
  function makeFileWritable(dest, srcMode) {
    return setDestMode(dest, srcMode | 128);
  }
  function setDestMode(dest, srcMode) {
    return fs.chmodSync(dest, srcMode);
  }
  function setDestTimestamps(src, dest) {
    const updatedSrcStat = fs.statSync(src);
    return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
  }
  function onDir(srcStat, destStat, src, dest, opts) {
    if (!destStat)
      return mkDirAndCopy(srcStat.mode, src, dest, opts);
    return copyDir(src, dest, opts);
  }
  function mkDirAndCopy(srcMode, src, dest, opts) {
    fs.mkdirSync(dest);
    copyDir(src, dest, opts);
    return setDestMode(dest, srcMode);
  }
  function copyDir(src, dest, opts) {
    fs.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
  }
  function copyDirItem(item, src, dest, opts) {
    const srcItem = path.join(src, item);
    const destItem = path.join(dest, item);
    if (opts.filter && !opts.filter(srcItem, destItem))
      return;
    const { destStat } = stat2.checkPathsSync(srcItem, destItem, "copy", opts);
    return getStats(destStat, srcItem, destItem, opts);
  }
  function onLink(destStat, src, dest, opts) {
    let resolvedSrc = fs.readlinkSync(src);
    if (opts.dereference) {
      resolvedSrc = path.resolve(process.cwd(), resolvedSrc);
    }
    if (!destStat) {
      return fs.symlinkSync(resolvedSrc, dest);
    } else {
      let resolvedDest;
      try {
        resolvedDest = fs.readlinkSync(dest);
      } catch (err) {
        if (err.code === "EINVAL" || err.code === "UNKNOWN")
          return fs.symlinkSync(resolvedSrc, dest);
        throw err;
      }
      if (opts.dereference) {
        resolvedDest = path.resolve(process.cwd(), resolvedDest);
      }
      if (stat2.isSrcSubdir(resolvedSrc, resolvedDest)) {
        throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
      }
      if (stat2.isSrcSubdir(resolvedDest, resolvedSrc)) {
        throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
      }
      return copyLink(resolvedSrc, dest);
    }
  }
  function copyLink(resolvedSrc, dest) {
    fs.unlinkSync(dest);
    return fs.symlinkSync(resolvedSrc, dest);
  }
  module.exports = copySync;
});

// node_modules/fs-extra/lib/copy/index.js
var require_copy2 = __commonJS((exports, module) => {
  var u2 = require_universalify().fromCallback;
  module.exports = {
    copy: u2(require_copy()),
    copySync: require_copy_sync()
  };
});

// node_modules/fs-extra/lib/remove/index.js
var require_remove = __commonJS((exports, module) => {
  var fs = require_graceful_fs();
  var u2 = require_universalify().fromCallback;
  function remove(path, callback) {
    fs.rm(path, { recursive: true, force: true }, callback);
  }
  function removeSync(path) {
    fs.rmSync(path, { recursive: true, force: true });
  }
  module.exports = {
    remove: u2(remove),
    removeSync
  };
});

// node_modules/fs-extra/lib/empty/index.js
var require_empty = __commonJS((exports, module) => {
  var u2 = require_universalify().fromPromise;
  var fs = require_fs();
  var path = import.meta.require("path");
  var mkdir3 = require_mkdirs();
  var remove = require_remove();
  var emptyDir = u2(async function emptyDir(dir) {
    let items;
    try {
      items = await fs.readdir(dir);
    } catch {
      return mkdir3.mkdirs(dir);
    }
    return Promise.all(items.map((item) => remove.remove(path.join(dir, item))));
  });
  function emptyDirSync(dir) {
    let items;
    try {
      items = fs.readdirSync(dir);
    } catch {
      return mkdir3.mkdirsSync(dir);
    }
    items.forEach((item) => {
      item = path.join(dir, item);
      remove.removeSync(item);
    });
  }
  module.exports = {
    emptyDirSync,
    emptydirSync: emptyDirSync,
    emptyDir,
    emptydir: emptyDir
  };
});

// node_modules/fs-extra/lib/ensure/file.js
var require_file = __commonJS((exports, module) => {
  var u2 = require_universalify().fromCallback;
  var path = import.meta.require("path");
  var fs = require_graceful_fs();
  var mkdir3 = require_mkdirs();
  function createFile(file, callback) {
    function makeFile() {
      fs.writeFile(file, "", (err) => {
        if (err)
          return callback(err);
        callback();
      });
    }
    fs.stat(file, (err, stats) => {
      if (!err && stats.isFile())
        return callback();
      const dir = path.dirname(file);
      fs.stat(dir, (err2, stats2) => {
        if (err2) {
          if (err2.code === "ENOENT") {
            return mkdir3.mkdirs(dir, (err3) => {
              if (err3)
                return callback(err3);
              makeFile();
            });
          }
          return callback(err2);
        }
        if (stats2.isDirectory())
          makeFile();
        else {
          fs.readdir(dir, (err3) => {
            if (err3)
              return callback(err3);
          });
        }
      });
    });
  }
  function createFileSync(file) {
    let stats;
    try {
      stats = fs.statSync(file);
    } catch {
    }
    if (stats && stats.isFile())
      return;
    const dir = path.dirname(file);
    try {
      if (!fs.statSync(dir).isDirectory()) {
        fs.readdirSync(dir);
      }
    } catch (err) {
      if (err && err.code === "ENOENT")
        mkdir3.mkdirsSync(dir);
      else
        throw err;
    }
    fs.writeFileSync(file, "");
  }
  module.exports = {
    createFile: u2(createFile),
    createFileSync
  };
});

// node_modules/fs-extra/lib/ensure/link.js
var require_link = __commonJS((exports, module) => {
  var u2 = require_universalify().fromCallback;
  var path = import.meta.require("path");
  var fs = require_graceful_fs();
  var mkdir3 = require_mkdirs();
  var pathExists = require_path_exists().pathExists;
  var { areIdentical } = require_stat();
  function createLink(srcpath, dstpath, callback) {
    function makeLink(srcpath2, dstpath2) {
      fs.link(srcpath2, dstpath2, (err) => {
        if (err)
          return callback(err);
        callback(null);
      });
    }
    fs.lstat(dstpath, (_3, dstStat) => {
      fs.lstat(srcpath, (err, srcStat) => {
        if (err) {
          err.message = err.message.replace("lstat", "ensureLink");
          return callback(err);
        }
        if (dstStat && areIdentical(srcStat, dstStat))
          return callback(null);
        const dir = path.dirname(dstpath);
        pathExists(dir, (err2, dirExists) => {
          if (err2)
            return callback(err2);
          if (dirExists)
            return makeLink(srcpath, dstpath);
          mkdir3.mkdirs(dir, (err3) => {
            if (err3)
              return callback(err3);
            makeLink(srcpath, dstpath);
          });
        });
      });
    });
  }
  function createLinkSync(srcpath, dstpath) {
    let dstStat;
    try {
      dstStat = fs.lstatSync(dstpath);
    } catch {
    }
    try {
      const srcStat = fs.lstatSync(srcpath);
      if (dstStat && areIdentical(srcStat, dstStat))
        return;
    } catch (err) {
      err.message = err.message.replace("lstat", "ensureLink");
      throw err;
    }
    const dir = path.dirname(dstpath);
    const dirExists = fs.existsSync(dir);
    if (dirExists)
      return fs.linkSync(srcpath, dstpath);
    mkdir3.mkdirsSync(dir);
    return fs.linkSync(srcpath, dstpath);
  }
  module.exports = {
    createLink: u2(createLink),
    createLinkSync
  };
});

// node_modules/fs-extra/lib/ensure/symlink-paths.js
var require_symlink_paths = __commonJS((exports, module) => {
  var path = import.meta.require("path");
  var fs = require_graceful_fs();
  var pathExists = require_path_exists().pathExists;
  function symlinkPaths(srcpath, dstpath, callback) {
    if (path.isAbsolute(srcpath)) {
      return fs.lstat(srcpath, (err) => {
        if (err) {
          err.message = err.message.replace("lstat", "ensureSymlink");
          return callback(err);
        }
        return callback(null, {
          toCwd: srcpath,
          toDst: srcpath
        });
      });
    } else {
      const dstdir = path.dirname(dstpath);
      const relativeToDst = path.join(dstdir, srcpath);
      return pathExists(relativeToDst, (err, exists) => {
        if (err)
          return callback(err);
        if (exists) {
          return callback(null, {
            toCwd: relativeToDst,
            toDst: srcpath
          });
        } else {
          return fs.lstat(srcpath, (err2) => {
            if (err2) {
              err2.message = err2.message.replace("lstat", "ensureSymlink");
              return callback(err2);
            }
            return callback(null, {
              toCwd: srcpath,
              toDst: path.relative(dstdir, srcpath)
            });
          });
        }
      });
    }
  }
  function symlinkPathsSync(srcpath, dstpath) {
    let exists;
    if (path.isAbsolute(srcpath)) {
      exists = fs.existsSync(srcpath);
      if (!exists)
        throw new Error("absolute srcpath does not exist");
      return {
        toCwd: srcpath,
        toDst: srcpath
      };
    } else {
      const dstdir = path.dirname(dstpath);
      const relativeToDst = path.join(dstdir, srcpath);
      exists = fs.existsSync(relativeToDst);
      if (exists) {
        return {
          toCwd: relativeToDst,
          toDst: srcpath
        };
      } else {
        exists = fs.existsSync(srcpath);
        if (!exists)
          throw new Error("relative srcpath does not exist");
        return {
          toCwd: srcpath,
          toDst: path.relative(dstdir, srcpath)
        };
      }
    }
  }
  module.exports = {
    symlinkPaths,
    symlinkPathsSync
  };
});

// node_modules/fs-extra/lib/ensure/symlink-type.js
var require_symlink_type = __commonJS((exports, module) => {
  var fs = require_graceful_fs();
  function symlinkType(srcpath, type2, callback) {
    callback = typeof type2 === "function" ? type2 : callback;
    type2 = typeof type2 === "function" ? false : type2;
    if (type2)
      return callback(null, type2);
    fs.lstat(srcpath, (err, stats) => {
      if (err)
        return callback(null, "file");
      type2 = stats && stats.isDirectory() ? "dir" : "file";
      callback(null, type2);
    });
  }
  function symlinkTypeSync(srcpath, type2) {
    let stats;
    if (type2)
      return type2;
    try {
      stats = fs.lstatSync(srcpath);
    } catch {
      return "file";
    }
    return stats && stats.isDirectory() ? "dir" : "file";
  }
  module.exports = {
    symlinkType,
    symlinkTypeSync
  };
});

// node_modules/fs-extra/lib/ensure/symlink.js
var require_symlink = __commonJS((exports, module) => {
  var u2 = require_universalify().fromCallback;
  var path = import.meta.require("path");
  var fs = require_fs();
  var _mkdirs = require_mkdirs();
  var mkdirs = _mkdirs.mkdirs;
  var mkdirsSync = _mkdirs.mkdirsSync;
  var _symlinkPaths = require_symlink_paths();
  var symlinkPaths = _symlinkPaths.symlinkPaths;
  var symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
  var _symlinkType = require_symlink_type();
  var symlinkType = _symlinkType.symlinkType;
  var symlinkTypeSync = _symlinkType.symlinkTypeSync;
  var pathExists = require_path_exists().pathExists;
  var { areIdentical } = require_stat();
  function createSymlink(srcpath, dstpath, type2, callback) {
    callback = typeof type2 === "function" ? type2 : callback;
    type2 = typeof type2 === "function" ? false : type2;
    fs.lstat(dstpath, (err, stats) => {
      if (!err && stats.isSymbolicLink()) {
        Promise.all([
          fs.stat(srcpath),
          fs.stat(dstpath)
        ]).then(([srcStat, dstStat]) => {
          if (areIdentical(srcStat, dstStat))
            return callback(null);
          _createSymlink(srcpath, dstpath, type2, callback);
        });
      } else
        _createSymlink(srcpath, dstpath, type2, callback);
    });
  }
  function _createSymlink(srcpath, dstpath, type2, callback) {
    symlinkPaths(srcpath, dstpath, (err, relative) => {
      if (err)
        return callback(err);
      srcpath = relative.toDst;
      symlinkType(relative.toCwd, type2, (err2, type3) => {
        if (err2)
          return callback(err2);
        const dir = path.dirname(dstpath);
        pathExists(dir, (err3, dirExists) => {
          if (err3)
            return callback(err3);
          if (dirExists)
            return fs.symlink(srcpath, dstpath, type3, callback);
          mkdirs(dir, (err4) => {
            if (err4)
              return callback(err4);
            fs.symlink(srcpath, dstpath, type3, callback);
          });
        });
      });
    });
  }
  function createSymlinkSync(srcpath, dstpath, type2) {
    let stats;
    try {
      stats = fs.lstatSync(dstpath);
    } catch {
    }
    if (stats && stats.isSymbolicLink()) {
      const srcStat = fs.statSync(srcpath);
      const dstStat = fs.statSync(dstpath);
      if (areIdentical(srcStat, dstStat))
        return;
    }
    const relative = symlinkPathsSync(srcpath, dstpath);
    srcpath = relative.toDst;
    type2 = symlinkTypeSync(relative.toCwd, type2);
    const dir = path.dirname(dstpath);
    const exists = fs.existsSync(dir);
    if (exists)
      return fs.symlinkSync(srcpath, dstpath, type2);
    mkdirsSync(dir);
    return fs.symlinkSync(srcpath, dstpath, type2);
  }
  module.exports = {
    createSymlink: u2(createSymlink),
    createSymlinkSync
  };
});

// node_modules/fs-extra/lib/ensure/index.js
var require_ensure = __commonJS((exports, module) => {
  var { createFile, createFileSync } = require_file();
  var { createLink, createLinkSync } = require_link();
  var { createSymlink, createSymlinkSync } = require_symlink();
  module.exports = {
    createFile,
    createFileSync,
    ensureFile: createFile,
    ensureFileSync: createFileSync,
    createLink,
    createLinkSync,
    ensureLink: createLink,
    ensureLinkSync: createLinkSync,
    createSymlink,
    createSymlinkSync,
    ensureSymlink: createSymlink,
    ensureSymlinkSync: createSymlinkSync
  };
});

// node_modules/jsonfile/utils.js
var require_utils2 = __commonJS((exports, module) => {
  function stringify(obj, { EOL = `
`, finalEOL = true, replacer = null, spaces } = {}) {
    const EOF = finalEOL ? EOL : "";
    const str2 = JSON.stringify(obj, replacer, spaces);
    return str2.replace(/\n/g, EOL) + EOF;
  }
  function stripBom(content) {
    if (Buffer.isBuffer(content))
      content = content.toString("utf8");
    return content.replace(/^\uFEFF/, "");
  }
  module.exports = { stringify, stripBom };
});

// node_modules/jsonfile/index.js
var require_jsonfile = __commonJS((exports, module) => {
  var _fs;
  try {
    _fs = require_graceful_fs();
  } catch (_3) {
    _fs = import.meta.require("fs");
  }
  var universalify = require_universalify();
  var { stringify, stripBom } = require_utils2();
  async function _readFile(file, options = {}) {
    if (typeof options === "string") {
      options = { encoding: options };
    }
    const fs = options.fs || _fs;
    const shouldThrow = "throws" in options ? options.throws : true;
    let data = await universalify.fromCallback(fs.readFile)(file, options);
    data = stripBom(data);
    let obj;
    try {
      obj = JSON.parse(data, options ? options.reviver : null);
    } catch (err) {
      if (shouldThrow) {
        err.message = `${file}: ${err.message}`;
        throw err;
      } else {
        return null;
      }
    }
    return obj;
  }
  var readFile3 = universalify.fromPromise(_readFile);
  function readFileSync2(file, options = {}) {
    if (typeof options === "string") {
      options = { encoding: options };
    }
    const fs = options.fs || _fs;
    const shouldThrow = "throws" in options ? options.throws : true;
    try {
      let content = fs.readFileSync(file, options);
      content = stripBom(content);
      return JSON.parse(content, options.reviver);
    } catch (err) {
      if (shouldThrow) {
        err.message = `${file}: ${err.message}`;
        throw err;
      } else {
        return null;
      }
    }
  }
  async function _writeFile(file, obj, options = {}) {
    const fs = options.fs || _fs;
    const str2 = stringify(obj, options);
    await universalify.fromCallback(fs.writeFile)(file, str2, options);
  }
  var writeFile2 = universalify.fromPromise(_writeFile);
  function writeFileSync(file, obj, options = {}) {
    const fs = options.fs || _fs;
    const str2 = stringify(obj, options);
    return fs.writeFileSync(file, str2, options);
  }
  var jsonfile = {
    readFile: readFile3,
    readFileSync: readFileSync2,
    writeFile: writeFile2,
    writeFileSync
  };
  module.exports = jsonfile;
});

// node_modules/fs-extra/lib/json/jsonfile.js
var require_jsonfile2 = __commonJS((exports, module) => {
  var jsonFile = require_jsonfile();
  module.exports = {
    readJson: jsonFile.readFile,
    readJsonSync: jsonFile.readFileSync,
    writeJson: jsonFile.writeFile,
    writeJsonSync: jsonFile.writeFileSync
  };
});

// node_modules/fs-extra/lib/output-file/index.js
var require_output_file = __commonJS((exports, module) => {
  var u2 = require_universalify().fromCallback;
  var fs = require_graceful_fs();
  var path = import.meta.require("path");
  var mkdir3 = require_mkdirs();
  var pathExists = require_path_exists().pathExists;
  function outputFile(file, data, encoding, callback) {
    if (typeof encoding === "function") {
      callback = encoding;
      encoding = "utf8";
    }
    const dir = path.dirname(file);
    pathExists(dir, (err, itDoes) => {
      if (err)
        return callback(err);
      if (itDoes)
        return fs.writeFile(file, data, encoding, callback);
      mkdir3.mkdirs(dir, (err2) => {
        if (err2)
          return callback(err2);
        fs.writeFile(file, data, encoding, callback);
      });
    });
  }
  function outputFileSync(file, ...args) {
    const dir = path.dirname(file);
    if (fs.existsSync(dir)) {
      return fs.writeFileSync(file, ...args);
    }
    mkdir3.mkdirsSync(dir);
    fs.writeFileSync(file, ...args);
  }
  module.exports = {
    outputFile: u2(outputFile),
    outputFileSync
  };
});

// node_modules/fs-extra/lib/json/output-json.js
var require_output_json = __commonJS((exports, module) => {
  var { stringify } = require_utils2();
  var { outputFile } = require_output_file();
  async function outputJson(file, data, options = {}) {
    const str2 = stringify(data, options);
    await outputFile(file, str2, options);
  }
  module.exports = outputJson;
});

// node_modules/fs-extra/lib/json/output-json-sync.js
var require_output_json_sync = __commonJS((exports, module) => {
  var { stringify } = require_utils2();
  var { outputFileSync } = require_output_file();
  function outputJsonSync(file, data, options) {
    const str2 = stringify(data, options);
    outputFileSync(file, str2, options);
  }
  module.exports = outputJsonSync;
});

// node_modules/fs-extra/lib/json/index.js
var require_json = __commonJS((exports, module) => {
  var u2 = require_universalify().fromPromise;
  var jsonFile = require_jsonfile2();
  jsonFile.outputJson = u2(require_output_json());
  jsonFile.outputJsonSync = require_output_json_sync();
  jsonFile.outputJSON = jsonFile.outputJson;
  jsonFile.outputJSONSync = jsonFile.outputJsonSync;
  jsonFile.writeJSON = jsonFile.writeJson;
  jsonFile.writeJSONSync = jsonFile.writeJsonSync;
  jsonFile.readJSON = jsonFile.readJson;
  jsonFile.readJSONSync = jsonFile.readJsonSync;
  module.exports = jsonFile;
});

// node_modules/fs-extra/lib/move/move.js
var require_move = __commonJS((exports, module) => {
  var fs = require_graceful_fs();
  var path = import.meta.require("path");
  var copy = require_copy2().copy;
  var remove = require_remove().remove;
  var mkdirp2 = require_mkdirs().mkdirp;
  var pathExists = require_path_exists().pathExists;
  var stat2 = require_stat();
  function move(src, dest, opts, cb) {
    if (typeof opts === "function") {
      cb = opts;
      opts = {};
    }
    opts = opts || {};
    const overwrite = opts.overwrite || opts.clobber || false;
    stat2.checkPaths(src, dest, "move", opts, (err, stats) => {
      if (err)
        return cb(err);
      const { srcStat, isChangingCase = false } = stats;
      stat2.checkParentPaths(src, srcStat, dest, "move", (err2) => {
        if (err2)
          return cb(err2);
        if (isParentRoot(dest))
          return doRename(src, dest, overwrite, isChangingCase, cb);
        mkdirp2(path.dirname(dest), (err3) => {
          if (err3)
            return cb(err3);
          return doRename(src, dest, overwrite, isChangingCase, cb);
        });
      });
    });
  }
  function isParentRoot(dest) {
    const parent = path.dirname(dest);
    const parsedPath = path.parse(parent);
    return parsedPath.root === parent;
  }
  function doRename(src, dest, overwrite, isChangingCase, cb) {
    if (isChangingCase)
      return rename(src, dest, overwrite, cb);
    if (overwrite) {
      return remove(dest, (err) => {
        if (err)
          return cb(err);
        return rename(src, dest, overwrite, cb);
      });
    }
    pathExists(dest, (err, destExists) => {
      if (err)
        return cb(err);
      if (destExists)
        return cb(new Error("dest already exists."));
      return rename(src, dest, overwrite, cb);
    });
  }
  function rename(src, dest, overwrite, cb) {
    fs.rename(src, dest, (err) => {
      if (!err)
        return cb();
      if (err.code !== "EXDEV")
        return cb(err);
      return moveAcrossDevice(src, dest, overwrite, cb);
    });
  }
  function moveAcrossDevice(src, dest, overwrite, cb) {
    const opts = {
      overwrite,
      errorOnExist: true,
      preserveTimestamps: true
    };
    copy(src, dest, opts, (err) => {
      if (err)
        return cb(err);
      return remove(src, cb);
    });
  }
  module.exports = move;
});

// node_modules/fs-extra/lib/move/move-sync.js
var require_move_sync = __commonJS((exports, module) => {
  var fs = require_graceful_fs();
  var path = import.meta.require("path");
  var copySync = require_copy2().copySync;
  var removeSync = require_remove().removeSync;
  var mkdirpSync2 = require_mkdirs().mkdirpSync;
  var stat2 = require_stat();
  function moveSync(src, dest, opts) {
    opts = opts || {};
    const overwrite = opts.overwrite || opts.clobber || false;
    const { srcStat, isChangingCase = false } = stat2.checkPathsSync(src, dest, "move", opts);
    stat2.checkParentPathsSync(src, srcStat, dest, "move");
    if (!isParentRoot(dest))
      mkdirpSync2(path.dirname(dest));
    return doRename(src, dest, overwrite, isChangingCase);
  }
  function isParentRoot(dest) {
    const parent = path.dirname(dest);
    const parsedPath = path.parse(parent);
    return parsedPath.root === parent;
  }
  function doRename(src, dest, overwrite, isChangingCase) {
    if (isChangingCase)
      return rename(src, dest, overwrite);
    if (overwrite) {
      removeSync(dest);
      return rename(src, dest, overwrite);
    }
    if (fs.existsSync(dest))
      throw new Error("dest already exists.");
    return rename(src, dest, overwrite);
  }
  function rename(src, dest, overwrite) {
    try {
      fs.renameSync(src, dest);
    } catch (err) {
      if (err.code !== "EXDEV")
        throw err;
      return moveAcrossDevice(src, dest, overwrite);
    }
  }
  function moveAcrossDevice(src, dest, overwrite) {
    const opts = {
      overwrite,
      errorOnExist: true,
      preserveTimestamps: true
    };
    copySync(src, dest, opts);
    return removeSync(src);
  }
  module.exports = moveSync;
});

// node_modules/fs-extra/lib/move/index.js
var require_move2 = __commonJS((exports, module) => {
  var u2 = require_universalify().fromCallback;
  module.exports = {
    move: u2(require_move()),
    moveSync: require_move_sync()
  };
});

// node_modules/braces/lib/utils.js
var require_utils3 = __commonJS((exports) => {
  exports.isInteger = (num) => {
    if (typeof num === "number") {
      return Number.isInteger(num);
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isInteger(Number(num));
    }
    return false;
  };
  exports.find = (node, type2) => node.nodes.find((node2) => node2.type === type2);
  exports.exceedsLimit = (min, max, step = 1, limit) => {
    if (limit === false)
      return false;
    if (!exports.isInteger(min) || !exports.isInteger(max))
      return false;
    return (Number(max) - Number(min)) / Number(step) >= limit;
  };
  exports.escapeNode = (block, n = 0, type2) => {
    let node = block.nodes[n];
    if (!node)
      return;
    if (type2 && node.type === type2 || node.type === "open" || node.type === "close") {
      if (node.escaped !== true) {
        node.value = "\\" + node.value;
        node.escaped = true;
      }
    }
  };
  exports.encloseBrace = (node) => {
    if (node.type !== "brace")
      return false;
    if (node.commas >> 0 + node.ranges >> 0 === 0) {
      node.invalid = true;
      return true;
    }
    return false;
  };
  exports.isInvalidBrace = (block) => {
    if (block.type !== "brace")
      return false;
    if (block.invalid === true || block.dollar)
      return true;
    if (block.commas >> 0 + block.ranges >> 0 === 0) {
      block.invalid = true;
      return true;
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true;
      return true;
    }
    return false;
  };
  exports.isOpenOrClose = (node) => {
    if (node.type === "open" || node.type === "close") {
      return true;
    }
    return node.open === true || node.close === true;
  };
  exports.reduce = (nodes) => nodes.reduce((acc, node) => {
    if (node.type === "text")
      acc.push(node.value);
    if (node.type === "range")
      node.type = "text";
    return acc;
  }, []);
  exports.flatten = (...args) => {
    const result = [];
    const flat = (arr) => {
      for (let i = 0;i < arr.length; i++) {
        let ele = arr[i];
        Array.isArray(ele) ? flat(ele, result) : ele !== undefined && result.push(ele);
      }
      return result;
    };
    flat(args);
    return result;
  };
});

// node_modules/braces/lib/stringify.js
var require_stringify = __commonJS((exports, module) => {
  var utils = require_utils3();
  module.exports = (ast, options = {}) => {
    let stringify = (node, parent = {}) => {
      let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
      let invalidNode = node.invalid === true && options.escapeInvalid === true;
      let output = "";
      if (node.value) {
        if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
          return "\\" + node.value;
        }
        return node.value;
      }
      if (node.value) {
        return node.value;
      }
      if (node.nodes) {
        for (let child of node.nodes) {
          output += stringify(child);
        }
      }
      return output;
    };
    return stringify(ast);
  };
});

// node_modules/is-number/index.js
var require_is_number = __commonJS((exports, module) => {
  /*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   */
  module.exports = function(num) {
    if (typeof num === "number") {
      return num - num === 0;
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
    }
    return false;
  };
});

// node_modules/to-regex-range/index.js
var require_to_regex_range = __commonJS((exports, module) => {
  /*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   */
  var isNumber = require_is_number();
  var toRegexRange = (min, max, options) => {
    if (isNumber(min) === false) {
      throw new TypeError("toRegexRange: expected the first argument to be a number");
    }
    if (max === undefined || min === max) {
      return String(min);
    }
    if (isNumber(max) === false) {
      throw new TypeError("toRegexRange: expected the second argument to be a number.");
    }
    let opts = { relaxZeros: true, ...options };
    if (typeof opts.strictZeros === "boolean") {
      opts.relaxZeros = opts.strictZeros === false;
    }
    let relax = String(opts.relaxZeros);
    let shorthand = String(opts.shorthand);
    let capture = String(opts.capture);
    let wrap = String(opts.wrap);
    let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
    if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
      return toRegexRange.cache[cacheKey].result;
    }
    let a = Math.min(min, max);
    let b3 = Math.max(min, max);
    if (Math.abs(a - b3) === 1) {
      let result = min + "|" + max;
      if (opts.capture) {
        return `(${result})`;
      }
      if (opts.wrap === false) {
        return result;
      }
      return `(?:${result})`;
    }
    let isPadded = hasPadding(min) || hasPadding(max);
    let state = { min, max, a, b: b3 };
    let positives = [];
    let negatives = [];
    if (isPadded) {
      state.isPadded = isPadded;
      state.maxLen = String(state.max).length;
    }
    if (a < 0) {
      let newMin = b3 < 0 ? Math.abs(b3) : 1;
      negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
      a = state.a = 0;
    }
    if (b3 >= 0) {
      positives = splitToPatterns(a, b3, state, opts);
    }
    state.negatives = negatives;
    state.positives = positives;
    state.result = collatePatterns(negatives, positives, opts);
    if (opts.capture === true) {
      state.result = `(${state.result})`;
    } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
      state.result = `(?:${state.result})`;
    }
    toRegexRange.cache[cacheKey] = state;
    return state.result;
  };
  function collatePatterns(neg, pos, options) {
    let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
    let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
    let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
    let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
    return subpatterns.join("|");
  }
  function splitToRanges(min, max) {
    let nines = 1;
    let zeros = 1;
    let stop = countNines(min, nines);
    let stops = new Set([max]);
    while (min <= stop && stop <= max) {
      stops.add(stop);
      nines += 1;
      stop = countNines(min, nines);
    }
    stop = countZeros(max + 1, zeros) - 1;
    while (min < stop && stop <= max) {
      stops.add(stop);
      zeros += 1;
      stop = countZeros(max + 1, zeros) - 1;
    }
    stops = [...stops];
    stops.sort(compare);
    return stops;
  }
  function rangeToPattern(start, stop, options) {
    if (start === stop) {
      return { pattern: start, count: [], digits: 0 };
    }
    let zipped = zip(start, stop);
    let digits = zipped.length;
    let pattern = "";
    let count = 0;
    for (let i = 0;i < digits; i++) {
      let [startDigit, stopDigit] = zipped[i];
      if (startDigit === stopDigit) {
        pattern += startDigit;
      } else if (startDigit !== "0" || stopDigit !== "9") {
        pattern += toCharacterClass(startDigit, stopDigit, options);
      } else {
        count++;
      }
    }
    if (count) {
      pattern += options.shorthand === true ? "\\d" : "[0-9]";
    }
    return { pattern, count: [count], digits };
  }
  function splitToPatterns(min, max, tok, options) {
    let ranges = splitToRanges(min, max);
    let tokens = [];
    let start = min;
    let prev;
    for (let i = 0;i < ranges.length; i++) {
      let max2 = ranges[i];
      let obj = rangeToPattern(String(start), String(max2), options);
      let zeros = "";
      if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
        if (prev.count.length > 1) {
          prev.count.pop();
        }
        prev.count.push(obj.count[0]);
        prev.string = prev.pattern + toQuantifier(prev.count);
        start = max2 + 1;
        continue;
      }
      if (tok.isPadded) {
        zeros = padZeros(max2, tok, options);
      }
      obj.string = zeros + obj.pattern + toQuantifier(obj.count);
      tokens.push(obj);
      start = max2 + 1;
      prev = obj;
    }
    return tokens;
  }
  function filterPatterns(arr, comparison, prefix, intersection, options) {
    let result = [];
    for (let ele of arr) {
      let { string } = ele;
      if (!intersection && !contains(comparison, "string", string)) {
        result.push(prefix + string);
      }
      if (intersection && contains(comparison, "string", string)) {
        result.push(prefix + string);
      }
    }
    return result;
  }
  function zip(a, b3) {
    let arr = [];
    for (let i = 0;i < a.length; i++)
      arr.push([a[i], b3[i]]);
    return arr;
  }
  function compare(a, b3) {
    return a > b3 ? 1 : b3 > a ? -1 : 0;
  }
  function contains(arr, key, val) {
    return arr.some((ele) => ele[key] === val);
  }
  function countNines(min, len) {
    return Number(String(min).slice(0, -len) + "9".repeat(len));
  }
  function countZeros(integer, zeros) {
    return integer - integer % Math.pow(10, zeros);
  }
  function toQuantifier(digits) {
    let [start = 0, stop = ""] = digits;
    if (stop || start > 1) {
      return `{${start + (stop ? "," + stop : "")}}`;
    }
    return "";
  }
  function toCharacterClass(a, b3, options) {
    return `[${a}${b3 - a === 1 ? "" : "-"}${b3}]`;
  }
  function hasPadding(str2) {
    return /^-?(0+)\d/.test(str2);
  }
  function padZeros(value, tok, options) {
    if (!tok.isPadded) {
      return value;
    }
    let diff = Math.abs(tok.maxLen - String(value).length);
    let relax = options.relaxZeros !== false;
    switch (diff) {
      case 0:
        return "";
      case 1:
        return relax ? "0?" : "0";
      case 2:
        return relax ? "0{0,2}" : "00";
      default: {
        return relax ? `0{0,${diff}}` : `0{${diff}}`;
      }
    }
  }
  toRegexRange.cache = {};
  toRegexRange.clearCache = () => toRegexRange.cache = {};
  module.exports = toRegexRange;
});

// node_modules/fill-range/index.js
var require_fill_range = __commonJS((exports, module) => {
  /*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   */
  var util = import.meta.require("util");
  var toRegexRange = require_to_regex_range();
  var isObject2 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  var transform = (toNumber) => {
    return (value) => toNumber === true ? Number(value) : String(value);
  };
  var isValidValue = (value) => {
    return typeof value === "number" || typeof value === "string" && value !== "";
  };
  var isNumber = (num) => Number.isInteger(+num);
  var zeros = (input) => {
    let value = `${input}`;
    let index = -1;
    if (value[0] === "-")
      value = value.slice(1);
    if (value === "0")
      return false;
    while (value[++index] === "0")
      ;
    return index > 0;
  };
  var stringify = (start, end, options) => {
    if (typeof start === "string" || typeof end === "string") {
      return true;
    }
    return options.stringify === true;
  };
  var pad = (input, maxLength, toNumber) => {
    if (maxLength > 0) {
      let dash = input[0] === "-" ? "-" : "";
      if (dash)
        input = input.slice(1);
      input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
    }
    if (toNumber === false) {
      return String(input);
    }
    return input;
  };
  var toMaxLen = (input, maxLength) => {
    let negative = input[0] === "-" ? "-" : "";
    if (negative) {
      input = input.slice(1);
      maxLength--;
    }
    while (input.length < maxLength)
      input = "0" + input;
    return negative ? "-" + input : input;
  };
  var toSequence = (parts, options) => {
    parts.negatives.sort((a, b3) => a < b3 ? -1 : a > b3 ? 1 : 0);
    parts.positives.sort((a, b3) => a < b3 ? -1 : a > b3 ? 1 : 0);
    let prefix = options.capture ? "" : "?:";
    let positives = "";
    let negatives = "";
    let result;
    if (parts.positives.length) {
      positives = parts.positives.join("|");
    }
    if (parts.negatives.length) {
      negatives = `-(${prefix}${parts.negatives.join("|")})`;
    }
    if (positives && negatives) {
      result = `${positives}|${negatives}`;
    } else {
      result = positives || negatives;
    }
    if (options.wrap) {
      return `(${prefix}${result})`;
    }
    return result;
  };
  var toRange = (a, b3, isNumbers, options) => {
    if (isNumbers) {
      return toRegexRange(a, b3, { wrap: false, ...options });
    }
    let start = String.fromCharCode(a);
    if (a === b3)
      return start;
    let stop = String.fromCharCode(b3);
    return `[${start}-${stop}]`;
  };
  var toRegex = (start, end, options) => {
    if (Array.isArray(start)) {
      let wrap = options.wrap === true;
      let prefix = options.capture ? "" : "?:";
      return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
    }
    return toRegexRange(start, end, options);
  };
  var rangeError = (...args) => {
    return new RangeError("Invalid range arguments: " + util.inspect(...args));
  };
  var invalidRange = (start, end, options) => {
    if (options.strictRanges === true)
      throw rangeError([start, end]);
    return [];
  };
  var invalidStep = (step, options) => {
    if (options.strictRanges === true) {
      throw new TypeError(`Expected step "${step}" to be a number`);
    }
    return [];
  };
  var fillNumbers = (start, end, step = 1, options = {}) => {
    let a = Number(start);
    let b3 = Number(end);
    if (!Number.isInteger(a) || !Number.isInteger(b3)) {
      if (options.strictRanges === true)
        throw rangeError([start, end]);
      return [];
    }
    if (a === 0)
      a = 0;
    if (b3 === 0)
      b3 = 0;
    let descending = a > b3;
    let startString = String(start);
    let endString = String(end);
    let stepString = String(step);
    step = Math.max(Math.abs(step), 1);
    let padded = zeros(startString) || zeros(endString) || zeros(stepString);
    let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
    let toNumber = padded === false && stringify(start, end, options) === false;
    let format = options.transform || transform(toNumber);
    if (options.toRegex && step === 1) {
      return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
    }
    let parts = { negatives: [], positives: [] };
    let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
    let range = [];
    let index = 0;
    while (descending ? a >= b3 : a <= b3) {
      if (options.toRegex === true && step > 1) {
        push(a);
      } else {
        range.push(pad(format(a, index), maxLen, toNumber));
      }
      a = descending ? a - step : a + step;
      index++;
    }
    if (options.toRegex === true) {
      return step > 1 ? toSequence(parts, options) : toRegex(range, null, { wrap: false, ...options });
    }
    return range;
  };
  var fillLetters = (start, end, step = 1, options = {}) => {
    if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
      return invalidRange(start, end, options);
    }
    let format = options.transform || ((val) => String.fromCharCode(val));
    let a = `${start}`.charCodeAt(0);
    let b3 = `${end}`.charCodeAt(0);
    let descending = a > b3;
    let min = Math.min(a, b3);
    let max = Math.max(a, b3);
    if (options.toRegex && step === 1) {
      return toRange(min, max, false, options);
    }
    let range = [];
    let index = 0;
    while (descending ? a >= b3 : a <= b3) {
      range.push(format(a, index));
      a = descending ? a - step : a + step;
      index++;
    }
    if (options.toRegex === true) {
      return toRegex(range, null, { wrap: false, options });
    }
    return range;
  };
  var fill = (start, end, step, options = {}) => {
    if (end == null && isValidValue(start)) {
      return [start];
    }
    if (!isValidValue(start) || !isValidValue(end)) {
      return invalidRange(start, end, options);
    }
    if (typeof step === "function") {
      return fill(start, end, 1, { transform: step });
    }
    if (isObject2(step)) {
      return fill(start, end, 0, step);
    }
    let opts = { ...options };
    if (opts.capture === true)
      opts.wrap = true;
    step = step || opts.step || 1;
    if (!isNumber(step)) {
      if (step != null && !isObject2(step))
        return invalidStep(step, opts);
      return fill(start, end, 1, step);
    }
    if (isNumber(start) && isNumber(end)) {
      return fillNumbers(start, end, step, opts);
    }
    return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
  };
  module.exports = fill;
});

// node_modules/braces/lib/compile.js
var require_compile = __commonJS((exports, module) => {
  var fill = require_fill_range();
  var utils = require_utils3();
  var compile = (ast, options = {}) => {
    let walk = (node, parent = {}) => {
      let invalidBlock = utils.isInvalidBrace(parent);
      let invalidNode = node.invalid === true && options.escapeInvalid === true;
      let invalid = invalidBlock === true || invalidNode === true;
      let prefix = options.escapeInvalid === true ? "\\" : "";
      let output = "";
      if (node.isOpen === true) {
        return prefix + node.value;
      }
      if (node.isClose === true) {
        return prefix + node.value;
      }
      if (node.type === "open") {
        return invalid ? prefix + node.value : "(";
      }
      if (node.type === "close") {
        return invalid ? prefix + node.value : ")";
      }
      if (node.type === "comma") {
        return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
      }
      if (node.value) {
        return node.value;
      }
      if (node.nodes && node.ranges > 0) {
        let args = utils.reduce(node.nodes);
        let range = fill(...args, { ...options, wrap: false, toRegex: true });
        if (range.length !== 0) {
          return args.length > 1 && range.length > 1 ? `(${range})` : range;
        }
      }
      if (node.nodes) {
        for (let child of node.nodes) {
          output += walk(child, node);
        }
      }
      return output;
    };
    return walk(ast);
  };
  module.exports = compile;
});

// node_modules/braces/lib/expand.js
var require_expand = __commonJS((exports, module) => {
  var fill = require_fill_range();
  var stringify = require_stringify();
  var utils = require_utils3();
  var append = (queue = "", stash = "", enclose = false) => {
    let result = [];
    queue = [].concat(queue);
    stash = [].concat(stash);
    if (!stash.length)
      return queue;
    if (!queue.length) {
      return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
    }
    for (let item of queue) {
      if (Array.isArray(item)) {
        for (let value of item) {
          result.push(append(value, stash, enclose));
        }
      } else {
        for (let ele of stash) {
          if (enclose === true && typeof ele === "string")
            ele = `{${ele}}`;
          result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
        }
      }
    }
    return utils.flatten(result);
  };
  var expand = (ast, options = {}) => {
    let rangeLimit = options.rangeLimit === undefined ? 1000 : options.rangeLimit;
    let walk = (node, parent = {}) => {
      node.queue = [];
      let p2 = parent;
      let q2 = parent.queue;
      while (p2.type !== "brace" && p2.type !== "root" && p2.parent) {
        p2 = p2.parent;
        q2 = p2.queue;
      }
      if (node.invalid || node.dollar) {
        q2.push(append(q2.pop(), stringify(node, options)));
        return;
      }
      if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
        q2.push(append(q2.pop(), ["{}"]));
        return;
      }
      if (node.nodes && node.ranges > 0) {
        let args = utils.reduce(node.nodes);
        if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
          throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
        }
        let range = fill(...args, options);
        if (range.length === 0) {
          range = stringify(node, options);
        }
        q2.push(append(q2.pop(), range));
        node.nodes = [];
        return;
      }
      let enclose = utils.encloseBrace(node);
      let queue = node.queue;
      let block = node;
      while (block.type !== "brace" && block.type !== "root" && block.parent) {
        block = block.parent;
        queue = block.queue;
      }
      for (let i = 0;i < node.nodes.length; i++) {
        let child = node.nodes[i];
        if (child.type === "comma" && node.type === "brace") {
          if (i === 1)
            queue.push("");
          queue.push("");
          continue;
        }
        if (child.type === "close") {
          q2.push(append(q2.pop(), queue, enclose));
          continue;
        }
        if (child.value && child.type !== "open") {
          queue.push(append(queue.pop(), child.value));
          continue;
        }
        if (child.nodes) {
          walk(child, node);
        }
      }
      return queue;
    };
    return utils.flatten(walk(ast));
  };
  module.exports = expand;
});

// node_modules/braces/lib/constants.js
var require_constants = __commonJS((exports, module) => {
  module.exports = {
    MAX_LENGTH: 1024 * 64,
    CHAR_0: "0",
    CHAR_9: "9",
    CHAR_UPPERCASE_A: "A",
    CHAR_LOWERCASE_A: "a",
    CHAR_UPPERCASE_Z: "Z",
    CHAR_LOWERCASE_Z: "z",
    CHAR_LEFT_PARENTHESES: "(",
    CHAR_RIGHT_PARENTHESES: ")",
    CHAR_ASTERISK: "*",
    CHAR_AMPERSAND: "&",
    CHAR_AT: "@",
    CHAR_BACKSLASH: "\\",
    CHAR_BACKTICK: "`",
    CHAR_CARRIAGE_RETURN: "\r",
    CHAR_CIRCUMFLEX_ACCENT: "^",
    CHAR_COLON: ":",
    CHAR_COMMA: ",",
    CHAR_DOLLAR: "$",
    CHAR_DOT: ".",
    CHAR_DOUBLE_QUOTE: '"',
    CHAR_EQUAL: "=",
    CHAR_EXCLAMATION_MARK: "!",
    CHAR_FORM_FEED: "\f",
    CHAR_FORWARD_SLASH: "/",
    CHAR_HASH: "#",
    CHAR_HYPHEN_MINUS: "-",
    CHAR_LEFT_ANGLE_BRACKET: "<",
    CHAR_LEFT_CURLY_BRACE: "{",
    CHAR_LEFT_SQUARE_BRACKET: "[",
    CHAR_LINE_FEED: `
`,
    CHAR_NO_BREAK_SPACE: "\xA0",
    CHAR_PERCENT: "%",
    CHAR_PLUS: "+",
    CHAR_QUESTION_MARK: "?",
    CHAR_RIGHT_ANGLE_BRACKET: ">",
    CHAR_RIGHT_CURLY_BRACE: "}",
    CHAR_RIGHT_SQUARE_BRACKET: "]",
    CHAR_SEMICOLON: ";",
    CHAR_SINGLE_QUOTE: "'",
    CHAR_SPACE: " ",
    CHAR_TAB: "\t",
    CHAR_UNDERSCORE: "_",
    CHAR_VERTICAL_LINE: "|",
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
  };
});

// node_modules/braces/lib/parse.js
var require_parse = __commonJS((exports, module) => {
  var stringify = require_stringify();
  var {
    MAX_LENGTH,
    CHAR_BACKSLASH,
    CHAR_BACKTICK,
    CHAR_COMMA: CHAR_COMMA2,
    CHAR_DOT,
    CHAR_LEFT_PARENTHESES,
    CHAR_RIGHT_PARENTHESES,
    CHAR_LEFT_CURLY_BRACE,
    CHAR_RIGHT_CURLY_BRACE,
    CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET2,
    CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET2,
    CHAR_DOUBLE_QUOTE: CHAR_DOUBLE_QUOTE2,
    CHAR_SINGLE_QUOTE: CHAR_SINGLE_QUOTE2,
    CHAR_NO_BREAK_SPACE,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE
  } = require_constants();
  var parse2 = (input, options = {}) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected a string");
    }
    let opts = options || {};
    let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    if (input.length > max) {
      throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
    }
    let ast = { type: "root", input, nodes: [] };
    let stack = [ast];
    let block = ast;
    let prev = ast;
    let brackets = 0;
    let length = input.length;
    let index = 0;
    let depth = 0;
    let value;
    let memo = {};
    const advance = () => input[index++];
    const push = (node) => {
      if (node.type === "text" && prev.type === "dot") {
        prev.type = "text";
      }
      if (prev && prev.type === "text" && node.type === "text") {
        prev.value += node.value;
        return;
      }
      block.nodes.push(node);
      node.parent = block;
      node.prev = prev;
      prev = node;
      return node;
    };
    push({ type: "bos" });
    while (index < length) {
      block = stack[stack.length - 1];
      value = advance();
      if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
        continue;
      }
      if (value === CHAR_BACKSLASH) {
        push({ type: "text", value: (options.keepEscaping ? value : "") + advance() });
        continue;
      }
      if (value === CHAR_RIGHT_SQUARE_BRACKET2) {
        push({ type: "text", value: "\\" + value });
        continue;
      }
      if (value === CHAR_LEFT_SQUARE_BRACKET2) {
        brackets++;
        let closed = true;
        let next;
        while (index < length && (next = advance())) {
          value += next;
          if (next === CHAR_LEFT_SQUARE_BRACKET2) {
            brackets++;
            continue;
          }
          if (next === CHAR_BACKSLASH) {
            value += advance();
            continue;
          }
          if (next === CHAR_RIGHT_SQUARE_BRACKET2) {
            brackets--;
            if (brackets === 0) {
              break;
            }
          }
        }
        push({ type: "text", value });
        continue;
      }
      if (value === CHAR_LEFT_PARENTHESES) {
        block = push({ type: "paren", nodes: [] });
        stack.push(block);
        push({ type: "text", value });
        continue;
      }
      if (value === CHAR_RIGHT_PARENTHESES) {
        if (block.type !== "paren") {
          push({ type: "text", value });
          continue;
        }
        block = stack.pop();
        push({ type: "text", value });
        block = stack[stack.length - 1];
        continue;
      }
      if (value === CHAR_DOUBLE_QUOTE2 || value === CHAR_SINGLE_QUOTE2 || value === CHAR_BACKTICK) {
        let open = value;
        let next;
        if (options.keepQuotes !== true) {
          value = "";
        }
        while (index < length && (next = advance())) {
          if (next === CHAR_BACKSLASH) {
            value += next + advance();
            continue;
          }
          if (next === open) {
            if (options.keepQuotes === true)
              value += next;
            break;
          }
          value += next;
        }
        push({ type: "text", value });
        continue;
      }
      if (value === CHAR_LEFT_CURLY_BRACE) {
        depth++;
        let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
        let brace = {
          type: "brace",
          open: true,
          close: false,
          dollar,
          depth,
          commas: 0,
          ranges: 0,
          nodes: []
        };
        block = push(brace);
        stack.push(block);
        push({ type: "open", value });
        continue;
      }
      if (value === CHAR_RIGHT_CURLY_BRACE) {
        if (block.type !== "brace") {
          push({ type: "text", value });
          continue;
        }
        let type2 = "close";
        block = stack.pop();
        block.close = true;
        push({ type: type2, value });
        depth--;
        block = stack[stack.length - 1];
        continue;
      }
      if (value === CHAR_COMMA2 && depth > 0) {
        if (block.ranges > 0) {
          block.ranges = 0;
          let open = block.nodes.shift();
          block.nodes = [open, { type: "text", value: stringify(block) }];
        }
        push({ type: "comma", value });
        block.commas++;
        continue;
      }
      if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
        let siblings = block.nodes;
        if (depth === 0 || siblings.length === 0) {
          push({ type: "text", value });
          continue;
        }
        if (prev.type === "dot") {
          block.range = [];
          prev.value += value;
          prev.type = "range";
          if (block.nodes.length !== 3 && block.nodes.length !== 5) {
            block.invalid = true;
            block.ranges = 0;
            prev.type = "text";
            continue;
          }
          block.ranges++;
          block.args = [];
          continue;
        }
        if (prev.type === "range") {
          siblings.pop();
          let before = siblings[siblings.length - 1];
          before.value += prev.value + value;
          prev = before;
          block.ranges--;
          continue;
        }
        push({ type: "dot", value });
        continue;
      }
      push({ type: "text", value });
    }
    do {
      block = stack.pop();
      if (block.type !== "root") {
        block.nodes.forEach((node) => {
          if (!node.nodes) {
            if (node.type === "open")
              node.isOpen = true;
            if (node.type === "close")
              node.isClose = true;
            if (!node.nodes)
              node.type = "text";
            node.invalid = true;
          }
        });
        let parent = stack[stack.length - 1];
        let index2 = parent.nodes.indexOf(block);
        parent.nodes.splice(index2, 1, ...block.nodes);
      }
    } while (stack.length > 0);
    push({ type: "eos" });
    return ast;
  };
  module.exports = parse2;
});

// node_modules/braces/index.js
var require_braces = __commonJS((exports, module) => {
  var stringify = require_stringify();
  var compile = require_compile();
  var expand = require_expand();
  var parse2 = require_parse();
  var braces = (input, options = {}) => {
    let output = [];
    if (Array.isArray(input)) {
      for (let pattern of input) {
        let result = braces.create(pattern, options);
        if (Array.isArray(result)) {
          output.push(...result);
        } else {
          output.push(result);
        }
      }
    } else {
      output = [].concat(braces.create(input, options));
    }
    if (options && options.expand === true && options.nodupes === true) {
      output = [...new Set(output)];
    }
    return output;
  };
  braces.parse = (input, options = {}) => parse2(input, options);
  braces.stringify = (input, options = {}) => {
    if (typeof input === "string") {
      return stringify(braces.parse(input, options), options);
    }
    return stringify(input, options);
  };
  braces.compile = (input, options = {}) => {
    if (typeof input === "string") {
      input = braces.parse(input, options);
    }
    return compile(input, options);
  };
  braces.expand = (input, options = {}) => {
    if (typeof input === "string") {
      input = braces.parse(input, options);
    }
    let result = expand(input, options);
    if (options.noempty === true) {
      result = result.filter(Boolean);
    }
    if (options.nodupes === true) {
      result = [...new Set(result)];
    }
    return result;
  };
  braces.create = (input, options = {}) => {
    if (input === "" || input.length < 3) {
      return [input];
    }
    return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
  };
  module.exports = braces;
});

// node_modules/picomatch/lib/constants.js
var require_constants2 = __commonJS((exports, module) => {
  var path = import.meta.require("path");
  var WIN_SLASH = "\\\\/";
  var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
  var DOT_LITERAL = "\\.";
  var PLUS_LITERAL = "\\+";
  var QMARK_LITERAL = "\\?";
  var SLASH_LITERAL = "\\/";
  var ONE_CHAR = "(?=.)";
  var QMARK = "[^/]";
  var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
  var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
  var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
  var NO_DOT = `(?!${DOT_LITERAL})`;
  var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
  var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
  var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
  var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
  var STAR = `${QMARK}*?`;
  var POSIX_CHARS = {
    DOT_LITERAL,
    PLUS_LITERAL,
    QMARK_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    QMARK,
    END_ANCHOR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR
  };
  var WINDOWS_CHARS = {
    ...POSIX_CHARS,
    SLASH_LITERAL: `[${WIN_SLASH}]`,
    QMARK: WIN_NO_SLASH,
    STAR: `${WIN_NO_SLASH}*?`,
    DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
    NO_DOT: `(?!${DOT_LITERAL})`,
    NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
    NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
    START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
    END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
  };
  var POSIX_REGEX_SOURCE = {
    alnum: "a-zA-Z0-9",
    alpha: "a-zA-Z",
    ascii: "\\x00-\\x7F",
    blank: " \\t",
    cntrl: "\\x00-\\x1F\\x7F",
    digit: "0-9",
    graph: "\\x21-\\x7E",
    lower: "a-z",
    print: "\\x20-\\x7E ",
    punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
    space: " \\t\\r\\n\\v\\f",
    upper: "A-Z",
    word: "A-Za-z0-9_",
    xdigit: "A-Fa-f0-9"
  };
  module.exports = {
    MAX_LENGTH: 1024 * 64,
    POSIX_REGEX_SOURCE,
    REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
    REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
    REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
    REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
    REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
    REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
    REPLACEMENTS: {
      "***": "*",
      "**/**": "**",
      "**/**/**": "**"
    },
    CHAR_0: 48,
    CHAR_9: 57,
    CHAR_UPPERCASE_A: 65,
    CHAR_LOWERCASE_A: 97,
    CHAR_UPPERCASE_Z: 90,
    CHAR_LOWERCASE_Z: 122,
    CHAR_LEFT_PARENTHESES: 40,
    CHAR_RIGHT_PARENTHESES: 41,
    CHAR_ASTERISK: 42,
    CHAR_AMPERSAND: 38,
    CHAR_AT: 64,
    CHAR_BACKWARD_SLASH: 92,
    CHAR_CARRIAGE_RETURN: 13,
    CHAR_CIRCUMFLEX_ACCENT: 94,
    CHAR_COLON: 58,
    CHAR_COMMA: 44,
    CHAR_DOT: 46,
    CHAR_DOUBLE_QUOTE: 34,
    CHAR_EQUAL: 61,
    CHAR_EXCLAMATION_MARK: 33,
    CHAR_FORM_FEED: 12,
    CHAR_FORWARD_SLASH: 47,
    CHAR_GRAVE_ACCENT: 96,
    CHAR_HASH: 35,
    CHAR_HYPHEN_MINUS: 45,
    CHAR_LEFT_ANGLE_BRACKET: 60,
    CHAR_LEFT_CURLY_BRACE: 123,
    CHAR_LEFT_SQUARE_BRACKET: 91,
    CHAR_LINE_FEED: 10,
    CHAR_NO_BREAK_SPACE: 160,
    CHAR_PERCENT: 37,
    CHAR_PLUS: 43,
    CHAR_QUESTION_MARK: 63,
    CHAR_RIGHT_ANGLE_BRACKET: 62,
    CHAR_RIGHT_CURLY_BRACE: 125,
    CHAR_RIGHT_SQUARE_BRACKET: 93,
    CHAR_SEMICOLON: 59,
    CHAR_SINGLE_QUOTE: 39,
    CHAR_SPACE: 32,
    CHAR_TAB: 9,
    CHAR_UNDERSCORE: 95,
    CHAR_VERTICAL_LINE: 124,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
    SEP: path.sep,
    extglobChars(chars) {
      return {
        "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
        "?": { type: "qmark", open: "(?:", close: ")?" },
        "+": { type: "plus", open: "(?:", close: ")+" },
        "*": { type: "star", open: "(?:", close: ")*" },
        "@": { type: "at", open: "(?:", close: ")" }
      };
    },
    globChars(win32) {
      return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
    }
  };
});

// node_modules/picomatch/lib/utils.js
var require_utils4 = __commonJS((exports) => {
  var path = import.meta.require("path");
  var win32 = process.platform === "win32";
  var {
    REGEX_BACKSLASH,
    REGEX_REMOVE_BACKSLASH,
    REGEX_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_GLOBAL
  } = require_constants2();
  exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  exports.hasRegexChars = (str2) => REGEX_SPECIAL_CHARS.test(str2);
  exports.isRegexChar = (str2) => str2.length === 1 && exports.hasRegexChars(str2);
  exports.escapeRegex = (str2) => str2.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
  exports.toPosixSlashes = (str2) => str2.replace(REGEX_BACKSLASH, "/");
  exports.removeBackslashes = (str2) => {
    return str2.replace(REGEX_REMOVE_BACKSLASH, (match) => {
      return match === "\\" ? "" : match;
    });
  };
  exports.supportsLookbehinds = () => {
    const segs = process.version.slice(1).split(".").map(Number);
    if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
      return true;
    }
    return false;
  };
  exports.isWindows = (options) => {
    if (options && typeof options.windows === "boolean") {
      return options.windows;
    }
    return win32 === true || path.sep === "\\";
  };
  exports.escapeLast = (input, char, lastIdx) => {
    const idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1)
      return input;
    if (input[idx - 1] === "\\")
      return exports.escapeLast(input, char, idx - 1);
    return `${input.slice(0, idx)}\\${input.slice(idx)}`;
  };
  exports.removePrefix = (input, state = {}) => {
    let output = input;
    if (output.startsWith("./")) {
      output = output.slice(2);
      state.prefix = "./";
    }
    return output;
  };
  exports.wrapOutput = (input, state = {}, options = {}) => {
    const prepend = options.contains ? "" : "^";
    const append = options.contains ? "" : "$";
    let output = `${prepend}(?:${input})${append}`;
    if (state.negated === true) {
      output = `(?:^(?!${output}).*$)`;
    }
    return output;
  };
});

// node_modules/picomatch/lib/scan.js
var require_scan = __commonJS((exports, module) => {
  var utils = require_utils4();
  var {
    CHAR_ASTERISK: CHAR_ASTERISK2,
    CHAR_AT,
    CHAR_BACKWARD_SLASH,
    CHAR_COMMA: CHAR_COMMA2,
    CHAR_DOT,
    CHAR_EXCLAMATION_MARK,
    CHAR_FORWARD_SLASH,
    CHAR_LEFT_CURLY_BRACE,
    CHAR_LEFT_PARENTHESES,
    CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET2,
    CHAR_PLUS,
    CHAR_QUESTION_MARK,
    CHAR_RIGHT_CURLY_BRACE,
    CHAR_RIGHT_PARENTHESES,
    CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET2
  } = require_constants2();
  var isPathSeparator = (code) => {
    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
  };
  var depth = (token) => {
    if (token.isPrefix !== true) {
      token.depth = token.isGlobstar ? Infinity : 1;
    }
  };
  var scan = (input, options) => {
    const opts = options || {};
    const length = input.length - 1;
    const scanToEnd = opts.parts === true || opts.scanToEnd === true;
    const slashes = [];
    const tokens = [];
    const parts = [];
    let str2 = input;
    let index = -1;
    let start = 0;
    let lastIndex = 0;
    let isBrace = false;
    let isBracket = false;
    let isGlob = false;
    let isExtglob = false;
    let isGlobstar = false;
    let braceEscaped = false;
    let backslashes = false;
    let negated = false;
    let negatedExtglob = false;
    let finished = false;
    let braces = 0;
    let prev;
    let code;
    let token = { value: "", depth: 0, isGlob: false };
    const eos = () => index >= length;
    const peek = () => str2.charCodeAt(index + 1);
    const advance = () => {
      prev = code;
      return str2.charCodeAt(++index);
    };
    while (index < length) {
      code = advance();
      let next;
      if (code === CHAR_BACKWARD_SLASH) {
        backslashes = token.backslashes = true;
        code = advance();
        if (code === CHAR_LEFT_CURLY_BRACE) {
          braceEscaped = true;
        }
        continue;
      }
      if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
        braces++;
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            advance();
            continue;
          }
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braces++;
            continue;
          }
          if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
            isBrace = token.isBrace = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (braceEscaped !== true && code === CHAR_COMMA2) {
            isBrace = token.isBrace = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_RIGHT_CURLY_BRACE) {
            braces--;
            if (braces === 0) {
              braceEscaped = false;
              isBrace = token.isBrace = true;
              finished = true;
              break;
            }
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_FORWARD_SLASH) {
        slashes.push(index);
        tokens.push(token);
        token = { value: "", depth: 0, isGlob: false };
        if (finished === true)
          continue;
        if (prev === CHAR_DOT && index === start + 1) {
          start += 2;
          continue;
        }
        lastIndex = index + 1;
        continue;
      }
      if (opts.noext !== true) {
        const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK2 || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
        if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          isExtglob = token.isExtglob = true;
          finished = true;
          if (code === CHAR_EXCLAMATION_MARK && index === start) {
            negatedExtglob = true;
          }
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                isGlob = token.isGlob = true;
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
      }
      if (code === CHAR_ASTERISK2) {
        if (prev === CHAR_ASTERISK2)
          isGlobstar = token.isGlobstar = true;
        isGlob = token.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_QUESTION_MARK) {
        isGlob = token.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_LEFT_SQUARE_BRACKET2) {
        while (eos() !== true && (next = advance())) {
          if (next === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            advance();
            continue;
          }
          if (next === CHAR_RIGHT_SQUARE_BRACKET2) {
            isBracket = token.isBracket = true;
            isGlob = token.isGlob = true;
            finished = true;
            break;
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
        negated = token.negated = true;
        start++;
        continue;
      }
      if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
        isGlob = token.isGlob = true;
        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_LEFT_PARENTHESES) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }
            if (code === CHAR_RIGHT_PARENTHESES) {
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
      if (isGlob === true) {
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
    }
    if (opts.noext === true) {
      isExtglob = false;
      isGlob = false;
    }
    let base2 = str2;
    let prefix = "";
    let glob = "";
    if (start > 0) {
      prefix = str2.slice(0, start);
      str2 = str2.slice(start);
      lastIndex -= start;
    }
    if (base2 && isGlob === true && lastIndex > 0) {
      base2 = str2.slice(0, lastIndex);
      glob = str2.slice(lastIndex);
    } else if (isGlob === true) {
      base2 = "";
      glob = str2;
    } else {
      base2 = str2;
    }
    if (base2 && base2 !== "" && base2 !== "/" && base2 !== str2) {
      if (isPathSeparator(base2.charCodeAt(base2.length - 1))) {
        base2 = base2.slice(0, -1);
      }
    }
    if (opts.unescape === true) {
      if (glob)
        glob = utils.removeBackslashes(glob);
      if (base2 && backslashes === true) {
        base2 = utils.removeBackslashes(base2);
      }
    }
    const state = {
      prefix,
      input,
      start,
      base: base2,
      glob,
      isBrace,
      isBracket,
      isGlob,
      isExtglob,
      isGlobstar,
      negated,
      negatedExtglob
    };
    if (opts.tokens === true) {
      state.maxDepth = 0;
      if (!isPathSeparator(code)) {
        tokens.push(token);
      }
      state.tokens = tokens;
    }
    if (opts.parts === true || opts.tokens === true) {
      let prevIndex;
      for (let idx = 0;idx < slashes.length; idx++) {
        const n = prevIndex ? prevIndex + 1 : start;
        const i = slashes[idx];
        const value = input.slice(n, i);
        if (opts.tokens) {
          if (idx === 0 && start !== 0) {
            tokens[idx].isPrefix = true;
            tokens[idx].value = prefix;
          } else {
            tokens[idx].value = value;
          }
          depth(tokens[idx]);
          state.maxDepth += tokens[idx].depth;
        }
        if (idx !== 0 || value !== "") {
          parts.push(value);
        }
        prevIndex = i;
      }
      if (prevIndex && prevIndex + 1 < input.length) {
        const value = input.slice(prevIndex + 1);
        parts.push(value);
        if (opts.tokens) {
          tokens[tokens.length - 1].value = value;
          depth(tokens[tokens.length - 1]);
          state.maxDepth += tokens[tokens.length - 1].depth;
        }
      }
      state.slashes = slashes;
      state.parts = parts;
    }
    return state;
  };
  module.exports = scan;
});

// node_modules/picomatch/lib/parse.js
var require_parse2 = __commonJS((exports, module) => {
  var constants = require_constants2();
  var utils = require_utils4();
  var {
    MAX_LENGTH,
    POSIX_REGEX_SOURCE,
    REGEX_NON_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_BACKREF,
    REPLACEMENTS
  } = constants;
  var expandRange = (args, options) => {
    if (typeof options.expandRange === "function") {
      return options.expandRange(...args, options);
    }
    args.sort();
    const value = `[${args.join("-")}]`;
    try {
      new RegExp(value);
    } catch (ex) {
      return args.map((v2) => utils.escapeRegex(v2)).join("..");
    }
    return value;
  };
  var syntaxError = (type2, char) => {
    return `Missing ${type2}: "${char}" - use "\\\\${char}" to match literal characters`;
  };
  var parse2 = (input, options) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected a string");
    }
    input = REPLACEMENTS[input] || input;
    const opts = { ...options };
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    let len = input.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    const bos = { type: "bos", value: "", output: opts.prepend || "" };
    const tokens = [bos];
    const capture = opts.capture ? "" : "?:";
    const win32 = utils.isWindows(options);
    const PLATFORM_CHARS = constants.globChars(win32);
    const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
    const {
      DOT_LITERAL,
      PLUS_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    } = PLATFORM_CHARS;
    const globstar = (opts2) => {
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const nodot = opts.dot ? "" : NO_DOT;
    const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
    let star = opts.bash === true ? globstar(opts) : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    if (typeof opts.noext === "boolean") {
      opts.noextglob = opts.noext;
    }
    const state = {
      input,
      index: -1,
      start: 0,
      dot: opts.dot === true,
      consumed: "",
      output: "",
      prefix: "",
      backtrack: false,
      negated: false,
      brackets: 0,
      braces: 0,
      parens: 0,
      quotes: 0,
      globstar: false,
      tokens
    };
    input = utils.removePrefix(input, state);
    len = input.length;
    const extglobs = [];
    const braces = [];
    const stack = [];
    let prev = bos;
    let value;
    const eos = () => state.index === len - 1;
    const peek = state.peek = (n = 1) => input[state.index + n];
    const advance = state.advance = () => input[++state.index] || "";
    const remaining = () => input.slice(state.index + 1);
    const consume = (value2 = "", num = 0) => {
      state.consumed += value2;
      state.index += num;
    };
    const append = (token) => {
      state.output += token.output != null ? token.output : token.value;
      consume(token.value);
    };
    const negate = () => {
      let count = 1;
      while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
        advance();
        state.start++;
        count++;
      }
      if (count % 2 === 0) {
        return false;
      }
      state.negated = true;
      state.start++;
      return true;
    };
    const increment = (type2) => {
      state[type2]++;
      stack.push(type2);
    };
    const decrement = (type2) => {
      state[type2]--;
      stack.pop();
    };
    const push = (tok) => {
      if (prev.type === "globstar") {
        const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
        const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
        if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "star";
          prev.value = "*";
          prev.output = star;
          state.output += prev.output;
        }
      }
      if (extglobs.length && tok.type !== "paren") {
        extglobs[extglobs.length - 1].inner += tok.value;
      }
      if (tok.value || tok.output)
        append(tok);
      if (prev && prev.type === "text" && tok.type === "text") {
        prev.value += tok.value;
        prev.output = (prev.output || "") + tok.value;
        return;
      }
      tok.prev = prev;
      tokens.push(tok);
      prev = tok;
    };
    const extglobOpen = (type2, value2) => {
      const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
      token.prev = prev;
      token.parens = state.parens;
      token.output = state.output;
      const output = (opts.capture ? "(" : "") + token.open;
      increment("parens");
      push({ type: type2, value: value2, output: state.output ? "" : ONE_CHAR });
      push({ type: "paren", extglob: true, value: advance(), output });
      extglobs.push(token);
    };
    const extglobClose = (token) => {
      let output = token.close + (opts.capture ? ")" : "");
      let rest;
      if (token.type === "negate") {
        let extglobStar = star;
        if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
          extglobStar = globstar(opts);
        }
        if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
          output = token.close = `)$))${extglobStar}`;
        }
        if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
          const expression = parse2(rest, { ...options, fastpaths: false }).output;
          output = token.close = `)${expression})${extglobStar})`;
        }
        if (token.prev.type === "bos") {
          state.negatedExtglob = true;
        }
      }
      push({ type: "paren", extglob: true, value, output });
      decrement("parens");
    };
    if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
      let backslashes = false;
      let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
        if (first === "\\") {
          backslashes = true;
          return m;
        }
        if (first === "?") {
          if (esc) {
            return esc + first + (rest ? QMARK.repeat(rest.length) : "");
          }
          if (index === 0) {
            return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
          }
          return QMARK.repeat(chars.length);
        }
        if (first === ".") {
          return DOT_LITERAL.repeat(chars.length);
        }
        if (first === "*") {
          if (esc) {
            return esc + first + (rest ? star : "");
          }
          return star;
        }
        return esc ? m : `\\${m}`;
      });
      if (backslashes === true) {
        if (opts.unescape === true) {
          output = output.replace(/\\/g, "");
        } else {
          output = output.replace(/\\+/g, (m) => {
            return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
          });
        }
      }
      if (output === input && opts.contains === true) {
        state.output = input;
        return state;
      }
      state.output = utils.wrapOutput(output, state, options);
      return state;
    }
    while (!eos()) {
      value = advance();
      if (value === "\x00") {
        continue;
      }
      if (value === "\\") {
        const next = peek();
        if (next === "/" && opts.bash !== true) {
          continue;
        }
        if (next === "." || next === ";") {
          continue;
        }
        if (!next) {
          value += "\\";
          push({ type: "text", value });
          continue;
        }
        const match = /^\\+/.exec(remaining());
        let slashes = 0;
        if (match && match[0].length > 2) {
          slashes = match[0].length;
          state.index += slashes;
          if (slashes % 2 !== 0) {
            value += "\\";
          }
        }
        if (opts.unescape === true) {
          value = advance();
        } else {
          value += advance();
        }
        if (state.brackets === 0) {
          push({ type: "text", value });
          continue;
        }
      }
      if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
        if (opts.posix !== false && value === ":") {
          const inner = prev.value.slice(1);
          if (inner.includes("[")) {
            prev.posix = true;
            if (inner.includes(":")) {
              const idx = prev.value.lastIndexOf("[");
              const pre = prev.value.slice(0, idx);
              const rest2 = prev.value.slice(idx + 2);
              const posix = POSIX_REGEX_SOURCE[rest2];
              if (posix) {
                prev.value = pre + posix;
                state.backtrack = true;
                advance();
                if (!bos.output && tokens.indexOf(prev) === 1) {
                  bos.output = ONE_CHAR;
                }
                continue;
              }
            }
          }
        }
        if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
          value = `\\${value}`;
        }
        if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
          value = `\\${value}`;
        }
        if (opts.posix === true && value === "!" && prev.value === "[") {
          value = "^";
        }
        prev.value += value;
        append({ value });
        continue;
      }
      if (state.quotes === 1 && value !== '"') {
        value = utils.escapeRegex(value);
        prev.value += value;
        append({ value });
        continue;
      }
      if (value === '"') {
        state.quotes = state.quotes === 1 ? 0 : 1;
        if (opts.keepQuotes === true) {
          push({ type: "text", value });
        }
        continue;
      }
      if (value === "(") {
        increment("parens");
        push({ type: "paren", value });
        continue;
      }
      if (value === ")") {
        if (state.parens === 0 && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("opening", "("));
        }
        const extglob = extglobs[extglobs.length - 1];
        if (extglob && state.parens === extglob.parens + 1) {
          extglobClose(extglobs.pop());
          continue;
        }
        push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
        decrement("parens");
        continue;
      }
      if (value === "[") {
        if (opts.nobracket === true || !remaining().includes("]")) {
          if (opts.nobracket !== true && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("closing", "]"));
          }
          value = `\\${value}`;
        } else {
          increment("brackets");
        }
        push({ type: "bracket", value });
        continue;
      }
      if (value === "]") {
        if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
          push({ type: "text", value, output: `\\${value}` });
          continue;
        }
        if (state.brackets === 0) {
          if (opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "["));
          }
          push({ type: "text", value, output: `\\${value}` });
          continue;
        }
        decrement("brackets");
        const prevValue = prev.value.slice(1);
        if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
          value = `/${value}`;
        }
        prev.value += value;
        append({ value });
        if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
          continue;
        }
        const escaped = utils.escapeRegex(prev.value);
        state.output = state.output.slice(0, -prev.value.length);
        if (opts.literalBrackets === true) {
          state.output += escaped;
          prev.value = escaped;
          continue;
        }
        prev.value = `(${capture}${escaped}|${prev.value})`;
        state.output += prev.value;
        continue;
      }
      if (value === "{" && opts.nobrace !== true) {
        increment("braces");
        const open = {
          type: "brace",
          value,
          output: "(",
          outputIndex: state.output.length,
          tokensIndex: state.tokens.length
        };
        braces.push(open);
        push(open);
        continue;
      }
      if (value === "}") {
        const brace = braces[braces.length - 1];
        if (opts.nobrace === true || !brace) {
          push({ type: "text", value, output: value });
          continue;
        }
        let output = ")";
        if (brace.dots === true) {
          const arr = tokens.slice();
          const range = [];
          for (let i = arr.length - 1;i >= 0; i--) {
            tokens.pop();
            if (arr[i].type === "brace") {
              break;
            }
            if (arr[i].type !== "dots") {
              range.unshift(arr[i].value);
            }
          }
          output = expandRange(range, opts);
          state.backtrack = true;
        }
        if (brace.comma !== true && brace.dots !== true) {
          const out = state.output.slice(0, brace.outputIndex);
          const toks = state.tokens.slice(brace.tokensIndex);
          brace.value = brace.output = "\\{";
          value = output = "\\}";
          state.output = out;
          for (const t of toks) {
            state.output += t.output || t.value;
          }
        }
        push({ type: "brace", value, output });
        decrement("braces");
        braces.pop();
        continue;
      }
      if (value === "|") {
        if (extglobs.length > 0) {
          extglobs[extglobs.length - 1].conditions++;
        }
        push({ type: "text", value });
        continue;
      }
      if (value === ",") {
        let output = value;
        const brace = braces[braces.length - 1];
        if (brace && stack[stack.length - 1] === "braces") {
          brace.comma = true;
          output = "|";
        }
        push({ type: "comma", value, output });
        continue;
      }
      if (value === "/") {
        if (prev.type === "dot" && state.index === state.start + 1) {
          state.start = state.index + 1;
          state.consumed = "";
          state.output = "";
          tokens.pop();
          prev = bos;
          continue;
        }
        push({ type: "slash", value, output: SLASH_LITERAL });
        continue;
      }
      if (value === ".") {
        if (state.braces > 0 && prev.type === "dot") {
          if (prev.value === ".")
            prev.output = DOT_LITERAL;
          const brace = braces[braces.length - 1];
          prev.type = "dots";
          prev.output += value;
          prev.value += value;
          brace.dots = true;
          continue;
        }
        if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
          push({ type: "text", value, output: DOT_LITERAL });
          continue;
        }
        push({ type: "dot", value, output: DOT_LITERAL });
        continue;
      }
      if (value === "?") {
        const isGroup = prev && prev.value === "(";
        if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          extglobOpen("qmark", value);
          continue;
        }
        if (prev && prev.type === "paren") {
          const next = peek();
          let output = value;
          if (next === "<" && !utils.supportsLookbehinds()) {
            throw new Error("Node.js v10 or higher is required for regex lookbehinds");
          }
          if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
            output = `\\${value}`;
          }
          push({ type: "text", value, output });
          continue;
        }
        if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
          push({ type: "qmark", value, output: QMARK_NO_DOT });
          continue;
        }
        push({ type: "qmark", value, output: QMARK });
        continue;
      }
      if (value === "!") {
        if (opts.noextglob !== true && peek() === "(") {
          if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
            extglobOpen("negate", value);
            continue;
          }
        }
        if (opts.nonegate !== true && state.index === 0) {
          negate();
          continue;
        }
      }
      if (value === "+") {
        if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          extglobOpen("plus", value);
          continue;
        }
        if (prev && prev.value === "(" || opts.regex === false) {
          push({ type: "plus", value, output: PLUS_LITERAL });
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
          push({ type: "plus", value });
          continue;
        }
        push({ type: "plus", value: PLUS_LITERAL });
        continue;
      }
      if (value === "@") {
        if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          push({ type: "at", extglob: true, value, output: "" });
          continue;
        }
        push({ type: "text", value });
        continue;
      }
      if (value !== "*") {
        if (value === "$" || value === "^") {
          value = `\\${value}`;
        }
        const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
        if (match) {
          value += match[0];
          state.index += match[0].length;
        }
        push({ type: "text", value });
        continue;
      }
      if (prev && (prev.type === "globstar" || prev.star === true)) {
        prev.type = "star";
        prev.star = true;
        prev.value += value;
        prev.output = star;
        state.backtrack = true;
        state.globstar = true;
        consume(value);
        continue;
      }
      let rest = remaining();
      if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
        extglobOpen("star", value);
        continue;
      }
      if (prev.type === "star") {
        if (opts.noglobstar === true) {
          consume(value);
          continue;
        }
        const prior = prev.prev;
        const before = prior.prev;
        const isStart = prior.type === "slash" || prior.type === "bos";
        const afterStar = before && (before.type === "star" || before.type === "globstar");
        if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
          push({ type: "star", value, output: "" });
          continue;
        }
        const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
        const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
        if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
          push({ type: "star", value, output: "" });
          continue;
        }
        while (rest.slice(0, 3) === "/**") {
          const after = input[state.index + 4];
          if (after && after !== "/") {
            break;
          }
          rest = rest.slice(3);
          consume("/**", 3);
        }
        if (prior.type === "bos" && eos()) {
          prev.type = "globstar";
          prev.value += value;
          prev.output = globstar(opts);
          state.output = prev.output;
          state.globstar = true;
          consume(value);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
          state.output = state.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
          prev.value += value;
          state.globstar = true;
          state.output += prior.output + prev.output;
          consume(value);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
          const end = rest[1] !== undefined ? "|$" : "";
          state.output = state.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
          prev.value += value;
          state.output += prior.output + prev.output;
          state.globstar = true;
          consume(value + advance());
          push({ type: "slash", value: "/", output: "" });
          continue;
        }
        if (prior.type === "bos" && rest[0] === "/") {
          prev.type = "globstar";
          prev.value += value;
          prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
          state.output = prev.output;
          state.globstar = true;
          consume(value + advance());
          push({ type: "slash", value: "/", output: "" });
          continue;
        }
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = "globstar";
        prev.output = globstar(opts);
        prev.value += value;
        state.output += prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }
      const token = { type: "star", value, output: star };
      if (opts.bash === true) {
        token.output = ".*?";
        if (prev.type === "bos" || prev.type === "slash") {
          token.output = nodot + token.output;
        }
        push(token);
        continue;
      }
      if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
        token.output = value;
        push(token);
        continue;
      }
      if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
        if (prev.type === "dot") {
          state.output += NO_DOT_SLASH;
          prev.output += NO_DOT_SLASH;
        } else if (opts.dot === true) {
          state.output += NO_DOTS_SLASH;
          prev.output += NO_DOTS_SLASH;
        } else {
          state.output += nodot;
          prev.output += nodot;
        }
        if (peek() !== "*") {
          state.output += ONE_CHAR;
          prev.output += ONE_CHAR;
        }
      }
      push(token);
    }
    while (state.brackets > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", "]"));
      state.output = utils.escapeLast(state.output, "[");
      decrement("brackets");
    }
    while (state.parens > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", ")"));
      state.output = utils.escapeLast(state.output, "(");
      decrement("parens");
    }
    while (state.braces > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", "}"));
      state.output = utils.escapeLast(state.output, "{");
      decrement("braces");
    }
    if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
      push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
    }
    if (state.backtrack === true) {
      state.output = "";
      for (const token of state.tokens) {
        state.output += token.output != null ? token.output : token.value;
        if (token.suffix) {
          state.output += token.suffix;
        }
      }
    }
    return state;
  };
  parse2.fastpaths = (input, options) => {
    const opts = { ...options };
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    const len = input.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    input = REPLACEMENTS[input] || input;
    const win32 = utils.isWindows(options);
    const {
      DOT_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOTS_SLASH,
      STAR,
      START_ANCHOR
    } = constants.globChars(win32);
    const nodot = opts.dot ? NO_DOTS : NO_DOT;
    const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
    const capture = opts.capture ? "" : "?:";
    const state = { negated: false, prefix: "" };
    let star = opts.bash === true ? ".*?" : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    const globstar = (opts2) => {
      if (opts2.noglobstar === true)
        return star;
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const create = (str2) => {
      switch (str2) {
        case "*":
          return `${nodot}${ONE_CHAR}${star}`;
        case ".*":
          return `${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*.*":
          return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*/*":
          return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
        case "**":
          return nodot + globstar(opts);
        case "**/*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
        case "**/*.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "**/.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
        default: {
          const match = /^(.*?)\.(\w+)$/.exec(str2);
          if (!match)
            return;
          const source2 = create(match[1]);
          if (!source2)
            return;
          return source2 + DOT_LITERAL + match[2];
        }
      }
    };
    const output = utils.removePrefix(input, state);
    let source = create(output);
    if (source && opts.strictSlashes !== true) {
      source += `${SLASH_LITERAL}?`;
    }
    return source;
  };
  module.exports = parse2;
});

// node_modules/picomatch/lib/picomatch.js
var require_picomatch = __commonJS((exports, module) => {
  var path = import.meta.require("path");
  var scan = require_scan();
  var parse2 = require_parse2();
  var utils = require_utils4();
  var constants = require_constants2();
  var isObject2 = (val) => val && typeof val === "object" && !Array.isArray(val);
  var picomatch = (glob, options, returnState = false) => {
    if (Array.isArray(glob)) {
      const fns = glob.map((input) => picomatch(input, options, returnState));
      const arrayMatcher = (str2) => {
        for (const isMatch of fns) {
          const state2 = isMatch(str2);
          if (state2)
            return state2;
        }
        return false;
      };
      return arrayMatcher;
    }
    const isState = isObject2(glob) && glob.tokens && glob.input;
    if (glob === "" || typeof glob !== "string" && !isState) {
      throw new TypeError("Expected pattern to be a non-empty string");
    }
    const opts = options || {};
    const posix = utils.isWindows(options);
    const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
    const state = regex.state;
    delete regex.state;
    let isIgnored = () => false;
    if (opts.ignore) {
      const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
      isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
    }
    const matcher = (input, returnObject = false) => {
      const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
      const result = { glob, state, regex, posix, input, output, match, isMatch };
      if (typeof opts.onResult === "function") {
        opts.onResult(result);
      }
      if (isMatch === false) {
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (isIgnored(input)) {
        if (typeof opts.onIgnore === "function") {
          opts.onIgnore(result);
        }
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (typeof opts.onMatch === "function") {
        opts.onMatch(result);
      }
      return returnObject ? result : true;
    };
    if (returnState) {
      matcher.state = state;
    }
    return matcher;
  };
  picomatch.test = (input, regex, options, { glob, posix } = {}) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected input to be a string");
    }
    if (input === "") {
      return { isMatch: false, output: "" };
    }
    const opts = options || {};
    const format = opts.format || (posix ? utils.toPosixSlashes : null);
    let match = input === glob;
    let output = match && format ? format(input) : input;
    if (match === false) {
      output = format ? format(input) : input;
      match = output === glob;
    }
    if (match === false || opts.capture === true) {
      if (opts.matchBase === true || opts.basename === true) {
        match = picomatch.matchBase(input, regex, options, posix);
      } else {
        match = regex.exec(output);
      }
    }
    return { isMatch: Boolean(match), match, output };
  };
  picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
    const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
    return regex.test(path.basename(input));
  };
  picomatch.isMatch = (str2, patterns, options) => picomatch(patterns, options)(str2);
  picomatch.parse = (pattern, options) => {
    if (Array.isArray(pattern))
      return pattern.map((p2) => picomatch.parse(p2, options));
    return parse2(pattern, { ...options, fastpaths: false });
  };
  picomatch.scan = (input, options) => scan(input, options);
  picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
    if (returnOutput === true) {
      return state.output;
    }
    const opts = options || {};
    const prepend = opts.contains ? "" : "^";
    const append = opts.contains ? "" : "$";
    let source = `${prepend}(?:${state.output})${append}`;
    if (state && state.negated === true) {
      source = `^(?!${source}).*$`;
    }
    const regex = picomatch.toRegex(source, options);
    if (returnState === true) {
      regex.state = state;
    }
    return regex;
  };
  picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
    if (!input || typeof input !== "string") {
      throw new TypeError("Expected a non-empty string");
    }
    let parsed = { negated: false, fastpaths: true };
    if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
      parsed.output = parse2.fastpaths(input, options);
    }
    if (!parsed.output) {
      parsed = parse2(input, options);
    }
    return picomatch.compileRe(parsed, options, returnOutput, returnState);
  };
  picomatch.toRegex = (source, options) => {
    try {
      const opts = options || {};
      return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
    } catch (err) {
      if (options && options.debug === true)
        throw err;
      return /$^/;
    }
  };
  picomatch.constants = constants;
  module.exports = picomatch;
});

// node_modules/micromatch/index.js
var require_micromatch = __commonJS((exports, module) => {
  var util = import.meta.require("util");
  var braces = require_braces();
  var picomatch = require_picomatch();
  var utils = require_utils4();
  var isEmptyString = (val) => val === "" || val === "./";
  var micromatch = (list, patterns, options) => {
    patterns = [].concat(patterns);
    list = [].concat(list);
    let omit = new Set;
    let keep = new Set;
    let items = new Set;
    let negatives = 0;
    let onResult = (state) => {
      items.add(state.output);
      if (options && options.onResult) {
        options.onResult(state);
      }
    };
    for (let i = 0;i < patterns.length; i++) {
      let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
      let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
      if (negated)
        negatives++;
      for (let item of list) {
        let matched = isMatch(item, true);
        let match = negated ? !matched.isMatch : matched.isMatch;
        if (!match)
          continue;
        if (negated) {
          omit.add(matched.output);
        } else {
          omit.delete(matched.output);
          keep.add(matched.output);
        }
      }
    }
    let result = negatives === patterns.length ? [...items] : [...keep];
    let matches = result.filter((item) => !omit.has(item));
    if (options && matches.length === 0) {
      if (options.failglob === true) {
        throw new Error(`No matches found for "${patterns.join(", ")}"`);
      }
      if (options.nonull === true || options.nullglob === true) {
        return options.unescape ? patterns.map((p2) => p2.replace(/\\/g, "")) : patterns;
      }
    }
    return matches;
  };
  micromatch.match = micromatch;
  micromatch.matcher = (pattern, options) => picomatch(pattern, options);
  micromatch.isMatch = (str2, patterns, options) => picomatch(patterns, options)(str2);
  micromatch.any = micromatch.isMatch;
  micromatch.not = (list, patterns, options = {}) => {
    patterns = [].concat(patterns).map(String);
    let result = new Set;
    let items = [];
    let onResult = (state) => {
      if (options.onResult)
        options.onResult(state);
      items.push(state.output);
    };
    let matches = new Set(micromatch(list, patterns, { ...options, onResult }));
    for (let item of items) {
      if (!matches.has(item)) {
        result.add(item);
      }
    }
    return [...result];
  };
  micromatch.contains = (str2, pattern, options) => {
    if (typeof str2 !== "string") {
      throw new TypeError(`Expected a string: "${util.inspect(str2)}"`);
    }
    if (Array.isArray(pattern)) {
      return pattern.some((p2) => micromatch.contains(str2, p2, options));
    }
    if (typeof pattern === "string") {
      if (isEmptyString(str2) || isEmptyString(pattern)) {
        return false;
      }
      if (str2.includes(pattern) || str2.startsWith("./") && str2.slice(2).includes(pattern)) {
        return true;
      }
    }
    return micromatch.isMatch(str2, pattern, { ...options, contains: true });
  };
  micromatch.matchKeys = (obj, patterns, options) => {
    if (!utils.isObject(obj)) {
      throw new TypeError("Expected the first argument to be an object");
    }
    let keys = micromatch(Object.keys(obj), patterns, options);
    let res = {};
    for (let key of keys)
      res[key] = obj[key];
    return res;
  };
  micromatch.some = (list, patterns, options) => {
    let items = [].concat(list);
    for (let pattern of [].concat(patterns)) {
      let isMatch = picomatch(String(pattern), options);
      if (items.some((item) => isMatch(item))) {
        return true;
      }
    }
    return false;
  };
  micromatch.every = (list, patterns, options) => {
    let items = [].concat(list);
    for (let pattern of [].concat(patterns)) {
      let isMatch = picomatch(String(pattern), options);
      if (!items.every((item) => isMatch(item))) {
        return false;
      }
    }
    return true;
  };
  micromatch.all = (str2, patterns, options) => {
    if (typeof str2 !== "string") {
      throw new TypeError(`Expected a string: "${util.inspect(str2)}"`);
    }
    return [].concat(patterns).every((p2) => picomatch(p2, options)(str2));
  };
  micromatch.capture = (glob, input, options) => {
    let posix = utils.isWindows(options);
    let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
    let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
    if (match) {
      return match.slice(1).map((v2) => v2 === undefined ? "" : v2);
    }
  };
  micromatch.makeRe = (...args) => picomatch.makeRe(...args);
  micromatch.scan = (...args) => picomatch.scan(...args);
  micromatch.parse = (patterns, options) => {
    let res = [];
    for (let pattern of [].concat(patterns || [])) {
      for (let str2 of braces(String(pattern), options)) {
        res.push(picomatch.parse(str2, options));
      }
    }
    return res;
  };
  micromatch.braces = (pattern, options) => {
    if (typeof pattern !== "string")
      throw new TypeError("Expected a string");
    if (options && options.nobrace === true || !/\{.*\}/.test(pattern)) {
      return [pattern];
    }
    return braces(pattern, options);
  };
  micromatch.braceExpand = (pattern, options) => {
    if (typeof pattern !== "string")
      throw new TypeError("Expected a string");
    return micromatch.braces(pattern, { ...options, expand: true });
  };
  module.exports = micromatch;
});

// node_modules/detect-python-interpreter/index.js
var require_detect_python_interpreter = __commonJS((exports) => {
  var cp = import.meta.require("child_process");
  var interpreter;
  function doDetect() {
    const interpreterOptions = ["python3", "python", "python2"];
    for (const opt of interpreterOptions) {
      const result = cp.spawnSync(opt, ["--version"], {
        encoding: "utf-8"
      });
      if (result.status === 0) {
        return opt;
      }
    }
    return null;
  }
  exports.detect = function detect() {
    if (interpreter) {
      return interpreter;
    }
    interpreter = doDetect();
    if (!interpreter) {
      throw new Error("Python interpreter not found");
    }
    return interpreter;
  };
  exports.clearCache = function clearCache() {
    interpreter = null;
  };
});

// node_modules/cli-progress/lib/eta.js
var require_eta = __commonJS((exports, module) => {
  class ETA {
    constructor(length, initTime, initValue) {
      this.etaBufferLength = length || 100;
      this.valueBuffer = [initValue];
      this.timeBuffer = [initTime];
      this.eta = "0";
    }
    update(time, value, total) {
      this.valueBuffer.push(value);
      this.timeBuffer.push(time);
      this.calculate(total - value);
    }
    getTime() {
      return this.eta;
    }
    calculate(remaining) {
      const currentBufferSize = this.valueBuffer.length;
      const buffer = Math.min(this.etaBufferLength, currentBufferSize);
      const v_diff = this.valueBuffer[currentBufferSize - 1] - this.valueBuffer[currentBufferSize - buffer];
      const t_diff = this.timeBuffer[currentBufferSize - 1] - this.timeBuffer[currentBufferSize - buffer];
      const vt_rate = v_diff / t_diff;
      this.valueBuffer = this.valueBuffer.slice(-this.etaBufferLength);
      this.timeBuffer = this.timeBuffer.slice(-this.etaBufferLength);
      const eta = Math.ceil(remaining / vt_rate / 1000);
      if (isNaN(eta)) {
        this.eta = "NULL";
      } else if (!isFinite(eta)) {
        this.eta = "INF";
      } else if (eta > 1e7) {
        this.eta = "INF";
      } else if (eta < 0) {
        this.eta = 0;
      } else {
        this.eta = eta;
      }
    }
  }
  module.exports = ETA;
});

// node_modules/cli-progress/lib/terminal.js
var require_terminal = __commonJS((exports, module) => {
  var _readline = import.meta.require("readline");

  class Terminal {
    constructor(outputStream) {
      this.stream = outputStream;
      this.linewrap = true;
      this.dy = 0;
    }
    cursorSave() {
      if (!this.stream.isTTY) {
        return;
      }
      this.stream.write("\x1B7");
    }
    cursorRestore() {
      if (!this.stream.isTTY) {
        return;
      }
      this.stream.write("\x1B8");
    }
    cursor(enabled) {
      if (!this.stream.isTTY) {
        return;
      }
      if (enabled) {
        this.stream.write("\x1B[?25h");
      } else {
        this.stream.write("\x1B[?25l");
      }
    }
    cursorTo(x7 = null, y6 = null) {
      if (!this.stream.isTTY) {
        return;
      }
      _readline.cursorTo(this.stream, x7, y6);
    }
    cursorRelative(dx = null, dy = null) {
      if (!this.stream.isTTY) {
        return;
      }
      this.dy = this.dy + dy;
      _readline.moveCursor(this.stream, dx, dy);
    }
    cursorRelativeReset() {
      if (!this.stream.isTTY) {
        return;
      }
      _readline.moveCursor(this.stream, 0, -this.dy);
      _readline.cursorTo(this.stream, 0, null);
      this.dy = 0;
    }
    clearRight() {
      if (!this.stream.isTTY) {
        return;
      }
      _readline.clearLine(this.stream, 1);
    }
    clearLine() {
      if (!this.stream.isTTY) {
        return;
      }
      _readline.clearLine(this.stream, 0);
    }
    clearBottom() {
      if (!this.stream.isTTY) {
        return;
      }
      _readline.clearScreenDown(this.stream);
    }
    newline() {
      this.stream.write(`
`);
      this.dy++;
    }
    write(s2, rawWrite = false) {
      if (this.linewrap === true && rawWrite === false) {
        this.stream.write(s2.substr(0, this.getWidth()));
      } else {
        this.stream.write(s2);
      }
    }
    lineWrapping(enabled) {
      if (!this.stream.isTTY) {
        return;
      }
      this.linewrap = enabled;
      if (enabled) {
        this.stream.write("\x1B[?7h");
      } else {
        this.stream.write("\x1B[?7l");
      }
    }
    isTTY() {
      return this.stream.isTTY === true;
    }
    getWidth() {
      return this.stream.columns || (this.stream.isTTY ? 80 : 200);
    }
  }
  module.exports = Terminal;
});

// node_modules/ansi-regex/index.js
var require_ansi_regex = __commonJS((exports, module) => {
  module.exports = ({ onlyFirst = false } = {}) => {
    const pattern = [
      "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
      "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
    ].join("|");
    return new RegExp(pattern, onlyFirst ? undefined : "g");
  };
});

// node_modules/strip-ansi/index.js
var require_strip_ansi = __commonJS((exports, module) => {
  var ansiRegex = require_ansi_regex();
  module.exports = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
});

// node_modules/is-fullwidth-code-point/index.js
var require_is_fullwidth_code_point = __commonJS((exports, module) => {
  var isFullwidthCodePoint = (codePoint) => {
    if (Number.isNaN(codePoint)) {
      return false;
    }
    if (codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141)) {
      return true;
    }
    return false;
  };
  module.exports = isFullwidthCodePoint;
  module.exports.default = isFullwidthCodePoint;
});

// node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS((exports, module) => {
  module.exports = function() {
    return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
  };
});

// node_modules/string-width/index.js
var require_string_width = __commonJS((exports, module) => {
  var stripAnsi = require_strip_ansi();
  var isFullwidthCodePoint = require_is_fullwidth_code_point();
  var emojiRegex = require_emoji_regex();
  var stringWidth = (string) => {
    if (typeof string !== "string" || string.length === 0) {
      return 0;
    }
    string = stripAnsi(string);
    if (string.length === 0) {
      return 0;
    }
    string = string.replace(emojiRegex(), "  ");
    let width = 0;
    for (let i3 = 0;i3 < string.length; i3++) {
      const code = string.codePointAt(i3);
      if (code <= 31 || code >= 127 && code <= 159) {
        continue;
      }
      if (code >= 768 && code <= 879) {
        continue;
      }
      if (code > 65535) {
        i3++;
      }
      width += isFullwidthCodePoint(code) ? 2 : 1;
    }
    return width;
  };
  module.exports = stringWidth;
  module.exports.default = stringWidth;
});

// node_modules/cli-progress/lib/format-value.js
var require_format_value = __commonJS((exports, module) => {
  module.exports = function formatValue(v7, options, type2) {
    if (options.autopadding !== true) {
      return v7;
    }
    function autopadding(value, length) {
      return (options.autopaddingChar + value).slice(-length);
    }
    switch (type2) {
      case "percentage":
        return autopadding(v7, 3);
      default:
        return v7;
    }
  };
});

// node_modules/cli-progress/lib/format-bar.js
var require_format_bar = __commonJS((exports, module) => {
  module.exports = function formatBar(progress, options) {
    const completeSize = Math.round(progress * options.barsize);
    const incompleteSize = options.barsize - completeSize;
    return options.barCompleteString.substr(0, completeSize) + options.barGlue + options.barIncompleteString.substr(0, incompleteSize);
  };
});

// node_modules/cli-progress/lib/format-time.js
var require_format_time = __commonJS((exports, module) => {
  module.exports = function formatTime(t3, options, roundToMultipleOf) {
    function round(input) {
      if (roundToMultipleOf) {
        return roundToMultipleOf * Math.round(input / roundToMultipleOf);
      } else {
        return input;
      }
    }
    function autopadding(v7) {
      return (options.autopaddingChar + v7).slice(-2);
    }
    if (t3 > 3600) {
      return autopadding(Math.floor(t3 / 3600)) + "h" + autopadding(round(t3 % 3600 / 60)) + "m";
    } else if (t3 > 60) {
      return autopadding(Math.floor(t3 / 60)) + "m" + autopadding(round(t3 % 60)) + "s";
    } else if (t3 > 10) {
      return autopadding(round(t3)) + "s";
    } else {
      return autopadding(t3) + "s";
    }
  };
});

// node_modules/cli-progress/lib/formatter.js
var require_formatter = __commonJS((exports, module) => {
  var _stringWidth = require_string_width();
  var _defaultFormatValue = require_format_value();
  var _defaultFormatBar = require_format_bar();
  var _defaultFormatTime = require_format_time();
  module.exports = function defaultFormatter(options, params, payload) {
    let s2 = options.format;
    const formatTime = options.formatTime || _defaultFormatTime;
    const formatValue = options.formatValue || _defaultFormatValue;
    const formatBar = options.formatBar || _defaultFormatBar;
    const percentage = Math.floor(params.progress * 100) + "";
    const stopTime = params.stopTime || Date.now();
    const elapsedTime = Math.round((stopTime - params.startTime) / 1000);
    const context = Object.assign({}, payload, {
      bar: formatBar(params.progress, options),
      percentage: formatValue(percentage, options, "percentage"),
      total: formatValue(params.total, options, "total"),
      value: formatValue(params.value, options, "value"),
      eta: formatValue(params.eta, options, "eta"),
      eta_formatted: formatTime(params.eta, options, 5),
      duration: formatValue(elapsedTime, options, "duration"),
      duration_formatted: formatTime(elapsedTime, options, 1)
    });
    s2 = s2.replace(/\{(\w+)\}/g, function(match, key) {
      if (typeof context[key] !== "undefined") {
        return context[key];
      }
      return match;
    });
    const fullMargin = Math.max(0, params.maxWidth - _stringWidth(s2) - 2);
    const halfMargin = Math.floor(fullMargin / 2);
    switch (options.align) {
      case "right":
        s2 = fullMargin > 0 ? " ".repeat(fullMargin) + s2 : s2;
        break;
      case "center":
        s2 = halfMargin > 0 ? " ".repeat(halfMargin) + s2 : s2;
        break;
      case "left":
      default:
        break;
    }
    return s2;
  };
});

// node_modules/cli-progress/lib/options.js
var require_options = __commonJS((exports, module) => {
  function mergeOption(v7, defaultValue) {
    if (typeof v7 === "undefined" || v7 === null) {
      return defaultValue;
    } else {
      return v7;
    }
  }
  module.exports = {
    parse: function parse(rawOptions, preset) {
      const options = {};
      const opt = Object.assign({}, preset, rawOptions);
      options.throttleTime = 1000 / mergeOption(opt.fps, 10);
      options.stream = mergeOption(opt.stream, process.stderr);
      options.terminal = mergeOption(opt.terminal, null);
      options.clearOnComplete = mergeOption(opt.clearOnComplete, false);
      options.stopOnComplete = mergeOption(opt.stopOnComplete, false);
      options.barsize = mergeOption(opt.barsize, 40);
      options.align = mergeOption(opt.align, "left");
      options.hideCursor = mergeOption(opt.hideCursor, false);
      options.linewrap = mergeOption(opt.linewrap, false);
      options.barGlue = mergeOption(opt.barGlue, "");
      options.barCompleteChar = mergeOption(opt.barCompleteChar, "=");
      options.barIncompleteChar = mergeOption(opt.barIncompleteChar, "-");
      options.format = mergeOption(opt.format, "progress [{bar}] {percentage}% | ETA: {eta}s | {value}/{total}");
      options.formatTime = mergeOption(opt.formatTime, null);
      options.formatValue = mergeOption(opt.formatValue, null);
      options.formatBar = mergeOption(opt.formatBar, null);
      options.etaBufferLength = mergeOption(opt.etaBuffer, 10);
      options.etaAsynchronousUpdate = mergeOption(opt.etaAsynchronousUpdate, false);
      options.progressCalculationRelative = mergeOption(opt.progressCalculationRelative, false);
      options.synchronousUpdate = mergeOption(opt.synchronousUpdate, true);
      options.noTTYOutput = mergeOption(opt.noTTYOutput, false);
      options.notTTYSchedule = mergeOption(opt.notTTYSchedule, 2000);
      options.emptyOnZero = mergeOption(opt.emptyOnZero, false);
      options.forceRedraw = mergeOption(opt.forceRedraw, false);
      options.autopadding = mergeOption(opt.autopadding, false);
      options.gracefulExit = mergeOption(opt.gracefulExit, false);
      return options;
    },
    assignDerivedOptions: function assignDerivedOptions(options) {
      options.barCompleteString = options.barCompleteChar.repeat(options.barsize + 1);
      options.barIncompleteString = options.barIncompleteChar.repeat(options.barsize + 1);
      options.autopaddingChar = options.autopadding ? mergeOption(options.autopaddingChar, "   ") : "";
      return options;
    }
  };
});

// node_modules/cli-progress/lib/generic-bar.js
var require_generic_bar = __commonJS((exports, module) => {
  var _ETA = require_eta();
  var _Terminal = require_terminal();
  var _formatter = require_formatter();
  var _options = require_options();
  var _EventEmitter = import.meta.require("events");
  module.exports = class GenericBar extends _EventEmitter {
    constructor(options) {
      super();
      this.options = _options.assignDerivedOptions(options);
      this.terminal = this.options.terminal ? this.options.terminal : new _Terminal(this.options.stream);
      this.value = 0;
      this.startValue = 0;
      this.total = 100;
      this.lastDrawnString = null;
      this.startTime = null;
      this.stopTime = null;
      this.lastRedraw = Date.now();
      this.eta = new _ETA(this.options.etaBufferLength, 0, 0);
      this.payload = {};
      this.isActive = false;
      this.formatter = typeof this.options.format === "function" ? this.options.format : _formatter;
    }
    render(forceRendering = false) {
      const params = {
        progress: this.getProgress(),
        eta: this.eta.getTime(),
        startTime: this.startTime,
        stopTime: this.stopTime,
        total: this.total,
        value: this.value,
        maxWidth: this.terminal.getWidth()
      };
      if (this.options.etaAsynchronousUpdate) {
        this.updateETA();
      }
      const s2 = this.formatter(this.options, params, this.payload);
      const forceRedraw = forceRendering || this.options.forceRedraw || this.options.noTTYOutput && !this.terminal.isTTY();
      if (forceRedraw || this.lastDrawnString != s2) {
        this.emit("redraw-pre");
        this.terminal.cursorTo(0, null);
        this.terminal.write(s2);
        this.terminal.clearRight();
        this.lastDrawnString = s2;
        this.lastRedraw = Date.now();
        this.emit("redraw-post");
      }
    }
    start(total, startValue, payload) {
      this.value = startValue || 0;
      this.total = typeof total !== "undefined" && total >= 0 ? total : 100;
      this.startValue = startValue || 0;
      this.payload = payload || {};
      this.startTime = Date.now();
      this.stopTime = null;
      this.lastDrawnString = "";
      this.eta = new _ETA(this.options.etaBufferLength, this.startTime, this.value);
      this.isActive = true;
      this.emit("start", total, startValue);
    }
    stop() {
      this.isActive = false;
      this.stopTime = Date.now();
      this.emit("stop", this.total, this.value);
    }
    update(arg0, arg1 = {}) {
      if (typeof arg0 === "number") {
        this.value = arg0;
        this.eta.update(Date.now(), arg0, this.total);
      }
      const payloadData = (typeof arg0 === "object" ? arg0 : arg1) || {};
      this.emit("update", this.total, this.value);
      for (const key in payloadData) {
        this.payload[key] = payloadData[key];
      }
      if (this.value >= this.getTotal() && this.options.stopOnComplete) {
        this.stop();
      }
    }
    getProgress() {
      let progress = this.value / this.total;
      if (this.options.progressCalculationRelative) {
        progress = (this.value - this.startValue) / (this.total - this.startValue);
      }
      if (isNaN(progress)) {
        progress = this.options && this.options.emptyOnZero ? 0 : 1;
      }
      progress = Math.min(Math.max(progress, 0), 1);
      return progress;
    }
    increment(arg0 = 1, arg1 = {}) {
      if (typeof arg0 === "object") {
        this.update(this.value + 1, arg0);
      } else {
        this.update(this.value + arg0, arg1);
      }
    }
    getTotal() {
      return this.total;
    }
    setTotal(total) {
      if (typeof total !== "undefined" && total >= 0) {
        this.total = total;
      }
    }
    updateETA() {
      this.eta.update(Date.now(), this.value, this.total);
    }
  };
});

// node_modules/cli-progress/lib/single-bar.js
var require_single_bar = __commonJS((exports, module) => {
  var _GenericBar = require_generic_bar();
  var _options = require_options();
  module.exports = class SingleBar extends _GenericBar {
    constructor(options, preset) {
      super(_options.parse(options, preset));
      this.timer = null;
      if (this.options.noTTYOutput && this.terminal.isTTY() === false) {
        this.options.synchronousUpdate = false;
      }
      this.schedulingRate = this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule;
      this.sigintCallback = null;
    }
    render() {
      if (this.timer) {
        clearTimeout(this.timer);
        this.timer = null;
      }
      super.render();
      if (this.options.noTTYOutput && this.terminal.isTTY() === false) {
        this.terminal.newline();
      }
      this.timer = setTimeout(this.render.bind(this), this.schedulingRate);
    }
    update(current, payload) {
      if (!this.timer) {
        return;
      }
      super.update(current, payload);
      if (this.options.synchronousUpdate && this.lastRedraw + this.options.throttleTime * 2 < Date.now()) {
        this.render();
      }
    }
    start(total, startValue, payload) {
      if (this.options.noTTYOutput === false && this.terminal.isTTY() === false) {
        return;
      }
      if (this.sigintCallback === null && this.options.gracefulExit) {
        this.sigintCallback = this.stop.bind(this);
        process.once("SIGINT", this.sigintCallback);
        process.once("SIGTERM", this.sigintCallback);
      }
      this.terminal.cursorSave();
      if (this.options.hideCursor === true) {
        this.terminal.cursor(false);
      }
      if (this.options.linewrap === false) {
        this.terminal.lineWrapping(false);
      }
      super.start(total, startValue, payload);
      this.render();
    }
    stop() {
      if (!this.timer) {
        return;
      }
      if (this.sigintCallback) {
        process.removeListener("SIGINT", this.sigintCallback);
        process.removeListener("SIGTERM", this.sigintCallback);
        this.sigintCallback = null;
      }
      this.render();
      super.stop();
      clearTimeout(this.timer);
      this.timer = null;
      if (this.options.hideCursor === true) {
        this.terminal.cursor(true);
      }
      if (this.options.linewrap === false) {
        this.terminal.lineWrapping(true);
      }
      this.terminal.cursorRestore();
      if (this.options.clearOnComplete) {
        this.terminal.cursorTo(0, null);
        this.terminal.clearLine();
      } else {
        this.terminal.newline();
      }
    }
  };
});

// node_modules/cli-progress/lib/multi-bar.js
var require_multi_bar = __commonJS((exports, module) => {
  var _Terminal = require_terminal();
  var _BarElement = require_generic_bar();
  var _options = require_options();
  var _EventEmitter = import.meta.require("events");
  module.exports = class MultiBar extends _EventEmitter {
    constructor(options, preset) {
      super();
      this.bars = [];
      this.options = _options.parse(options, preset);
      this.options.synchronousUpdate = false;
      this.terminal = this.options.terminal ? this.options.terminal : new _Terminal(this.options.stream);
      this.timer = null;
      this.isActive = false;
      this.schedulingRate = this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule;
      this.loggingBuffer = [];
      this.sigintCallback = null;
    }
    create(total, startValue, payload, barOptions = {}) {
      const bar = new _BarElement(Object.assign({}, this.options, {
        terminal: this.terminal
      }, barOptions));
      this.bars.push(bar);
      if (this.options.noTTYOutput === false && this.terminal.isTTY() === false) {
        return bar;
      }
      if (this.sigintCallback === null && this.options.gracefulExit) {
        this.sigintCallback = this.stop.bind(this);
        process.once("SIGINT", this.sigintCallback);
        process.once("SIGTERM", this.sigintCallback);
      }
      if (!this.isActive) {
        if (this.options.hideCursor === true) {
          this.terminal.cursor(false);
        }
        if (this.options.linewrap === false) {
          this.terminal.lineWrapping(false);
        }
        this.timer = setTimeout(this.update.bind(this), this.schedulingRate);
      }
      this.isActive = true;
      bar.start(total, startValue, payload);
      this.emit("start");
      return bar;
    }
    remove(bar) {
      const index = this.bars.indexOf(bar);
      if (index < 0) {
        return false;
      }
      this.bars.splice(index, 1);
      this.update();
      this.terminal.newline();
      this.terminal.clearBottom();
      return true;
    }
    update() {
      if (this.timer) {
        clearTimeout(this.timer);
        this.timer = null;
      }
      this.emit("update-pre");
      this.terminal.cursorRelativeReset();
      this.emit("redraw-pre");
      if (this.loggingBuffer.length > 0) {
        this.terminal.clearLine();
        while (this.loggingBuffer.length > 0) {
          this.terminal.write(this.loggingBuffer.shift(), true);
        }
      }
      for (let i3 = 0;i3 < this.bars.length; i3++) {
        if (i3 > 0) {
          this.terminal.newline();
        }
        this.bars[i3].render();
      }
      this.emit("redraw-post");
      if (this.options.noTTYOutput && this.terminal.isTTY() === false) {
        this.terminal.newline();
        this.terminal.newline();
      }
      this.timer = setTimeout(this.update.bind(this), this.schedulingRate);
      this.emit("update-post");
      if (this.options.stopOnComplete && !this.bars.find((bar) => bar.isActive)) {
        this.stop();
      }
    }
    stop() {
      clearTimeout(this.timer);
      this.timer = null;
      if (this.sigintCallback) {
        process.removeListener("SIGINT", this.sigintCallback);
        process.removeListener("SIGTERM", this.sigintCallback);
        this.sigintCallback = null;
      }
      this.isActive = false;
      if (this.options.hideCursor === true) {
        this.terminal.cursor(true);
      }
      if (this.options.linewrap === false) {
        this.terminal.lineWrapping(true);
      }
      this.terminal.cursorRelativeReset();
      this.emit("stop-pre-clear");
      if (this.options.clearOnComplete) {
        this.terminal.clearBottom();
      } else {
        for (let i3 = 0;i3 < this.bars.length; i3++) {
          if (i3 > 0) {
            this.terminal.newline();
          }
          this.bars[i3].render();
          this.bars[i3].stop();
        }
        this.terminal.newline();
      }
      this.emit("stop");
    }
    log(s2) {
      this.loggingBuffer.push(s2);
    }
  };
});

// node_modules/cli-progress/presets/legacy.js
var require_legacy = __commonJS((exports, module) => {
  module.exports = {
    format: "progress [{bar}] {percentage}% | ETA: {eta}s | {value}/{total}",
    barCompleteChar: "=",
    barIncompleteChar: "-"
  };
});

// node_modules/cli-progress/presets/shades-classic.js
var require_shades_classic = __commonJS((exports, module) => {
  module.exports = {
    format: " {bar} {percentage}% | ETA: {eta}s | {value}/{total}",
    barCompleteChar: "\u2588",
    barIncompleteChar: "\u2591"
  };
});

// node_modules/cli-progress/presets/shades-grey.js
var require_shades_grey = __commonJS((exports, module) => {
  module.exports = {
    format: " \x1B[90m{bar}\x1B[0m {percentage}% | ETA: {eta}s | {value}/{total}",
    barCompleteChar: "\u2588",
    barIncompleteChar: "\u2591"
  };
});

// node_modules/cli-progress/presets/rect.js
var require_rect = __commonJS((exports, module) => {
  module.exports = {
    format: " {bar}\u25A0 {percentage}% | ETA: {eta}s | {value}/{total}",
    barCompleteChar: "\u25A0",
    barIncompleteChar: " "
  };
});

// node_modules/cli-progress/presets/index.js
var require_presets = __commonJS((exports, module) => {
  var _legacy = require_legacy();
  var _shades_classic = require_shades_classic();
  var _shades_grey = require_shades_grey();
  var _rect = require_rect();
  module.exports = {
    legacy: _legacy,
    shades_classic: _shades_classic,
    shades_grey: _shades_grey,
    rect: _rect
  };
});

// node_modules/cli-progress/cli-progress.js
var require_cli_progress = __commonJS((exports, module) => {
  var _SingleBar = require_single_bar();
  var _MultiBar = require_multi_bar();
  var _Presets = require_presets();
  var _Formatter = require_formatter();
  var _defaultFormatValue = require_format_value();
  var _defaultFormatBar = require_format_bar();
  var _defaultFormatTime = require_format_time();
  module.exports = {
    Bar: _SingleBar,
    SingleBar: _SingleBar,
    MultiBar: _MultiBar,
    Presets: _Presets,
    Format: {
      Formatter: _Formatter,
      BarFormat: _defaultFormatBar,
      ValueFormat: _defaultFormatValue,
      TimeFormat: _defaultFormatTime
    }
  };
});

// node_modules/bun-plugin-yaml/index.ts
import { readFileSync } from "fs";

// node_modules/js-yaml/dist/js-yaml.mjs
/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */
function isNothing(subject) {
  return typeof subject === "undefined" || subject === null;
}
function isObject(subject) {
  return typeof subject === "object" && subject !== null;
}
function toArray(sequence) {
  if (Array.isArray(sequence))
    return sequence;
  else if (isNothing(sequence))
    return [];
  return [sequence];
}
function extend(target, source) {
  var index, length, key, sourceKeys;
  if (source) {
    sourceKeys = Object.keys(source);
    for (index = 0, length = sourceKeys.length;index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }
  return target;
}
function repeat(string, count) {
  var result = "", cycle;
  for (cycle = 0;cycle < count; cycle += 1) {
    result += string;
  }
  return result;
}
function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}
var isNothing_1 = isNothing;
var isObject_1 = isObject;
var toArray_1 = toArray;
var repeat_1 = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1 = extend;
var common = {
  isNothing: isNothing_1,
  isObject: isObject_1,
  toArray: toArray_1,
  repeat: repeat_1,
  isNegativeZero: isNegativeZero_1,
  extend: extend_1
};
function formatError(exception, compact) {
  var where = "", message = exception.reason || "(unknown reason)";
  if (!exception.mark)
    return message;
  if (exception.mark.name) {
    where += 'in "' + exception.mark.name + '" ';
  }
  where += "(" + (exception.mark.line + 1) + ":" + (exception.mark.column + 1) + ")";
  if (!compact && exception.mark.snippet) {
    where += `

` + exception.mark.snippet;
  }
  return message + " " + where;
}
function YAMLException$1(reason, mark) {
  Error.call(this);
  this.name = "YAMLException";
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack || "";
  }
}
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;
YAMLException$1.prototype.toString = function toString(compact) {
  return this.name + ": " + formatError(this, compact);
};
var exception = YAMLException$1;
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = "";
  var tail = "";
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
  if (position - lineStart > maxHalfLength) {
    head = " ... ";
    lineStart = position - maxHalfLength + head.length;
  }
  if (lineEnd - position > maxHalfLength) {
    tail = " ...";
    lineEnd = position + maxHalfLength - tail.length;
  }
  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
    pos: position - lineStart + head.length
  };
}
function padStart(string, max) {
  return common.repeat(" ", max - string.length) + string;
}
function makeSnippet(mark, options) {
  options = Object.create(options || null);
  if (!mark.buffer)
    return null;
  if (!options.maxLength)
    options.maxLength = 79;
  if (typeof options.indent !== "number")
    options.indent = 1;
  if (typeof options.linesBefore !== "number")
    options.linesBefore = 3;
  if (typeof options.linesAfter !== "number")
    options.linesAfter = 2;
  var re = /\r?\n|\r|\0/g;
  var lineStarts = [0];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;
  while (match = re.exec(mark.buffer)) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);
    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }
  if (foundLineNo < 0)
    foundLineNo = lineStarts.length - 1;
  var result = "", i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
  for (i = 1;i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0)
      break;
    line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);
    result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + `
` + result;
  }
  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + `
`;
  result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^" + `
`;
  for (i = 1;i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length)
      break;
    line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);
    result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + `
`;
  }
  return result.replace(/\n$/, "");
}
var snippet = makeSnippet;
var TYPE_CONSTRUCTOR_OPTIONS = [
  "kind",
  "multi",
  "resolve",
  "construct",
  "instanceOf",
  "predicate",
  "represent",
  "representName",
  "defaultStyle",
  "styleAliases"
];
var YAML_NODE_KINDS = [
  "scalar",
  "sequence",
  "mapping"
];
function compileStyleAliases(map) {
  var result = {};
  if (map !== null) {
    Object.keys(map).forEach(function(style) {
      map[style].forEach(function(alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
function Type$1(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function(name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });
  this.options = options;
  this.tag = tag;
  this.kind = options["kind"] || null;
  this.resolve = options["resolve"] || function() {
    return true;
  };
  this.construct = options["construct"] || function(data) {
    return data;
  };
  this.instanceOf = options["instanceOf"] || null;
  this.predicate = options["predicate"] || null;
  this.represent = options["represent"] || null;
  this.representName = options["representName"] || null;
  this.defaultStyle = options["defaultStyle"] || null;
  this.multi = options["multi"] || false;
  this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
var type = Type$1;
function compileList(schema, name) {
  var result = [];
  schema[name].forEach(function(currentType) {
    var newIndex = result.length;
    result.forEach(function(previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
        newIndex = previousIndex;
      }
    });
    result[newIndex] = currentType;
  });
  return result;
}
function compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {},
    multi: {
      scalar: [],
      sequence: [],
      mapping: [],
      fallback: []
    }
  }, index, length;
  function collectType(type2) {
    if (type2.multi) {
      result.multi[type2.kind].push(type2);
      result.multi["fallback"].push(type2);
    } else {
      result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
    }
  }
  for (index = 0, length = arguments.length;index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}
function Schema$1(definition) {
  return this.extend(definition);
}
Schema$1.prototype.extend = function extend2(definition) {
  var implicit = [];
  var explicit = [];
  if (definition instanceof type) {
    explicit.push(definition);
  } else if (Array.isArray(definition)) {
    explicit = explicit.concat(definition);
  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    if (definition.implicit)
      implicit = implicit.concat(definition.implicit);
    if (definition.explicit)
      explicit = explicit.concat(definition.explicit);
  } else {
    throw new exception("Schema.extend argument should be a Type, [ Type ], " + "or a schema definition ({ implicit: [...], explicit: [...] })");
  }
  implicit.forEach(function(type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
    if (type$1.loadKind && type$1.loadKind !== "scalar") {
      throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
    }
    if (type$1.multi) {
      throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
    }
  });
  explicit.forEach(function(type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
  });
  var result = Object.create(Schema$1.prototype);
  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);
  result.compiledImplicit = compileList(result, "implicit");
  result.compiledExplicit = compileList(result, "explicit");
  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
  return result;
};
var schema = Schema$1;
var str = new type("tag:yaml.org,2002:str", {
  kind: "scalar",
  construct: function(data) {
    return data !== null ? data : "";
  }
});
var seq = new type("tag:yaml.org,2002:seq", {
  kind: "sequence",
  construct: function(data) {
    return data !== null ? data : [];
  }
});
var map = new type("tag:yaml.org,2002:map", {
  kind: "mapping",
  construct: function(data) {
    return data !== null ? data : {};
  }
});
var failsafe = new schema({
  explicit: [
    str,
    seq,
    map
  ]
});
function resolveYamlNull(data) {
  if (data === null)
    return true;
  var max = data.length;
  return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
}
function constructYamlNull() {
  return null;
}
function isNull(object) {
  return object === null;
}
var _null = new type("tag:yaml.org,2002:null", {
  kind: "scalar",
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function() {
      return "~";
    },
    lowercase: function() {
      return "null";
    },
    uppercase: function() {
      return "NULL";
    },
    camelcase: function() {
      return "Null";
    },
    empty: function() {
      return "";
    }
  },
  defaultStyle: "lowercase"
});
function resolveYamlBoolean(data) {
  if (data === null)
    return false;
  var max = data.length;
  return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
}
function constructYamlBoolean(data) {
  return data === "true" || data === "True" || data === "TRUE";
}
function isBoolean(object) {
  return Object.prototype.toString.call(object) === "[object Boolean]";
}
var bool = new type("tag:yaml.org,2002:bool", {
  kind: "scalar",
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function(object) {
      return object ? "true" : "false";
    },
    uppercase: function(object) {
      return object ? "TRUE" : "FALSE";
    },
    camelcase: function(object) {
      return object ? "True" : "False";
    }
  },
  defaultStyle: "lowercase"
});
function isHexCode(c) {
  return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
}
function isOctCode(c) {
  return 48 <= c && c <= 55;
}
function isDecCode(c) {
  return 48 <= c && c <= 57;
}
function resolveYamlInteger(data) {
  if (data === null)
    return false;
  var max = data.length, index = 0, hasDigits = false, ch;
  if (!max)
    return false;
  ch = data[index];
  if (ch === "-" || ch === "+") {
    ch = data[++index];
  }
  if (ch === "0") {
    if (index + 1 === max)
      return true;
    ch = data[++index];
    if (ch === "b") {
      index++;
      for (;index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (ch !== "0" && ch !== "1")
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "x") {
      index++;
      for (;index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isHexCode(data.charCodeAt(index)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "o") {
      index++;
      for (;index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isOctCode(data.charCodeAt(index)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
  }
  if (ch === "_")
    return false;
  for (;index < max; index++) {
    ch = data[index];
    if (ch === "_")
      continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }
  if (!hasDigits || ch === "_")
    return false;
  return true;
}
function constructYamlInteger(data) {
  var value = data, sign = 1, ch;
  if (value.indexOf("_") !== -1) {
    value = value.replace(/_/g, "");
  }
  ch = value[0];
  if (ch === "-" || ch === "+") {
    if (ch === "-")
      sign = -1;
    value = value.slice(1);
    ch = value[0];
  }
  if (value === "0")
    return 0;
  if (ch === "0") {
    if (value[1] === "b")
      return sign * parseInt(value.slice(2), 2);
    if (value[1] === "x")
      return sign * parseInt(value.slice(2), 16);
    if (value[1] === "o")
      return sign * parseInt(value.slice(2), 8);
  }
  return sign * parseInt(value, 10);
}
function isInteger(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
}
var int = new type("tag:yaml.org,2002:int", {
  kind: "scalar",
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function(obj) {
      return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
    },
    octal: function(obj) {
      return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
    },
    decimal: function(obj) {
      return obj.toString(10);
    },
    hexadecimal: function(obj) {
      return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: "decimal",
  styleAliases: {
    binary: [2, "bin"],
    octal: [8, "oct"],
    decimal: [10, "dec"],
    hexadecimal: [16, "hex"]
  }
});
var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?" + "|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?" + "|[-+]?\\.(?:inf|Inf|INF)" + "|\\.(?:nan|NaN|NAN))$");
function resolveYamlFloat(data) {
  if (data === null)
    return false;
  if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  var value, sign;
  value = data.replace(/_/g, "").toLowerCase();
  sign = value[0] === "-" ? -1 : 1;
  if ("+-".indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === ".inf") {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === ".nan") {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object, style) {
  var res;
  if (isNaN(object)) {
    switch (style) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  } else if (common.isNegativeZero(object)) {
    return "-0.0";
  }
  res = object.toString(10);
  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
}
function isFloat(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
}
var float = new type("tag:yaml.org,2002:float", {
  kind: "scalar",
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: "lowercase"
});
var json = failsafe.extend({
  implicit: [
    _null,
    bool,
    int,
    float
  ]
});
var core = json;
var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])" + "-([0-9][0-9])" + "-([0-9][0-9])$");
var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])" + "-([0-9][0-9]?)" + "-([0-9][0-9]?)" + "(?:[Tt]|[ \\t]+)" + "([0-9][0-9]?)" + ":([0-9][0-9])" + ":([0-9][0-9])" + "(?:\\.([0-9]*))?" + "(?:[ \\t]*(Z|([-+])([0-9][0-9]?)" + "(?::([0-9][0-9]))?))?$");
function resolveYamlTimestamp(data) {
  if (data === null)
    return false;
  if (YAML_DATE_REGEXP.exec(data) !== null)
    return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
    return true;
  return false;
}
function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null)
    match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null)
    throw new Error("Date resolve error");
  year = +match[1];
  month = +match[2] - 1;
  day = +match[3];
  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }
  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      fraction += "0";
    }
    fraction = +fraction;
  }
  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000;
    if (match[9] === "-")
      delta = -delta;
  }
  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta)
    date.setTime(date.getTime() - delta);
  return date;
}
function representYamlTimestamp(object) {
  return object.toISOString();
}
var timestamp = new type("tag:yaml.org,2002:timestamp", {
  kind: "scalar",
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});
function resolveYamlMerge(data) {
  return data === "<<" || data === null;
}
var merge = new type("tag:yaml.org,2002:merge", {
  kind: "scalar",
  resolve: resolveYamlMerge
});
var BASE64_MAP = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;
function resolveYamlBinary(data) {
  if (data === null)
    return false;
  var code, idx, bitlen = 0, max = data.length, map2 = BASE64_MAP;
  for (idx = 0;idx < max; idx++) {
    code = map2.indexOf(data.charAt(idx));
    if (code > 64)
      continue;
    if (code < 0)
      return false;
    bitlen += 6;
  }
  return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
  var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map2 = BASE64_MAP, bits = 0, result = [];
  for (idx = 0;idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    }
    bits = bits << 6 | map2.indexOf(input.charAt(idx));
  }
  tailbits = max % 4 * 6;
  if (tailbits === 0) {
    result.push(bits >> 16 & 255);
    result.push(bits >> 8 & 255);
    result.push(bits & 255);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 255);
    result.push(bits >> 2 & 255);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 255);
  }
  return new Uint8Array(result);
}
function representYamlBinary(object) {
  var result = "", bits = 0, idx, tail, max = object.length, map2 = BASE64_MAP;
  for (idx = 0;idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map2[bits >> 18 & 63];
      result += map2[bits >> 12 & 63];
      result += map2[bits >> 6 & 63];
      result += map2[bits & 63];
    }
    bits = (bits << 8) + object[idx];
  }
  tail = max % 3;
  if (tail === 0) {
    result += map2[bits >> 18 & 63];
    result += map2[bits >> 12 & 63];
    result += map2[bits >> 6 & 63];
    result += map2[bits & 63];
  } else if (tail === 2) {
    result += map2[bits >> 10 & 63];
    result += map2[bits >> 4 & 63];
    result += map2[bits << 2 & 63];
    result += map2[64];
  } else if (tail === 1) {
    result += map2[bits >> 2 & 63];
    result += map2[bits << 4 & 63];
    result += map2[64];
    result += map2[64];
  }
  return result;
}
function isBinary(obj) {
  return Object.prototype.toString.call(obj) === "[object Uint8Array]";
}
var binary = new type("tag:yaml.org,2002:binary", {
  kind: "scalar",
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});
var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2 = Object.prototype.toString;
function resolveYamlOmap(data) {
  if (data === null)
    return true;
  var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
  for (index = 0, length = object.length;index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString$2.call(pair) !== "[object Object]")
      return false;
    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey)
          pairHasKey = true;
        else
          return false;
      }
    }
    if (!pairHasKey)
      return false;
    if (objectKeys.indexOf(pairKey) === -1)
      objectKeys.push(pairKey);
    else
      return false;
  }
  return true;
}
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
var omap = new type("tag:yaml.org,2002:omap", {
  kind: "sequence",
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});
var _toString$1 = Object.prototype.toString;
function resolveYamlPairs(data) {
  if (data === null)
    return true;
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length;index < length; index += 1) {
    pair = object[index];
    if (_toString$1.call(pair) !== "[object Object]")
      return false;
    keys = Object.keys(pair);
    if (keys.length !== 1)
      return false;
    result[index] = [keys[0], pair[keys[0]]];
  }
  return true;
}
function constructYamlPairs(data) {
  if (data === null)
    return [];
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length;index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }
  return result;
}
var pairs = new type("tag:yaml.org,2002:pairs", {
  kind: "sequence",
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});
var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function resolveYamlSet(data) {
  if (data === null)
    return true;
  var key, object = data;
  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null)
        return false;
    }
  }
  return true;
}
function constructYamlSet(data) {
  return data !== null ? data : {};
}
var set = new type("tag:yaml.org,2002:set", {
  kind: "mapping",
  resolve: resolveYamlSet,
  construct: constructYamlSet
});
var _default = core.extend({
  implicit: [
    timestamp,
    merge
  ],
  explicit: [
    binary,
    omap,
    pairs,
    set
  ]
});
var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function is_EOL(c) {
  return c === 10 || c === 13;
}
function is_WHITE_SPACE(c) {
  return c === 9 || c === 32;
}
function is_WS_OR_EOL(c) {
  return c === 9 || c === 32 || c === 10 || c === 13;
}
function is_FLOW_INDICATOR(c) {
  return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
}
function fromHexCode(c) {
  var lc;
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  lc = c | 32;
  if (97 <= lc && lc <= 102) {
    return lc - 97 + 10;
  }
  return -1;
}
function escapedHexLen(c) {
  if (c === 120) {
    return 2;
  }
  if (c === 117) {
    return 4;
  }
  if (c === 85) {
    return 8;
  }
  return 0;
}
function fromDecimalCode(c) {
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  return -1;
}
function simpleEscapeSequence(c) {
  return c === 48 ? "\x00" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "\t" : c === 9 ? "\t" : c === 110 ? `
` : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
}
function charFromCodepoint(c) {
  if (c <= 65535) {
    return String.fromCharCode(c);
  }
  return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
}
var simpleEscapeCheck = new Array(256);
var simpleEscapeMap = new Array(256);
for (i = 0;i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}
var i;
function State$1(input, options) {
  this.input = input;
  this.filename = options["filename"] || null;
  this.schema = options["schema"] || _default;
  this.onWarning = options["onWarning"] || null;
  this.legacy = options["legacy"] || false;
  this.json = options["json"] || false;
  this.listener = options["listener"] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.firstTabInLine = -1;
  this.documents = [];
}
function generateError(state, message) {
  var mark = {
    name: state.filename,
    buffer: state.input.slice(0, -1),
    position: state.position,
    line: state.line,
    column: state.position - state.lineStart
  };
  mark.snippet = snippet(mark);
  return new exception(message, mark);
}
function throwError(state, message) {
  throw generateError(state, message);
}
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor;
    if (state.version !== null) {
      throwError(state, "duplication of %YAML directive");
    }
    if (args.length !== 1) {
      throwError(state, "YAML directive accepts exactly one argument");
    }
    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
    if (match === null) {
      throwError(state, "ill-formed argument of the YAML directive");
    }
    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);
    if (major !== 1) {
      throwError(state, "unacceptable YAML version of the document");
    }
    state.version = args[0];
    state.checkLineBreaks = minor < 2;
    if (minor !== 1 && minor !== 2) {
      throwWarning(state, "unsupported YAML version of the document");
    }
  },
  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix;
    if (args.length !== 2) {
      throwError(state, "TAG directive accepts exactly two arguments");
    }
    handle = args[0];
    prefix = args[1];
    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
    }
    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }
    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
    }
    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, "tag prefix is malformed: " + prefix);
    }
    state.tagMap[handle] = prefix;
  }
};
function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;
  if (start < end) {
    _result = state.input.slice(start, end);
    if (checkJson) {
      for (_position = 0, _length = _result.length;_position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
          throwError(state, "expected valid JSON character");
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, "the stream contains non-printable characters");
    }
    state.result += _result;
  }
}
function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;
  if (!common.isObject(source)) {
    throwError(state, "cannot merge mappings; the provided source object is unacceptable");
  }
  sourceKeys = Object.keys(source);
  for (index = 0, quantity = sourceKeys.length;index < quantity; index += 1) {
    key = sourceKeys[index];
    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
  var index, quantity;
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (index = 0, quantity = keyNode.length;index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, "nested arrays are not supported inside keys");
      }
      if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
        keyNode[index] = "[object Object]";
      }
    }
  }
  if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
    keyNode = "[object Object]";
  }
  keyNode = String(keyNode);
  if (_result === null) {
    _result = {};
  }
  if (keyTag === "tag:yaml.org,2002:merge") {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length;index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, "duplicated mapping key");
    }
    if (keyNode === "__proto__") {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }
  return _result;
}
function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 10) {
    state.position++;
  } else if (ch === 13) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 10) {
      state.position++;
    }
  } else {
    throwError(state, "a line break is expected");
  }
  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 9 && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 10 && ch !== 13 && ch !== 0);
    }
    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, "deficient indentation");
  }
  return lineBreaks;
}
function testDocumentSeparator(state) {
  var _position = state.position, ch;
  ch = state.input.charCodeAt(_position);
  if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }
  return false;
}
function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += " ";
  } else if (count > 1) {
    state.result += common.repeat(`
`, count - 1);
  }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
  ch = state.input.charCodeAt(state.position);
  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
    return false;
  }
  if (ch === 63 || ch === 45) {
    following = state.input.charCodeAt(state.position + 1);
    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }
  state.kind = "scalar";
  state.result = "";
  captureStart = captureEnd = state.position;
  hasPendingContent = false;
  while (ch !== 0) {
    if (ch === 58) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 35) {
      preceding = state.input.charCodeAt(state.position - 1);
      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = _kind;
  state.result = _result;
  return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 39) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 39) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 39) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a single quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a single quoted scalar");
}
function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 34) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 34) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 92) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;
        for (;hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, "expected hexadecimal character");
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, "unknown escape sequence");
      }
      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a double quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a double quoted scalar");
}
function readFlowCollection(state, nodeIndent) {
  var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = Object.create(null), keyNode, keyTag, valueNode, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 91) {
    terminator = 93;
    isMapping = false;
    _result = [];
  } else if (ch === 123) {
    terminator = 125;
    isMapping = true;
    _result = {};
  } else {
    return false;
  }
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(++state.position);
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? "mapping" : "sequence";
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, "missed comma between flow collection entries");
    } else if (ch === 44) {
      throwError(state, "expected the node content, but found ','");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 63) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    _line = state.line;
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === _line) && ch === 58) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 44) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  throwError(state, "unexpected end of the stream within a flow collection");
}
function readBlockScalar(state, nodeIndent) {
  var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 124) {
    folding = false;
  } else if (ch === 62) {
    folding = true;
  } else {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 43 || ch === 45) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, "repeat of a chomping mode identifier");
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, "repeat of an indentation width identifier");
      }
    } else {
      break;
    }
  }
  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));
    if (ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }
    if (state.lineIndent < textIndent) {
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat(`
`, didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          state.result += `
`;
        }
      }
      break;
    }
    if (folding) {
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        state.result += common.repeat(`
`, didReadContent ? 1 + emptyLines : emptyLines);
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat(`
`, emptyLines + 1);
      } else if (emptyLines === 0) {
        if (didReadContent) {
          state.result += " ";
        }
      } else {
        state.result += common.repeat(`
`, emptyLines);
      }
    } else {
      state.result += common.repeat(`
`, didReadContent ? 1 + emptyLines : emptyLines);
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;
    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
function readBlockSequence(state, nodeIndent) {
  var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
  if (state.firstTabInLine !== -1)
    return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    if (ch !== 45) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!is_WS_OR_EOL(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a sequence entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "sequence";
    state.result = _result;
    return true;
  }
  return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
  var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
  if (state.firstTabInLine !== -1)
    return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line;
    if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
      if (ch === 63) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
      }
      state.position += 1;
      ch = following;
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;
      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        break;
      }
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 58) {
          ch = state.input.charCodeAt(++state.position);
          if (!is_WS_OR_EOL(ch)) {
            throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
          }
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, "can not read an implicit mapping pair; a colon is missed");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else if (detected) {
        throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true;
      }
    }
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a mapping entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "mapping";
    state.result = _result;
  }
  return detected;
}
function readTagProperty(state) {
  var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 33)
    return false;
  if (state.tag !== null) {
    throwError(state, "duplication of a tag property");
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 60) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 33) {
    isNamed = true;
    tagHandle = "!!";
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = "!";
  }
  _position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 62);
    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, "unexpected end of the stream within a verbatim tag");
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 33) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, "named tag handle cannot contain such characters");
          }
          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, "tag suffix cannot contain exclamation marks");
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(_position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, "tag suffix cannot contain flow indicator characters");
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, "tag name cannot contain such characters: " + tagName);
  }
  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, "tag name is malformed: " + tagName);
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === "!") {
    state.tag = "!" + tagName;
  } else if (tagHandle === "!!") {
    state.tag = "tag:yaml.org,2002:" + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }
  return true;
}
function readAnchorProperty(state) {
  var _position, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 38)
    return false;
  if (state.anchor !== null) {
    throwError(state, "duplication of an anchor property");
  }
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an anchor node must contain at least one character");
  }
  state.anchor = state.input.slice(_position, state.position);
  return true;
}
function readAlias(state) {
  var _position, alias, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 42)
    return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an alias node must contain at least one character");
  }
  alias = state.input.slice(_position, state.position);
  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }
  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type2, flowIndent, blockIndent;
  if (state.listener !== null) {
    state.listener("open", state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            throwError(state, "alias node should not have any properties");
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = "?";
          }
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }
  } else if (state.tag === "?") {
    if (state.result !== null && state.kind !== "scalar") {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }
    for (typeIndex = 0, typeQuantity = state.implicitTypes.length;typeIndex < typeQuantity; typeIndex += 1) {
      type2 = state.implicitTypes[typeIndex];
      if (type2.resolve(state.result)) {
        state.result = type2.construct(state.result);
        state.tag = type2.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== "!") {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
      type2 = state.typeMap[state.kind || "fallback"][state.tag];
    } else {
      type2 = null;
      typeList = state.typeMap.multi[state.kind || "fallback"];
      for (typeIndex = 0, typeQuantity = typeList.length;typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type2 = typeList[typeIndex];
          break;
        }
      }
    }
    if (!type2) {
      throwError(state, "unknown tag !<" + state.tag + ">");
    }
    if (state.result !== null && type2.kind !== state.kind) {
      throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
    }
    if (!type2.resolve(state.result, state.tag)) {
      throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
    } else {
      state.result = type2.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }
  if (state.listener !== null) {
    state.listener("close", state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
  var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = Object.create(null);
  state.anchorMap = Object.create(null);
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 37) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      throwError(state, "directive name must not be less than one character in length");
    }
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));
        break;
      }
      if (is_EOL(ch))
        break;
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(_position, state.position));
    }
    if (ch !== 0)
      readLineBreak(state);
    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, "directives end mark is expected");
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, "non-ASCII line breaks are interpreted as content");
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 46) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    throwError(state, "end of the stream or a document separator is expected");
  } else {
    return;
  }
}
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
      input += `
`;
    }
    if (input.charCodeAt(0) === 65279) {
      input = input.slice(1);
    }
  }
  var state = new State$1(input, options);
  var nullpos = input.indexOf("\x00");
  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, "null byte is not allowed in input");
  }
  state.input += "\x00";
  while (state.input.charCodeAt(state.position) === 32) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
function loadAll$1(input, iterator, options) {
  if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
    options = iterator;
    iterator = null;
  }
  var documents = loadDocuments(input, options);
  if (typeof iterator !== "function") {
    return documents;
  }
  for (var index = 0, length = documents.length;index < length; index += 1) {
    iterator(documents[index]);
  }
}
function load$1(input, options) {
  var documents = loadDocuments(input, options);
  if (documents.length === 0) {
    return;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception("expected a single document in the stream, but found more");
}
var loadAll_1 = loadAll$1;
var load_1 = load$1;
var loader = {
  loadAll: loadAll_1,
  load: load_1
};
var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_BOM = 65279;
var CHAR_TAB = 9;
var CHAR_LINE_FEED = 10;
var CHAR_CARRIAGE_RETURN = 13;
var CHAR_SPACE = 32;
var CHAR_EXCLAMATION = 33;
var CHAR_DOUBLE_QUOTE = 34;
var CHAR_SHARP = 35;
var CHAR_PERCENT = 37;
var CHAR_AMPERSAND = 38;
var CHAR_SINGLE_QUOTE = 39;
var CHAR_ASTERISK = 42;
var CHAR_COMMA = 44;
var CHAR_MINUS = 45;
var CHAR_COLON = 58;
var CHAR_EQUALS = 61;
var CHAR_GREATER_THAN = 62;
var CHAR_QUESTION = 63;
var CHAR_COMMERCIAL_AT = 64;
var CHAR_LEFT_SQUARE_BRACKET = 91;
var CHAR_RIGHT_SQUARE_BRACKET = 93;
var CHAR_GRAVE_ACCENT = 96;
var CHAR_LEFT_CURLY_BRACKET = 123;
var CHAR_VERTICAL_LINE = 124;
var CHAR_RIGHT_CURLY_BRACKET = 125;
var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0] = "\\0";
ESCAPE_SEQUENCES[7] = "\\a";
ESCAPE_SEQUENCES[8] = "\\b";
ESCAPE_SEQUENCES[9] = "\\t";
ESCAPE_SEQUENCES[10] = "\\n";
ESCAPE_SEQUENCES[11] = "\\v";
ESCAPE_SEQUENCES[12] = "\\f";
ESCAPE_SEQUENCES[13] = "\\r";
ESCAPE_SEQUENCES[27] = "\\e";
ESCAPE_SEQUENCES[34] = "\\\"";
ESCAPE_SEQUENCES[92] = "\\\\";
ESCAPE_SEQUENCES[133] = "\\N";
ESCAPE_SEQUENCES[160] = "\\_";
ESCAPE_SEQUENCES[8232] = "\\L";
ESCAPE_SEQUENCES[8233] = "\\P";
var DEPRECATED_BOOLEANS_SYNTAX = [
  "y",
  "Y",
  "yes",
  "Yes",
  "YES",
  "on",
  "On",
  "ON",
  "n",
  "N",
  "no",
  "No",
  "NO",
  "off",
  "Off",
  "OFF"
];
var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
function compileStyleMap(schema2, map2) {
  var result, keys, index, length, tag, style, type2;
  if (map2 === null)
    return {};
  result = {};
  keys = Object.keys(map2);
  for (index = 0, length = keys.length;index < length; index += 1) {
    tag = keys[index];
    style = String(map2[tag]);
    if (tag.slice(0, 2) === "!!") {
      tag = "tag:yaml.org,2002:" + tag.slice(2);
    }
    type2 = schema2.compiledTypeMap["fallback"][tag];
    if (type2 && _hasOwnProperty.call(type2.styleAliases, style)) {
      style = type2.styleAliases[style];
    }
    result[tag] = style;
  }
  return result;
}
function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();
  if (character <= 255) {
    handle = "x";
    length = 2;
  } else if (character <= 65535) {
    handle = "u";
    length = 4;
  } else if (character <= 4294967295) {
    handle = "U";
    length = 8;
  } else {
    throw new exception("code point within a string may not be greater than 0xFFFFFFFF");
  }
  return "\\" + handle + common.repeat("0", length - string.length) + string;
}
var QUOTING_TYPE_SINGLE = 1;
var QUOTING_TYPE_DOUBLE = 2;
function State(options) {
  this.schema = options["schema"] || _default;
  this.indent = Math.max(1, options["indent"] || 2);
  this.noArrayIndent = options["noArrayIndent"] || false;
  this.skipInvalid = options["skipInvalid"] || false;
  this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
  this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
  this.sortKeys = options["sortKeys"] || false;
  this.lineWidth = options["lineWidth"] || 80;
  this.noRefs = options["noRefs"] || false;
  this.noCompatMode = options["noCompatMode"] || false;
  this.condenseFlow = options["condenseFlow"] || false;
  this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes = options["forceQuotes"] || false;
  this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = "";
  this.duplicates = [];
  this.usedDuplicates = null;
}
function indentString(string, spaces) {
  var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
  while (position < length) {
    next = string.indexOf(`
`, position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }
    if (line.length && line !== `
`)
      result += ind;
    result += line;
  }
  return result;
}
function generateNextLine(state, level) {
  return `
` + common.repeat(" ", state.indent * level);
}
function testImplicitResolving(state, str2) {
  var index, length, type2;
  for (index = 0, length = state.implicitTypes.length;index < length; index += 1) {
    type2 = state.implicitTypes[index];
    if (type2.resolve(str2)) {
      return true;
    }
  }
  return false;
}
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}
function isPrintable(c) {
  return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
}
function isNsCharOrWhitespace(c) {
  return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar;
}
function isPlainSafeFirst(c) {
  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}
function isPlainSafeLast(c) {
  return !isWhitespace(c) && c !== CHAR_COLON;
}
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 56320 && second <= 57343) {
      return (first - 55296) * 1024 + second - 56320 + 65536;
    }
  }
  return first;
}
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}
var STYLE_PLAIN = 1;
var STYLE_SINGLE = 2;
var STYLE_LITERAL = 3;
var STYLE_FOLDED = 4;
var STYLE_DOUBLE = 5;
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false;
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1;
  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
  if (singleLineOnly || forceQuotes) {
    for (i = 0;i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    for (i = 0;i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
  }
  if (!hasLineBreak && !hasFoldableLine) {
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = function() {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
      }
    }
    var indent = state.indent * Math.max(1, level);
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
    var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string2) {
      return testImplicitResolving(state, string2);
    }
    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception("impossible error: invalid scalar style");
    }
  }();
}
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
  var clip = string[string.length - 1] === `
`;
  var keep = clip && (string[string.length - 2] === `
` || string === `
`);
  var chomp = keep ? "+" : clip ? "" : "-";
  return indentIndicator + chomp + `
`;
}
function dropEndingNewline(string) {
  return string[string.length - 1] === `
` ? string.slice(0, -1) : string;
}
function foldString(string, width) {
  var lineRe = /(\n+)([^\n]*)/g;
  var result = function() {
    var nextLF = string.indexOf(`
`);
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }();
  var prevMoreIndented = string[0] === `
` || string[0] === " ";
  var moreIndented;
  var match;
  while (match = lineRe.exec(string)) {
    var prefix = match[1], line = match[2];
    moreIndented = line[0] === " ";
    result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? `
` : "") + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }
  return result;
}
function foldLine(line, width) {
  if (line === "" || line[0] === " ")
    return line;
  var breakRe = / [^ ]/g;
  var match;
  var start = 0, end, curr = 0, next = 0;
  var result = "";
  while (match = breakRe.exec(line)) {
    next = match.index;
    if (next - start > width) {
      end = curr > start ? curr : next;
      result += `
` + line.slice(start, end);
      start = end + 1;
    }
    curr = next;
  }
  result += `
`;
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + `
` + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }
  return result.slice(1);
}
function escapeString(string) {
  var result = "";
  var char = 0;
  var escapeSeq;
  for (var i = 0;i < string.length; char >= 65536 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];
    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 65536)
        result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }
  return result;
}
function writeFlowSequence(state, level, object) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length;index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
      if (_result !== "")
        _result += "," + (!state.condenseFlow ? " " : "");
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = "[" + _result + "]";
}
function writeBlockSequence(state, level, object, compact) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length;index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
      if (!compact || _result !== "") {
        _result += generateNextLine(state, level);
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += "-";
      } else {
        _result += "- ";
      }
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = _result || "[]";
}
function writeFlowMapping(state, level, object) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
  for (index = 0, length = objectKeyList.length;index < length; index += 1) {
    pairBuffer = "";
    if (_result !== "")
      pairBuffer += ", ";
    if (state.condenseFlow)
      pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level, objectKey, false, false)) {
      continue;
    }
    if (state.dump.length > 1024)
      pairBuffer += "? ";
    pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
    if (!writeNode(state, level, objectValue, false, false)) {
      continue;
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = "{" + _result + "}";
}
function writeBlockMapping(state, level, object, compact) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
  if (state.sortKeys === true) {
    objectKeyList.sort();
  } else if (typeof state.sortKeys === "function") {
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    throw new exception("sortKeys must be a boolean or a function");
  }
  for (index = 0, length = objectKeyList.length;index < length; index += 1) {
    pairBuffer = "";
    if (!compact || _result !== "") {
      pairBuffer += generateNextLine(state, level);
    }
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue;
    }
    explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += "?";
      } else {
        pairBuffer += "? ";
      }
    }
    pairBuffer += state.dump;
    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }
    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue;
    }
    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ":";
    } else {
      pairBuffer += ": ";
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = _result || "{}";
}
function detectType(state, object, explicit) {
  var _result, typeList, index, length, type2, style;
  typeList = explicit ? state.explicitTypes : state.implicitTypes;
  for (index = 0, length = typeList.length;index < length; index += 1) {
    type2 = typeList[index];
    if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object === "object" && object instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object))) {
      if (explicit) {
        if (type2.multi && type2.representName) {
          state.tag = type2.representName(object);
        } else {
          state.tag = type2.tag;
        }
      } else {
        state.tag = "?";
      }
      if (type2.represent) {
        style = state.styleMap[type2.tag] || type2.defaultStyle;
        if (_toString.call(type2.represent) === "[object Function]") {
          _result = type2.represent(object, style);
        } else if (_hasOwnProperty.call(type2.represent, style)) {
          _result = type2.represent[style](object, style);
        } else {
          throw new exception("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
        }
        state.dump = _result;
      }
      return true;
    }
  }
  return false;
}
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;
  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }
  var type2 = _toString.call(state.dump);
  var inblock = block;
  var tagStr;
  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }
  var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }
  if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }
  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = "*ref_" + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type2 === "[object Object]") {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object Array]") {
      if (block && state.dump.length !== 0) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object String]") {
      if (state.tag !== "?") {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type2 === "[object Undefined]") {
      return false;
    } else {
      if (state.skipInvalid)
        return false;
      throw new exception("unacceptable kind of an object to dump " + type2);
    }
    if (state.tag !== null && state.tag !== "?") {
      tagStr = encodeURI(state.tag[0] === "!" ? state.tag.slice(1) : state.tag).replace(/!/g, "%21");
      if (state.tag[0] === "!") {
        tagStr = "!" + tagStr;
      } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
        tagStr = "!!" + tagStr.slice(18);
      } else {
        tagStr = "!<" + tagStr + ">";
      }
      state.dump = tagStr + " " + state.dump;
    }
  }
  return true;
}
function getDuplicateReferences(object, state) {
  var objects = [], duplicatesIndexes = [], index, length;
  inspectNode(object, objects, duplicatesIndexes);
  for (index = 0, length = duplicatesIndexes.length;index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}
function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;
  if (object !== null && typeof object === "object") {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);
      if (Array.isArray(object)) {
        for (index = 0, length = object.length;index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);
        for (index = 0, length = objectKeyList.length;index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}
function dump$1(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs)
    getDuplicateReferences(input, state);
  var value = input;
  if (state.replacer) {
    value = state.replacer.call({ "": value }, "", value);
  }
  if (writeNode(state, 0, value, true, true))
    return state.dump + `
`;
  return "";
}
var dump_1 = dump$1;
var dumper = {
  dump: dump_1
};
function renamed(from, to) {
  return function() {
    throw new Error("Function yaml." + from + " is removed in js-yaml 4. " + "Use yaml." + to + " instead, which is now safe by default.");
  };
}
var load = loader.load;
var loadAll = loader.loadAll;
var dump = dumper.dump;
var safeLoad = renamed("safeLoad", "load");
var safeLoadAll = renamed("safeLoadAll", "loadAll");
var safeDump = renamed("safeDump", "dump");

// node_modules/bun-plugin-yaml/index.ts
function YamlPlugin() {
  return {
    name: "bun-plugin-yaml",
    setup(builder) {
      builder.onLoad({ filter: /\.(yaml|yml)$/ }, (args) => {
        const text = readFileSync(args.path, "utf8");
        const exports = load(text);
        return {
          exports,
          loader: "object"
        };
      });
    }
  };
}
var bun_plugin_yaml_default = YamlPlugin;

// src/commands/build.ts
import { join as join24 } from "path";
import { cwd as cwd8 } from "process";

// node_modules/@atlas-viewer/iiif-image-api/dist/esm-node/index.node.mjs
import Qi from "node-fetch";
function p(e) {
  return e.endsWith("info.json") ? e : e.endsWith("/") ? `${e}info.json` : `${e}/info.json`;
}
var ei = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
var O = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
var z = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
var ti = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
var A = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
var E = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
var ni = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
var b = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
var L = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
var ri = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
var M = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
var W = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
var si = "http://iiif.io/api/image/1/level0.json";
var ai = "http://iiif.io/api/image/1/profiles/level0.json";
var j = "http://iiif.io/api/image/1/level1.json";
var $ = "http://iiif.io/api/image/1/profiles/level1.json";
var C = "http://iiif.io/api/image/1/level2.json";
var P = "http://iiif.io/api/image/1/profiles/level2.json";
var oi = "http://iiif.io/api/image/2/level0.json";
var fi = "http://iiif.io/api/image/2/profiles/level0.json";
var B = "http://iiif.io/api/image/2/level1.json";
var N = "http://iiif.io/api/image/2/profiles/level1.json";
var R = "http://iiif.io/api/image/2/level2.json";
var H = "http://iiif.io/api/image/2/profiles/level2.json";
var li = "level0";
var T = "level1";
var G = "level2";
var hi = "http://iiif.io/api/image/2/level0";
var k = "http://iiif.io/api/image/2/level1";
var Q = "http://iiif.io/api/image/2/level2";
var V = [Q, z, E, L, W, C, P, R, H, G];
var D = [...V, k, O, A, b, M, j, $, B, N, T];
var U = [hi, k, Q, ei, O, z, ti, A, E, ni, b, L, ri, M, W, si, ai, j, $, C, P, oi, fi, B, N, R, H, li, T, G];
var ui = { extraFormats: ["jpg"], extraQualities: ["default"], extraFeatures: ["sizeByWhListed"] };
var ci = { extraFormats: ["jpg"], extraQualities: ["default"], extraFeatures: ["baseUriRedirect", "cors", "jsonldMediaType", "regionByPx", "regionSquare", "sizeByWhListed", "sizeByH", "sizeByW", "sizeByWh"] };
var di = { extraFormats: ["jpg", "png"], extraQualities: ["default"], extraFeatures: ["baseUriRedirect", "cors", "jsonldMediaType", "regionByPct", "regionByPx", "regionSquare", "rotationBy90s", "sizeByWhListed", "sizeByConfinedWh", "sizeByH", "sizeByPct", "sizeByW", "sizeByWh"] };
function gi(e) {
  return V.indexOf(e) !== -1 ? di : D.indexOf(e) !== -1 ? ci : ui;
}
function Z(e) {
  const i = e ? Array.isArray(e.profile) ? e.profile : [e.profile] : [], t = { extraQualities: [], extraFormats: [], extraFeatures: [] };
  for (let n of i)
    if (typeof n == "string" && (n = gi(n)), !!n) {
      if (n.formats)
        for (const r of n.formats)
          t.extraFormats.indexOf(r) === -1 && t.extraFormats.push(r);
      if (n.qualities)
        for (const r of n.qualities)
          t.extraQualities.indexOf(r) === -1 && t.extraQualities.push(r);
      if (n.supports)
        for (const r of n.supports)
          t.extraFeatures.indexOf(r) === -1 && t.extraFeatures.push(r);
      if (n.maxHeight && (t.maxHeight = n.maxHeight), n.maxWidth && (t.maxWidth = n.maxWidth), n.maxArea && (t.maxArea = n.maxArea), n.extraFormats)
        for (const r of n.extraFormats)
          t.extraFormats.indexOf(r) === -1 && t.extraFormats.push(r);
      if (n.extraQualities)
        for (const r of n.extraQualities)
          t.extraQualities.indexOf(r) === -1 && t.extraQualities.push(r);
      if (n.extraFeatures)
        for (const r of n.extraFeatures)
          t.extraFeatures.indexOf(r) === -1 && t.extraFeatures.push(r);
      n.maxHeight && (t.maxHeight = n.maxHeight), n.maxWidth && (t.maxWidth = n.maxWidth), n.maxArea && (t.maxArea = n.maxArea);
    }
  if (e.extraFormats)
    for (const n of e.extraFormats)
      t.extraFormats.indexOf(n) === -1 && t.extraFormats.push(n);
  if (e.extraFeatures)
    for (const n of e.extraFeatures)
      t.extraFeatures.indexOf(n) === -1 && t.extraFeatures.push(n);
  if (e.extraQualities)
    for (const n of e.extraQualities)
      t.extraQualities.indexOf(n) === -1 && t.extraQualities.push(n);
  return t;
}
function pi(e) {
  try {
    if (e === "full")
      return { full: true };
    if (e === "square")
      return { square: true };
    const i = e.startsWith("pct:"), n = e.substr(i ? 4 : 0).split(",").map((r) => parseFloat(r));
    return { x: n[0], y: n[1], w: n[2], h: n[3], percent: i };
  } catch {
    throw new Error("Expected 'full', 'square' or 'x,y,w,h'. Found " + e);
  }
}
function mi(e) {
  const i = { upscaled: false, max: false, confined: false };
  if (e[0] === "^" && (i.upscaled = true, e = e.slice(1)), e === "max" || e === "full")
    return i.max = true, i.serialiseAsFull = e === "full", i;
  if (e[0] === "!" && (i.confined = true, e = e.slice(1)), e[0] === "p")
    return i.percentScale = parseFloat(e.slice(4)), i;
  const t = e.split(",").map((n) => n.trim());
  return t.length && (t[0] !== "" && (i.width = parseInt(t[0], 10)), t[1] !== "" ? (i.height = parseInt(t[1], 10), i.version = 2) : i.version = 3), i;
}
function xi(e) {
  const i = { angle: 0 };
  if (e[0] === "!" && (i.mirror = true, e = e.substr(1)), i.angle = parseFloat(e) % 360, Number.isNaN(i.angle))
    throw new Error(`Invalid rotation ${e}`);
  return i;
}
function Ii(e, i = "") {
  const t = e.match(/^(([a-zA-Z]+):\/\/([^/]+))?((.*)+)/);
  if (!t)
    throw new Error(`Invalid or unknown input ${e}`);
  const n = t[2], r = t[3];
  let s = t[4];
  if (s[0] === "/" && (s = s.substr(1)), i.length > 0) {
    if (i[0] === "/" && (i = i.substr(1)), i !== s.substr(0, i.length))
      throw new Error(`Path does not start with prefix (path: ${s}, prefix: ${i})`);
    s = s.substr(i.length);
  }
  return { scheme: n, server: r, path: s, prefix: i };
}
function yi(e, i = "") {
  const { path: t, scheme: n, server: r, prefix: s } = Ii(e, i), a = t.split("/").reverse(), [o, f, c, l, ...d] = a, g = d.reverse().filter(Boolean).join("/");
  if (a.length === 1 || o === "")
    return { type: "base", scheme: n, server: r, prefix: s, identifier: g };
  if (o === "info.json") {
    const [, ...u] = a;
    return { type: "info", scheme: n, server: r, prefix: s, identifier: u.reverse().filter(Boolean).join("/") };
  }
  const m = o.split(".");
  return { type: "image", scheme: n, server: r, prefix: s, identifier: g, originalPath: t, region: pi(l), size: mi(c), rotation: xi(f), quality: m[0], format: m[1] };
}
function _i(e) {
  const i = yi(p(e.id));
  if (i.type !== "info")
    throw new Error("Invalid service URL");
  const t = Z(e);
  return { identifier: i.identifier, originalPath: "", server: i.server, prefix: i.prefix, scheme: i.scheme, type: "image", quality: t.extraQualities.indexOf("default") === -1 ? t.extraQualities[0] : "default", region: { full: true }, size: { max: true, upscaled: false, confined: false }, format: "jpg", rotation: { angle: 0 } };
}
function wi(e, i, t) {
  const n = t.length, r = [];
  for (let s = 0;s < n; s++) {
    const o = t[s].width;
    r.push(e / o);
  }
  return r;
}
function Si(e, i, t) {
  const n = t.length, r = [];
  for (let s = 0;s < n; s++) {
    const a = t[s];
    r.push({ width: Math.floor(e / a), height: Math.floor(i / a) });
  }
  return r;
}
function h(e) {
  if (e["@id"])
    return e["@id"];
  if (e.id)
    return e.id;
}
function _(e) {
  if (!e || !e.profile || !h(e))
    return false;
  const i = Array.isArray(e.profile) ? e.profile : [e.profile];
  for (const t of i)
    if (typeof t == "string" && U.indexOf(t) !== -1)
      return true;
  return false;
}
function vi(e) {
  if (!_(e))
    return false;
  const i = Array.isArray(e.profile) ? e.profile : [e.profile];
  for (const t of i)
    if (typeof t == "string") {
      if (D.indexOf(t) !== -1)
        return true;
    } else {
      const n = [...t.supports || [], ...t.extraFeatures || []];
      if (n.indexOf("regionByPx") !== -1 && (n.indexOf("sizeByW") !== -1 || n.indexOf("sizeByWh") !== -1))
        return true;
    }
  return false;
}
function S(e, i) {
  if (i && i.profile) {
    const t = i.profile;
    if (t) {
      const n = Array.isArray(t) ? t : [t];
      return n.includes(`level${e}`) || n.includes(`http://iiif.io/api/image/2/level${e}.json`) || n.includes(`http://iiif.io/api/image/1/level${e}.json`) || n.includes(`http://iiif.io/api/image/1/profiles/level${e}.json`);
    }
  }
  return false;
}
function v(e) {
  return _(e) ? S(0, e) ? 0 : S(1, e) ? 1 : S(2, e) ? 2 : null : null;
}
function K(e) {
  return (e["@context"] ? Array.isArray(e["@context"]) ? e["@context"] : [e["@context"]] : []).indexOf("http://iiif.io/api/image/3/context.json") !== -1;
}
function Fi(e) {
  if (!vi(e))
    return [];
  const i = [], t = Array.isArray(e.profile) ? e.profile : [e.profile], n = t.length;
  for (let r = 0;r < n; r++) {
    const s = t[r];
    if (typeof s != "string" && (s.maxHeight || s.maxWidth))
      return [{ id: h(e), type: "variable", minWidth: 0, minHeight: 0, maxHeight: s.maxHeight || s.maxWidth, maxWidth: s.maxWidth || s.maxHeight, level: v(e), version: e["@context"] === "http://iiif.io/api/image/3/context.json" ? 3 : 2 }];
  }
  if (e.tiles) {
    const r = e.tiles.length;
    for (let s = 0;s < r; s++) {
      const a = e.tiles[s];
      (a.height || a.width) && i.push({ id: h(e), type: "variable", minHeight: 0, minWidth: 0, maxHeight: a.height || a.width, maxWidth: a.width, level: v(e), version: K(e) ? 3 : 2 });
    }
  }
  return i;
}
function X(e) {
  const i = /^.*\/(full)\/(((\d+),(\d+)?)|max)\/(\d+)\/default\.(jpg|png|jpeg)$/, t = e.match(i);
  if (t) {
    const n = t[1], r = parseInt(t[4], 10), s = parseInt(t[5], 10), a = t[7];
    if ((n === "max" || n === "full") && r && s && a)
      return { type: "fixed", id: e, height: s, width: r };
  }
  return { type: "unknown", id: e };
}
function Oi(e) {
  if (e["@type"])
    return e["@type"];
  if (e.type)
    return e.type;
}
function zi(e) {
  if (typeof e == "string")
    return X(e);
  const i = Oi(e);
  if (i !== "Image" && i !== "sc:Image")
    return null;
  const t = e, n = h(t);
  return n ? n && t.width && t.height ? { id: n, type: "fixed", width: t.width, height: t.height, unsafe: true } : X(n) : null;
}
function Ai(e) {
  return _(e) ? (e && e.sizes ? e.sizes : []).map((i) => ({ id: h(e), type: "fixed-service", height: i.height, width: i.width, level: v(e), version: K(e) ? 3 : 2 })) : [];
}
function Y(e) {
  const i = [], t = e.length;
  for (let n = 0;n < t; n++) {
    const r = Ai(e[n]);
    r.length && i.push(...r);
    const s = Fi(e[n]);
    s.length && i.push(...s);
  }
  return i;
}
function q(e) {
  const i = e.service ? Array.isArray(e.service) ? e.service : [e.service] : [], t = i.length, n = [];
  for (let r = 0;r < t; r++)
    _(i[r]) && n.push(i[r]);
  return n;
}
function Ei(e, i = true, t) {
  const n = [], r = zi(e);
  if (r === null)
    return n;
  const s = e;
  if (n.push(r), i && s.width && s.height) {
    const a = [], o = q(s);
    for (const f of o) {
      const c = { id: h(f), width: s.width, height: s.height };
      if (t.canLoadSync(c)) {
        const l = t.loadServiceSync(c);
        l && (l.height || (l.height = s.height), l.width || (l.width = s.width), a.push(...Y([l])));
      }
    }
    if (a.length)
      return n.push(...a), n;
  }
  return s.service && n.push(...Y(s.service)), n;
}
function bi({ x: e = 0, y: i = 0, w: t, h: n, full: r, square: s, percent: a }) {
  if (r)
    return "full";
  if (s)
    return "square";
  if (typeof t > "u" || typeof n > "u")
    throw new Error("RegionParameter: invalid region");
  const o = `${e},${i},${t},${n}`;
  return a ? `pct:${o}` : o;
}
function Li({ max: e, percentScale: i, upscaled: t, confined: n, width: r, height: s, serialiseAsFull: a, version: o }) {
  const f = [];
  return t && f.push("^"), e ? (f.push(a ? "full" : "max"), f.join("")) : (n && f.push("!"), i && f.push(`pct:${i}`), r && f.push(`${r}`), f.push(","), s && o === 3 && f.push(`${s}`), f.join(""));
}
function Mi(e) {
  return `${e.mirror ? "!" : ""}${(e.angle || 0) % 360}`;
}
var Di = Object.defineProperty;
var Ui = Object.defineProperties;
var Ji = Object.getOwnPropertyDescriptors;
var Wi = Object.getOwnPropertySymbols;
var Zi = Object.prototype.hasOwnProperty;
var Ki = Object.prototype.propertyIsEnumerable;
var ji = (e, i, t) => (i in e) ? Di(e, i, { enumerable: true, configurable: true, writable: true, value: t }) : e[i] = t;
var x = (e, i) => {
  for (var t in i || (i = {}))
    Zi.call(i, t) && ji(e, t, i[t]);
  if (Wi)
    for (var t of Wi(i))
      Ki.call(i, t) && ji(e, t, i[t]);
  return e;
};
var I = (e, i) => Ui(e, Ji(i));
function $i(e, i) {
  const t = e.prefix.startsWith("/") ? e.prefix.substr(1) : e.prefix, n = `${e.scheme}://${e.server}/${t ? `${t}/` : ""}${e.identifier}`;
  if (e.type === "base")
    return n;
  if (e.type === "info")
    return `${n}/info.json`;
  let { size: r } = e;
  const { region: s, rotation: a, format: o, quality: f } = e;
  if (i) {
    const c = i["@context"] ? Array.isArray(i["@context"]) ? i["@context"] : [i["@context"]] : [], l = c.indexOf("http://iiif.io/api/image/2/context.json") !== -1, d = c.indexOf("http://iiif.io/api/image/3/context.json") !== -1;
    if ((r.width === i.width && !r.height || r.height === i.height && !r.width || r.width === i.width && r.height === i.height) && (r = I(x({}, r), { max: true })), l && (r.max && !r.serialiseAsFull && (r = I(x({}, r), { serialiseAsFull: true })), !r.max && r.width && r.height && (r = I(x({}, r), { height: undefined })), r = I(x({}, r), { version: 2 })), d) {
      if (r.max && r.serialiseAsFull && (r = I(x({}, r), { serialiseAsFull: false })), r.width && !r.height && i.width && i.height) {
        const g = i.height / i.width;
        r = I(x({}, r), { height: Math.ceil(r.width * g) });
      }
      r = I(x({}, r), { version: 3 });
    }
  }
  return [n, bi(s), Li(r), Mi(a), `${f}.${o}`].filter(Boolean).join("/");
}
function F(e, i, t) {
  const n = _i({ "@context": e.version === 3 ? "http://iiif.io/api/image/3/context.json" : "http://iiif.io/api/image/2/context.json", id: p(h(e)), profile: e.level === null || typeof e.level > "u" ? "level0" : `level${e.level}}`, type: e.version === 3 ? "ImageService3" : "ImageService2" });
  if (n.type !== "image")
    throw new Error("Invalid service");
  return n.size.max = false, n.size.width = i, n.size.height = t, { id: $i(n), type: "fixed", width: i, height: t || e.height / (e.width || 1) * i, unsafe: e.width > i };
}
function y(e) {
  const i = e.replace(/(https?:\/\/)?(www.)?/i, "");
  return i.indexOf("/") !== -1 ? i.split("/")[0] : i;
}
function Ci(e, i, t) {
  const n = e.width ? e.width : e.maxWidth;
  return t.height <= e.maxHeight && t.width <= e.maxWidth && t.height >= e.minHeight && t.width >= e.minWidth && (!i || Math.abs(t.width - n) < Math.abs(i.width - n));
}
function Pi(e, i) {
  const t = [], n = Object.assign({ unsafeImageService: false, atAnyCost: true, fallback: true, minHeight: 64, minWidth: 64, maxHeight: 1 / 0, maxWidth: 1 / 0, returnAllOptions: false, preferFixedSize: false, allowUnsafe: false, explain: false, height: 0, width: 0 }, e), r = (l, d = 0) => n.explain ? t.push(new Array(d).fill(0).map((g) => "    ").join("") + l().trim()) : undefined, s = [], a = [];
  let o = null;
  r(() => `Using configuration: ${JSON.stringify(n, null, 2)}`);
  const f = (l, d) => {
    if (r(() => "Swapping choice", 3), Ci(n, d, l)) {
      if (n.preferFixedSize && l.unsafe) {
        r(() => `We found an image that was marked as unsafe, but it was the best size. (${l.id})`, 4), a.push(l);
        return;
      }
      n.returnAllOptions && d && a.push(d), r(() => `We found a new image that was the best size. (${l.id})`, 4), o = l;
    } else
      n.returnAllOptions && a.push(l);
  };
  r(() => `The input shows we have ${i.length} list(s) of candidates to choose from.`);
  const c = i.length;
  for (let l = 0;l < c; l++) {
    const d = i[l]();
    r(() => `Candidate group ${l}: ${JSON.stringify(d, null, 2)}`, 1);
    const g = d.length;
    r(() => `Checking candidate list number ${l} and found ${g} potential ways of creating image(s)`, 1);
    for (let m = 0;m < g; m++) {
      const u = d[m];
      if (r(() => `-> Checking candidate ${m}`, 1), u.type === "unknown" && n.atAnyCost && (r(() => `We've found an unknown image type, adding this to the "last resort" list`, 2), s.push(u)), u.type === "fixed" && (u.unsafe ? (r(() => `We've found an unsafe fixed image type, adding this to the "last resort" list`, 2), s.push(u)) : (r(() => "We've found a fixed size image, checking if it matches the request", 2), f(u, o))), u.type === "fixed-service")
        if (n.unsafeImageService) {
          r(() => "Checking for an image from the tile source, without calculating the right height and width (unsafeImageService)", 2);
          const w = F(u, n.width, n.height);
          f(w, o);
        } else {
          r(() => "Checking for an image from the tile source 3", 2);
          const w = F(u, u.width, u.height);
          f(w, o);
        }
      if (u.type === "variable" && u.maxWidth) {
        const w = F({ id: u.id, type: "fixed-service", width: u.maxWidth, height: u.maxWidth, level: u.level, version: u.version }, u.maxWidth);
        f(w, o);
      }
    }
    if (o && !n.returnAllOptions) {
      if (o.unsafe || n.allowUnsafe)
        continue;
      r(() => `We found a match in choice list number ${l}, no searching any more`);
      break;
    }
  }
  return n.atAnyCost && a.length === 0 ? (r(() => o ? `We found an image! ${o.id} of type ${o.type}` : 'We found no images, but "atAnyCost" is set, so returning that'), { best: o || s[0], fallback: s.slice(1), log: t }) : n.returnAllOptions ? (r(() => "Returning all options that we have found"), { best: n.atAnyCost ? o || a[0] || s[0] : o || a[0], fallback: [...a, ...s], log: t }) : (r(() => "Returning the best image that we found, and a fallback"), { best: o || a[0] || null, fallback: o ? a : a.slice(1), log: t });
}
var ie = Object.defineProperty;
var ee = Object.defineProperties;
var te = Object.getOwnPropertyDescriptors;
var Bi = Object.getOwnPropertySymbols;
var ne = Object.prototype.hasOwnProperty;
var re = Object.prototype.propertyIsEnumerable;
var Ni = (e, i, t) => (i in e) ? ie(e, i, { enumerable: true, configurable: true, writable: true, value: t }) : e[i] = t;
var se = (e, i) => {
  for (var t in i || (i = {}))
    ne.call(i, t) && Ni(e, t, i[t]);
  if (Bi)
    for (var t of Bi(i))
      re.call(i, t) && Ni(e, t, i[t]);
  return e;
};
var ae = (e, i) => ee(e, te(i));
function Ri(e, i, t) {
  const n = e > i ? e : i, r = t.length, s = [];
  for (let a = 0;a < r; a++) {
    const o = t[a];
    let f = o.scaleFactors[0], c = n / f;
    const l = [f];
    for (;c >= o.width; )
      f = f * 2, l.push(f), c = c / 2;
    s.push(ae(se({}, o), { scaleFactors: l }));
  }
  return s;
}
function Hi(e, i) {
  if (e.length !== i.length)
    return false;
  if (e.length === 0 && i.length === 0)
    return true;
  const t = e.length;
  let n = true;
  for (let s = 0;s < t; s++) {
    const a = e[s], o = i[s];
    if (a.width !== o.width || a.height !== o.height) {
      n = false;
      break;
    }
  }
  if (n)
    return true;
  let r = 0;
  for (let s = 0;s < t; s++)
    for (let a = 0;a < t; a++)
      if (e[s].width === i[a].width && e[s].height === i[a].height) {
        r++;
        break;
      }
  return r === t;
}
function Ti(e) {
  return S(0, e);
}

class Gi {
  constructor() {
    this.config = { verificationsRequired: 1, approximateServices: true, enableFetching: true, disableThrottling: false }, this.fetchingCount = 0, this.imageServices = {}, this.knownImageServers = {};
  }
  setConfig(i) {
    Object.assign(this.config, i);
  }
  sample(i, t, n = true) {
    const r = y(h(i)), s = p(h(i)), a = this.knownImageServers[r];
    return this.imageServices[s] = Object.assign(i, { real: true }), !a && i.tiles && !Ti(i) ? (this.knownImageServers[r] = { verifications: 0, malformed: false, root: r, preLoaded: n, sampledId: h(i), verified: false, server: null, result: { context: i["@context"] || [], sampledProfile: i.profile, resourceServiceRatio: t && i.height ? t.height / i.height : 1, sampledSizes: i.sizes || [], sizeRatios: wi(i.width, i.height, i.sizes || []), sampledTiles: i.tiles || [] } }, true) : this.verify(i);
  }
  preLoad(i, t = true) {
    this.knownImageServers[i.root] = i, t && (this.knownImageServers[i.root].malformed = false, this.knownImageServers[i.root].verifications = this.config.verificationsRequired);
  }
  predict(i, t = false, n = false) {
    const r = i == null ? undefined : i.source, s = y(h(i)), a = this.knownImageServers[s];
    if (!a || !a.result || !((r == null ? undefined : r.height) || i.height) || !((r == null ? undefined : r.width) || i.width) || !n && (a.malformed || a.verifications < this.config.verificationsRequired) || Ti(i.source))
      return null;
    const o = p(h(i));
    return this.imageServices[o] || (this.imageServices[o] = { "@context": a.result.context, "@id": h(i), id: h(i), protocol: "http://iiif.io/api/image", tiles: (r == null ? undefined : r.tiles) || Ri(i.width, i.height, a.result.sampledTiles), sizes: (r == null ? undefined : r.sizes) || Si(Math.round(i.width / a.result.resourceServiceRatio), Math.round(i.height / a.result.resourceServiceRatio), a.result.sizeRatios), profile: (r == null ? undefined : r.profile) || a.result.sampledProfile, height: (r == null ? undefined : r.height) || i.height, width: (r == null ? undefined : r.width) || i.width, real: false }), this.imageServices[o];
  }
  async getThumbnailFromResource(i, t, n = true, r = []) {
    const s = i ? await this.getImageCandidates(i, n) : [];
    return Pi(t, [() => r, () => s]);
  }
  async getImageCandidates(i, t = true) {
    const n = i;
    if (t && n.height && n.width) {
      const r = q(n);
      for (const s of r) {
        const a = { id: h(s), width: s.width ? s.width : n.width, height: s.height ? s.height : n.height, source: s };
        await this.loadService(a);
      }
    }
    return Ei(i, t, this);
  }
  async verify(i) {
    const t = this.predict(i, false, true), n = await this.fetchService(h(i));
    if (!t)
      return false;
    const r = t.height === n.height && t.width === n.width && t["@context"] === n["@context"] && Hi(t.sizes || [], n.sizes || []);
    if (r) {
      const s = y(h(i));
      this.knownImageServers[s].verifications += 1, this.knownImageServers[s].verifications >= this.config.verificationsRequired && (this.knownImageServers[s].verified = true);
    }
    return r;
  }
  canLoadSync(i) {
    const t = typeof i == "string" ? i : h(i), n = p(t);
    if (this.imageServices[n])
      return true;
    const r = this.knownImageServers[y(t)];
    return r && !r.malformed && r.verifications >= this.config.verificationsRequired;
  }
  async markAsMalformed(i) {
    return this.knownImageServers[y(h(i))].malformed = true, this.loadService(i, true);
  }
  async fetchService(i, t = false) {
    const n = p(i);
    if (this.imageServices[n] && (!t || this.imageServices[n].real))
      return this.imageServices[n];
    if (!this.config.enableFetching)
      throw new Error("Fetching is not enabled");
    const r = await this.fetch(n).then((s) => s.json());
    return !r.id && r["@id"] && (r.id = r["@id"]), r.id !== i && (r.id = i, r["@id"] && (r["@id"] = i)), this.imageServices[n] = Object.assign(r, { real: true }), this.imageServices[n];
  }
  async fetch(i, t) {
    return fetch(i, t);
  }
  async loadService(i, t = false) {
    if (!this.config.disableThrottling) {
      let s = true;
      for (;s; )
        if (this.fetchingCount >= this.config.verificationsRequired)
          await new Promise((a) => setTimeout(a, 500));
        else {
          s = false;
          break;
        }
    }
    const n = this.knownImageServers[y(h(i))];
    if (n && !n.malformed && !t) {
      await n.result;
      const s = this.loadServiceSync(i);
      if (s)
        return s;
    }
    this.fetchingCount++;
    const r = await this.fetchService(h(i), t);
    return this.fetchingCount--, r.real && this.sample(r, i), r;
  }
  loadServiceSync(i) {
    const t = p(h(i));
    return this.imageServices[t] ? this.imageServices[t] : this.predict(i);
  }
}
new Gi;

class ki extends Gi {
  async fetch(i, t) {
    return Qi(i, t);
  }
}
var oe = new ki;

// src/commands/build.ts
var {env: env2 } = globalThis.Bun;

// node_modules/chalk/source/vendor/ansi-styles/index.js
var ANSI_BACKGROUND_OFFSET = 10;
var wrapAnsi16 = (offset = 0) => (code) => `\x1B[${code + offset}m`;
var wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`;
var wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
var styles = {
  modifier: {
    reset: [0, 0],
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    overline: [53, 55],
    inverse: [7, 27],
    hidden: [8, 28],
    strikethrough: [9, 29]
  },
  color: {
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    blackBright: [90, 39],
    gray: [90, 39],
    grey: [90, 39],
    redBright: [91, 39],
    greenBright: [92, 39],
    yellowBright: [93, 39],
    blueBright: [94, 39],
    magentaBright: [95, 39],
    cyanBright: [96, 39],
    whiteBright: [97, 39]
  },
  bgColor: {
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
    bgBlackBright: [100, 49],
    bgGray: [100, 49],
    bgGrey: [100, 49],
    bgRedBright: [101, 49],
    bgGreenBright: [102, 49],
    bgYellowBright: [103, 49],
    bgBlueBright: [104, 49],
    bgMagentaBright: [105, 49],
    bgCyanBright: [106, 49],
    bgWhiteBright: [107, 49]
  }
};
var modifierNames = Object.keys(styles.modifier);
var foregroundColorNames = Object.keys(styles.color);
var backgroundColorNames = Object.keys(styles.bgColor);
var colorNames = [...foregroundColorNames, ...backgroundColorNames];
function assembleStyles() {
  const codes = new Map;
  for (const [groupName, group] of Object.entries(styles)) {
    for (const [styleName, style] of Object.entries(group)) {
      styles[styleName] = {
        open: `\x1B[${style[0]}m`,
        close: `\x1B[${style[1]}m`
      };
      group[styleName] = styles[styleName];
      codes.set(style[0], style[1]);
    }
    Object.defineProperty(styles, groupName, {
      value: group,
      enumerable: false
    });
  }
  Object.defineProperty(styles, "codes", {
    value: codes,
    enumerable: false
  });
  styles.color.close = "\x1B[39m";
  styles.bgColor.close = "\x1B[49m";
  styles.color.ansi = wrapAnsi16();
  styles.color.ansi256 = wrapAnsi256();
  styles.color.ansi16m = wrapAnsi16m();
  styles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);
  styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
  styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
  Object.defineProperties(styles, {
    rgbToAnsi256: {
      value(red, green, blue) {
        if (red === green && green === blue) {
          if (red < 8) {
            return 16;
          }
          if (red > 248) {
            return 231;
          }
          return Math.round((red - 8) / 247 * 24) + 232;
        }
        return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
      },
      enumerable: false
    },
    hexToRgb: {
      value(hex) {
        const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
        if (!matches) {
          return [0, 0, 0];
        }
        let [colorString] = matches;
        if (colorString.length === 3) {
          colorString = [...colorString].map((character) => character + character).join("");
        }
        const integer = Number.parseInt(colorString, 16);
        return [
          integer >> 16 & 255,
          integer >> 8 & 255,
          integer & 255
        ];
      },
      enumerable: false
    },
    hexToAnsi256: {
      value: (hex) => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
      enumerable: false
    },
    ansi256ToAnsi: {
      value(code) {
        if (code < 8) {
          return 30 + code;
        }
        if (code < 16) {
          return 90 + (code - 8);
        }
        let red;
        let green;
        let blue;
        if (code >= 232) {
          red = ((code - 232) * 10 + 8) / 255;
          green = red;
          blue = red;
        } else {
          code -= 16;
          const remainder = code % 36;
          red = Math.floor(code / 36) / 5;
          green = Math.floor(remainder / 6) / 5;
          blue = remainder % 6 / 5;
        }
        const value = Math.max(red, green, blue) * 2;
        if (value === 0) {
          return 30;
        }
        let result = 30 + (Math.round(blue) << 2 | Math.round(green) << 1 | Math.round(red));
        if (value === 2) {
          result += 60;
        }
        return result;
      },
      enumerable: false
    },
    rgbToAnsi: {
      value: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),
      enumerable: false
    },
    hexToAnsi: {
      value: (hex) => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),
      enumerable: false
    }
  });
  return styles;
}
var ansiStyles = assembleStyles();
var ansi_styles_default = ansiStyles;

// node_modules/chalk/source/vendor/supports-color/index.js
import process2 from "process";
import os from "os";
import tty from "tty";
function hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : process2.argv) {
  const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
  const position = argv.indexOf(prefix + flag);
  const terminatorPosition = argv.indexOf("--");
  return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
}
var { env } = process2;
var flagForceColor;
if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
  flagForceColor = 0;
} else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
  flagForceColor = 1;
}
function envForceColor() {
  if ("FORCE_COLOR" in env) {
    if (env.FORCE_COLOR === "true") {
      return 1;
    }
    if (env.FORCE_COLOR === "false") {
      return 0;
    }
    return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
  }
}
function translateLevel(level) {
  if (level === 0) {
    return false;
  }
  return {
    level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3
  };
}
function _supportsColor(haveStream, { streamIsTTY, sniffFlags = true } = {}) {
  const noFlagForceColor = envForceColor();
  if (noFlagForceColor !== undefined) {
    flagForceColor = noFlagForceColor;
  }
  const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;
  if (forceColor === 0) {
    return 0;
  }
  if (sniffFlags) {
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
      return 3;
    }
    if (hasFlag("color=256")) {
      return 2;
    }
  }
  if ("TF_BUILD" in env && "AGENT_NAME" in env) {
    return 1;
  }
  if (haveStream && !streamIsTTY && forceColor === undefined) {
    return 0;
  }
  const min = forceColor || 0;
  if (env.TERM === "dumb") {
    return min;
  }
  if (process2.platform === "win32") {
    const osRelease = os.release().split(".");
    if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
      return Number(osRelease[2]) >= 14931 ? 3 : 2;
    }
    return 1;
  }
  if ("CI" in env) {
    if ("GITHUB_ACTIONS" in env || "GITEA_ACTIONS" in env) {
      return 3;
    }
    if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "BUILDKITE", "DRONE"].some((sign) => (sign in env)) || env.CI_NAME === "codeship") {
      return 1;
    }
    return min;
  }
  if ("TEAMCITY_VERSION" in env) {
    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
  }
  if (env.COLORTERM === "truecolor") {
    return 3;
  }
  if (env.TERM === "xterm-kitty") {
    return 3;
  }
  if ("TERM_PROGRAM" in env) {
    const version = Number.parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
    switch (env.TERM_PROGRAM) {
      case "iTerm.app": {
        return version >= 3 ? 3 : 2;
      }
      case "Apple_Terminal": {
        return 2;
      }
    }
  }
  if (/-256(color)?$/i.test(env.TERM)) {
    return 2;
  }
  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    return 1;
  }
  if ("COLORTERM" in env) {
    return 1;
  }
  return min;
}
function createSupportsColor(stream, options = {}) {
  const level = _supportsColor(stream, {
    streamIsTTY: stream && stream.isTTY,
    ...options
  });
  return translateLevel(level);
}
var supportsColor = {
  stdout: createSupportsColor({ isTTY: tty.isatty(1) }),
  stderr: createSupportsColor({ isTTY: tty.isatty(2) })
};
var supports_color_default = supportsColor;

// node_modules/chalk/source/utilities.js
function stringReplaceAll(string, substring, replacer) {
  let index = string.indexOf(substring);
  if (index === -1) {
    return string;
  }
  const substringLength = substring.length;
  let endIndex = 0;
  let returnValue = "";
  do {
    returnValue += string.slice(endIndex, index) + substring + replacer;
    endIndex = index + substringLength;
    index = string.indexOf(substring, endIndex);
  } while (index !== -1);
  returnValue += string.slice(endIndex);
  return returnValue;
}
function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {
  let endIndex = 0;
  let returnValue = "";
  do {
    const gotCR = string[index - 1] === "\r";
    returnValue += string.slice(endIndex, gotCR ? index - 1 : index) + prefix + (gotCR ? `\r
` : `
`) + postfix;
    endIndex = index + 1;
    index = string.indexOf(`
`, endIndex);
  } while (index !== -1);
  returnValue += string.slice(endIndex);
  return returnValue;
}

// node_modules/chalk/source/index.js
var { stdout: stdoutColor, stderr: stderrColor } = supports_color_default;
var GENERATOR = Symbol("GENERATOR");
var STYLER = Symbol("STYLER");
var IS_EMPTY = Symbol("IS_EMPTY");
var levelMapping = [
  "ansi",
  "ansi",
  "ansi256",
  "ansi16m"
];
var styles2 = Object.create(null);
var applyOptions = (object, options = {}) => {
  if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
    throw new Error("The `level` option should be an integer from 0 to 3");
  }
  const colorLevel = stdoutColor ? stdoutColor.level : 0;
  object.level = options.level === undefined ? colorLevel : options.level;
};
var chalkFactory = (options) => {
  const chalk = (...strings) => strings.join(" ");
  applyOptions(chalk, options);
  Object.setPrototypeOf(chalk, createChalk.prototype);
  return chalk;
};
function createChalk(options) {
  return chalkFactory(options);
}
Object.setPrototypeOf(createChalk.prototype, Function.prototype);
for (const [styleName, style] of Object.entries(ansi_styles_default)) {
  styles2[styleName] = {
    get() {
      const builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);
      Object.defineProperty(this, styleName, { value: builder });
      return builder;
    }
  };
}
styles2.visible = {
  get() {
    const builder = createBuilder(this, this[STYLER], true);
    Object.defineProperty(this, "visible", { value: builder });
    return builder;
  }
};
var getModelAnsi = (model, level, type2, ...arguments_) => {
  if (model === "rgb") {
    if (level === "ansi16m") {
      return ansi_styles_default[type2].ansi16m(...arguments_);
    }
    if (level === "ansi256") {
      return ansi_styles_default[type2].ansi256(ansi_styles_default.rgbToAnsi256(...arguments_));
    }
    return ansi_styles_default[type2].ansi(ansi_styles_default.rgbToAnsi(...arguments_));
  }
  if (model === "hex") {
    return getModelAnsi("rgb", level, type2, ...ansi_styles_default.hexToRgb(...arguments_));
  }
  return ansi_styles_default[type2][model](...arguments_);
};
var usedModels = ["rgb", "hex", "ansi256"];
for (const model of usedModels) {
  styles2[model] = {
    get() {
      const { level } = this;
      return function(...arguments_) {
        const styler = createStyler(getModelAnsi(model, levelMapping[level], "color", ...arguments_), ansi_styles_default.color.close, this[STYLER]);
        return createBuilder(this, styler, this[IS_EMPTY]);
      };
    }
  };
  const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
  styles2[bgModel] = {
    get() {
      const { level } = this;
      return function(...arguments_) {
        const styler = createStyler(getModelAnsi(model, levelMapping[level], "bgColor", ...arguments_), ansi_styles_default.bgColor.close, this[STYLER]);
        return createBuilder(this, styler, this[IS_EMPTY]);
      };
    }
  };
}
var proto = Object.defineProperties(() => {
}, {
  ...styles2,
  level: {
    enumerable: true,
    get() {
      return this[GENERATOR].level;
    },
    set(level) {
      this[GENERATOR].level = level;
    }
  }
});
var createStyler = (open, close, parent) => {
  let openAll;
  let closeAll;
  if (parent === undefined) {
    openAll = open;
    closeAll = close;
  } else {
    openAll = parent.openAll + open;
    closeAll = close + parent.closeAll;
  }
  return {
    open,
    close,
    openAll,
    closeAll,
    parent
  };
};
var createBuilder = (self2, _styler, _isEmpty) => {
  const builder = (...arguments_) => applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
  Object.setPrototypeOf(builder, proto);
  builder[GENERATOR] = self2;
  builder[STYLER] = _styler;
  builder[IS_EMPTY] = _isEmpty;
  return builder;
};
var applyStyle = (self2, string) => {
  if (self2.level <= 0 || !string) {
    return self2[IS_EMPTY] ? "" : string;
  }
  let styler = self2[STYLER];
  if (styler === undefined) {
    return string;
  }
  const { openAll, closeAll } = styler;
  if (string.includes("\x1B")) {
    while (styler !== undefined) {
      string = stringReplaceAll(string, styler.close, styler.open);
      styler = styler.parent;
    }
  }
  const lfIndex = string.indexOf(`
`);
  if (lfIndex !== -1) {
    string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
  }
  return openAll + string + closeAll;
};
Object.defineProperties(createChalk.prototype, styles2);
var chalk = createChalk();
var chalkStderr = createChalk({ level: stderrColor ? stderrColor.level : 0 });
var source_default = chalk;

// node_modules/mkdirp/dist/mjs/mkdirp-manual.js
import { dirname } from "path";

// node_modules/mkdirp/dist/mjs/opts-arg.js
import { mkdir, mkdirSync, stat, statSync } from "fs";
var optsArg = (opts) => {
  if (!opts) {
    opts = { mode: 511 };
  } else if (typeof opts === "object") {
    opts = { mode: 511, ...opts };
  } else if (typeof opts === "number") {
    opts = { mode: opts };
  } else if (typeof opts === "string") {
    opts = { mode: parseInt(opts, 8) };
  } else {
    throw new TypeError("invalid options argument");
  }
  const resolved = opts;
  const optsFs = opts.fs || {};
  opts.mkdir = opts.mkdir || optsFs.mkdir || mkdir;
  opts.mkdirAsync = opts.mkdirAsync ? opts.mkdirAsync : async (path, options) => {
    return new Promise((res, rej) => resolved.mkdir(path, options, (er, made) => er ? rej(er) : res(made)));
  };
  opts.stat = opts.stat || optsFs.stat || stat;
  opts.statAsync = opts.statAsync ? opts.statAsync : async (path) => new Promise((res, rej) => resolved.stat(path, (err, stats) => err ? rej(err) : res(stats)));
  opts.statSync = opts.statSync || optsFs.statSync || statSync;
  opts.mkdirSync = opts.mkdirSync || optsFs.mkdirSync || mkdirSync;
  return resolved;
};

// node_modules/mkdirp/dist/mjs/mkdirp-manual.js
var mkdirpManualSync = (path, options, made) => {
  const parent = dirname(path);
  const opts = { ...optsArg(options), recursive: false };
  if (parent === path) {
    try {
      return opts.mkdirSync(path, opts);
    } catch (er) {
      const fer = er;
      if (fer && fer.code !== "EISDIR") {
        throw er;
      }
      return;
    }
  }
  try {
    opts.mkdirSync(path, opts);
    return made || path;
  } catch (er) {
    const fer = er;
    if (fer && fer.code === "ENOENT") {
      return mkdirpManualSync(path, opts, mkdirpManualSync(parent, opts, made));
    }
    if (fer && fer.code !== "EEXIST" && fer && fer.code !== "EROFS") {
      throw er;
    }
    try {
      if (!opts.statSync(path).isDirectory())
        throw er;
    } catch (_2) {
      throw er;
    }
  }
};
var mkdirpManual = Object.assign(async (path, options, made) => {
  const opts = optsArg(options);
  opts.recursive = false;
  const parent = dirname(path);
  if (parent === path) {
    return opts.mkdirAsync(path, opts).catch((er) => {
      const fer = er;
      if (fer && fer.code !== "EISDIR") {
        throw er;
      }
    });
  }
  return opts.mkdirAsync(path, opts).then(() => made || path, async (er) => {
    const fer = er;
    if (fer && fer.code === "ENOENT") {
      return mkdirpManual(parent, opts).then((made2) => mkdirpManual(path, opts, made2));
    }
    if (fer && fer.code !== "EEXIST" && fer.code !== "EROFS") {
      throw er;
    }
    return opts.statAsync(path).then((st) => {
      if (st.isDirectory()) {
        return made;
      } else {
        throw er;
      }
    }, () => {
      throw er;
    });
  });
}, { sync: mkdirpManualSync });

// node_modules/mkdirp/dist/mjs/mkdirp-native.js
import { dirname as dirname3 } from "path";

// node_modules/mkdirp/dist/mjs/find-made.js
import { dirname as dirname2 } from "path";
var findMade = async (opts, parent, path) => {
  if (path === parent) {
    return;
  }
  return opts.statAsync(parent).then((st) => st.isDirectory() ? path : undefined, (er) => {
    const fer = er;
    return fer && fer.code === "ENOENT" ? findMade(opts, dirname2(parent), parent) : undefined;
  });
};
var findMadeSync = (opts, parent, path) => {
  if (path === parent) {
    return;
  }
  try {
    return opts.statSync(parent).isDirectory() ? path : undefined;
  } catch (er) {
    const fer = er;
    return fer && fer.code === "ENOENT" ? findMadeSync(opts, dirname2(parent), parent) : undefined;
  }
};

// node_modules/mkdirp/dist/mjs/mkdirp-native.js
var mkdirpNativeSync = (path, options) => {
  const opts = optsArg(options);
  opts.recursive = true;
  const parent = dirname3(path);
  if (parent === path) {
    return opts.mkdirSync(path, opts);
  }
  const made = findMadeSync(opts, path);
  try {
    opts.mkdirSync(path, opts);
    return made;
  } catch (er) {
    const fer = er;
    if (fer && fer.code === "ENOENT") {
      return mkdirpManualSync(path, opts);
    } else {
      throw er;
    }
  }
};
var mkdirpNative = Object.assign(async (path, options) => {
  const opts = { ...optsArg(options), recursive: true };
  const parent = dirname3(path);
  if (parent === path) {
    return await opts.mkdirAsync(path, opts);
  }
  return findMade(opts, path).then((made) => opts.mkdirAsync(path, opts).then((m) => made || m).catch((er) => {
    const fer = er;
    if (fer && fer.code === "ENOENT") {
      return mkdirpManual(path, opts);
    } else {
      throw er;
    }
  }));
}, { sync: mkdirpNativeSync });

// node_modules/mkdirp/dist/mjs/path-arg.js
import { parse, resolve } from "path";
var platform = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform;
var pathArg = (path) => {
  if (/\0/.test(path)) {
    throw Object.assign(new TypeError("path must be a string without null bytes"), {
      path,
      code: "ERR_INVALID_ARG_VALUE"
    });
  }
  path = resolve(path);
  if (platform === "win32") {
    const badWinChars = /[*|"<>?:]/;
    const { root } = parse(path);
    if (badWinChars.test(path.substring(root.length))) {
      throw Object.assign(new Error("Illegal characters in path."), {
        path,
        code: "EINVAL"
      });
    }
  }
  return path;
};

// node_modules/mkdirp/dist/mjs/use-native.js
import { mkdir as mkdir2, mkdirSync as mkdirSync2 } from "fs";
var version = process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version;
var versArr = version.replace(/^v/, "").split(".");
var hasNative = +versArr[0] > 10 || +versArr[0] === 10 && +versArr[1] >= 12;
var useNativeSync = !hasNative ? () => false : (opts) => optsArg(opts).mkdirSync === mkdirSync2;
var useNative = Object.assign(!hasNative ? () => false : (opts) => optsArg(opts).mkdir === mkdir2, {
  sync: useNativeSync
});

// node_modules/mkdirp/dist/mjs/index.js
var mkdirpSync = (path, opts) => {
  path = pathArg(path);
  const resolved = optsArg(opts);
  return useNativeSync(resolved) ? mkdirpNativeSync(path, resolved) : mkdirpManualSync(path, resolved);
};
var mkdirp = Object.assign(async (path, opts) => {
  path = pathArg(path);
  const resolved = optsArg(opts);
  return useNative(resolved) ? mkdirpNative(path, resolved) : mkdirpManual(path, resolved);
}, {
  mkdirpSync,
  mkdirpNative,
  mkdirpNativeSync,
  mkdirpManual,
  mkdirpManualSync,
  sync: mkdirpSync,
  native: mkdirpNative,
  nativeSync: mkdirpNativeSync,
  manual: mkdirpManual,
  manualSync: mkdirpManualSync,
  useNative,
  useNativeSync
});

// src/enrich/canvas-thumbnail.ts
import { existsSync } from "fs";
import { join } from "path";

// node_modules/@iiif/helpers/dist/esm/index.mjs
var qr = Object.defineProperty;
var Ur = (t, e, i) => (e in t) ? qr(t, e, { enumerable: true, configurable: true, writable: true, value: i }) : t[e] = i;
var D2 = (t, e, i) => (Ur(t, typeof e != "symbol" ? e + "" : e, i), i);
var Ue = {};
var B2 = {
  get(t) {
    return t;
  },
  setMetaValue([t, e, i], r) {
    const n = B2.getResourceMeta(t, e), s = n ? n[i] : undefined, a = typeof r == "function" ? r(s) : r;
    Ue[t] = {
      ...Ue[t] || {},
      [e]: {
        ...(Ue[t] || {})[e] || {},
        [i]: a
      }
    };
  },
  getResourceMeta: (t, e) => {
    const i = Ue[t];
    if (i)
      return e ? i[e] : i;
  }
};
function me(t) {
  return t.endsWith("info.json") ? t : t.endsWith("/") ? `${t}info.json` : `${t}/info.json`;
}
var Wr = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
var ni2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
var si2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
var zr = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
var ai2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
var oi2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
var Vr = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
var ci2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
var li2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
var Br = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
var ui2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
var fi2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
var Gr = "http://iiif.io/api/image/1/level0.json";
var Qr = "http://iiif.io/api/image/1/profiles/level0.json";
var pi2 = "http://iiif.io/api/image/1/level1.json";
var hi2 = "http://iiif.io/api/image/1/profiles/level1.json";
var di2 = "http://iiif.io/api/image/1/level2.json";
var vi2 = "http://iiif.io/api/image/1/profiles/level2.json";
var Hr = "http://iiif.io/api/image/2/level0.json";
var Yr = "http://iiif.io/api/image/2/profiles/level0.json";
var yi2 = "http://iiif.io/api/image/2/level1.json";
var mi2 = "http://iiif.io/api/image/2/profiles/level1.json";
var gi2 = "http://iiif.io/api/image/2/level2.json";
var Ai2 = "http://iiif.io/api/image/2/profiles/level2.json";
var Jr = "level0";
var bi2 = "level1";
var Si2 = "level2";
var Xr = "http://iiif.io/api/image/2/level0";
var xi2 = "http://iiif.io/api/image/2/level1";
var wi2 = "http://iiif.io/api/image/2/level2";
var Ci2 = [wi2, si2, oi2, li2, fi2, di2, vi2, gi2, Ai2, Si2];
var Ri2 = [...Ci2, xi2, ni2, ai2, ci2, ui2, pi2, hi2, yi2, mi2, bi2];
var Kr = [Xr, xi2, wi2, Wr, ni2, si2, zr, ai2, oi2, Vr, ci2, li2, Br, ui2, fi2, Gr, Qr, pi2, hi2, di2, vi2, Hr, Yr, yi2, mi2, gi2, Ai2, Jr, bi2, Si2];
var Zr = { extraFormats: ["jpg"], extraQualities: ["default"], extraFeatures: ["sizeByWhListed"] };
var en = { extraFormats: ["jpg"], extraQualities: ["default"], extraFeatures: ["baseUriRedirect", "cors", "jsonldMediaType", "regionByPx", "regionSquare", "sizeByWhListed", "sizeByH", "sizeByW", "sizeByWh"] };
var tn = { extraFormats: ["jpg", "png"], extraQualities: ["default"], extraFeatures: ["baseUriRedirect", "cors", "jsonldMediaType", "regionByPct", "regionByPx", "regionSquare", "rotationBy90s", "sizeByWhListed", "sizeByConfinedWh", "sizeByH", "sizeByPct", "sizeByW", "sizeByWh"] };
function rn(t) {
  return Ci2.indexOf(t) !== -1 ? tn : Ri2.indexOf(t) !== -1 ? en : Zr;
}
function nn(t) {
  const e = t ? Array.isArray(t.profile) ? t.profile : [t.profile] : [], i = { extraQualities: [], extraFormats: [], extraFeatures: [] };
  for (let r of e)
    if (typeof r == "string" && (r = rn(r)), !!r) {
      if (r.formats)
        for (const n of r.formats)
          i.extraFormats.indexOf(n) === -1 && i.extraFormats.push(n);
      if (r.qualities)
        for (const n of r.qualities)
          i.extraQualities.indexOf(n) === -1 && i.extraQualities.push(n);
      if (r.supports)
        for (const n of r.supports)
          i.extraFeatures.indexOf(n) === -1 && i.extraFeatures.push(n);
      if (r.maxHeight && (i.maxHeight = r.maxHeight), r.maxWidth && (i.maxWidth = r.maxWidth), r.maxArea && (i.maxArea = r.maxArea), r.extraFormats)
        for (const n of r.extraFormats)
          i.extraFormats.indexOf(n) === -1 && i.extraFormats.push(n);
      if (r.extraQualities)
        for (const n of r.extraQualities)
          i.extraQualities.indexOf(n) === -1 && i.extraQualities.push(n);
      if (r.extraFeatures)
        for (const n of r.extraFeatures)
          i.extraFeatures.indexOf(n) === -1 && i.extraFeatures.push(n);
      r.maxHeight && (i.maxHeight = r.maxHeight), r.maxWidth && (i.maxWidth = r.maxWidth), r.maxArea && (i.maxArea = r.maxArea);
    }
  if (t.extraFormats)
    for (const r of t.extraFormats)
      i.extraFormats.indexOf(r) === -1 && i.extraFormats.push(r);
  if (t.extraFeatures)
    for (const r of t.extraFeatures)
      i.extraFeatures.indexOf(r) === -1 && i.extraFeatures.push(r);
  if (t.extraQualities)
    for (const r of t.extraQualities)
      i.extraQualities.indexOf(r) === -1 && i.extraQualities.push(r);
  return i;
}
function sn(t) {
  try {
    if (t === "full")
      return { full: true };
    if (t === "square")
      return { square: true };
    const e = t.startsWith("pct:"), i = t.substr(e ? 4 : 0).split(",").map((r) => parseFloat(r));
    return { x: i[0], y: i[1], w: i[2], h: i[3], percent: e };
  } catch {
    throw new Error("Expected 'full', 'square' or 'x,y,w,h'. Found " + t);
  }
}
function an(t) {
  const e = { upscaled: false, max: false, confined: false };
  if (t[0] === "^" && (e.upscaled = true, t = t.slice(1)), t === "max" || t === "full")
    return e.max = true, e.serialiseAsFull = t === "full", e;
  if (t[0] === "!" && (e.confined = true, t = t.slice(1)), t[0] === "p")
    return e.percentScale = parseFloat(t.slice(4)), e;
  const i = t.split(",").map((r) => r.trim());
  return i.length && (i[0] !== "" && (e.width = parseInt(i[0], 10)), i[1] !== "" ? (e.height = parseInt(i[1], 10), e.version = 2) : e.version = 3), e;
}
function on(t) {
  const e = { angle: 0 };
  if (t[0] === "!" && (e.mirror = true, t = t.substr(1)), e.angle = parseFloat(t) % 360, Number.isNaN(e.angle))
    throw new Error(`Invalid rotation ${t}`);
  return e;
}
function cn(t, e = "") {
  const i = t.match(/^(([a-zA-Z]+):\/\/([^/]+))?((.*)+)/);
  if (!i)
    throw new Error(`Invalid or unknown input ${t}`);
  const r = i[2], n = i[3];
  let s = i[4];
  if (s[0] === "/" && (s = s.substr(1)), e.length > 0) {
    if (e[0] === "/" && (e = e.substr(1)), e !== s.substr(0, e.length))
      throw new Error(`Path does not start with prefix (path: ${s}, prefix: ${e})`);
    s = s.substr(e.length);
  }
  return { scheme: r, server: n, path: s, prefix: e };
}
function ln(t, e = "") {
  const { path: i, scheme: r, server: n, prefix: s } = cn(t, e), a = i.split("/").reverse(), [c, f, p2, u, ...v2] = a, y2 = v2.reverse().filter(Boolean).join("/");
  if (a.length === 1 || c === "")
    return { type: "base", scheme: r, server: n, prefix: s, identifier: y2 };
  if (c === "info.json") {
    const [, ...h2] = a;
    return { type: "info", scheme: r, server: n, prefix: s, identifier: h2.reverse().filter(Boolean).join("/") };
  }
  const m = c.split(".");
  return { type: "image", scheme: r, server: n, prefix: s, identifier: y2, originalPath: i, region: sn(u), size: an(p2), rotation: on(f), quality: m[0], format: m[1] };
}
function un(t) {
  const e = ln(me(t.id));
  if (e.type !== "info")
    throw new Error("Invalid service URL");
  const i = nn(t);
  return { identifier: e.identifier, originalPath: "", server: e.server, prefix: e.prefix, scheme: e.scheme, type: "image", quality: i.extraQualities.indexOf("default") === -1 ? i.extraQualities[0] : "default", region: { full: true }, size: { max: true, upscaled: false, confined: false }, format: "jpg", rotation: { angle: 0 } };
}
function fn(t, e, i) {
  const r = i.length, n = [];
  for (let s = 0;s < r; s++) {
    const a = i[s].width;
    n.push(t / a);
  }
  return n;
}
function pn(t, e, i) {
  const r = i.length, n = [];
  for (let s = 0;s < r; s++) {
    const a = i[s];
    n.push({ width: Math.floor(t / a), height: Math.floor(e / a) });
  }
  return n;
}
function O2(t) {
  if (t["@id"])
    return t["@id"];
  if (t.id)
    return t.id;
}
function Ge(t) {
  if (!t || !t.profile || !O2(t))
    return false;
  const e = Array.isArray(t.profile) ? t.profile : [t.profile];
  for (const i of e)
    if (typeof i == "string" && Kr.indexOf(i) !== -1)
      return true;
  return false;
}
function hn(t) {
  if (!Ge(t))
    return false;
  const e = Array.isArray(t.profile) ? t.profile : [t.profile];
  for (const i of e)
    if (typeof i == "string") {
      if (Ri2.indexOf(i) !== -1)
        return true;
    } else {
      const r = [...i.supports || [], ...i.extraFeatures || []];
      if (r.indexOf("regionByPx") !== -1 && (r.indexOf("sizeByW") !== -1 || r.indexOf("sizeByWh") !== -1))
        return true;
    }
  return false;
}
function Ve(t, e) {
  if (e && e.profile) {
    const i = e.profile;
    if (i) {
      const r = Array.isArray(i) ? i : [i];
      return r.includes(`level${t}`) || r.includes(`http://iiif.io/api/image/2/level${t}.json`) || r.includes(`http://iiif.io/api/image/1/level${t}.json`) || r.includes(`http://iiif.io/api/image/1/profiles/level${t}.json`);
    }
  }
  return false;
}
function ot(t) {
  return Ge(t) ? Ve(0, t) ? 0 : Ve(1, t) ? 1 : Ve(2, t) ? 2 : null : null;
}
function Ii2(t) {
  return (t["@context"] ? Array.isArray(t["@context"]) ? t["@context"] : [t["@context"]] : []).indexOf("http://iiif.io/api/image/3/context.json") !== -1;
}
function dn(t) {
  if (!hn(t))
    return [];
  const e = [], i = Array.isArray(t.profile) ? t.profile : [t.profile], r = i.length;
  for (let n = 0;n < r; n++) {
    const s = i[n];
    if (typeof s != "string" && (s.maxHeight || s.maxWidth))
      return [{ id: O2(t), type: "variable", minWidth: 0, minHeight: 0, maxHeight: s.maxHeight || s.maxWidth, maxWidth: s.maxWidth || s.maxHeight, level: ot(t), version: t["@context"] === "http://iiif.io/api/image/3/context.json" ? 3 : 2 }];
  }
  if (t.tiles) {
    const n = t.tiles.length;
    for (let s = 0;s < n; s++) {
      const a = t.tiles[s];
      (a.height || a.width) && e.push({ id: O2(t), type: "variable", minHeight: 0, minWidth: 0, maxHeight: a.height || a.width, maxWidth: a.width, level: ot(t), version: Ii2(t) ? 3 : 2 });
    }
  }
  return e;
}
function Pt(t) {
  const e = /^.*\/(full)\/(((\d+),(\d+)?)|max)\/(\d+)\/default\.(jpg|png|jpeg)$/, i = t.match(e);
  if (i) {
    const r = i[1], n = parseInt(i[4], 10), s = parseInt(i[5], 10), a = i[7];
    if ((r === "max" || r === "full") && n && s && a)
      return { type: "fixed", id: t, height: s, width: n };
  }
  return { type: "unknown", id: t };
}
function vn(t) {
  if (t["@type"])
    return t["@type"];
  if (t.type)
    return t.type;
}
function ct(t) {
  if (typeof t == "string")
    return Pt(t);
  const e = vn(t);
  if (e !== "Image" && e !== "sc:Image")
    return null;
  const i = t, r = O2(i);
  return r ? r && i.width && i.height ? { id: r, type: "fixed", width: i.width, height: i.height, unsafe: true } : Pt(r) : null;
}
function yn(t) {
  return Ge(t) ? (t && t.sizes ? t.sizes : []).map((e) => ({ id: O2(t), type: "fixed-service", height: e.height, width: e.width, level: ot(t), version: Ii2(t) ? 3 : 2 })) : [];
}
function jt(t) {
  const e = [], i = t.length;
  for (let r = 0;r < i; r++) {
    const n = yn(t[r]);
    n.length && e.push(...n);
    const s = dn(t[r]);
    s.length && e.push(...s);
  }
  return e;
}
function Ei2(t) {
  const e = t.service ? Array.isArray(t.service) ? t.service : [t.service] : [], i = e.length, r = [];
  for (let n = 0;n < i; n++)
    Ge(e[n]) && r.push(e[n]);
  return r;
}
function mn(t, e = true, i) {
  const r = [], n = ct(t);
  if (n === null)
    return r;
  const s = t;
  if (r.push(n), e && s.width && s.height) {
    const a = [], c = Ei2(s);
    for (const f of c) {
      const p2 = { id: O2(f), width: s.width, height: s.height };
      if (i.canLoadSync(p2)) {
        const u = i.loadServiceSync(p2);
        u && (u.height || (u.height = s.height), u.width || (u.width = s.width), a.push(...jt([u])));
      }
    }
    if (a.length)
      return r.push(...a), r;
  }
  return s.service && r.push(...jt(s.service)), r;
}
function gn({ x: t = 0, y: e = 0, w: i, h: r, full: n, square: s, percent: a }) {
  if (n)
    return "full";
  if (s)
    return "square";
  if (typeof i > "u" || typeof r > "u")
    throw new Error("RegionParameter: invalid region");
  const c = `${t},${e},${i},${r}`;
  return a ? `pct:${c}` : c;
}
function An({ max: t, percentScale: e, upscaled: i, confined: r, width: n, height: s, serialiseAsFull: a, version: c }) {
  const f = [];
  return i && f.push("^"), t ? (f.push(a ? "full" : "max"), f.join("")) : (r && f.push("!"), e && f.push(`pct:${e}`), n && f.push(`${n}`), f.push(","), s && c === 3 && f.push(`${s}`), f.join(""));
}
function bn(t) {
  return `${t.mirror ? "!" : ""}${(t.angle || 0) % 360}`;
}
var Sn = Object.defineProperty;
var xn = Object.defineProperties;
var wn = Object.getOwnPropertyDescriptors;
var Dt = Object.getOwnPropertySymbols;
var Cn = Object.prototype.hasOwnProperty;
var Rn = Object.prototype.propertyIsEnumerable;
var Nt = (t, e, i) => (e in t) ? Sn(t, e, { enumerable: true, configurable: true, writable: true, value: i }) : t[e] = i;
var ue = (t, e) => {
  for (var i in e || (e = {}))
    Cn.call(e, i) && Nt(t, i, e[i]);
  if (Dt)
    for (var i of Dt(e))
      Rn.call(e, i) && Nt(t, i, e[i]);
  return t;
};
var fe = (t, e) => xn(t, wn(e));
function In(t, e) {
  const i = t.prefix.startsWith("/") ? t.prefix.substr(1) : t.prefix, r = `${t.scheme}://${t.server}/${i ? `${i}/` : ""}${t.identifier}`;
  if (t.type === "base")
    return r;
  if (t.type === "info")
    return `${r}/info.json`;
  let { size: n } = t;
  const { region: s, rotation: a, format: c, quality: f } = t;
  if (e) {
    const p2 = e["@context"] ? Array.isArray(e["@context"]) ? e["@context"] : [e["@context"]] : [], u = p2.indexOf("http://iiif.io/api/image/2/context.json") !== -1, v2 = p2.indexOf("http://iiif.io/api/image/3/context.json") !== -1;
    if ((n.width === e.width && !n.height || n.height === e.height && !n.width || n.width === e.width && n.height === e.height) && (n = fe(ue({}, n), { max: true })), u && (n.max && !n.serialiseAsFull && (n = fe(ue({}, n), { serialiseAsFull: true })), !n.max && n.width && n.height && (n = fe(ue({}, n), { height: undefined })), n = fe(ue({}, n), { version: 2 })), v2) {
      if (n.max && n.serialiseAsFull && (n = fe(ue({}, n), { serialiseAsFull: false })), n.width && !n.height && e.width && e.height) {
        const y2 = e.height / e.width;
        n = fe(ue({}, n), { height: Math.ceil(n.width * y2) });
      }
      n = fe(ue({}, n), { version: 3 });
    }
  }
  return [r, gn(s), An(n), bn(a), `${f}.${c}`].filter(Boolean).join("/");
}
function Ke(t, e, i) {
  const r = un({ "@context": t.version === 3 ? "http://iiif.io/api/image/3/context.json" : "http://iiif.io/api/image/2/context.json", id: me(O2(t)), profile: t.level === null || typeof t.level > "u" ? "level0" : `level${t.level}}`, type: t.version === 3 ? "ImageService3" : "ImageService2" });
  if (r.type !== "image")
    throw new Error("Invalid service");
  return r.size.max = false, r.size.width = e, r.size.height = i, { id: In(r), type: "fixed", width: e, height: i || t.height / (t.width || 1) * e, unsafe: t.width > e };
}
function xe(t) {
  const e = t.replace(/(https?:\/\/)?(www.)?/i, "");
  return e.indexOf("/") !== -1 ? e.split("/")[0] : e;
}
function En(t, e, i) {
  const r = t.width ? t.width : t.maxWidth;
  return i.height <= t.maxHeight && i.width <= t.maxWidth && i.height >= t.minHeight && i.width >= t.minWidth && (!e || Math.abs(i.width - r) < Math.abs(e.width - r));
}
function On(t, e) {
  const i = [], r = Object.assign({ unsafeImageService: false, atAnyCost: true, fallback: true, minHeight: 64, minWidth: 64, maxHeight: 1 / 0, maxWidth: 1 / 0, returnAllOptions: false, preferFixedSize: false, allowUnsafe: false, explain: false, height: 0, width: 0 }, t), n = (u, v2 = 0) => r.explain ? i.push(new Array(v2).fill(0).map((y2) => "    ").join("") + u().trim()) : undefined, s = [], a = [];
  let c = null;
  n(() => `Using configuration: ${JSON.stringify(r, null, 2)}`);
  const f = (u, v2) => {
    if (n(() => "Swapping choice", 3), En(r, v2, u)) {
      if (r.preferFixedSize && u.unsafe) {
        n(() => `We found an image that was marked as unsafe, but it was the best size. (${u.id})`, 4), a.push(u);
        return;
      }
      r.returnAllOptions && v2 && a.push(v2), n(() => `We found a new image that was the best size. (${u.id})`, 4), c = u;
    } else
      r.returnAllOptions && a.push(u);
  };
  n(() => `The input shows we have ${e.length} list(s) of candidates to choose from.`);
  const p2 = e.length;
  for (let u = 0;u < p2; u++) {
    const v2 = e[u]();
    n(() => `Candidate group ${u}: ${JSON.stringify(v2, null, 2)}`, 1);
    const y2 = v2.length;
    n(() => `Checking candidate list number ${u} and found ${y2} potential ways of creating image(s)`, 1);
    for (let m = 0;m < y2; m++) {
      const h2 = v2[m];
      if (n(() => `-> Checking candidate ${m}`, 1), h2.type === "unknown" && r.atAnyCost && (n(() => `We've found an unknown image type, adding this to the "last resort" list`, 2), s.push(h2)), h2.type === "fixed" && (h2.unsafe ? (n(() => `We've found an unsafe fixed image type, adding this to the "last resort" list`, 2), s.push(h2)) : (n(() => "We've found a fixed size image, checking if it matches the request", 2), f(h2, c))), h2.type === "fixed-service")
        if (r.unsafeImageService) {
          n(() => "Checking for an image from the tile source, without calculating the right height and width (unsafeImageService)", 2);
          const A2 = Ke(h2, r.width, r.height);
          f(A2, c);
        } else {
          n(() => "Checking for an image from the tile source 3", 2);
          const A2 = Ke(h2, h2.width, h2.height);
          f(A2, c);
        }
      if (h2.type === "variable" && h2.maxWidth) {
        const A2 = Ke({ id: h2.id, type: "fixed-service", width: h2.maxWidth, height: h2.maxWidth, level: h2.level, version: h2.version }, h2.maxWidth);
        f(A2, c);
      }
    }
    if (c && !r.returnAllOptions) {
      if (c.unsafe || r.allowUnsafe)
        continue;
      n(() => `We found a match in choice list number ${u}, no searching any more`);
      break;
    }
  }
  return r.atAnyCost && a.length === 0 ? (n(() => c ? `We found an image! ${c.id} of type ${c.type}` : 'We found no images, but "atAnyCost" is set, so returning that'), { best: c || s[0], fallback: s.slice(1), log: i }) : r.returnAllOptions ? (n(() => "Returning all options that we have found"), { best: r.atAnyCost ? c || a[0] || s[0] : c || a[0], fallback: [...a, ...s], log: i }) : (n(() => "Returning the best image that we found, and a fallback"), { best: c || a[0] || null, fallback: c ? a : a.slice(1), log: i });
}
var _n = Object.defineProperty;
var Tn = Object.defineProperties;
var Mn = Object.getOwnPropertyDescriptors;
var $t = Object.getOwnPropertySymbols;
var kn = Object.prototype.hasOwnProperty;
var Fn = Object.prototype.propertyIsEnumerable;
var qt = (t, e, i) => (e in t) ? _n(t, e, { enumerable: true, configurable: true, writable: true, value: i }) : t[e] = i;
var Ln = (t, e) => {
  for (var i in e || (e = {}))
    kn.call(e, i) && qt(t, i, e[i]);
  if ($t)
    for (var i of $t(e))
      Fn.call(e, i) && qt(t, i, e[i]);
  return t;
};
var Pn = (t, e) => Tn(t, Mn(e));
function jn(t, e, i) {
  const r = t > e ? t : e, n = i.length, s = [];
  for (let a = 0;a < n; a++) {
    const c = i[a];
    let f = c.scaleFactors[0], p2 = r / f;
    const u = [f];
    for (;p2 >= c.width; )
      f = f * 2, u.push(f), p2 = p2 / 2;
    s.push(Pn(Ln({}, c), { scaleFactors: u }));
  }
  return s;
}
function Dn(t, e) {
  if (t.length !== e.length)
    return false;
  if (t.length === 0 && e.length === 0)
    return true;
  const i = t.length;
  let r = true;
  for (let s = 0;s < i; s++) {
    const a = t[s], c = e[s];
    if (a.width !== c.width || a.height !== c.height) {
      r = false;
      break;
    }
  }
  if (r)
    return true;
  let n = 0;
  for (let s = 0;s < i; s++)
    for (let a = 0;a < i; a++)
      if (t[s].width === e[a].width && t[s].height === e[a].height) {
        n++;
        break;
      }
  return n === i;
}
function Ut(t) {
  return Ve(0, t);
}
var pe = (t, e, i) => new Promise((r, n) => {
  var s = (f) => {
    try {
      c(i.next(f));
    } catch (p2) {
      n(p2);
    }
  }, a = (f) => {
    try {
      c(i.throw(f));
    } catch (p2) {
      n(p2);
    }
  }, c = (f) => f.done ? r(f.value) : Promise.resolve(f.value).then(s, a);
  c((i = i.apply(t, e)).next());
});

class Nn {
  constructor() {
    this.config = { verificationsRequired: 1, approximateServices: true, enableFetching: true, disableThrottling: false }, this.fetchingCount = 0, this.imageServices = {}, this.knownImageServers = {};
  }
  setConfig(e) {
    Object.assign(this.config, e);
  }
  sample(e, i, r = true) {
    const n = xe(O2(e)), s = me(O2(e)), a = this.knownImageServers[n];
    return this.imageServices[s] = Object.assign(e, { real: true }), !a && e.tiles && !Ut(e) ? (this.knownImageServers[n] = { verifications: 0, malformed: false, root: n, preLoaded: r, sampledId: O2(e), verified: false, server: null, result: { context: e["@context"] || [], sampledProfile: e.profile, resourceServiceRatio: i && e.height ? i.height / e.height : 1, sampledSizes: e.sizes || [], sizeRatios: fn(e.width, e.height, e.sizes || []), sampledTiles: e.tiles || [] } }, true) : this.verify(e);
  }
  preLoad(e, i = true) {
    this.knownImageServers[e.root] = e, i && (this.knownImageServers[e.root].malformed = false, this.knownImageServers[e.root].verifications = this.config.verificationsRequired);
  }
  predict(e, i = false, r = false) {
    const n = e == null ? undefined : e.source, s = xe(O2(e)), a = this.knownImageServers[s];
    if (!a || !a.result || !(n != null && n.height || e.height) || !(n != null && n.width || e.width) || !r && (a.malformed || a.verifications < this.config.verificationsRequired) || Ut(e.source))
      return null;
    const c = me(O2(e));
    return this.imageServices[c] || (this.imageServices[c] = { "@context": a.result.context, "@id": O2(e), id: O2(e), protocol: "http://iiif.io/api/image", tiles: (n == null ? undefined : n.tiles) || jn(e.width, e.height, a.result.sampledTiles), sizes: (n == null ? undefined : n.sizes) || pn(Math.round(e.width / a.result.resourceServiceRatio), Math.round(e.height / a.result.resourceServiceRatio), a.result.sizeRatios), profile: (n == null ? undefined : n.profile) || a.result.sampledProfile, height: (n == null ? undefined : n.height) || e.height, width: (n == null ? undefined : n.width) || e.width, real: false }), this.imageServices[c];
  }
  getThumbnailFromResource(e, i) {
    return pe(this, arguments, function* (r, n, s = true, a = []) {
      const c = r ? yield this.getImageCandidates(r, s) : [];
      return On(n, [() => a, () => c]);
    });
  }
  getImageCandidates(e, i = true) {
    return pe(this, null, function* () {
      const r = e;
      if (i && r.height && r.width) {
        const n = Ei2(r);
        for (const s of n) {
          const a = { id: O2(s), width: s.width ? s.width : r.width, height: s.height ? s.height : r.height, source: s };
          yield this.loadService(a);
        }
      }
      return mn(e, i, this);
    });
  }
  verify(e) {
    return pe(this, null, function* () {
      const i = this.predict(e, false, true), r = yield this.fetchService(O2(e));
      if (!i)
        return false;
      const n = i.height === r.height && i.width === r.width && i["@context"] === r["@context"] && Dn(i.sizes || [], r.sizes || []);
      if (n) {
        const s = xe(O2(e));
        this.knownImageServers[s].verifications += 1, this.knownImageServers[s].verifications >= this.config.verificationsRequired && (this.knownImageServers[s].verified = true);
      }
      return n;
    });
  }
  canLoadSync(e) {
    const i = typeof e == "string" ? e : O2(e), r = me(i);
    if (this.imageServices[r])
      return true;
    const n = this.knownImageServers[xe(i)];
    return n && !n.malformed && n.verifications >= this.config.verificationsRequired;
  }
  markAsMalformed(e) {
    return pe(this, null, function* () {
      return this.knownImageServers[xe(O2(e))].malformed = true, this.loadService(e, true);
    });
  }
  fetchService(e, i = false) {
    return pe(this, null, function* () {
      const r = me(e);
      if (this.imageServices[r] && (!i || this.imageServices[r].real))
        return this.imageServices[r];
      if (!this.config.enableFetching)
        throw new Error("Fetching is not enabled");
      const n = yield this.fetch(r).then((s) => s.json());
      return !n.id && n["@id"] && (n.id = n["@id"]), n.id !== e && (n.id = e, n["@id"] && (n["@id"] = e)), this.imageServices[r] = Object.assign(n, { real: true }), this.imageServices[r];
    });
  }
  fetch(e, i) {
    return pe(this, null, function* () {
      return fetch(e, i);
    });
  }
  loadService(e, i = false) {
    return pe(this, null, function* () {
      if (!this.config.disableThrottling) {
        let s = true;
        for (;s; )
          if (this.fetchingCount >= this.config.verificationsRequired)
            yield new Promise((a) => setTimeout(a, 500));
          else {
            s = false;
            break;
          }
      }
      const r = this.knownImageServers[xe(O2(e))];
      if (r && !r.malformed && !i) {
        yield r.result;
        const s = this.loadServiceSync(e);
        if (s)
          return s;
      }
      this.fetchingCount++;
      const n = yield this.fetchService(O2(e), i);
      return this.fetchingCount--, n.real && this.sample(n, e), n;
    });
  }
  loadServiceSync(e) {
    const i = me(O2(e));
    return this.imageServices[i] ? this.imageServices[i] : this.predict(e);
  }
}
var $n = new Nn;
function qn(t = B2, e = {}) {
  const i = e.imageServiceLoader || $n;
  async function r(n, s, a = false, c = [], f) {
    const p2 = () => i.getThumbnailFromResource(undefined, s, a, c);
    if (!n)
      return await i.getThumbnailFromResource(undefined, s, a, c);
    if (typeof n == "string") {
      const y2 = ct(n);
      return y2 && c.push(y2), await i.getThumbnailFromResource(undefined, s, a, c);
    }
    const u = t.get(n, { skipSelfReturn: false });
    if (typeof u == "string")
      return { best: ct(u), fallback: [], log: [] };
    if (!u)
      return await p2();
    switch (await (async (y2) => {
      if (y2 && y2.thumbnail && y2.thumbnail.length) {
        const m = t.get(y2.thumbnail[0]), h2 = await i.getImageCandidates(m, a);
        h2 && h2.length && c.push(...h2);
      }
    })(u), u.type) {
      case "Annotation": {
        const y2 = Array.isArray(u.body) ? u.body : [u.body], m = t.get(y2[0]);
        return f && !m.width && (m.width = f.width, m.height = f.height), await i.getThumbnailFromResource(m, s, a, c);
      }
      case "Canvas": {
        const y2 = u;
        return r(y2.items[0], s, a, c, {
          width: y2.width,
          height: y2.height
        });
      }
      case "AnnotationPage":
        return r(u.items[0], s, a, c, f);
      case "Choice": {
        const y2 = u;
        return !y2.items || y2.items[0] ? await p2() : r(y2.items[0], s, a, c, f);
      }
      case "Collection": {
        const m = u.items[0];
        return m ? r(m, s, a, c, f) : await p2();
      }
      case "Manifest": {
        const m = u.items[0];
        return m ? r(m, s, a, c, f) : await p2();
      }
      case "SpecificResource":
      case "Image":
      case "Dataset":
      case "Sound":
      case "Text":
      case "TextualBody":
      case "Video":
        return f && !u.width && (u.width = f.width, u.height = f.height), i.getThumbnailFromResource(u, s, a, c);
    }
    return await p2();
  }
  return {
    getBestThumbnailAtSize: r
  };
}
function Un(t, e, i = [], r = false, n = []) {
  if (n.length && (e = e.filter((a) => n.indexOf(a) === -1)), !e || e.length === 0)
    return;
  if (e.length === 1)
    return e[0];
  if (!t)
    return e.indexOf("none") !== -1 ? "none" : e[0];
  if (e.indexOf(t) !== -1)
    return t;
  const s = t.indexOf("-") !== -1 ? t.slice(0, t.indexOf("-")) : null;
  if (s && e.indexOf(s) !== -1)
    return s;
  for (const a of i)
    if (e.indexOf(a) !== -1)
      return a;
  if (!r && t) {
    const c = e.map((f) => f.indexOf("-") !== -1 ? f.slice(0, f.indexOf("-")) : null).indexOf(t);
    if (c !== -1)
      return e[c];
    for (const f of i) {
      const p2 = f.indexOf("-") !== -1 ? f.slice(0, f.indexOf("-")) : null, u = p2 ? e.indexOf(p2) : -1;
      if (u !== -1)
        return e[u];
    }
  }
  return e.indexOf("none") !== -1 ? "none" : e.indexOf("@none") !== -1 ? "@none" : e[0];
}
function Oi2(t, e, i = {}) {
  const {
    strictFallback: r = false,
    defaultText: n = "",
    separator: s = `
`,
    fallbackLanguages: a = [],
    closest: c,
    skipLanguages: f
  } = i, p2 = Object.keys(t || {}), u = c ? e : Un(e, p2, a, r, f);
  if (!t)
    return n;
  if (typeof t == "string")
    return t;
  const v2 = u ? t[u] : undefined;
  if (v2 && u) {
    if (typeof v2 == "string")
      return v2;
    if (v2.length === 1 && v2[0] === "") {
      const y2 = i.skipLanguages || [];
      return Oi2(t, e, {
        ...i,
        skipLanguages: [...y2, u]
      });
    }
    return v2.join(s);
  }
  return "";
}
function Fo(t, e = {}) {
  return Oi2(t, e.language || (typeof navigator < "u" ? navigator.language : "en"), e);
}
var Wn = function() {
  function t(e, i) {
    var r = [], n = true, s = false, a = undefined;
    try {
      for (var c = e[Symbol.iterator](), f;!(n = (f = c.next()).done) && (r.push(f.value), !(i && r.length === i)); n = true)
        ;
    } catch (p2) {
      s = true, a = p2;
    } finally {
      try {
        !n && c.return && c.return();
      } finally {
        if (s)
          throw a;
      }
    }
    return r;
  }
  return function(e, i) {
    if (Array.isArray(e))
      return e;
    if (Symbol.iterator in Object(e))
      return t(e, i);
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  };
}();
var Fe = Math.PI * 2;
var Gn = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var bs = Object.defineProperty;
var Ss = (t, e, i) => (e in t) ? bs(t, e, { enumerable: true, configurable: true, writable: true, value: i }) : t[e] = i;
var ne2 = (t, e, i) => (Ss(t, typeof e != "symbol" ? e + "" : e, i), i);
function se2(t) {
  return typeof t == "string" ? false : !!t && t.type === "SpecificResource";
}
function Li2(t, e) {
  const i = e || "unknown";
  if (!t)
    return;
  if (typeof t == "string")
    return { id: t, type: i };
  if (se2(t))
    return Li2(t.source, e);
  let r = i && i !== "unknown" ? i : t.type || t["@type"];
  const n = t.id || t["@id"];
  if (r && r.indexOf(":") !== -1 && (r = r.split(":").pop()), n && r)
    return { id: n, type: r };
}
var Pe = {};
var k2 = "iiif-parser:hasPart";
var V2 = "iiif-parser:partOf";
var je = "iiif-parser:isExternal";
var W2 = "__$UNSET$__";
var Pi2 = "__$UNWRAP$__";
var b2 = [];
Object.freeze(b2);
Object.freeze(Pe);
function xs(t) {
  if (t === Pe || Object.keys(t).length === 0)
    return true;
  for (const e in t)
    return false;
  return true;
}
function It(t, e) {
  if (e && e["@explicit"]) {
    const i = {}, r = Object.keys(e);
    for (const n of r)
      n === V2 || n === "@explicit" || (xs(e[n]) ? i[n] = t[n] : i[n] = e[n]);
    return i;
  }
  return t;
}
function ji2(t, e, i) {
  const r = Li2(e);
  if (!r)
    return [undefined, undefined];
  const n = t.requests[r.id], s = r.type || t.mapping[r.id];
  if (!s || n && n.resourceUri && !t.entities[s][n.resourceUri])
    return [undefined, undefined];
  const a = t.entities[s][n ? n.resourceUri : r.id];
  if (r.type && !a)
    return ji2(t, { id: r.id }, i);
  if (a && a[k2]) {
    const c = a[k2].find((p2) => i ? p2[V2] === i.id : p2[V2] === a.id);
    return [It(a, c), a];
  }
  return [a, a];
}
var ws = {
  id: "https://iiif-parser/annotation-page",
  type: "AnnotationPage",
  behavior: b2,
  label: null,
  thumbnail: b2,
  summary: null,
  requiredStatement: null,
  metadata: b2,
  rights: null,
  provider: b2,
  items: b2,
  seeAlso: b2,
  homepage: b2,
  rendering: b2,
  service: b2
};
var Cs = {
  id: "https://iiif-parser/empty-canvas",
  type: "Canvas",
  label: null,
  behavior: b2,
  thumbnail: b2,
  accompanyingCanvas: null,
  placeholderCanvas: null,
  summary: null,
  requiredStatement: null,
  metadata: b2,
  rights: null,
  navDate: null,
  provider: b2,
  items: b2,
  annotations: b2,
  seeAlso: b2,
  homepage: b2,
  partOf: b2,
  rendering: b2,
  service: b2,
  duration: 0,
  height: 0,
  width: 0
};
var Rs = {
  id: "https://iiif-parser/empty-collection",
  type: "Collection",
  label: null,
  viewingDirection: "left-to-right",
  behavior: b2,
  thumbnail: b2,
  accompanyingCanvas: null,
  placeholderCanvas: null,
  summary: null,
  requiredStatement: null,
  metadata: b2,
  rights: null,
  navDate: null,
  provider: b2,
  items: b2,
  annotations: b2,
  seeAlso: b2,
  homepage: b2,
  partOf: b2,
  rendering: b2,
  service: b2,
  services: b2
};
var Is = {
  id: "https://iiif-parser/empty-manifest",
  type: "Manifest",
  annotations: b2,
  behavior: b2,
  homepage: b2,
  items: b2,
  label: null,
  metadata: b2,
  navDate: null,
  provider: b2,
  partOf: b2,
  accompanyingCanvas: null,
  placeholderCanvas: null,
  rendering: b2,
  requiredStatement: null,
  rights: null,
  seeAlso: b2,
  service: b2,
  services: b2,
  start: null,
  structures: b2,
  summary: null,
  thumbnail: b2,
  viewingDirection: "left-to-right"
};
var Es = {
  id: "https://iiif-parser/empty-canvas",
  type: "Range",
  label: null,
  behavior: b2,
  thumbnail: b2,
  accompanyingCanvas: null,
  placeholderCanvas: null,
  summary: null,
  requiredStatement: null,
  metadata: b2,
  rights: null,
  navDate: null,
  provider: b2,
  items: b2,
  annotations: b2,
  seeAlso: b2,
  homepage: b2,
  partOf: b2,
  rendering: b2,
  service: b2,
  start: null,
  supplementary: null,
  viewingDirection: "left-to-right"
};
var Os = {
  id: "https://iiif-parser/empty-agent",
  type: "Agent",
  label: {},
  logo: b2,
  seeAlso: b2,
  homepage: b2
};
var _s = {
  id: "https://iiif-parser/empty-service",
  type: "UnknownService"
};
function Ce(t) {
  return Array.isArray(t) ? t : t ? [t] : [];
}
function We(...t) {
  return (e) => t.reduce((i, r) => r(i), e);
}
var Gt = [
  "Collection",
  "Manifest",
  "Canvas",
  "AnnotationPage",
  "AnnotationCollection",
  "Annotation",
  "ContentResource",
  "Range",
  "Service",
  "Selector",
  "Agent"
];
function Ts(t, e) {
  if (typeof t > "u" || t === null)
    throw new Error("Null or undefined is not a valid entity.");
  if (Array.isArray(t))
    throw new Error("Array is not a valid entity");
  if (typeof t != "object") {
    if (e)
      return e;
    throw new Error(`${typeof t} is not a valid entity`);
  }
  if (typeof t.type == "string") {
    const i = Gt.indexOf(t.type);
    if (i !== -1)
      return Gt[i];
  }
  if (t.profile)
    return "Service";
  throw new Error("Resource type is not known");
}

class Et {
  constructor(e, i = {}) {
    ne2(this, "traversals"), ne2(this, "options"), ne2(this, "_traverseManifest", We(this.traverseManifestItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this), this.traverseManifestStructures.bind(this), this.traverseInlineAnnotationPages.bind(this))), ne2(this, "_traverseCanvas", We(this.traverseCanvasItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this), this.traverseInlineAnnotationPages.bind(this))), ne2(this, "_traverseAnnotationPage", We(this.traverseAnnotationPageItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this))), ne2(this, "_traverseRange", We(this.traverseRangeRanges.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this))), this.traversals = {
      collection: [],
      manifest: [],
      canvas: [],
      annotationCollection: [],
      annotationPage: [],
      annotation: [],
      contentResource: [],
      choice: [],
      range: [],
      service: [],
      agent: [],
      specificResource: [],
      geoJson: [],
      ...e
    }, this.options = {
      allowUndefinedReturn: false,
      ...i
    };
  }
  static all(e) {
    return new Et({
      collection: [e],
      manifest: [e],
      canvas: [e],
      annotationCollection: [e],
      annotationPage: [e],
      annotation: [e],
      contentResource: [e],
      choice: [e],
      range: [e],
      service: [e],
      geoJson: [e],
      specificResource: [e],
      agent: [e]
    });
  }
  traverseDescriptive(e) {
    return e.thumbnail && (e.thumbnail = Ce(e.thumbnail).map((i) => this.traverseType(i, { parent: e }, this.traversals.contentResource))), e.provider && (e.provider = e.provider.map((i) => this.traverseAgent(i, e))), e;
  }
  traverseLinking(e) {
    return e.seeAlso && (e.seeAlso = e.seeAlso.map((i) => this.traverseType(i, { parent: e }, this.traversals.contentResource))), e.service && (e.service = Ce(e.service).map((i) => this.traverseService(i))), e.services && (e.services = Ce(e.services).map((i) => this.traverseService(i, e))), e.logo && (e.logo = e.logo.map((i) => this.traverseType(i, { parent: e }, this.traversals.contentResource))), e.homepage && (e.homepage = e.homepage.map((i) => this.traverseType(i, { parent: e }, this.traversals.contentResource))), e.partOf && (e.partOf = e.partOf.map((i) => typeof i == "string" || !i.type ? this.traverseType(i, { parent: e }, this.traversals.contentResource) : i.type === "Canvas" ? this.traverseType(i, { parent: e }, this.traversals.canvas) : i.type === "AnnotationCollection" ? this.traverseType(i, { parent: e }, this.traversals.annotationCollection) : i.type === "Collection" ? this.traverseType(i, { parent: e }, this.traversals.collection) : this.traverseType(i, { parent: e }, this.traversals.contentResource))), e.start && (se2(e.start) ? e.start = this.traverseSpecificResource(e.start, "Canvas", e) : e.start = this.traverseType(e.start, { parent: e }, this.traversals.canvas)), e.rendering && (e.rendering = e.rendering.map((i) => this.traverseType(i, { parent: e }, this.traversals.contentResource))), e.supplementary && (e.supplementary = e.supplementary.map((i) => this.traverseType(i, { parent: e }, this.traversals.contentResource))), e;
  }
  traverseCollectionItems(e) {
    return e.items && e.items.map((i) => i.type === "Collection" ? this.traverseCollection(i) : this.traverseManifest(i)), e;
  }
  traverseCollection(e, i) {
    return this.traverseType(this.traverseDescriptive(this.traverseInlineAnnotationPages(this.traverseLinking(this.traverseLinkedCanvases(this.traverseCollectionItems(e))))), { parent: i }, this.traversals.collection);
  }
  traverseGeoJson(e, i) {
    return this.traverseType(e, { parent: i }, this.traversals.geoJson);
  }
  traverseNavPlace(e) {
    return e.navPlace && (e.navPlace = this.traverseGeoJson(e.navPlace, e)), e;
  }
  traverseManifestItems(e) {
    return e.items && (e.items = e.items.map((i) => this.traverseCanvas(i))), e;
  }
  traverseManifestStructures(e) {
    return e.structures && (e.structures = e.structures.map((i) => this.traverseRange(i))), e;
  }
  traverseManifest(e, i) {
    return this.traverseType(this._traverseManifest(e), { parent: i }, this.traversals.manifest);
  }
  traverseCanvasItems(e) {
    return e.items = (e.items || []).map((i) => this.traverseAnnotationPage(i, e)), e;
  }
  traverseInlineAnnotationPages(e) {
    return typeof e == "string" || !e || e.annotations && (e.annotations = e.annotations.map((i) => this.traverseAnnotationPage(i, e))), e;
  }
  traverseCanvas(e, i) {
    return this.traverseType(this._traverseCanvas(e), { parent: i }, this.traversals.canvas);
  }
  traverseAnnotationPageItems(e) {
    return e.items && (e.items = e.items.map((i) => this.traverseAnnotation(i, e))), e;
  }
  traverseAnnotationPage(e, i) {
    return this.traverseType(this._traverseAnnotationPage(e), { parent: i }, this.traversals.annotationPage);
  }
  traverseAnnotationBody(e) {
    return Array.isArray(e.body) ? e.body = e.body.map((i) => this.traverseContentResource(i, e)) : e.body && (e.body = this.traverseContentResource(e.body, e)), e;
  }
  traverseLinkedCanvases(e) {
    return e.placeholderCanvas && (e.placeholderCanvas = this.traverseCanvas(e.placeholderCanvas)), e.accompanyingCanvas && (e.accompanyingCanvas = this.traverseCanvas(e.accompanyingCanvas)), e;
  }
  traverseAnnotation(e, i) {
    return this.traverseType(this.traverseLinking(this.traverseAnnotationBody(this.traverseDescriptive(e))), { parent: i }, this.traversals.annotation);
  }
  traverseContentResourceLinking(e) {
    return typeof e == "string" || !e || e && e.service && (e.service = Ce(e.service || []).map((i) => this.traverseService(i, e))), e;
  }
  traverseContentResource(e, i) {
    return e.type === "Choice" && (e.items = e.items.map((r) => this.traverseContentResource(r, e))), se2(e) ? this.traverseSpecificResource(e, "ContentResource") : this.traverseType(this.traverseInlineAnnotationPages(this.traverseContentResourceLinking(e)), { parent: i }, this.traversals.contentResource);
  }
  traverseSpecificResource(e, i, r) {
    let n = e.source;
    return typeof e.source == "string" && (n = { id: e.source, type: i || "unknown" }), this.traverseType({
      ...e,
      source: i === "Canvas" || n.type === "Canvas" ? this.traverseType(n, { parent: r }, this.traversals.canvas) : i === "ContentResource" ? this.traverseContentResource(n, { parent: r }) : this.traverseUnknown(n, { parent: r, typeHint: i })
    }, { parent: r }, this.traversals.specificResource);
  }
  traverseRangeRanges(e) {
    return e.items && (e.items = e.items.map((i) => typeof i == "string" ? this.traverseCanvas({ id: i, type: "Canvas" }, e) : se2(i) ? this.traverseSpecificResource(i, "Canvas", e) : i.type === "Manifest" ? this.traverseManifest(i, e) : this.traverseRange(i, e))), e;
  }
  traverseRange(e, i) {
    return this.traverseType(this._traverseRange(e), { parent: i }, this.traversals.range);
  }
  traverseAgent(e, i) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(e)), { parent: i }, this.traversals.agent);
  }
  traverseType(e, i, r) {
    return r.reduce((n, s) => {
      const a = s(n, i);
      return typeof a > "u" && !this.options.allowUndefinedReturn ? n : a;
    }, e);
  }
  traverseService(e, i) {
    const r = Object.assign({}, e);
    return r && r.service && (r.service = Ce(r.service).map((n) => this.traverseService(n))), this.traverseType(r, { parent: i }, this.traversals.service);
  }
  traverseUnknown(e, { parent: i, typeHint: r } = {}) {
    const n = Ts(e, r);
    switch (n) {
      case "Collection":
        return this.traverseCollection(e, i);
      case "Manifest":
        return this.traverseManifest(e, i);
      case "Canvas":
        return this.traverseCanvas(e, i);
      case "AnnotationPage":
        return this.traverseAnnotationPage(e, i);
      case "Annotation":
        return this.traverseAnnotation(e, i);
      case "ContentResource":
        return this.traverseContentResource(e, i);
      case "Range":
        return this.traverseRange(e, i);
      case "Service":
        return this.traverseService(e, i);
      case "Agent":
        return this.traverseAgent(e, i);
      default: {
        if (r)
          return r;
        throw new Error(`Unknown or unsupported resource type of ${n}`);
      }
    }
  }
}
var Qt = [
  "sc:Collection",
  "sc:Manifest",
  "sc:Canvas",
  "sc:AnnotationList",
  "oa:Annotation",
  "sc:Range",
  "sc:Layer",
  "sc:Sequence",
  "oa:Choice",
  "Service",
  "ContentResource"
];
function Ms(t) {
  if (typeof t > "u" || t === null)
    throw new Error("Null or undefined is not a valid entity.");
  if (Array.isArray(t))
    throw new Error("Array is not a valid entity");
  if (typeof t != "object")
    throw new Error(`${typeof t} is not a valid entity`);
  if (typeof t["@type"] == "string") {
    const e = Qt.indexOf(t["@type"]);
    if (e !== -1)
      return Qt[e];
  }
  if (t.profile)
    return "Service";
  if (t.format || t["@type"])
    return "ContentResource";
  throw new Error("Resource type is not known");
}

class Ot {
  constructor(e, i = {}) {
    ne2(this, "traversals"), ne2(this, "options"), this.traversals = {
      collection: [],
      manifest: [],
      canvas: [],
      annotationList: [],
      sequence: [],
      annotation: [],
      contentResource: [],
      choice: [],
      range: [],
      service: [],
      layer: [],
      ...e
    }, this.options = {
      convertPropsToArray: true,
      mergeMemberProperties: true,
      allowUndefinedReturn: false,
      ...i
    };
  }
  static all(e) {
    return new Ot({
      collection: [e],
      manifest: [e],
      canvas: [e],
      annotationList: [e],
      sequence: [e],
      annotation: [e],
      contentResource: [e],
      choice: [e],
      range: [e],
      service: [e],
      layer: [e]
    });
  }
  traverseCollection(e) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCollectionItems(e))), this.traversals.collection);
  }
  traverseCollectionItems(e) {
    if (this.options.mergeMemberProperties) {
      const i = [
        ...(e.manifests || []).map((r) => typeof r == "string" ? { "@id": r, "@type": "sc:Manifest" } : r),
        ...(e.collections || []).map((r) => typeof r == "string" ? { "@id": r, "@type": "sc:Collection" } : r),
        ...e.members || []
      ];
      delete e.collections, delete e.manifests, e.members = i;
    }
    return e.manifests && (e.manifests = e.manifests.map((i) => this.traverseManifest(typeof i == "string" ? { "@id": i, "@type": "sc:Manifest" } : i))), e.collections && (e.collections = e.collections.map((i) => this.traverseCollection(typeof i == "string" ? { "@id": i, "@type": "sc:Collection" } : i))), e.members && (e.members = e.members.map((i) => typeof i == "string" ? i : this.traverseUnknown(i))), e;
  }
  traverseManifest(e) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseManifestItems(e))), this.traversals.manifest);
  }
  traverseManifestItems(e) {
    return e.sequences && (e.sequences = e.sequences.map((i) => this.traverseSequence(i))), e.structures && (e.structures = e.structures.map((i) => this.traverseRange(i))), e;
  }
  traverseSequence(e) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseSequenceItems(e))), this.traversals.sequence);
  }
  traverseSequenceItems(e) {
    return e.canvases && (e.canvases = e.canvases.map((i) => this.traverseCanvas(i))), e;
  }
  traverseCanvas(e) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCanvasItems(e))), this.traversals.canvas);
  }
  traverseCanvasItems(e) {
    return e.images && (e.images = e.images.map((i) => this.traverseAnnotation(i))), e.otherContent && (e.otherContent = e.otherContent.map((i) => this.traverseAnnotationList(i))), e;
  }
  traverseRange(e) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseRangeItems(e))), this.traversals.range);
  }
  traverseRangeItems(e) {
    if (this.options.mergeMemberProperties) {
      const i = [
        ...(e.ranges || []).map((r) => typeof r == "string" ? { "@id": r, "@type": "sc:Range" } : r),
        ...(e.canvases || []).map((r) => typeof r == "string" ? { "@id": r, "@type": "sc:Canvas" } : r),
        ...e.members || []
      ];
      delete e.ranges, delete e.canvases, e.members = i.length ? i.map((r) => this.traverseUnknown(r)) : undefined;
    }
    return e;
  }
  traverseAnnotationList(e) {
    const i = typeof e == "string" ? { "@id": e, "@type": "sc:AnnotationList" } : e;
    return this.traverseType(this.traverseDescriptive(this.traverseAnnotationListItems(i)), this.traversals.annotationList);
  }
  traverseAnnotationListItems(e) {
    return e.resources && (e.resources = e.resources.map((i) => this.traverseAnnotation(i))), e;
  }
  traverseAnnotation(e) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseAnnotationItems(e))), this.traversals.annotation);
  }
  traverseAnnotationItems(e) {
    return e.resource && (Array.isArray(e.resource) ? e.resource = e.resource.map((i) => this.traverseContentResource(i)) : e.resource = this.traverseContentResource(e.resource)), e.on, e;
  }
  traverseLayer(e) {
    return this.traverseType(this.traverseLinking(this.traverseLayerItems(e)), this.traversals.layer);
  }
  traverseLayerItems(e) {
    return e.otherContent && (e.otherContent = e.otherContent.map((i) => this.traverseAnnotationList(i))), e;
  }
  traverseChoice(e) {
    return this.traverseType(this.traverseChoiceItems(e), this.traversals.choice);
  }
  traverseChoiceItems(e) {
    return e.default && e.default !== "rdf:nil" && (e.default = this.traverseContentResource(e.default)), e.item && e.item !== "rdf:nil" && (e.item = e.item.map((i) => this.traverseContentResource(i))), e;
  }
  traverseService(e) {
    return this.traverseType(this.traverseLinking(e), this.traversals.service);
  }
  traverseContentResource(e) {
    return e["@type"] === "oa:Choice" ? this.traverseChoice(e) : this.traverseType(this.traverseDescriptive(this.traverseLinking(e)), this.traversals.contentResource);
  }
  traverseUnknown(e) {
    if (!e["@type"] || typeof e == "string")
      return e;
    switch (Ms(e)) {
      case "sc:Collection":
        return this.traverseCollection(e);
      case "sc:Manifest":
        return this.traverseManifest(e);
      case "sc:Canvas":
        return this.traverseCanvas(e);
      case "sc:Sequence":
        return this.traverseSequence(e);
      case "sc:Range":
        return this.traverseRange(e);
      case "oa:Annotation":
        return this.traverseAnnotation(e);
      case "sc:AnnotationList":
        return this.traverseAnnotationList(e);
      case "sc:Layer":
        return this.traverseLayer(e);
      case "Service":
        return this.traverseService(e);
      case "oa:Choice":
        return this.traverseChoice(e);
      case "ContentResource":
        return this.traverseContentResource(e);
    }
    return e.profile ? this.traverseService(e) : e;
  }
  traverseImageResource(e) {
    const i = Array.isArray(e), r = Array.isArray(e) ? e : [e], n = [];
    for (const s of r)
      typeof s == "string" ? n.push(this.traverseContentResource({
        "@id": s,
        "@type": "dctypes:Image"
      })) : n.push(this.traverseContentResource(s));
    return !i && !this.options.convertPropsToArray ? n[0] : n;
  }
  traverseDescriptive(e) {
    return e.thumbnail && (e.thumbnail = this.traverseImageResource(e.thumbnail)), e.logo && (e.logo = this.traverseImageResource(e.logo)), e;
  }
  traverseOneOrMoreServices(e) {
    const i = Array.isArray(e), r = Array.isArray(e) ? e : [e], n = [];
    for (const s of r)
      n.push(this.traverseService(s));
    return !i && !this.options.convertPropsToArray ? n[0] : n;
  }
  traverseLinking(e) {
    return e.related && (e.related = this.traverseOneOrManyType(e.related, this.traversals.contentResource)), e.rendering && (e.rendering = this.traverseOneOrManyType(e.rendering, this.traversals.contentResource)), e.service && (e.service = this.traverseOneOrMoreServices(e.service)), e.seeAlso && (e.seeAlso = this.traverseOneOrManyType(e.seeAlso, this.traversals.contentResource)), e.within && (typeof e.within == "string" || (e.within = this.traverseOneOrManyType(e.within, this.traversals.contentResource))), e.startCanvas && (typeof e.startCanvas == "string" ? e.startCanvas = this.traverseType({ "@id": e.startCanvas, "@type": "sc:Canvas" }, this.traversals.canvas) : e.startCanvas && this.traverseType(e.startCanvas, this.traversals.canvas)), e.contentLayer && (typeof e.contentLayer == "string" ? e.contentLayer = this.traverseLayer({
      "@id": e.contentLayer,
      "@type": "sc:Layer"
    }) : e.contentLayer = this.traverseLayer(e.contentLayer)), e;
  }
  traverseOneOrManyType(e, i) {
    if (!Array.isArray(e))
      if (this.options.convertPropsToArray)
        e = [e];
      else
        return this.traverseType(e, i);
    return e.map((r) => this.traverseType(r, i));
  }
  traverseType(e, i) {
    return i.reduce((r, n) => {
      const s = n(r);
      return typeof s > "u" && !this.options.allowUndefinedReturn ? r : s;
    }, e);
  }
}
var ks = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
var Di2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
var Ni2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
var Fs = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
var $i2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
var qi = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
var Ls = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
var Ui2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
var Wi2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
var Ps = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
var zi2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
var Vi = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
var js = "http://iiif.io/api/image/1/level0.json";
var Ds = "http://iiif.io/api/image/1/profiles/level0.json";
var Bi2 = "http://iiif.io/api/image/1/level1.json";
var Gi2 = "http://iiif.io/api/image/1/profiles/level1.json";
var Qi2 = "http://iiif.io/api/image/1/level2.json";
var Hi2 = "http://iiif.io/api/image/1/profiles/level2.json";
var Ns = "http://iiif.io/api/image/2/level0.json";
var $s = "http://iiif.io/api/image/2/profiles/level0.json";
var Yi = "http://iiif.io/api/image/2/level1.json";
var Ji2 = "http://iiif.io/api/image/2/profiles/level1.json";
var Xi = "http://iiif.io/api/image/2/level2.json";
var Ki2 = "http://iiif.io/api/image/2/profiles/level2.json";
var qs = "level0";
var Zi2 = "level1";
var er = "level2";
var Us = "http://iiif.io/api/image/2/level0";
var tr = "http://iiif.io/api/image/2/level1";
var ir = "http://iiif.io/api/image/2/level2";
var Ws = [
  tr,
  ir,
  Di2,
  Ni2,
  $i2,
  qi,
  Ui2,
  Wi2,
  zi2,
  Vi,
  Bi2,
  Gi2,
  Qi2,
  Hi2,
  Yi,
  Ji2,
  Xi,
  Ki2,
  Zi2,
  er
];
var zs = [
  Us,
  tr,
  ir,
  ks,
  Di2,
  Ni2,
  Fs,
  $i2,
  qi,
  Ls,
  Ui2,
  Wi2,
  Ps,
  zi2,
  Vi,
  js,
  Ds,
  Bi2,
  Gi2,
  Qi2,
  Hi2,
  Ns,
  $s,
  Yi,
  Ji2,
  Xi,
  Ki2,
  qs,
  Zi2,
  er
];
function X2(t) {
  for (const e in t)
    (typeof t[e] > "u" || t[e] === null) && delete t[e];
  return t;
}
var lt = {
  attributionLabel: "Attribution",
  lang: "none",
  providerId: "http://example.org/provider",
  providerName: "Unknown"
};
function Vs(t) {
  if (typeof t == "string")
    return [t];
  if (!t)
    return [];
  const e = Array.isArray(t) ? t : [t], i = [];
  for (const r of e) {
    if (typeof r == "string") {
      i.push(r);
      continue;
    }
    i.push({
      "@language": r["@language"] || r.language,
      "@value": r["@value"] || r.value
    });
  }
  return i;
}
function Se(t, e = "none") {
  if (!t)
    return {};
  const i = Vs(t), r = {};
  for (const n of i) {
    if (typeof n == "string") {
      r[e] = r[e] ? r[e] : [], r[e].push(n || "");
      continue;
    }
    if (!n["@language"]) {
      r[e] = r[e] ? r[e] : [], r[e].push(n["@value"] || "");
      continue;
    }
    const s = n["@language"];
    r[s] = r[s] ? r[s] : [], r[s].push(n["@value"] || "");
  }
  return r;
}
function rr(t) {
  if (Array.isArray(t))
    return rr(t.find((e) => typeof e == "string"));
  if (zs.indexOf(t) !== -1)
    return "level2";
  if (Ws.indexOf(t) !== -1)
    return "level1";
  if (typeof t == "string")
    return t;
}
function Bs(t) {
  const e = Array.isArray(t) ? t : [t];
  for (const i of e)
    switch (i) {
      case "http://iiif.io/api/image/2/context.json":
      case "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2":
        return "ImageService2";
      case "http://iiif.io/api/image/1/context.json":
      case "http://library.stanford.edu/iiif/image-api/1.1/context.json":
        return "ImageService1";
      case "http://iiif.io/api/annex/openannotation/context.json":
        return "ImageApiSelector";
    }
}
function Gs(t) {
  switch (t) {
    case "http://iiif.io/api/image/2/level0.json":
    case "http://iiif.io/api/image/2/level1.json":
    case "http://iiif.io/api/image/2/level2.json":
      return "ImageService2";
    case "http://iiif.io/api/auth/1/kiosk":
    case "http://iiif.io/api/auth/1/login":
    case "http://iiif.io/api/auth/1/clickthrough":
    case "http://iiif.io/api/auth/1/external":
    case "http://iiif.io/api/auth/0/kiosk":
    case "http://iiif.io/api/auth/0/login":
    case "http://iiif.io/api/auth/0/clickthrough":
    case "http://iiif.io/api/auth/0/external":
      return "AuthCookieService1";
    case "http://iiif.io/api/auth/1/token":
    case "http://iiif.io/api/auth/0/token":
      return "AuthTokenService1";
    case "http://iiif.io/api/auth/1/logout":
    case "http://iiif.io/api/auth/0/logout":
      return "AuthLogoutService1";
    case "http://iiif.io/api/search/1/search":
    case "http://iiif.io/api/search/0/search":
      return "SearchService1";
    case "http://iiif.io/api/search/1/autocomplete":
    case "http://iiif.io/api/search/0/autocomplete":
      return "AutoCompleteService1";
  }
}
function Ht(t) {
  for (const e of ["sc", "oa", "dcterms", "dctypes", "iiif"])
    if (t.startsWith(`${e}:`))
      return t.slice(e.length + 1);
  return t;
}
var Qs = ["Collection", "Manifest", "Annotation", "AnnotationPage", "Range", "Service"];
function _t(t) {
  const e = t["@id"] || t.id;
  let i = t["@type"] || t.type;
  const r = t.profile || undefined, n = t["@context"] || undefined;
  if (r) {
    const s = Gs(r);
    if (s)
      return s;
  }
  if (n) {
    const s = Bs(n);
    if (s)
      return s;
  }
  if (i) {
    if (Array.isArray(i)) {
      if (i.indexOf("oa:CssStylesheet") !== -1)
        return "CssStylesheet";
      if (i.indexOf("cnt:ContentAsText") !== -1)
        return "TextualBody";
      i = i[0];
    }
    for (const s of ["sc", "oa", "dcterms", "dctypes", "iiif"])
      if (i.startsWith(`${s}:`)) {
        i = i.slice(s.length + 1);
        break;
      }
    switch (i) {
      case "Layer":
        return "AnnotationCollection";
      case "AnnotationList":
        return "AnnotationPage";
      case "cnt:ContentAsText":
        return "TextualBody";
    }
  }
  if (i && Qs.indexOf(i) !== -1)
    return i;
  if (t.format) {
    if (t.format.startsWith("image/"))
      return "Image";
    if (t.format.startsWith("text/") || t.format === "application/pdf")
      return "Text";
    if (t.format.startsWith("application/"))
      return "Dataset";
  }
  return e && (e.endsWith(".jpg") || e.endsWith(".png") || e.endsWith(".jpeg")) ? "Image" : i || "unknown";
}
var Hs = /http(s)?:\/\/(creativecommons.org|rightsstatements.org)[^"'\\<\n]+/gm;
function Ys(t) {
  const e = t.match(Hs);
  return e ? e[0] : t;
}
function Js(t, e = "Rights/License", i = "none") {
  let r = null;
  const n = [], s = Array.isArray(t) ? t : [t];
  for (const a of s) {
    const c = a ? Ys(a) : undefined;
    if (c && (c.indexOf("creativecommons.org") !== -1 || c.indexOf("rightsstatements.org") !== -1)) {
      c.startsWith("https://") ? r = `http://${c.slice(8)}` : r = c;
      continue;
    }
    c && n.push({
      label: { [i]: [e] },
      value: { [i]: [c] }
    });
  }
  return [r, n];
}
var Xs = [
  "http://iiif.io/api/presentation/2/context.json",
  "http://iiif.io/api/image/2/context.json",
  "http://iiif.io/api/image/1/context.json",
  "http://library.stanford.edu/iiif/image-api/1.1/context.json",
  "http://iiif.io/api/search/1/context.json",
  "http://iiif.io/api/search/0/context.json",
  "http://iiif.io/api/auth/1/context.json",
  "http://iiif.io/api/auth/0/context.json",
  "http://iiif.io/api/annex/openannotation/context.json"
];
function Ks(t) {
  if (t) {
    const e = Array.isArray(t) ? t : [t], i = [];
    for (const r of e)
      r === "http://iiif.io/api/presentation/2/context.json" && i.push("http://iiif.io/api/presentation/3/context.json"), Xs.indexOf(r) === -1 && i.push(r);
    if (e.length)
      return i.length === 1 ? i[0] : i;
  }
}
function Zs(t) {
  return t ? t.map((e) => ({
    label: Se(e.label),
    value: Se(e.value)
  })) : [];
}
var Yt = 0;
function nr(t, e) {
  const i = encodeURI(t.id || t["@id"] || "").trim();
  return i && e ? `${i}/${e}` : i || (Yt++, `http://example.org/${t["@type"]}${e ? `/${e}` : ""}/${Yt}`);
}
function K2(t) {
  const e = [...t.behavior || []];
  t.viewingHint && e.push(t.viewingHint);
  let i;
  return Array.isArray(t.motivation) ? i = t.motivation.map(Ht) : t.motivation && (i = Ht(t.motivation)), {
    "@context": t["@context"] ? Ks(t["@context"]) : undefined,
    id: (t["@id"] || nr(t)).trim(),
    type: _t(t),
    behavior: e.length ? e : undefined,
    height: t.height ? t.height : undefined,
    width: t.width ? t.width : undefined,
    motivation: i,
    viewingDirection: t.viewingDirection,
    profile: t.profile,
    format: t.format ? t.format : undefined,
    duration: undefined,
    timeMode: undefined
  };
}
function Z2(t) {
  const [e, i] = Js(t.license), r = [...t.metadata ? Zs(t.metadata) : [], ...i];
  return {
    rights: e,
    metadata: r.length ? r : undefined,
    label: t.label ? Se(t.label) : undefined,
    requiredStatement: t.attribution ? {
      label: Se(lt.attributionLabel),
      value: Se(t.attribution)
    } : undefined,
    navDate: t.navDate,
    summary: t.description ? Se(t.description) : undefined,
    thumbnail: ea(t.thumbnail)
  };
}
function ea(t) {
  return t && (Array.isArray(t) ? t : [t]).map((i) => typeof i == "string" ? { id: i, type: "Image" } : (i.type === "unknown" && (i.type = "Image"), i));
}
function ta(t) {
  if (!t.within)
    return;
  const e = Array.isArray(t.within) ? t.within : [t.within], i = [];
  for (const r of e)
    if (typeof r == "string") {
      if (r)
        switch (t["@type"]) {
          case "sc:Manifest":
            i.push({ id: r, type: "Collection" });
            break;
        }
    } else
      r["@id"] && i.push({
        id: r["@id"],
        type: _t(r)
      });
  return i.length ? i : undefined;
}
function oe2(t) {
  const e = t.related ? Array.isArray(t.related) ? t.related : [t.related] : [], i = t.contentLayer;
  return {
    provider: t.logo || e.length ? [
      {
        id: lt.providerId,
        type: "Agent",
        homepage: e.length ? [e[0]] : undefined,
        logo: t.logo ? Array.isArray(t.logo) ? t.logo : [t.logo] : undefined,
        label: Se(lt.providerName)
      }
    ] : undefined,
    partOf: ta(t),
    rendering: t.rendering,
    seeAlso: t.seeAlso,
    start: t.startCanvas,
    service: t.service ? Ce(t.service) : undefined,
    supplementary: i ? [i] : undefined
  };
}
function ia(t) {
  return {
    chars: t.chars,
    format: t.format ? t.format : undefined,
    language: t.language
  };
}
function ra(t) {
  return X2({
    ...K2(t),
    ...Z2(t),
    ...oe2(t),
    items: t.members
  });
}
function na(t) {
  const e = [], i = [];
  let r;
  for (const s of t.sequences || [])
    s.canvases.length && e.push(...s.canvases), s.behavior && i.push(...s.behavior), s.startCanvas && (r = s.startCanvas);
  const n = K2(t);
  return i.length && (n.behavior ? n.behavior.push(...i) : n.behavior = i), X2({
    ...n,
    ...Z2(t),
    ...oe2(t),
    start: r,
    items: e,
    structures: t.structures
  });
}
function sa(t) {
  return X2({
    ...K2(t),
    ...Z2(t),
    ...oe2(t),
    annotations: t.otherContent && t.otherContent.length ? t.otherContent : undefined,
    items: t.images && t.images.length ? [
      {
        id: nr(t, "annotation-page"),
        type: "AnnotationPage",
        items: t.images
      }
    ] : undefined
  });
}
function aa(t) {
  return X2({
    ...K2(t),
    ...Z2(t),
    ...oe2(t),
    items: t.resources && t.resources.length ? t.resources : undefined
  });
}
function oa(t) {
  return !t.canvases || t.canvases.length === 0 ? {
    canvases: [],
    behavior: []
  } : {
    canvases: t.canvases,
    behavior: t.viewingHint ? [t.viewingHint] : [],
    startCanvas: t.startCanvas
  };
}
function ca(t) {
  function e(i) {
    if (Array.isArray(i)) {
      if (i.length > 1)
        return { type: "List", items: i.map(e) };
      i = i[0];
    }
    if (typeof i == "string")
      return encodeURI(i).trim();
    if ("@type" in i) {
      let r;
      if (typeof i.full == "string")
        r = i.full;
      else if (i.full["@type"] === "dctypes:Image")
        r = { id: i.full["@id"], type: "Image" };
      else if (i.full["@type"] === "sc:Canvas")
        r = { id: i.full["@id"], type: "Canvas" };
      else
        throw new Error(`Unsupported source type on annotation: ${i.full["@type"]}`);
      return {
        type: "SpecificResource",
        source: r,
        selector: ft(i.selector)
      };
    } else
      return encodeURI(i["@id"]).trim();
  }
  return X2({
    ...K2(t),
    ...Z2(t),
    ...oe2(t),
    target: e(t.on),
    body: Array.isArray(t.resource) ? t.resource.map(ut) : ut(t.resource)
  });
}
function ut(t) {
  const e = t;
  return X2({
    ...K2(e),
    ...Z2(e),
    ...oe2(e),
    ...ia(e)
  });
}
function la(t) {
  const e = [];
  return t.default && t.default !== "rdf:nil" && e.push(t.default), t.item && t.item !== "rdf:nil" && e.push(...t.item), {
    ...K2(t),
    ...Z2(t),
    items: e
  };
}
function ua(t) {
  return X2({
    ...K2(t),
    ...Z2(t),
    ...oe2(t),
    items: t.members
  });
}
function fa(t) {
  const { "@id": e, "@type": i, "@context": r, profile: n, ...s } = t, a = {};
  return e && (a["@id"] = e), a["@type"] = _t(t), a["@type"] === "unknown" && (r && r.length && (a["@context"] = r), a["@type"] = "Service"), n && (a.profile = rr(n)), X2({
    ...a,
    ...s
  });
}
function pa(t) {
  return X2({
    ...K2(t),
    ...Z2(t),
    ...oe2(t)
  });
}
var ha = new Ot({
  collection: [ra],
  manifest: [na],
  canvas: [sa],
  annotationList: [aa],
  sequence: [oa],
  annotation: [ca],
  contentResource: [ut],
  choice: [la],
  range: [ua],
  service: [fa],
  layer: [pa]
});
function da(t) {
  return t && t["@context"] && (t["@context"] === "http://iiif.io/api/presentation/2/context.json" || t["@context"].indexOf("http://iiif.io/api/presentation/2/context.json") !== -1 || t["@context"] === "http://www.shared-canvas.org/ns/context.json") || t["@context"] === "http://iiif.io/api/image/2/context.json" ? ha.traverseUnknown(t) : t;
}
function ft(t) {
  if ((Array.isArray(t["@type"]) && t["@type"].includes("oa:SvgSelector") || t["@type"] == "oa:SvgSelector") && (("chars" in t) || ("value" in t)))
    return {
      type: "SvgSelector",
      value: "chars" in t ? t.chars : t.value
    };
  if (t["@type"] === "oa:FragmentSelector")
    return {
      type: "FragmentSelector",
      value: t.value
    };
  if (t["@type"] === "oa:Choice")
    return [
      ft(t.default),
      ...(Array.isArray(t.item) ? t.item : [t.item]).map(ft)
    ];
  if (t["@type"] == "iiif:ImageApiSelector")
    return {
      type: "ImageApiSelector",
      region: "region" in t ? t.region : undefined,
      rotation: "rotation" in t ? t.rotation : undefined
    };
  throw new Error(`Unsupported selector type: ${t["@type"]}`);
}
function pt(t, e = {}) {
  if (Array.isArray(t))
    return pt(t[0]);
  if (typeof t == "string") {
    const [i, r] = t.split("#");
    return r ? {
      type: "SpecificResource",
      source: { id: i, type: e.typeHint || "Unknown" },
      selector: {
        type: "FragmentSelector",
        value: r
      }
    } : {
      type: "SpecificResource",
      source: { id: i, type: e.typeMap && e.typeMap[i] || e.typeHint || "Unknown" }
    };
  }
  if (t.type === "Choice" || t.type === "List" || t.type === "Composite" || t.type === "Independents")
    return pt(t.items[0]);
  if (t.type === "SpecificResource")
    return t.source.type === "Canvas" && t.source.partOf && typeof t.source.partOf == "string" && (t.source.partOf = [
      {
        id: t.source.partOf,
        type: "Manifest"
      }
    ]), t.selector ? {
      type: "SpecificResource",
      source: t.source,
      selector: t.selector
    } : {
      type: "SpecificResource",
      source: t.source
    };
  if (t.id) {
    t.type === "Canvas" && t.partOf && typeof t.partOf == "string" && (t.partOf = [
      {
        id: t.partOf,
        type: "Manifest"
      }
    ]);
    const [i, r] = t.id.split("#");
    return r ? {
      type: "SpecificResource",
      source: {
        ...t,
        id: i
      },
      selector: {
        type: "FragmentSelector",
        value: r
      }
    } : {
      type: "SpecificResource",
      source: {
        ...t,
        id: i
      }
    };
  }
  return {
    type: "SpecificResource",
    source: t
  };
}
function va() {
  return {
    Collection: {},
    Manifest: {},
    Canvas: {},
    AnnotationPage: {},
    AnnotationCollection: {},
    Annotation: {},
    ContentResource: {},
    Range: {},
    Service: {},
    Selector: {},
    Agent: {}
  };
}
function sr(t, e) {
  if (typeof t == "string")
    return { id: t, type: e };
  if (!t.id)
    throw new Error(`Invalid resource does not have an ID (${JSON.stringify(t)}, ${e})`);
  return t;
}
function ya(t, e) {
  return (i, r) => {
    const n = t[i] ? t[i] : {};
    return (s, a) => {
      const c = sr(s, r || i);
      return c && c.id && i ? (n[c.id] = n[c.id] ? dt(n[c.id], c, {
        parent: a.parent,
        isTopLevel: e.id === c.id
      }) : dt({ id: c.id, type: c.type }, c, {
        parent: a.parent,
        isTopLevel: e.id === c.id
      }), {
        id: c.id,
        type: i === "ContentResource" ? i : c.type
      }) : c;
    };
  };
}
function ht(t, e, i) {
  if (!e)
    return t;
  if (Array.isArray(t)) {
    if (!Array.isArray(e))
      throw new Error("Cannot merge array with non-array");
    const r = [...t];
    for (const n of e)
      if (n["@id"] && !n.id && (n.id = n["@id"]), n["@type"] && !n.type && (n.type = n["@type"]), n != null)
        if (Array.isArray(n))
          r.push(n);
        else if (typeof n == "object" && n.id && n.type) {
          const s = r.findIndex((a) => a.id === n.id && a.type === n.type);
          s >= 0 && (r[s] = ht(r[s], n));
        } else
          t.indexOf(n) === -1 && r.push(n);
    return r;
  } else if (typeof t == "object") {
    if (Array.isArray(e) || typeof e != "object")
      throw new Error("Cannot merge object with non-object");
    const r = { ...t }, n = [], s = [], a = Object.keys(t).filter((p2) => p2 !== k2 && p2 !== "id" && p2 !== "type"), c = {}, f = {};
    for (const [p2, u] of Object.entries(e)) {
      if (p2 === k2 || p2 === "id" || p2 === "type")
        continue;
      const v2 = r[p2];
      v2 === u ? s.push(p2) : v2 === b2 || !v2 ? (n.push(p2), r[p2] = u) : (v2 && u && (c[p2] = v2, f[p2] = u), r[p2] = ht(v2, u), r[p2] === c[p2] && (s.push(p2), delete c[p2]));
    }
    if (i && (i.parent && i.parent.id || i.isTopLevel)) {
      const p2 = [], u = {};
      if (i.parent ? u[V2] = i.parent.id : i.isTopLevel && (u[V2] = t.id), r[k2] && r[k2].length) {
        const v2 = !(r[k2] || []).find((m) => m["@explicit"]), y2 = n.length > 0 || s.length !== a.length;
        if (v2 && y2)
          for (const m of r[k2]) {
            const h2 = { ...m }, A2 = Object.keys(c);
            if (h2) {
              h2["@explicit"] = true;
              for (const x2 of a)
                x2 !== k2 && (h2[x2] = Pe);
              for (const x2 of A2)
                h2[x2] = c[x2];
            }
            p2.push(h2);
          }
        else
          p2.push(...r[k2]);
        if (y2) {
          const m = Object.keys(f);
          u["@explicit"] = true;
          for (const h2 of n)
            u[h2] = Pe;
          for (const h2 of s)
            u[h2] = Pe;
          for (const h2 of m)
            u[h2] = f[h2];
        }
      }
      u.id = r.id, u.type = r.type, p2.push(u), r[k2] = p2;
    }
    return r;
  } else if (t)
    return t;
  return e;
}
function dt(t, e, i) {
  if (typeof t == "string")
    return t;
  if (e.id !== t.id || e.type !== t.type) {
    if (e.type === "ImageService3")
      return e;
    if (t.type === "ImageService3")
      return t;
    throw new Error(`Can only merge entities with identical identifiers and type! ${e.type}(${e.id}) => ${t.type}(${t.id})`);
  }
  return ht({ ...t }, e, i);
}
function ma(t) {
  return (e, i) => (r) => {
    const { id: n, type: s } = sr(r, i || e);
    if (typeof n > "u")
      throw new Error("Found invalid entity without an ID.");
    return e === "ContentResource" || e === "Service" ? t[n] = e : t[n] = s, r;
  };
}
function ga(t) {
  const e = Object.assign({}, t);
  if (e["@id"] && (e.id = e["@id"]), e["@type"] && (e.type = e["@type"]), e.service) {
    const i = [];
    e.service = Array.isArray(e.service) ? e.service : [e.service];
    for (const r of e.service)
      i.push({
        id: r["@id"] || r.id,
        type: r["@type"] || r.type
      });
    e.service = i;
  }
  return Object.assign({}, _s, e);
}
function Aa(t) {
  return (e) => {
    t.Service = t.Service ? t.Service : {};
    const i = e.id || e["@id"], r = ga(e);
    return r && r.id && (t.Service[r.id] ? t.Service[i] = dt(t.Service[i], r) : t.Service[i] = r), e;
  };
}
function ba(t) {
  const e = JSON.stringify(t);
  let i = 5381, r = e.length;
  for (;r; )
    i = i * 33 ^ e.charCodeAt(--r);
  const s = (i >>> 0).toString(16);
  return s.length % 2 ? "0" + s : s;
}
function tt(t) {
  return (e) => typeof e == "string" ? { id: e, type: t } : e.id ? e.type ? e : { type: t, ...e } : { id: `vault://${ba(e)}`, type: t, ...e };
}
function we(t) {
  return (e) => ({
    ...t,
    ...e
  });
}
function Me(t) {
  return Array.isArray(t) ? t : [t];
}
function Sa(t) {
  return t.body && (t.body = Me(t.body)), t.seeAlso && (t.seeAlso = Me(t.seeAlso)), t.audience && (t.audience = Me(t.audience)), t.accessibility && (t.accessibility = Me(t.accessibility)), t.motivation && (t.motivation = Me(t.motivation)), t;
}
function ar(t, { typeHint: e, partOfTypeHint: i } = {}) {
  if (typeof t == "string" && (t = { id: t, type: e || "unknown" }), se2(t))
    return typeof t.source == "string" && (t.source = { id: t.source, type: e || "unknown" }), t.source.type === "Canvas" && t.source.partOf && typeof t.source.partOf == "string" && (t.source.partOf = [
      {
        id: t.source.partOf,
        type: i || "Manifest"
      }
    ]), t;
  let r;
  if ((t.id || "").indexOf("#") !== -1) {
    const [n, s] = (t.id || "").split("#");
    t.id = n, s && (r = {
      type: "FragmentSelector",
      value: s
    });
  }
  return {
    type: "SpecificResource",
    source: t,
    selector: r
  };
}
function xa(t) {
  const e = Object.assign({}, t);
  return t && t.items && (e.items = t.items.map((i) => typeof i == "string" || i.type === "Canvas" ? ar(i) : i)), e;
}
function wa(t) {
  const e = Object.assign({}, t);
  return e.start ? (e.start = ar(e.start, { typeHint: "Canvas" }), e) : t;
}
function Ca(t) {
  const e = Object.assign({}, t);
  return e.target ? (e.target = pt(e.target, { typeHint: "Canvas" }), e) : t;
}
function Ra(t) {
  return t;
}
function it(t) {
  return typeof t.items > "u" && (t[je] = true), t;
}
function Ia(t) {
  const e = da(t), i = va(), r = {}, n = ya(i, e), s = ma(r), c = new Et({
    collection: [
      it,
      we(Rs),
      s("Collection"),
      n("Collection")
    ],
    manifest: [
      it,
      we(Is),
      wa,
      s("Manifest"),
      n("Manifest")
    ],
    canvas: [
      we(Cs),
      s("Canvas"),
      n("Canvas")
    ],
    annotationPage: [
      it,
      tt("AnnotationPage"),
      we(ws),
      s("AnnotationPage"),
      n("AnnotationPage")
    ],
    annotation: [
      tt("Annotation"),
      Sa,
      Ca,
      s("Annotation"),
      n("Annotation")
    ],
    contentResource: [
      tt("ContentResource"),
      s("ContentResource"),
      n("ContentResource")
    ],
    range: [
      we(Es),
      xa,
      s("Range", "Canvas"),
      n("Range", "Canvas")
    ],
    agent: [
      we(Os),
      s("Agent"),
      n("Agent")
    ],
    specificResource: [
      Ra
    ],
    service: [
      Aa(i)
    ]
  }).traverseUnknown(e);
  return { entities: i, resource: c, mapping: r };
}
function Ea(t) {
  const e = {};
  for (const [i, r] of t) {
    if (i === Pi2 && r !== W2)
      return r;
    r !== W2 && typeof r < "u" && r !== null && (e[i] = r);
  }
  return e;
}
function Oa(t, e, i) {
  if (!e.type || !e.id)
    throw new Error("Unknown entity");
  if (!i[e.type])
    throw new Error(`Serializer not found for ${e.type}`);
  function r(n, s, a = 0) {
    const c = i[n.type];
    if (!c)
      return W2;
    if (a > 20)
      throw new Error("Circular reference: " + n.id + " " + n.type);
    const [f, p2] = ji2(t, n.type ? n : n.id, s) || (n.id && n.type ? n : null);
    if (!f)
      return W2;
    const u = c(f, t, {
      parent: s,
      isTopLevel: e.id === n.id,
      fullResource: p2
    });
    let v2 = u.next();
    for (;!v2.done; ) {
      const y2 = v2.value;
      let m = W2;
      if (y2)
        if (Array.isArray(y2)) {
          const h2 = [];
          for (const A2 of y2)
            h2.push(r(A2, n, a + 1));
          m = h2;
        } else
          m = r(y2, n, a + 1);
      v2 = u.next(m);
    }
    return v2.value === W2 ? W2 : Ea(v2.value);
  }
  return r(e);
}
function De(t, { allowSourceString: e = true, allowString: i = false, allowedStringType: r } = {}) {
  const n = (s) => {
    if (e && s && s.source && typeof s.source != "string") {
      const a = Object.keys(s.source);
      if (s.source.id && s.source.type && a.length === 2)
        return { ...s, source: s.source.id };
    }
    return s;
  };
  if (t) {
    if (t.source && t.source.partOf)
      return n(t);
    const s = Object.keys(t);
    if (s.length === 2 && t.type && t.source || s.length === 3 && t.type && t.source && s.indexOf("selector") !== -1 && !t.selector)
      return i && (!r || r === t.source.type) ? t.source.id : t.source.type === "ContentResource" ? { type: "SpecificResource", source: t.source.id } : t.source;
    if (t.selector && !Array.isArray(t.selector) && typeof t.selector != "string" && t.selector.type === "FragmentSelector") {
      const a = `${t.source.id}#${t.selector.value}`;
      return i ? a : { id: a, type: t.source.type };
    }
  }
  return n(t);
}
function Re(t) {
  if (!t)
    return;
  const e = Object.keys(t);
  if (e.length !== 0) {
    if (e.length === 1) {
      const i = e[0];
      if (!i)
        return "";
      const r = (t[i] || []).join("");
      return i === "@none" || i === "none" || i === "en" ? r : {
        "@language": i,
        "@value": r
      };
    }
    return e.map((i) => ({
      "@language": i,
      "@value": (t[i] || []).join("")
    }));
  }
}
function or(t) {
  return Array.isArray(t) ? t.map((e) => or(e)) : typeof t == "string" ? t : t.type && t.type === "Canvas" ? t.id : t;
}
function ae2(t, e = false) {
  if (t)
    return t.length > 1 && !e ? t : t[0] || undefined;
}
function _a(t) {
  if (t) {
    if (typeof t == "string")
      return {
        "@id": t
      };
    if ("@id" in t) {
      const e = { ...t };
      return delete e["@type"], e;
    }
    return {
      "@context": "http://iiif.io/api/image/2/context.json",
      "@id": t.id,
      profile: `http://iiif.io/api/image/2/profiles/${t.profile}.json`
    };
  }
}
function he(t, e) {
  return [
    ["@id", t.id],
    ["@type", e],
    ["format", t.format],
    ["height", t.height],
    ["width", t.width],
    ["viewingDirection", t.viewingDirection !== "left-to-right" ? t.viewingDirection : undefined],
    ["license", t.license ? t.license : undefined]
  ];
}
function* de(t) {
  const e = t.provider ? yield t.provider[0] : undefined;
  return [
    ["label", Re(t.label)],
    [
      "metadata",
      t.metadata && t.metadata.length ? t.metadata.map((i) => ({
        label: Re(i.label) || "",
        value: Re(i.value) || ""
      })) : undefined
    ],
    ["description", Re(t.summary)],
    ["thumbnail", ae2(yield t.thumbnail)],
    ["navDate", t.navDate],
    ["logo", e ? ae2(e.logo) : undefined],
    ["homepage", e ? e.homepage : undefined],
    ["attribution", t.requiredStatement ? Re(t.requiredStatement.value) : undefined]
  ];
}
function* ke(t) {
  const e = t.start && t.start.type && t.start.type === "SpecificResource" ? De(t.start) : t.start;
  return [
    ["seeAlso", ae2(yield t.seeAlso)],
    ["service", ae2((t.service || []).map(_a))],
    ["rendering", ae2(yield t.rendering)],
    ["startCanvas", e ? e.id : undefined]
  ];
}
function Ta(t) {
  return t.type === "SpecificResource";
}
function Ma(t) {
  return t && t.type === "FragmentSelector";
}
function ka(t) {
  if (t && Ta(t)) {
    let e = t.id;
    const i = t.selector ? Array.isArray(t.selector) ? t.selector[0] : t.selector : undefined;
    return Ma(i) && (e += "#" + i.value), e;
  }
  return t == null ? undefined : t.id;
}
var Fa = {
  Manifest: function* (t, e, { isTopLevel: i }) {
    return [
      ...i ? [["@context", "http://iiif.io/api/presentation/2/context.json"]] : [],
      ...he(t, "sc:Manifest"),
      ...yield* de(t),
      ...yield* ke(t),
      [
        "sequences",
        [
          {
            "@id": `${t.id}/sequence0`,
            "@type": "sc:Sequence",
            canvases: yield t.items
          }
        ]
      ],
      ["structures", yield t.structures]
    ];
  },
  Canvas: function* (t) {
    const i = (yield t.items)[0];
    return [
      ...he(t, "sc:Canvas"),
      ...yield* de(t),
      ...yield* ke(t),
      ["images", i ? [i.resources] : undefined],
      [
        "annotations",
        t.annotations && t.annotations.length ? ae2(yield t.annotations) : undefined
      ]
    ];
  },
  AnnotationPage: function* (t) {
    return [
      ...he(t, "sc:AnnotationList"),
      ...yield* de(t),
      ["resources", t.items && t.items.length ? ae2(yield t.items) : undefined]
    ];
  },
  Annotation: function* (t) {
    return [
      ["@id", t.id],
      ["@type", "oa:Annotation"],
      ["motivation", "sc:painting"],
      ["on", or(t.target)],
      ["resource", ae2(yield t.body, true)]
    ];
  },
  ContentResource: function* (t) {
    switch (t.type) {
      case "Image":
        return [
          ...he(t, "dctypes:Image"),
          ...yield* de(t),
          ...yield* ke(t)
        ];
      case "Text":
      case "Dataset":
      default:
        return [...he(t, undefined), ...yield* de(t)];
    }
  },
  AnnotationCollection: function* (t) {
    return [
      ["@id", t.id],
      ["@type", "sc:Layer"],
      ["label", Re(t.label)]
    ];
  },
  Collection: function* (t) {
    return [
      ...he(t, "sc:Collection"),
      ...yield* de(t),
      ...yield* ke(t),
      ["members", yield* t.items]
    ];
  },
  Range: function* (t) {
    const e = [], i = [];
    if (t.items)
      for (const r of t.items) {
        const n = r.type === "SpecificResource" ? r.source : r;
        if (n) {
          const s = yield n;
          e.push({
            "@id": ka(r),
            "@type": n.type,
            label: s ? s.label : undefined,
            within: t.id
          }), n.type === "Canvas" && i.push(n.id);
        }
      }
    return [
      ...he(t, "sc:Range"),
      ...yield* de(t),
      ...yield* ke(t),
      ["canvases", i.length === e.length ? i : undefined],
      ["members", i.length !== e.length ? e : undefined]
    ];
  }
};
function ve(t) {
  var e;
  return [
    ["id", (e = t.id) != null && e.startsWith("vault://") ? undefined : t.id],
    ["type", t.type],
    ["format", t.format],
    ["profile", t.profile],
    ["height", t.height || undefined],
    ["width", t.width || undefined],
    ["duration", t.duration || undefined],
    ["viewingDirection", t.viewingDirection !== "left-to-right" ? t.viewingDirection : undefined],
    ["behavior", t.behavior && t.behavior.length ? t.behavior : undefined],
    ["timeMode", t.timeMode],
    ["motivation", Array.isArray(t.motivation) ? t.motivation[0] : t.motivation],
    [k2, W2]
  ];
}
function _2(t) {
  if (t === W2 || !t || t.length === 0)
    return;
  const e = t.filter((i) => i !== W2);
  if (e.length !== 0)
    return e;
}
function cr(t) {
  if (t && t.type && t.type === "ImageService2") {
    const { id: e, type: i, profile: r, ...n } = t, s = typeof r == "string" ? r : Array.isArray(r) ? r.find((a) => typeof a == "string") : "";
    return {
      "@id": e,
      "@type": i,
      profile: s ? s.startsWith("http") ? s : `http://iiif.io/api/image/2/${s}.json` : "http://iiif.io/api/image/2/level0.json",
      ...n
    };
  }
  return t;
}
function Jt(t) {
  if (Array.isArray(t) || (t = t ? [t] : []), !(!t || t.length === 0))
    return t.map(cr);
}
function* ie2(t) {
  return [
    ["label", t.label],
    ["metadata", _2(t.metadata)],
    ["summary", t.summary],
    ["requiredStatement", t.requiredStatement],
    ["rights", Array.isArray(t.rights) ? t.rights[0] || undefined : t.rights || undefined],
    ["navDate", t.navDate],
    ["language", t.language],
    ["thumbnail", _2(yield t.thumbnail)],
    ["placeholderCanvas", yield t.placeholderCanvas],
    ["accompanyingCanvas", yield t.accompanyingCanvas],
    ["provider", _2(yield t.provider)]
  ];
}
function* re2(t) {
  return [
    ["seeAlso", _2(yield t.seeAlso)],
    ["service", _2(Jt(t.service))],
    ["services", _2(Jt(t.services))],
    ["rendering", _2(yield t.rendering)],
    ["supplementary", _2(yield t.supplementary)],
    ["homepage", _2(yield t.homepage)],
    ["logo", _2(yield t.logo)],
    ["partOf", _2(yield t.partOf)],
    [
      "start",
      t.start ? De(t.start) : t.start
    ]
  ];
}
var La = {
  Manifest: function* (t, e, { isTopLevel: i }) {
    return i ? [
      [
        "@context",
        t["@context"] ? t["@context"] : "http://iiif.io/api/presentation/3/context.json"
      ],
      ...ve(t),
      ...yield* ie2(t),
      ...yield* re2(t),
      ["items", yield t.items],
      ["structures", _2(yield t.structures)],
      ["annotations", _2(yield t.annotations)],
      ["navPlace", t.navPlace]
    ] : [
      ...ve(t),
      ...yield* ie2(t)
    ];
  },
  Canvas: function* (t) {
    return [
      ...ve(t),
      ...yield* ie2(t),
      ...yield* re2(t),
      ["items", yield t.items],
      ["annotations", _2(yield t.annotations)],
      ["navPlace", t.navPlace]
    ];
  },
  Agent: function* (t) {
    return [
      ["id", t.id],
      ["type", "Agent"],
      ["label", t.label],
      ...yield* re2(t)
    ];
  },
  AnnotationPage: function* (t) {
    var e;
    const i = Object.entries(t).map(([n, s]) => [n, Array.isArray(s) ? _2(s) : s]).filter(([n, s]) => n !== "items" && n !== "id" && n !== k2 && n !== V2 && n !== je), r = yield t.items;
    return [
      ["id", (e = t.id) != null && e.startsWith("vault://") ? undefined : t.id],
      ...i,
      ...yield* re2(t),
      ["items", r.length || t[je] === false ? r : W2]
    ];
  },
  Service: function* (t) {
    return [[Pi2, cr(t)]];
  },
  Annotation: function* (t) {
    const e = Object.entries(t).map(([r, n]) => r === "motivation" ? [r, Array.isArray(n) ? n[0] : n] : r === "target" ? [
      r,
      De(n, { allowString: true, allowSourceString: true, allowedStringType: "Canvas" })
    ] : [r, Array.isArray(n) ? _2(n) : n]).filter(([r]) => r !== "body" && r !== k2 && r !== je);
    let i;
    if (Array.isArray(t.body)) {
      const r = [];
      for (const n of t.body)
        if (n && se2(n)) {
          const s = {
            ...n
          };
          s.source = yield n.source, r.push(De(s, { allowSourceString: true }));
        } else
          r.push(yield n);
      i = r;
    } else
      t.body && se2(t.body) ? (i = {
        ...t.body
      }, i.source = yield t.body.source) : i = yield t.body;
    return [
      ...e,
      ...yield* ie2(t),
      ...yield* re2(t),
      ["body", i.length === 1 ? i[0] : i]
    ];
  },
  ContentResource: function* (t) {
    return Pa([
      ...ve(t),
      ...yield* ie2(t),
      ...yield* re2(t),
      ["annotations", _2(yield t.annotations)],
      ["items", _2(yield t.items)]
    ], t);
  },
  AnnotationCollection: function* (t) {
    return [
      ["id", t.id],
      ["type", "AnnotationCollection"],
      ["label", t.label]
    ];
  },
  Collection: function* (t, e, { isTopLevel: i }) {
    return i ? [
      ["@context", "http://iiif.io/api/presentation/3/context.json"],
      ...ve(t),
      ...yield* ie2(t),
      ...yield* re2(t),
      ["items", _2(yield t.items)],
      ["navPlace", t.navPlace]
    ] : [...ve(t), ...yield* ie2(t)];
  },
  Range: function* (t) {
    const e = [];
    for (const i of t.items)
      i.type === "Range" ? e.push(yield i) : i && i.type === "SpecificResource" ? e.push(De(i)) : e.push(i);
    return [
      ...ve(t),
      ...yield* ie2(t),
      ...yield* re2(t),
      ["items", e],
      ["annotations", _2(yield t.annotations)],
      ["navPlace", t.navPlace]
    ];
  }
};
function Pa(t, e) {
  const i = Object.keys(e), r = t.map(([n]) => n);
  for (const n of i)
    n === k2 || n === je || r.indexOf(n) === -1 && typeof e[n] < "u" && t.push([n, e[n]]);
  return t;
}
var T2 = function(e) {
  return function() {
    const i = { type: e, getType: () => e, toString: () => e };
    return (r, n) => ({
      ...i,
      ...r !== undefined && { payload: r },
      ...n !== undefined && { meta: n }
    });
  };
};
var lr = "@iiif/IMPORT_ENTITIES";
var ur = "@iiif/MODIFY_ENTITY_FIELD";
var fr = "@iiif/REORDER_ENTITY_FIELD";
var pr = "@iiif/ADD_REFERENCE";
var vt = "@iiif/UPDATE_REFERENCE";
var hr = "@iiif/REMOVE_REFERENCE";
var dr = "@iiif/ADD_METADATA";
var vr = "@iiif/REMOVE_METADATA";
var yt = "@iiif/UPDATE_METADATA";
var yr = "@iiif/REORDER_METADATA";
var mr = T2(lr)();
var ja = T2(ur)();
var Da = T2(fr)();
var Na = T2(pr)();
var $a = T2(hr)();
var qa = T2(vt)();
var Ua = T2(dr)();
var Wa = T2(yt)();
var za = T2(vr)();
var Va = T2(yr)();
var Ba = {
  importEntities: mr,
  modifyEntityField: ja,
  reorderEntityField: Da,
  addReference: Na,
  removeReference: $a,
  updateReference: qa,
  addMetadata: Ua,
  removeMetadata: za,
  updateMetadata: Wa,
  reorderMetadata: Va
};
var gr = "@iiif/ADD_MAPPING";
var Ar = "@iiif/ADD_MAPPINGS";
var Ga = T2(gr)();
var Qa = T2(Ar)();
var br = "@iiif/SET_META_VALUE";
var Sr = "@iiif/SET_META_VALUE_DYNAMIC";
var xr = "@iiif/UNSET_META_VALUE";
var Ha = T2(br)();
var Ya = T2(Sr)();
var Ja = T2(xr)();
var Xt = {
  setMetaValue: Ha,
  setMetaValueDynamic: Ya,
  unsetMetaValue: Ja
};
var mt = "RESOURCE_ERROR";
var wr = "RESOURCE_LOADING";
var gt = "RESOURCE_READY";
var Cr = "@iiif/REQUEST_RESOURCE";
var Rr = "@iiif/REQUEST_ERROR";
var Ir = "@iiif/REQUEST_MISMATCH";
var Er = "@iiif/REQUEST_COMPLETE";
var Xa = "@iiif/REQUEST_OFFLINE_RESOURCE";
var Ka = T2(Cr)();
var At = T2(Rr)();
var Za = T2(Ir)();
var eo = T2(Er)();
var Tt = "@iiif/BATCH";
var to = "@iiif/BATCH_IMPORT";
var bt = T2(Tt)();
var io = (t, e) => {
  const { entities: i, resource: r, mapping: n } = Ia(e);
  if (r.id === undefined)
    return [At({ id: t, message: "ID is not defined in resource." })];
  const s = [mr({ entities: i }), Qa({ mapping: n })];
  return r.id !== t && (s.push(Ga({ id: t, type: r.type })), s.push(Za({ requestId: t, actualId: r.id }))), s.push(eo({ id: t })), s;
};
var Kt = Number.isNaN || function(e) {
  return typeof e == "number" && e !== e;
};
function ro(t, e) {
  return !!(t === e || Kt(t) && Kt(e));
}
function Zt(t, e) {
  if (!Array.isArray(t) || !Array.isArray(e))
    return t === e;
  if (t.length !== e.length)
    return false;
  for (let i = 0;i < t.length; i++)
    if (!ro(t[i], e[i]))
      return false;
  return true;
}
function rt(t, e, i) {
  const r = t.iiif.requests[e], n = t.iiif.mapping[e];
  if (!n || !t.iiif.entities[n][r.resourceUri])
    return;
  const s = t.iiif.entities[n][r.resourceUri];
  if (s && s[k2]) {
    const a = s[k2].find((c) => i ? c[V2] === i.id : c[V2] === s.id);
    return It(s, a);
  }
  return s;
}
function no(t) {
  return t && typeof t.then == "function";
}
function ei2(t, e, { waitTimeout: i = 30 } = {}) {
  return (r, n) => {
    const s = t.getStore(), a = s.getState(), c = a.iiif.requests[r];
    if (c) {
      if (c.loadingState === gt) {
        const p2 = rt(a, r);
        if (p2)
          return p2;
      }
      switch (c.loadingState) {
        case mt:
          break;
        case wr:
          return (async () => {
            let p2, u = false;
            try {
              const v2 = await Promise.race([
                new Promise((y2, m) => {
                  u || (p2 = s.subscribe(() => {
                    const h2 = s.getState();
                    if (h2.iiif.requests[r].loadingState === mt) {
                      m();
                      return;
                    }
                    if (h2.iiif.requests[r].loadingState === gt) {
                      const A2 = rt(h2, r);
                      A2 ? y2(A2) : m();
                    }
                  }));
                }),
                new Promise((y2, m) => setTimeout(() => {
                  u = true, m();
                }, i * 60 * 1000))
              ]);
              if (p2 && p2(), v2)
                return v2;
            } catch {
              p2 && p2();
            }
          })();
      }
    }
    t.dispatch(Ka({ id: r }));
    const f = (p2) => {
      if (!p2)
        return;
      !p2.id && !p2["@id"] && (p2["@type"] && (p2["@id"] = r), p2.id = r);
      const u = io(r, p2);
      return t.dispatch(bt({ actions: u })), rt(s.getState(), r);
    };
    try {
      const p2 = e(r, n);
      return no(p2) ? (async () => {
        try {
          return f(await p2);
        } catch (u) {
          throw t.dispatch(At({ id: r, message: u.toString() })), u;
        }
      })() : f(p2);
    } catch (p2) {
      throw t.dispatch(At({ id: r, message: p2.toString() })), p2;
    }
  };
}
function Or() {
  return {
    Collection: {},
    Manifest: {},
    Canvas: {},
    AnnotationPage: {},
    AnnotationCollection: {},
    Annotation: {},
    ContentResource: {},
    Range: {},
    Service: {},
    Selector: {},
    Agent: {}
  };
}
var ti2 = (t) => {
  let e;
  const i = /* @__PURE__ */ new Set, r = (f, p2) => {
    const u = typeof f == "function" ? f(e) : f;
    if (!Object.is(u, e)) {
      const v2 = e;
      e = p2 ?? typeof u != "object" ? u : Object.assign({}, e, u), i.forEach((y2) => y2(e, v2));
    }
  }, n = () => e, c = { setState: r, getState: n, subscribe: (f) => (i.add(f), () => i.delete(f)), destroy: () => {
    i.clear();
  } };
  return e = t(r, n, c), c;
};
var so = (t) => t ? ti2(t) : ti2;
var ao = (t, e) => (i, r, n) => (n.dispatch = (s) => (i((a) => t(a, s), false, s), s), n.dispatchFromDevtools = true, { dispatch: (...s) => n.dispatch(...s), ...e });
var oo = ao;
var St = /* @__PURE__ */ new Map;
var ze = (t) => {
  const e = St.get(t);
  return e ? Object.fromEntries(Object.entries(e.stores).map(([i, r]) => [i, r.getState()])) : {};
};
var co = (t, e, i) => {
  if (t === undefined)
    return {
      type: "untracked",
      connection: e.connect(i)
    };
  const r = St.get(i.name);
  if (r)
    return { type: "tracked", store: t, ...r };
  const n = {
    connection: e.connect(i),
    stores: {}
  };
  return St.set(i.name, n), { type: "tracked", store: t, ...n };
};
var lo = (t, e = {}) => (i, r, n) => {
  const { enabled: s, anonymousActionType: a, store: c, ...f } = e;
  let p2;
  try {
    p2 = (s ?? false) && window.__REDUX_DEVTOOLS_EXTENSION__;
  } catch {
  }
  if (!p2)
    return t(i, r, n);
  const { connection: u, ...v2 } = co(c, p2, f);
  let y2 = true;
  n.setState = (A2, x2, S2) => {
    const C2 = i(A2, x2);
    if (!y2)
      return C2;
    const E2 = S2 === undefined ? { type: a || "anonymous" } : typeof S2 == "string" ? { type: S2 } : S2;
    return c === undefined ? (u == null || u.send(E2, r()), C2) : (u == null || u.send({
      ...E2,
      type: `${c}/${E2.type}`
    }, {
      ...ze(f.name),
      [c]: n.getState()
    }), C2);
  };
  const m = (...A2) => {
    const x2 = y2;
    y2 = false, i(...A2), y2 = x2;
  }, h2 = t(n.setState, r, n);
  if (v2.type === "untracked" ? u == null || u.init(h2) : (v2.stores[v2.store] = n, u == null || u.init(Object.fromEntries(Object.entries(v2.stores).map(([A2, x2]) => [
    A2,
    A2 === v2.store ? h2 : x2.getState()
  ])))), n.dispatchFromDevtools && typeof n.dispatch == "function") {
    let A2 = false;
    const x2 = n.dispatch;
    n.dispatch = (...S2) => {
      x2(...S2);
    };
  }
  return u.subscribe((A2) => {
    var x2;
    switch (A2.type) {
      case "ACTION":
        if (typeof A2.payload != "string") {
          console.error("[zustand devtools middleware] Unsupported action format");
          return;
        }
        return nt(A2.payload, (S2) => {
          if (S2.type === "__setState") {
            if (c === undefined) {
              m(S2.state);
              return;
            }
            Object.keys(S2.state).length !== 1 && console.error(`
                    [zustand devtools middleware] Unsupported __setState action format. 
                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),
                    and value of this only key should be a state object. Example: { "type": "__setState", "state": { "abc123Store": { "foo": "bar" } } }
                    `);
            const C2 = S2.state[c];
            if (C2 == null)
              return;
            JSON.stringify(n.getState()) !== JSON.stringify(C2) && m(C2);
            return;
          }
          n.dispatchFromDevtools && typeof n.dispatch == "function" && n.dispatch(S2);
        });
      case "DISPATCH":
        switch (A2.payload.type) {
          case "RESET":
            return m(h2), c === undefined ? u == null ? undefined : u.init(n.getState()) : u == null ? undefined : u.init(ze(f.name));
          case "COMMIT":
            if (c === undefined) {
              u == null || u.init(n.getState());
              return;
            }
            return u == null ? undefined : u.init(ze(f.name));
          case "ROLLBACK":
            return nt(A2.state, (S2) => {
              if (c === undefined) {
                m(S2), u == null || u.init(n.getState());
                return;
              }
              m(S2[c]), u == null || u.init(ze(f.name));
            });
          case "JUMP_TO_STATE":
          case "JUMP_TO_ACTION":
            return nt(A2.state, (S2) => {
              if (c === undefined) {
                m(S2);
                return;
              }
              JSON.stringify(n.getState()) !== JSON.stringify(S2[c]) && m(S2[c]);
            });
          case "IMPORT_STATE": {
            const { nextLiftedState: S2 } = A2.payload, C2 = (x2 = S2.computedStates.slice(-1)[0]) == null ? undefined : x2.state;
            if (!C2)
              return;
            m(c === undefined ? C2 : C2[c]), u == null || u.send(null, S2);
            return;
          }
          case "PAUSE_RECORDING":
            return y2 = !y2;
        }
        return;
    }
  }), h2;
};
var uo = lo;
var nt = (t, e) => {
  let i;
  try {
    i = JSON.parse(t);
  } catch (r) {
    console.error("[zustand devtools middleware] Could not parse the received json", r);
  }
  i !== undefined && e(i);
};
var fo = (t) => (e, i, r) => {
  const n = r.subscribe;
  return r.subscribe = (a, c, f) => {
    let p2 = a;
    if (c) {
      const u = (f == null ? undefined : f.equalityFn) || Object.is;
      let v2 = a(r.getState());
      p2 = (y2) => {
        const m = a(y2);
        if (!u(v2, m)) {
          const h2 = v2;
          c(v2 = m, h2);
        }
      }, f != null && f.fireImmediately && c(v2, v2);
    }
    return n(p2);
  }, t(e, i, r);
};
var po = fo;
var ho = (t = {}, e) => {
  switch (e.type) {
    case gr:
      return {
        ...t,
        [e.payload.id]: e.payload.type
      };
    case Ar:
      return {
        ...t,
        ...e.payload.mapping
      };
    default:
      return t;
  }
};
function st(t, e, i, r) {
  return !(!t[i] || !t[i][e] || !t[i][e][r] || !Array.isArray(t[i][e][r]));
}
function vo(t, e) {
  const i = {}, r = [];
  for (const [n, s] of Object.entries(t || {})) {
    r.push(n);
    const a = (e || {})[n];
    if (!a || a.length === 0) {
      i[n] = s;
      continue;
    }
    i[n] = a;
  }
  for (const [n, s] of Object.entries(e || {}))
    r.indexOf(n) === -1 && (i[n] = s);
  return i;
}
function w(t) {
  return t.payload;
}
function at(t, e) {
  return typeof t > "u" ? e : t;
}
var yo = (t = Or(), e) => {
  var r;
  const i = (n, s) => ({
    ...t,
    [w(e).type]: {
      ...t[w(e).type],
      [w(e).id]: {
        ...n,
        ...s
      }
    }
  });
  switch (e.type) {
    case ur: {
      if (!t[w(e).type] || !t[w(e).type][w(e).id])
        return t;
      const n = t[w(e).type][w(e).id];
      return typeof n == "string" ? t : i(n, { [w(e).key]: w(e).value });
    }
    case fr: {
      if (!st(t, w(e).id, w(e).type, w(e).key))
        return t;
      const n = t[w(e).type][w(e).id];
      if (typeof n == "string")
        return t;
      const s = Array.from(n[w(e).key]), [a] = s.splice(w(e).startIndex, 1);
      return s.splice(w(e).endIndex, 0, a), i(n, { [w(e).key]: s });
    }
    case lr: {
      const n = Object.keys(w(e).entities), s = { ...t };
      for (const a of n) {
        const c = w(e).entities[a], f = { ...t[a] || {} };
        let p2 = false;
        const u = Object.keys(c || {}) || [];
        if (c && u) {
          for (const v2 of u)
            p2 = true, f[v2] = t[a][v2] ? vo(t[a][v2], c[v2]) : c[v2];
          p2 && (s[a] = f);
        }
      }
      return s;
    }
    case pr: {
      if (!st(t, w(e).id, w(e).type, w(e).key))
        return t;
      const n = t[w(e).type][w(e).id], s = Array.from(n[w(e).key]);
      return s.splice(at(w(e).index, s.length + 1), 0, w(e).reference), i(n, { [w(e).key]: s });
    }
    case vt:
    case hr: {
      if (!st(t, w(e).id, w(e).type, w(e).key))
        return t;
      const n = t[w(e).type][w(e).id], s = Array.from(n[w(e).key]), a = at(w(e).index, s.findIndex((c) => c && c.id === w(e).reference.id));
      return a === -1 || ((r = s[a]) == null ? undefined : r.id) !== w(e).reference.id ? t : (e.type === vt ? s.splice(a, 1, w(e).reference) : s.splice(a, 1), i(n, { [w(e).key]: s }));
    }
    case dr: {
      const n = t[w(e).type][w(e).id];
      if (!n)
        return t;
      const s = Array.from(n.metadata || []), a = w(e);
      return s.splice(at(e.payload.beforeIndex, s.length + 1), 0, {
        label: a.label,
        value: a.label
      }), i(n, { metadata: s });
    }
    case yr: {
      const n = t[w(e).type][w(e).id];
      if (typeof n == "string" || !n)
        return t;
      const s = Array.from(n.metadata || []), [a] = s.splice(w(e).startIndex, 1);
      return s.splice(w(e).endIndex, 0, a), i(n, { metadata: s });
    }
    case yt:
    case vr: {
      const n = t[w(e).type][w(e).id], s = Array.from(n.metadata || []), a = w(e).atIndex;
      return typeof a > "u" || a === -1 || !s[a] ? t : (e.type === yt ? s.splice(a, 1, { label: w(e).label, value: w(e).value }) : s.splice(a, 1), i(n, { metadata: s }));
    }
    default:
      return t;
  }
};
var mo = (t = {}, e) => {
  switch (e.type) {
    case Cr:
    case Xa:
      return {
        ...t,
        [e.payload.id]: {
          requestUri: e.payload.id,
          loadingState: wr,
          uriMismatch: false,
          resourceUri: e.payload.id
        }
      };
    case Ir:
      return {
        ...t,
        [e.payload.requestId]: {
          ...t[e.payload.requestId] || {},
          uriMismatch: true,
          resourceUri: e.payload.actualId
        },
        [e.payload.actualId]: {
          requestUri: e.payload.requestId,
          loadingState: t[e.payload.requestId].loadingState,
          uriMismatch: true,
          resourceUri: e.payload.actualId
        }
      };
    case Rr:
      return {
        ...t,
        [e.payload.id]: {
          ...t[e.payload.id] || {},
          loadingState: mt,
          error: e.payload.message
        }
      };
    case Er:
      return {
        ...t,
        [e.payload.id]: {
          ...t[e.payload.id] || {},
          loadingState: gt,
          error: undefined
        }
      };
  }
  return t;
};
var go = (t = {}, e) => {
  const { id: i, updateValue: r, value: n, meta: s, key: a } = e && e.payload || {};
  switch (e.type) {
    case br:
      return {
        ...t,
        [i]: {
          ...t[i] || {},
          [s]: {
            ...t[i] ? t[i][s] || {} : {},
            [a]: n
          }
        }
      };
    case Sr:
      return {
        ...t,
        [i]: {
          ...t[i] || {},
          [s]: {
            ...t[i] ? t[i][s] || {} : {},
            [a]: t[i] && t[i][s] ? r(t[i][s][a]) : r(undefined)
          }
        }
      };
    case xr:
      return t[i] && t[i][s] && t[i][s][a] ? {
        ...t,
        [i]: {
          ...t[i] || {},
          [s]: {
            ...t[i] ? t[i][s] || {} : {},
            [a]: undefined
          }
        }
      } : t;
    default:
      return t;
  }
};
function _r(t = {}) {
  const e = Object.keys(t);
  return function(r = {}, n) {
    let s = false;
    const a = {};
    for (let c = 0;c < e.length; c++) {
      const f = e[c];
      a[f] = t[f](r[f], n), s = s || a[f] !== r[f];
    }
    return s ? a : r;
  };
}
function Ao(t) {
  return (e, i) => i && i.type === Tt ? i.payload.actions.reduce(t, e) : i && i.type === to ? {
    ...e,
    iiif: {
      ...e.iiif,
      ...i.payload.state
    }
  } : t(e, i);
}
var bo = _r({
  mapping: ho,
  entities: yo,
  requests: mo,
  meta: go
});
function So() {
  return {
    iiif: {
      entities: Or(),
      meta: {},
      mapping: {},
      requests: {}
    }
  };
}
function xo(t = {}) {
  const {
    enableDevtools: e = false,
    iiifStoreName: i = "iiif",
    defaultState: r = So(),
    customReducers: n = {}
  } = t, s = Ao(_r({ [i]: bo, ...n }));
  return so(po(uo(oo(s, r), { enabled: e })));
}
function wo(t) {
  return { all: t = t || /* @__PURE__ */ new Map, on: function(e, i) {
    var r = t.get(e);
    r ? r.push(i) : t.set(e, [i]);
  }, off: function(e, i) {
    var r = t.get(e);
    r && (i ? r.splice(r.indexOf(i) >>> 0, 1) : t.set(e, []));
  }, emit: function(e, i) {
    var r = t.get(e);
    r && r.slice().map(function(n) {
      n(i);
    }), (r = t.get("*")) && r.slice().map(function(n) {
      n(e, i);
    });
  } };
}
function L2(t, e, i, r = true) {
  e[Ee] = e[Ee] || [], e[Ee].push(t);
  const n = /* @__PURE__ */ new Map;
  Object.defineProperty(e, t, {
    enumerable: r,
    get() {
      if (typeof e[ge][t] > "u")
        return;
      const s = e[ge][t];
      if (!s)
        return s;
      const a = i.get(e[ge][t], {
        parent: this.id ? { id: this.id, type: this.type } : undefined
      });
      return n.has(a) || (n.clear(), n.set(a, Ae(a, i))), n.get(a);
    },
    set(s) {
      e[ge][t] !== s && (this[ye] ? i.modifyEntityField({ id: this.id, type: this.type }, t, Tr(s)) : this[ge][t] = s);
    }
  });
}
var ge = Symbol.for("_refs_");
var ye = Symbol.for("_reactive_");
var Ee = Symbol.for("_defined_");
var ii = Symbol.for("_parent_");
function Co(t, e = false, i) {
  const r = {
    id: "",
    type: "unknown",
    [Ee]: [],
    [ge]: {},
    [ii]: i || null,
    [ye]: null,
    is(n) {
      return typeof n == "string" ? this.id === n : n.id ? n.id === this.id : false;
    },
    reactive() {
      if (!this[ye])
        return this[ye] = this.subscribe(() => this.refresh(), true), () => {
          this.unreactive();
        };
    },
    refresh() {
      if (this.id) {
        const n = this.unwrap();
        for (const s of Object.keys(n || {}))
          this[Ee].includes(s) ? this[ge][s] = n[s] : this[s] = n[s];
      }
    },
    unreactive() {
      this[ye] && (this[ye](), this[ye] = null);
    },
    unwrap() {
      if (!this.id)
        throw new Error("Invalid object");
      const n = this[ii];
      return t.get(this.id, { parent: n ? { id: n, type: "unknown" } : undefined });
    },
    toPresentation3() {
      return t.toPresentation3(this.unwrap());
    },
    toPresentation2() {
      return t.toPresentation2(this.unwrap());
    },
    valueOf() {
      return this.unwrap();
    },
    toJSON() {
      const n = this;
      return {
        ...n,
        items: n.items,
        annotations: n.annotations,
        structures: n.structures,
        seeAlso: n.seeAlso,
        service: n.service,
        services: n.services,
        rendering: n.rendering,
        partOf: n.partOf,
        start: n.start,
        supplementary: n.supplementary,
        homepage: n.homepage,
        thumbnail: n.thumbnail,
        placeholderCanvas: n.placeholderCanvas,
        accompanyingCanvas: n.accompanyingCanvas,
        provider: n.provider
      };
    },
    subscribe(n, s = true) {
      return t.subscribe(() => this.id ? t.get(this.id) : null, n, s);
    }
  };
  return L2("items", r, t), L2("annotations", r, t), L2("structures", r, t), L2("seeAlso", r, t), L2("rendering", r, t), L2("partOf", r, t), L2("start", r, t, false), L2("supplementary", r, t), L2("homepage", r, t), L2("thumbnail", r, t), L2("placeholderCanvas", r, t, false), L2("accompanyingCanvas", r, t, false), L2("provider", r, t), L2("body", r, t), L2("logo", r, t), r;
}
function Ro(t) {
  return !!t[Ee];
}
function Tr(t) {
  return Array.isArray(t) ? t.map((e) => Tr(e)) : !t || !t.type ? t : { id: t.id, type: t.type };
}
function Ae(t, e, i = false, r) {
  if (Array.isArray(t))
    return t.map((c) => Ae(c, e, i));
  if (!t || !t.type || !t.id)
    return t;
  const n = Co(e, i), s = Object.create(n), a = Object.assign(s, t);
  return i && a.reactive(), a;
}
function ri2(t) {
  switch (t) {
    case "Image":
    case "Video":
    case "Sound":
    case "Dataset":
    case "Text":
    case "Composite":
    case "List":
    case "Independents":
    case "Audience":
      return "ContentResource";
    case "ImageService1":
    case "ImageService2":
    case "ImageService3":
      return "Service";
  }
  return t;
}

class Io {
  constructor(e, i) {
    D2(this, "options");
    D2(this, "store");
    D2(this, "emitter");
    D2(this, "isBatching", false);
    D2(this, "batchQueue", []);
    D2(this, "remoteFetcher");
    D2(this, "staticFetcher");
    D2(this, "defaultFetcher", (e2) => fetch(e2).then((i2) => i2.json()));
    this.options = Object.assign({
      reducers: {},
      customFetcher: this.defaultFetcher,
      enableDevtools: true
    }, e || {}), this.store = i || xo({
      customReducers: this.options.reducers,
      defaultState: this.options.defaultState,
      enableDevtools: this.options.enableDevtools
    }), this.emitter = wo(), this.remoteFetcher = ei2(this, this.options.customFetcher), this.staticFetcher = ei2(this, (r, n) => n);
  }
  batch(e) {
    this.isBatching = true;
    try {
      e(this), this.isBatching = false, this.dispatch(bt({ actions: this.batchQueue }));
    } catch (i) {
      throw this.batchQueue = [], this.isBatching = false, i;
    }
    this.batchQueue = [];
  }
  async asyncBatch(e) {
    this.isBatching = true;
    try {
      await e(this), this.isBatching = false, this.dispatch(bt({ actions: this.batchQueue }));
    } catch (i) {
      throw this.batchQueue = [], this.isBatching = false, i;
    }
    this.batchQueue = [];
  }
  modifyEntityField(e, i, r) {
    this.dispatch(Ba.modifyEntityField({
      id: e.id,
      type: e.type,
      key: i,
      value: r
    }));
  }
  dispatch(e) {
    if (this.isBatching)
      this.batchQueue.push(e);
    else {
      if (e.type === Tt) {
        for (const n of e.payload.actions)
          this.emitter.emit(n.type, { action: n, state: this.store.getState() });
        this.store.dispatch(e);
        const r = this.getState();
        for (const n of e.payload.actions)
          this.emitter.emit(`after:${n.type}`, { action: n, state: r });
        return;
      }
      this.emitter.emit(e.type, { action: e, state: this.store.getState() }), this.store.dispatch(e);
      const i = this.store.getState();
      this.emitter.emit(`after:${e.type}`, { action: e, state: i });
      return;
    }
  }
  on(e, i) {
    return this.emitter.on(e, i), () => {
      this.emitter.off(e, i);
    };
  }
  serialize(e, i) {
    return Oa(this.getState().iiif, e, i);
  }
  toPresentation2(e) {
    return this.serialize(e, Fa);
  }
  toPresentation3(e) {
    return this.serialize(e, La);
  }
  hydrate(e, i, r = {}) {
    return this.get(e, i, { ...r, skipSelfReturn: false });
  }
  get(e, i, r = {}) {
    typeof i != "string" && (r = i || {}, i = undefined);
    const { skipSelfReturn: n = true } = r || {};
    let s = r.parent ? typeof r.parent == "string" ? r.parent : r.parent.id : undefined;
    if (Array.isArray(e))
      return e.map((v2) => this.get(v2, r));
    const a = this.getState();
    if (se2(e) && !r.preserveSpecificResources && (e = e.source), typeof e == "string") {
      const v2 = ri2(i || a.iiif.mapping[e]);
      if (!v2)
        return n ? null : { id: e, type: "unknown" };
      e = { id: e, type: v2 };
    }
    if (e && e.partOf && !s && !r.skipPartOfCheck) {
      const v2 = Array.isArray(e.partOf) ? e.partOf[0] : e.partOf;
      v2 && (typeof v2 == "string" && (s = v2), typeof v2.id == "string" && (s = v2.id));
    }
    const c = ri2(i || (e == null ? undefined : e.type)), f = e == null ? undefined : e.id, p2 = a.iiif.entities[c];
    if (!p2) {
      const v2 = a.iiif.requests[f];
      return v2 && v2.resourceUri !== f ? this.get(v2.resourceUri, r) : n ? null : e;
    }
    const u = p2[e.id];
    if (u && u[k2]) {
      const v2 = u[k2].find((y2) => s ? y2[V2] === s : y2[V2] === u.id);
      return It(u, v2);
    }
    return p2[e.id] || (n ? null : e);
  }
  select(e) {
    return e(this.getState());
  }
  getStore() {
    return this.store;
  }
  getState() {
    return this.store.getState();
  }
  deep(e, i) {
    if (typeof e > "u")
      return this.get(i, { skipSelfReturn: false });
    if (typeof e == "function")
      try {
        const n = e(this.get(i, { skipSelfReturn: false })), s = (a) => this.deep(a, n);
        return s.size = Array.isArray(n) ? n.length : 1, s;
      } catch {
        const s = (a) => this.deep(a, undefined);
        return s.size = 0, s;
      }
    const r = (n) => this.deep(n, e);
    return r.size = Array.isArray(e) ? e.length : 1, r;
  }
  loadManifest(e, i) {
    const r = typeof e == "string" ? e : e.id;
    return this.load(r, i);
  }
  loadCollection(e, i) {
    const r = typeof e == "string" ? e : e.id;
    return this.load(r, i);
  }
  load(e, i) {
    const r = typeof e == "string" ? e : e.id;
    return i ? Promise.resolve(this.staticFetcher(r, i)) : Promise.resolve(this.remoteFetcher(r));
  }
  loadSync(e, i) {
    const r = typeof e == "string" ? e : e.id;
    return this.staticFetcher(r, i);
  }
  loadManifestSync(e, i) {
    const r = typeof e == "string" ? e : e.id;
    return this.loadSync(r, i);
  }
  loadCollectionSync(e, i) {
    const r = typeof e == "string" ? e : e.id;
    return this.loadSync(r, i);
  }
  areInputsEqual(e, i) {
    return Zt(e, i);
  }
  subscribe(e, i, r) {
    return typeof r > "u" && (typeof i > "u" || i === false || i === true) && (r = i, i = e, e = (n) => n), this.store.subscribe(e, (n) => i(n, this), {
      equalityFn: Zt,
      fireImmediately: !r
    });
  }
  async ensureLoaded(e) {
    const i = typeof e == "string" ? e : e.id;
    this.requestStatus(i) || await this.load(i);
  }
  requestStatus(e) {
    return this.select((i) => i.iiif.requests[e]);
  }
  getResourceMeta(e, i) {
    const r = this.getState().iiif.meta[e];
    if (r)
      return i ? r[i] : r;
  }
  getObject(e, i, r = {}) {
    const { reactive: n, ...s } = r;
    return Ae(this.get(e, i, s), this, n);
  }
  async loadObject(e, i) {
    return Ae(await this.load(e, i), this);
  }
  async loadManifestObject(e, i) {
    return Ae(await this.loadManifest(e, i), this);
  }
  async loadCollectionObject(e, i) {
    return Ae(await this.loadCollection(e, i), this);
  }
  wrapObject(e) {
    return Ae(this.get(e, { skipSelfReturn: false }), this);
  }
  isWrapped(e) {
    return Ro(e);
  }
  setMetaValue([e, i, r], n) {
    this.dispatch(typeof n == "function" ? Xt.setMetaValueDynamic({
      id: e,
      meta: i,
      key: r,
      updateValue: n
    }) : Xt.setMetaValue({
      id: e,
      meta: i,
      key: r,
      value: n
    }));
  }
}
var xt = { exports: {} };
(function(t, e) {
  var i = Object.defineProperty, r = (s, a, c) => (a in s) ? i(s, a, { enumerable: true, configurable: true, writable: true, value: c }) : s[a] = c, n = (s, a, c) => (r(s, typeof a != "symbol" ? a + "" : a, c), c);
  (function(s, a) {
    a(e);
  })(Gn, function(s) {
    const a = "http://library.stanford.edu/iiif/image-api/compliance.html#level1", c = "http://library.stanford.edu/iiif/image-api/compliance.html#level2", f = "http://library.stanford.edu/iiif/image-api/conformance.html#level1", p2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level2", u = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1", v2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2", y2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1", m = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2", h2 = "http://iiif.io/api/image/1/level1.json", A2 = "http://iiif.io/api/image/1/profiles/level1.json", x2 = "http://iiif.io/api/image/1/level2.json", S2 = "http://iiif.io/api/image/1/profiles/level2.json", C2 = "http://iiif.io/api/image/2/level1.json", E2 = "http://iiif.io/api/image/2/profiles/level1.json", P2 = "http://iiif.io/api/image/2/level2.json", j2 = "http://iiif.io/api/image/2/profiles/level2.json", F2 = "level1", $2 = "level2", G2 = "http://iiif.io/api/image/2/level1", Q2 = "http://iiif.io/api/image/2/level2", ce = [G2, Q2, a, c, f, p2, u, v2, y2, m, h2, A2, x2, S2, C2, E2, P2, j2, F2, $2], z2 = ["http://iiif.io/api/image/2/level0", G2, Q2, "http://library.stanford.edu/iiif/image-api/compliance.html#level0", a, c, "http://library.stanford.edu/iiif/image-api/conformance.html#level0", f, p2, "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0", u, v2, "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0", y2, m, "http://iiif.io/api/image/1/level0.json", "http://iiif.io/api/image/1/profiles/level0.json", h2, A2, x2, S2, "http://iiif.io/api/image/2/level0.json", "http://iiif.io/api/image/2/profiles/level0.json", C2, E2, P2, j2, "level0", F2, $2], Oe = ["sc:Collection", "sc:Manifest", "sc:Canvas", "sc:AnnotationList", "oa:Annotation", "sc:Range", "sc:Layer", "sc:Sequence", "oa:Choice", "Service", "ContentResource"];

    class le {
      constructor(o, d = {}) {
        n(this, "traversals"), n(this, "options"), this.traversals = { collection: [], manifest: [], canvas: [], annotationList: [], sequence: [], annotation: [], contentResource: [], choice: [], range: [], service: [], layer: [], ...o }, this.options = { convertPropsToArray: true, mergeMemberProperties: true, allowUndefinedReturn: false, ...d };
      }
      static all(o) {
        return new le({ collection: [o], manifest: [o], canvas: [o], annotationList: [o], sequence: [o], annotation: [o], contentResource: [o], choice: [o], range: [o], service: [o], layer: [o] });
      }
      traverseCollection(o) {
        return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCollectionItems(o))), this.traversals.collection);
      }
      traverseCollectionItems(o) {
        if (this.options.mergeMemberProperties) {
          const d = [...(o.manifests || []).map((g) => typeof g == "string" ? { "@id": g, "@type": "sc:Manifest" } : g), ...(o.collections || []).map((g) => typeof g == "string" ? { "@id": g, "@type": "sc:Collection" } : g), ...o.members || []];
          delete o.collections, delete o.manifests, o.members = d;
        }
        return o.manifests && (o.manifests = o.manifests.map((d) => this.traverseManifest(typeof d == "string" ? { "@id": d, "@type": "sc:Manifest" } : d))), o.collections && (o.collections = o.collections.map((d) => this.traverseCollection(typeof d == "string" ? { "@id": d, "@type": "sc:Collection" } : d))), o.members && (o.members = o.members.map((d) => typeof d == "string" ? d : this.traverseUnknown(d))), o;
      }
      traverseManifest(o) {
        return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseManifestItems(o))), this.traversals.manifest);
      }
      traverseManifestItems(o) {
        return o.sequences && (o.sequences = o.sequences.map((d) => this.traverseSequence(d))), o.structures && (o.structures = o.structures.map((d) => this.traverseRange(d))), o;
      }
      traverseSequence(o) {
        return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseSequenceItems(o))), this.traversals.sequence);
      }
      traverseSequenceItems(o) {
        return o.canvases && (o.canvases = o.canvases.map((d) => this.traverseCanvas(d))), o;
      }
      traverseCanvas(o) {
        return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCanvasItems(o))), this.traversals.canvas);
      }
      traverseCanvasItems(o) {
        return o.images && (o.images = o.images.map((d) => this.traverseAnnotation(d))), o.otherContent && (o.otherContent = o.otherContent.map((d) => this.traverseAnnotationList(d))), o;
      }
      traverseRange(o) {
        return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseRangeItems(o))), this.traversals.range);
      }
      traverseRangeItems(o) {
        if (this.options.mergeMemberProperties) {
          const d = [...(o.ranges || []).map((g) => typeof g == "string" ? { "@id": g, "@type": "sc:Range" } : g), ...(o.canvases || []).map((g) => typeof g == "string" ? { "@id": g, "@type": "sc:Canvas" } : g), ...o.members || []];
          delete o.ranges, delete o.canvases, o.members = d.length ? d.map((g) => this.traverseUnknown(g)) : undefined;
        }
        return o;
      }
      traverseAnnotationList(o) {
        const d = typeof o == "string" ? { "@id": o, "@type": "sc:AnnotationList" } : o;
        return this.traverseType(this.traverseDescriptive(this.traverseAnnotationListItems(d)), this.traversals.annotationList);
      }
      traverseAnnotationListItems(o) {
        return o.resources && (o.resources = o.resources.map((d) => this.traverseAnnotation(d))), o;
      }
      traverseAnnotation(o) {
        return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseAnnotationItems(o))), this.traversals.annotation);
      }
      traverseAnnotationItems(o) {
        return o.resource && (Array.isArray(o.resource) ? o.resource = o.resource.map((d) => this.traverseContentResource(d)) : o.resource = this.traverseContentResource(o.resource)), o.on, o;
      }
      traverseLayer(o) {
        return this.traverseType(this.traverseLinking(this.traverseLayerItems(o)), this.traversals.layer);
      }
      traverseLayerItems(o) {
        return o.otherContent && (o.otherContent = o.otherContent.map((d) => this.traverseAnnotationList(d))), o;
      }
      traverseChoice(o) {
        return this.traverseType(this.traverseChoiceItems(o), this.traversals.choice);
      }
      traverseChoiceItems(o) {
        return o.default && o.default !== "rdf:nil" && (o.default = this.traverseContentResource(o.default)), o.item && o.item !== "rdf:nil" && (o.item = o.item.map((d) => this.traverseContentResource(d))), o;
      }
      traverseService(o) {
        return this.traverseType(this.traverseLinking(o), this.traversals.service);
      }
      traverseContentResource(o) {
        return o["@type"] === "oa:Choice" ? this.traverseChoice(o) : this.traverseType(this.traverseDescriptive(this.traverseLinking(o)), this.traversals.contentResource);
      }
      traverseUnknown(o) {
        if (!o["@type"] || typeof o == "string")
          return o;
        switch (function(d) {
          if (d == null)
            throw new Error("Null or undefined is not a valid entity.");
          if (Array.isArray(d))
            throw new Error("Array is not a valid entity");
          if (typeof d != "object")
            throw new Error(typeof d + " is not a valid entity");
          if (typeof d["@type"] == "string") {
            const g = Oe.indexOf(d["@type"]);
            if (g !== -1)
              return Oe[g];
          }
          if (d.profile)
            return "Service";
          if (d.format || d["@type"])
            return "ContentResource";
          throw new Error("Resource type is not known");
        }(o)) {
          case "sc:Collection":
            return this.traverseCollection(o);
          case "sc:Manifest":
            return this.traverseManifest(o);
          case "sc:Canvas":
            return this.traverseCanvas(o);
          case "sc:Sequence":
            return this.traverseSequence(o);
          case "sc:Range":
            return this.traverseRange(o);
          case "oa:Annotation":
            return this.traverseAnnotation(o);
          case "sc:AnnotationList":
            return this.traverseAnnotationList(o);
          case "sc:Layer":
            return this.traverseLayer(o);
          case "Service":
            return this.traverseService(o);
          case "oa:Choice":
            return this.traverseChoice(o);
          case "ContentResource":
            return this.traverseContentResource(o);
        }
        return o.profile ? this.traverseService(o) : o;
      }
      traverseImageResource(o) {
        const d = Array.isArray(o), g = Array.isArray(o) ? o : [o], I2 = [];
        for (const R2 of g)
          typeof R2 == "string" ? I2.push(this.traverseContentResource({ "@id": R2, "@type": "dctypes:Image" })) : I2.push(this.traverseContentResource(R2));
        return d || this.options.convertPropsToArray ? I2 : I2[0];
      }
      traverseDescriptive(o) {
        return o.thumbnail && (o.thumbnail = this.traverseImageResource(o.thumbnail)), o.logo && (o.logo = this.traverseImageResource(o.logo)), o;
      }
      traverseOneOrMoreServices(o) {
        const d = Array.isArray(o), g = Array.isArray(o) ? o : [o], I2 = [];
        for (const R2 of g)
          I2.push(this.traverseService(R2));
        return d || this.options.convertPropsToArray ? I2 : I2[0];
      }
      traverseLinking(o) {
        return o.related && (o.related = this.traverseOneOrManyType(o.related, this.traversals.contentResource)), o.rendering && (o.rendering = this.traverseOneOrManyType(o.rendering, this.traversals.contentResource)), o.service && (o.service = this.traverseOneOrMoreServices(o.service)), o.seeAlso && (o.seeAlso = this.traverseOneOrManyType(o.seeAlso, this.traversals.contentResource)), o.within && (typeof o.within == "string" || (o.within = this.traverseOneOrManyType(o.within, this.traversals.contentResource))), o.startCanvas && (typeof o.startCanvas == "string" ? o.startCanvas = this.traverseType({ "@id": o.startCanvas, "@type": "sc:Canvas" }, this.traversals.canvas) : o.startCanvas && this.traverseType(o.startCanvas, this.traversals.canvas)), o.contentLayer && (typeof o.contentLayer == "string" ? o.contentLayer = this.traverseLayer({ "@id": o.contentLayer, "@type": "sc:Layer" }) : o.contentLayer = this.traverseLayer(o.contentLayer)), o;
      }
      traverseOneOrManyType(o, d) {
        if (!Array.isArray(o)) {
          if (!this.options.convertPropsToArray)
            return this.traverseType(o, d);
          o = [o];
        }
        return o.map((g) => this.traverseType(g, d));
      }
      traverseType(o, d) {
        return d.reduce((g, I2) => {
          const R2 = I2(g);
          return R2 !== undefined || this.options.allowUndefinedReturn ? R2 : g;
        }, o);
      }
    }
    function N2(l) {
      for (const o in l)
        l[o] !== undefined && l[o] !== null || delete l[o];
      return l;
    }
    const Qe = "Attribution", He = "http://example.org/provider", Ne = "Unknown";
    function H2(l, o = "none") {
      if (!l)
        return {};
      const d = function(I2) {
        if (typeof I2 == "string")
          return [I2];
        if (!I2)
          return [];
        const R2 = Array.isArray(I2) ? I2 : [I2], M2 = [];
        for (const q2 of R2)
          typeof q2 != "string" ? M2.push({ "@language": q2["@language"] || q2.language, "@value": q2["@value"] || q2.value }) : M2.push(q2);
        return M2;
      }(l), g = {};
      for (const I2 of d) {
        if (typeof I2 == "string") {
          g[o] = g[o] ? g[o] : [], g[o].push(I2 || "");
          continue;
        }
        if (!I2["@language"]) {
          g[o] = g[o] ? g[o] : [], g[o].push(I2["@value"] || "");
          continue;
        }
        const R2 = I2["@language"];
        g[R2] = g[R2] ? g[R2] : [], g[R2].push(I2["@value"] || "");
      }
      return g;
    }
    function $e(l) {
      return Array.isArray(l) ? $e(l.find((o) => typeof o == "string")) : z2.indexOf(l) !== -1 ? "level2" : ce.indexOf(l) !== -1 ? "level1" : typeof l == "string" ? l : undefined;
    }
    function _e(l) {
      for (const o of ["sc", "oa", "dcterms", "dctypes", "iiif"])
        if (l.startsWith(`${o}:`))
          return l.slice(o.length + 1);
      return l;
    }
    const Ye = ["Collection", "Manifest", "Annotation", "AnnotationPage", "Range", "Service"];
    function Te(l) {
      const o = l["@id"] || l.id;
      let d = l["@type"] || l.type;
      const g = l.profile || undefined, I2 = l["@context"] || undefined;
      if (g) {
        const R2 = function(M2) {
          switch (M2) {
            case "http://iiif.io/api/image/2/level0.json":
            case "http://iiif.io/api/image/2/level1.json":
            case "http://iiif.io/api/image/2/level2.json":
              return "ImageService2";
            case "http://iiif.io/api/auth/1/kiosk":
            case "http://iiif.io/api/auth/1/login":
            case "http://iiif.io/api/auth/1/clickthrough":
            case "http://iiif.io/api/auth/1/external":
            case "http://iiif.io/api/auth/0/kiosk":
            case "http://iiif.io/api/auth/0/login":
            case "http://iiif.io/api/auth/0/clickthrough":
            case "http://iiif.io/api/auth/0/external":
              return "AuthCookieService1";
            case "http://iiif.io/api/auth/1/token":
            case "http://iiif.io/api/auth/0/token":
              return "AuthTokenService1";
            case "http://iiif.io/api/auth/1/logout":
            case "http://iiif.io/api/auth/0/logout":
              return "AuthLogoutService1";
            case "http://iiif.io/api/search/1/search":
            case "http://iiif.io/api/search/0/search":
              return "SearchService1";
            case "http://iiif.io/api/search/1/autocomplete":
            case "http://iiif.io/api/search/0/autocomplete":
              return "AutoCompleteService1";
          }
        }(g);
        if (R2)
          return R2;
      }
      if (I2) {
        const R2 = function(M2) {
          const q2 = Array.isArray(M2) ? M2 : [M2];
          for (const qe of q2)
            switch (qe) {
              case "http://iiif.io/api/image/2/context.json":
              case "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2":
                return "ImageService2";
              case "http://iiif.io/api/image/1/context.json":
              case "http://library.stanford.edu/iiif/image-api/1.1/context.json":
                return "ImageService1";
              case "http://iiif.io/api/annex/openannotation/context.json":
                return "ImageApiSelector";
            }
        }(I2);
        if (R2)
          return R2;
      }
      if (d) {
        if (Array.isArray(d)) {
          if (d.indexOf("oa:CssStylesheet") !== -1)
            return "CssStylesheet";
          if (d.indexOf("cnt:ContentAsText") !== -1)
            return "TextualBody";
          d = d[0];
        }
        for (const R2 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
          if (d.startsWith(`${R2}:`)) {
            d = d.slice(R2.length + 1);
            break;
          }
        switch (d) {
          case "Layer":
            return "AnnotationCollection";
          case "AnnotationList":
            return "AnnotationPage";
          case "cnt:ContentAsText":
            return "TextualBody";
        }
      }
      if (d && Ye.indexOf(d) !== -1)
        return d;
      if (l.format) {
        if (l.format.startsWith("image/"))
          return "Image";
        if (l.format.startsWith("text/") || l.format === "application/pdf")
          return "Text";
        if (l.format.startsWith("application/"))
          return "Dataset";
      }
      return o && (o.endsWith(".jpg") || o.endsWith(".png") || o.endsWith(".jpeg")) ? "Image" : d || "unknown";
    }
    const Mr = /http(s)?:\/\/(creativecommons.org|rightsstatements.org)[^"'\\<\n]+/gm;
    function kr(l) {
      const o = l.match(Mr);
      return o ? o[0] : l;
    }
    const Fr = ["http://iiif.io/api/presentation/2/context.json", "http://iiif.io/api/image/2/context.json", "http://iiif.io/api/image/1/context.json", "http://library.stanford.edu/iiif/image-api/1.1/context.json", "http://iiif.io/api/search/1/context.json", "http://iiif.io/api/search/0/context.json", "http://iiif.io/api/auth/1/context.json", "http://iiif.io/api/auth/0/context.json", "http://iiif.io/api/annex/openannotation/context.json"];
    function Lr(l) {
      if (l) {
        const o = Array.isArray(l) ? l : [l], d = [];
        for (const g of o)
          g === "http://iiif.io/api/presentation/2/context.json" && d.push("http://iiif.io/api/presentation/3/context.json"), Fr.indexOf(g) === -1 && d.push(g);
        if (o.length)
          return d.length === 1 ? d[0] : d;
      }
    }
    let Mt = 0;
    function kt(l, o) {
      const d = encodeURI(l.id || l["@id"] || "").trim();
      return d && o ? `${d}/${o}` : d || (Mt++, `http://example.org/${l["@type"]}${o ? `/${o}` : ""}/${Mt}`);
    }
    function Y2(l) {
      const o = [...l.behavior || []];
      let d;
      return l.viewingHint && o.push(l.viewingHint), Array.isArray(l.motivation) ? d = l.motivation.map(_e) : l.motivation && (d = _e(l.motivation)), { "@context": l["@context"] ? Lr(l["@context"]) : undefined, id: (l["@id"] || kt(l)).trim(), type: Te(l), behavior: o.length ? o : undefined, height: l.height ? l.height : undefined, width: l.width ? l.width : undefined, motivation: d, viewingDirection: l.viewingDirection, profile: l.profile, format: l.format ? l.format : undefined, duration: undefined, timeMode: undefined };
    }
    function J(l) {
      const [o, d] = function(R2, M2 = "Rights/License", q2 = "none") {
        let qe = null;
        const Ft = [], $r = Array.isArray(R2) ? R2 : [R2];
        for (const Lt of $r) {
          const te2 = Lt ? kr(Lt) : undefined;
          !te2 || te2.indexOf("creativecommons.org") === -1 && te2.indexOf("rightsstatements.org") === -1 ? te2 && Ft.push({ label: { [q2]: [M2] }, value: { [q2]: [te2] } }) : qe = te2.startsWith("https://") ? `http://${te2.slice(8)}` : te2;
        }
        return [qe, Ft];
      }(l.license), g = [...l.metadata ? (I2 = l.metadata, I2 ? I2.map((R2) => ({ label: H2(R2.label), value: H2(R2.value) })) : []) : [], ...d];
      var I2;
      return { rights: o, metadata: g.length ? g : undefined, label: l.label ? H2(l.label) : undefined, requiredStatement: l.attribution ? { label: H2(Qe), value: H2(l.attribution) } : undefined, navDate: l.navDate, summary: l.description ? H2(l.description) : undefined, thumbnail: Pr(l.thumbnail) };
    }
    function Pr(l) {
      return l && (Array.isArray(l) ? l : [l]).map((o) => typeof o == "string" ? { id: o, type: "Image" } : (o.type === "unknown" && (o.type = "Image"), o));
    }
    function jr(l) {
      if (!l.within)
        return;
      const o = Array.isArray(l.within) ? l.within : [l.within], d = [];
      for (const g of o)
        typeof g == "string" ? g && l["@type"] === "sc:Manifest" && d.push({ id: g, type: "Collection" }) : g["@id"] && d.push({ id: g["@id"], type: Te(g) });
      return d.length ? d : undefined;
    }
    function ee2(l) {
      const o = l.related ? Array.isArray(l.related) ? l.related : [l.related] : [], d = l.contentLayer;
      return { provider: l.logo || o.length ? [{ id: He, type: "Agent", homepage: o.length ? [o[0]] : undefined, logo: l.logo ? Array.isArray(l.logo) ? l.logo : [l.logo] : undefined, label: H2(Ne) }] : undefined, partOf: jr(l), rendering: l.rendering, seeAlso: l.seeAlso, start: l.startCanvas, service: l.service ? (g = l.service, Array.isArray(g) ? g : g ? [g] : []) : undefined, supplementary: d ? [d] : undefined };
      var g;
    }
    function Je(l) {
      const o = l;
      return N2({ ...Y2(o), ...J(o), ...ee2(o), ...(d = o, { chars: d.chars, format: d.format ? d.format : undefined, language: d.language }) });
      var d;
    }
    const Dr = new le({ collection: [function(l) {
      return N2({ ...Y2(l), ...J(l), ...ee2(l), items: l.members });
    }], manifest: [function(l) {
      const o = [], d = [];
      let g;
      for (const R2 of l.sequences || [])
        R2.canvases.length && o.push(...R2.canvases), R2.behavior && d.push(...R2.behavior), R2.startCanvas && (g = R2.startCanvas);
      const I2 = Y2(l);
      return d.length && (I2.behavior ? I2.behavior.push(...d) : I2.behavior = d), N2({ ...I2, ...J(l), ...ee2(l), start: g, items: o, structures: l.structures });
    }], canvas: [function(l) {
      return N2({ ...Y2(l), ...J(l), ...ee2(l), annotations: l.otherContent && l.otherContent.length ? l.otherContent : undefined, items: l.images && l.images.length ? [{ id: kt(l, "annotation-page"), type: "AnnotationPage", items: l.images }] : undefined });
    }], annotationList: [function(l) {
      return N2({ ...Y2(l), ...J(l), ...ee2(l), items: l.resources && l.resources.length ? l.resources : undefined });
    }], sequence: [function(l) {
      return l.canvases && l.canvases.length !== 0 ? { canvases: l.canvases, behavior: l.viewingHint ? [l.viewingHint] : [], startCanvas: l.startCanvas } : { canvases: [], behavior: [] };
    }], annotation: [function(l) {
      return N2({ ...Y2(l), ...J(l), ...ee2(l), target: function o(d) {
        if (Array.isArray(d)) {
          if (d.length > 1)
            return { type: "List", items: d.map(o) };
          d = d[0];
        }
        if (typeof d == "string")
          return encodeURI(d).trim();
        if ("@type" in d) {
          let g;
          if (typeof d.full == "string")
            g = d.full;
          else if (d.full["@type"] === "dctypes:Image")
            g = { id: d.full["@id"], type: "Image" };
          else {
            if (d.full["@type"] !== "sc:Canvas")
              throw new Error(`Unsupported source type on annotation: ${d.full["@type"]}`);
            g = { id: d.full["@id"], type: "Canvas" };
          }
          return { type: "SpecificResource", source: g, selector: Xe(d.selector) };
        }
        return encodeURI(d["@id"]).trim();
      }(l.on), body: Array.isArray(l.resource) ? l.resource.map(Je) : Je(l.resource) });
    }], contentResource: [Je], choice: [function(l) {
      const o = [];
      return l.default && l.default !== "rdf:nil" && o.push(l.default), l.item && l.item !== "rdf:nil" && o.push(...l.item), { ...Y2(l), ...J(l), items: o };
    }], range: [function(l) {
      return N2({ ...Y2(l), ...J(l), ...ee2(l), items: l.members });
    }], service: [function(l) {
      const { "@id": o, "@type": d, "@context": g, profile: I2, ...R2 } = l, M2 = {};
      return o && (M2["@id"] = o), M2["@type"] = Te(l), M2["@type"] === "unknown" && (g && g.length && (M2["@context"] = g), M2["@type"] = "Service"), I2 && (M2.profile = $e(I2)), N2({ ...M2, ...R2 });
    }], layer: [function(l) {
      return N2({ ...Y2(l), ...J(l), ...ee2(l) });
    }] });
    function Xe(l) {
      if ((Array.isArray(l["@type"]) && l["@type"].includes("oa:SvgSelector") || l["@type"] == "oa:SvgSelector") && (("chars" in l) || ("value" in l)))
        return { type: "SvgSelector", value: "chars" in l ? l.chars : l.value };
      if (l["@type"] === "oa:FragmentSelector")
        return { type: "FragmentSelector", value: l.value };
      if (l["@type"] === "oa:Choice")
        return [Xe(l.default), ...(Array.isArray(l.item) ? l.item : [l.item]).map(Xe)];
      if (l["@type"] == "iiif:ImageApiSelector")
        return { type: "ImageApiSelector", region: "region" in l ? l.region : undefined, rotation: "rotation" in l ? l.rotation : undefined };
      throw new Error(`Unsupported selector type: ${l["@type"]}`);
    }
    const Nr = function(l) {
      return l && l["@context"] && (l["@context"] === "http://iiif.io/api/presentation/2/context.json" || l["@context"].indexOf("http://iiif.io/api/presentation/2/context.json") !== -1 || l["@context"] === "http://www.shared-canvas.org/ns/context.json") || l["@context"] === "http://iiif.io/api/image/2/context.json" ? Dr.traverseUnknown(l) : l;
    };
    s.upgrade = Nr, Object.defineProperties(s, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
  });
})(xt, xt.exports);
var Oo = xt.exports;

// src/enrich/canvas-thumbnail.ts
var canvasThumbnail = {
  id: "canvas-thumbnail",
  name: "Canvas thumbnail",
  types: ["Canvas"],
  async invalidate(resource, api) {
    return !existsSync(join(api.files, "thumb.jpg"));
  },
  async handler(canvas, api) {
    try {
      const helper = qn(canvas.vault);
      const thumb = await helper.getBestThumbnailAtSize(api.resource, {});
      if (thumb.best?.id && (thumb.best.id.endsWith(".jpg") || thumb.best.id.endsWith(".jpeg"))) {
        const data = await fetch(thumb.best.id).then((r) => r.arrayBuffer());
        mkdirp.sync(api.files);
        await Bun.write(join(api.files, "thumb.jpg"), data);
      }
    } catch (err) {
    }
    return {};
  }
};

// src/enrich/homepage-property.ts
var homepageProperty = {
  id: "homepage-property",
  name: "Homepage property",
  types: ["Manifest"],
  async invalidate(resource, api) {
    if (resource.id && resource.type === "Manifest") {
      const homepage = `${api.config.server?.url}/${resource.slug}`;
      const existingHomepage = api.resource.homepage.find((h2) => h2.id === homepage);
      return !existingHomepage;
    }
    return true;
  },
  async handler(resource, api) {
    if (resource.id) {
      const found = api.builder.vault.get(resource.id);
      if (!found || found.type !== "Manifest") {
        return {};
      }
      api.builder.editManifest(resource.id, (m) => {
        if (m.entity.homepage) {
          m.setHomepage({
            id: `${api.config.server?.url}/${resource.slug}`
          });
        }
      });
      return { didChange: true };
    }
    return {};
  }
};

// src/enrich/manifest-sqlite.ts
import { join as join2 } from "path";
import { Database } from "bun:sqlite";

// src/extract/extract-label-string.ts
var import_object_hash = __toESM(require_object_hash(), 1);
var extractLabelString = {
  id: "extract-label-string",
  name: "Extract label as string",
  types: ["Manifest"],
  async invalidate(manifest, api) {
    const resource = api.resource;
    if (!resource.label) {
      return false;
    }
    const hash = import_object_hash.sha1(resource.label);
    const caches = await api.caches.value;
    return hash !== caches.extractLabelString;
  },
  async handler(manifest, api, config) {
    const language = config?.language;
    const resource = api.resource;
    if (!resource.label) {
      return {};
    }
    const label = resource.label || {};
    const keys = Object.keys(resource.label);
    if (keys.length === 0) {
      return {};
    }
    const firstValue = (label[language || keys[0]] || [])[0] || "";
    return {
      caches: {
        extractLabelString: import_object_hash.sha1(resource.label)
      },
      meta: {
        label: firstValue
      }
    };
  }
};
function getValue(value) {
  const label = value || {};
  const keys = Object.keys(label);
  if (keys.length === 0) {
    return "";
  }
  return (label[keys[0]] || [])[0] || "";
}

// src/enrich/manifest-sqlite.ts
var import_slug = __toESM(require_slug(), 1);
var manifestSqlite = {
  name: "sqlite",
  id: "manifest-sqlite",
  types: ["Manifest"],
  configure: async (api, config = {}) => {
    await mkdirp(api.build.filesDir);
    const dbFile = join2(api.build.filesDir, "meta", "manifests.db");
    const db = new Database(dbFile, { create: true });
    db.query(`
      CREATE TABLE IF NOT EXISTS manifests (
        id TEXT PRIMARY KEY,
        label TEXT,
        slug TEXT,
        thumbnail TEXT
      )
    `).run();
    if (config.enableTopics) {
      db.query(`
            CREATE TABLE IF NOT EXISTS topics
            (
                id         TEXT PRIMARY KEY,
                topic      TEXT,
                topic_type TEXT,
                label      TEXT,
                slug       TEXT
            )
        `).run();
      db.query(`
            CREATE TABLE IF NOT EXISTS topics_manifests
            (
                topic_id    TEXT,
                manifest_id TEXT,
                PRIMARY KEY (topic_id, manifest_id)
            )
        `).run();
    }
    return {
      db,
      ...config
    };
  },
  invalidate: async () => {
    return true;
  },
  handler: async (resource, api, config) => {
    if (api.resource) {
      const meta = await api.meta.value;
      const current = resource.vault?.get(api.resource);
      const value = current ? getValue(current.label) : null;
      if (value) {
        config.db.query(`
            INSERT INTO manifests (id, slug, label, thumbnail)
            VALUES ($id, $slug, $name, $thumbnail)
            ON CONFLICT (id) DO UPDATE SET label = $name,
                                           slug = $slug,
                                           thumbnail = $thumbnail
          `).all({
          $id: resource.id,
          $name: value,
          $slug: resource.slug,
          $thumbnail: meta.thumbnail?.id || ""
        });
      }
      if (config.enableTopics) {
        const indices = await api.indices.value;
        const topicTypes = Object.keys(indices);
        for (const topicTypeKey of topicTypes) {
          const topicType = indices[topicTypeKey];
          for (const topic of topicType) {
            const topicId = import_slug.default(topic);
            const topicLabel = topic;
            config.db.query(`
                    INSERT INTO topics (id, topic, topic_type, label, slug)
                    VALUES ($id, $topic, $topic_type, $label, $slug)
                    ON CONFLICT (id) DO NOTHING
                `).all({
              $id: `${topicTypeKey}/${topicId}`,
              $topic: topic,
              $topic_type: topicTypeKey,
              $label: topicLabel,
              $slug: `topics/${topicTypeKey}/${topicId}`
            });
            config.db.query(`
                    INSERT INTO topics_manifests (topic_id, manifest_id)
                    VALUES ($topic_id, $manifest_id)
                    ON CONFLICT (topic_id, manifest_id) DO NOTHING
                `).all({
              $topic_id: `${topicTypeKey}/${topicId}`,
              $manifest_id: resource.id
            });
          }
        }
      }
    }
    return {};
  },
  close: async (config) => {
    config.db.close();
  }
};

// node_modules/translate/index.min.js
var iso = { aar: "aa", abk: "ab", afr: "af", aka: "ak", alb: "sq", amh: "am", ara: "ar", arg: "an", arm: "hy", asm: "as", ava: "av", ave: "ae", aym: "ay", aze: "az", bak: "ba", bam: "bm", baq: "eu", bel: "be", ben: "bn", bih: "bh", bis: "bi", bos: "bs", bre: "br", bul: "bg", bur: "my", cat: "ca", cha: "ch", che: "ce", chi: "zh", chu: "cu", chv: "cv", cor: "kw", cos: "co", cre: "cr", cze: "cs", dan: "da", div: "dv", dut: "nl", dzo: "dz", eng: "en", epo: "eo", est: "et", ewe: "ee", fao: "fo", fij: "fj", fin: "fi", fre: "fr", fry: "fy", ful: "ff", geo: "ka", ger: "de", gla: "gd", gle: "ga", glg: "gl", glv: "gv", gre: "el", grn: "gn", guj: "gu", hat: "ht", hau: "ha", heb: "he", her: "hz", hin: "hi", hmo: "ho", hrv: "hr", hun: "hu", ibo: "ig", ice: "is", ido: "io", iii: "ii", iku: "iu", ile: "ie", ina: "ia", ind: "id", ipk: "ik", ita: "it", jav: "jv", jpn: "ja", kal: "kl", kan: "kn", kas: "ks", kau: "kr", kaz: "kk", khm: "km", kik: "ki", kin: "rw", kir: "ky", kom: "kv", kon: "kg", kor: "ko", kua: "kj", kur: "ku", lao: "lo", lat: "la", lav: "lv", lim: "li", lin: "ln", lit: "lt", ltz: "lb", lub: "lu", lug: "lg", mac: "mk", mah: "mh", mal: "ml", mao: "mi", mar: "mr", may: "ms", mlg: "mg", mlt: "mt", mon: "mn", nau: "na", nav: "nv", nbl: "nr", nde: "nd", ndo: "ng", nep: "ne", nno: "nn", nob: "nb", nor: "no", nya: "ny", oci: "oc", oji: "oj", ori: "or", orm: "om", oss: "os", pan: "pa", per: "fa", pli: "pi", pol: "pl", por: "pt", pus: "ps", que: "qu", roh: "rm", rum: "ro", run: "rn", rus: "ru", sag: "sg", san: "sa", sin: "si", slo: "sk", slv: "sl", sme: "se", smo: "sm", sna: "sn", snd: "sd", som: "so", sot: "st", spa: "es", srd: "sc", srp: "sr", ssw: "ss", sun: "su", swa: "sw", swe: "sv", tah: "ty", tam: "ta", tat: "tt", tel: "te", tgk: "tg", tgl: "tl", tha: "th", tib: "bo", tir: "ti", ton: "to", tsn: "tn", tso: "ts", tuk: "tk", tur: "tr", twi: "tw", uig: "ug", ukr: "uk", urd: "ur", uzb: "uz", ven: "ve", vie: "vi", vol: "vo", wel: "cy", wln: "wa", wol: "wo", xho: "xh", yid: "yi", yor: "yo", zha: "za", zul: "zu" };
var names = { afar: "aa", abkhazian: "ab", afrikaans: "af", akan: "ak", albanian: "sq", amharic: "am", arabic: "ar", aragonese: "an", armenian: "hy", assamese: "as", avaric: "av", avestan: "ae", aymara: "ay", azerbaijani: "az", bashkir: "ba", bambara: "bm", basque: "eu", belarusian: "be", bengali: "bn", "bihari languages": "bh", bislama: "bi", tibetan: "bo", bosnian: "bs", breton: "br", bulgarian: "bg", burmese: "my", catalan: "ca", valencian: "ca", czech: "cs", chamorro: "ch", chechen: "ce", chinese: "zh", "church slavic": "cu", "old slavonic": "cu", "church slavonic": "cu", "old bulgarian": "cu", "old church slavonic": "cu", chuvash: "cv", cornish: "kw", corsican: "co", cree: "cr", welsh: "cy", danish: "da", german: "de", divehi: "dv", dhivehi: "dv", maldivian: "dv", dutch: "nl", flemish: "nl", dzongkha: "dz", greek: "el", english: "en", esperanto: "eo", estonian: "et", ewe: "ee", faroese: "fo", persian: "fa", fijian: "fj", finnish: "fi", french: "fr", "western frisian": "fy", fulah: "ff", georgian: "ka", gaelic: "gd", "scottish gaelic": "gd", irish: "ga", galician: "gl", manx: "gv", guarani: "gn", gujarati: "gu", haitian: "ht", "haitian creole": "ht", hausa: "ha", hebrew: "he", herero: "hz", hindi: "hi", "hiri motu": "ho", croatian: "hr", hungarian: "hu", igbo: "ig", icelandic: "is", ido: "io", "sichuan yi": "ii", nuosu: "ii", inuktitut: "iu", interlingue: "ie", occidental: "ie", interlingua: "ia", indonesian: "id", inupiaq: "ik", italian: "it", javanese: "jv", japanese: "ja", kalaallisut: "kl", greenlandic: "kl", kannada: "kn", kashmiri: "ks", kanuri: "kr", kazakh: "kk", "central khmer": "km", kikuyu: "ki", gikuyu: "ki", kinyarwanda: "rw", kirghiz: "ky", kyrgyz: "ky", komi: "kv", kongo: "kg", korean: "ko", kuanyama: "kj", kwanyama: "kj", kurdish: "ku", lao: "lo", latin: "la", latvian: "lv", limburgan: "li", limburger: "li", limburgish: "li", lingala: "ln", lithuanian: "lt", luxembourgish: "lb", letzeburgesch: "lb", "luba-katanga": "lu", ganda: "lg", macedonian: "mk", marshallese: "mh", malayalam: "ml", maori: "mi", marathi: "mr", malay: "ms", malagasy: "mg", maltese: "mt", mongolian: "mn", nauru: "na", navajo: "nv", navaho: "nv", "ndebele, south": "nr", "south ndebele": "nr", "ndebele, north": "nd", "north ndebele": "nd", ndonga: "ng", nepali: "ne", "norwegian nynorsk": "nn", "nynorsk, norwegian": "nn", "norwegian bokm\xE5l": "nb", "bokm\xE5l, norwegian": "nb", norwegian: "no", chichewa: "ny", chewa: "ny", nyanja: "ny", occitan: "oc", ojibwa: "oj", oriya: "or", oromo: "om", ossetian: "os", ossetic: "os", panjabi: "pa", punjabi: "pa", pali: "pi", polish: "pl", portuguese: "pt", pushto: "ps", pashto: "ps", quechua: "qu", romansh: "rm", romanian: "ro", moldavian: "ro", moldovan: "ro", rundi: "rn", russian: "ru", sango: "sg", sanskrit: "sa", sinhala: "si", sinhalese: "si", slovak: "sk", slovenian: "sl", "northern sami": "se", samoan: "sm", shona: "sn", sindhi: "sd", somali: "so", "sotho, southern": "st", spanish: "es", castilian: "es", sardinian: "sc", serbian: "sr", swati: "ss", sundanese: "su", swahili: "sw", swedish: "sv", tahitian: "ty", tamil: "ta", tatar: "tt", telugu: "te", tajik: "tg", tagalog: "tl", thai: "th", tigrinya: "ti", tonga: "to", tswana: "tn", tsonga: "ts", turkmen: "tk", turkish: "tr", twi: "tw", uighur: "ug", uyghur: "ug", ukrainian: "uk", urdu: "ur", uzbek: "uz", venda: "ve", vietnamese: "vi", "volap\xFCk": "vo", walloon: "wa", wolof: "wo", xhosa: "xh", yiddish: "yi", yoruba: "yo", zhuang: "za", chuang: "za", zulu: "zu" };
var isoKeys = Object.values(iso).sort();
var languages = (e) => {
  if (typeof e != "string")
    throw new Error('The "language" must be a string, received ' + typeof e);
  if (e.length > 100)
    throw new Error(`The "language" is too long at ${e.length} characters`);
  if (e = e.toLowerCase(), e = names[e] || iso[e] || e, !isoKeys.includes(e))
    throw new Error(`The language "${e}" is not part of the ISO 639-1`);
  return e;
};
function Cache() {
  var e = Object.create(null);
  function a(a2) {
    delete e[a2];
  }
  this.set = function(n, i, r) {
    if (r !== undefined && (typeof r != "number" || isNaN(r) || r <= 0))
      throw new Error("Cache timeout must be a positive number");
    var t = e[n];
    t && clearTimeout(t.timeout);
    var o = { value: i, expire: r + Date.now() };
    return isNaN(o.expire) || (o.timeout = setTimeout(() => a(n), r)), e[n] = o, i;
  }, this.del = function(n) {
    var i = true, r = e[n];
    return r ? (clearTimeout(r.timeout), !isNaN(r.expire) && r.expire < Date.now() && (i = false)) : i = false, i && a(n), i;
  }, this.clear = function() {
    for (var a2 in e)
      clearTimeout(e[a2].timeout);
    e = Object.create(null);
  }, this.get = function(a2) {
    var n = e[a2];
    if (n !== undefined) {
      if (isNaN(n.expire) || n.expire >= Date.now())
        return n.value;
      delete e[a2];
    }
    return null;
  };
}
var exp$1 = new Cache;
exp$1.Cache = Cache;
var base = "https://translate.googleapis.com/translate_a/single";
var google = { fetch: ({ key: e, from: a, to: n, text: i }) => [`${base}?client=gtx&sl=${a}&tl=${n}&dt=t&q=${encodeURI(i)}`], parse: (e) => e.json().then((e2) => {
  if (!(e2 = e2 && e2[0] && e2[0][0] && e2[0].map((e3) => e3[0]).join("")))
    throw new Error("Translation not found");
  return e2;
}) };
var yandex = { needkey: true, fetch: ({ key: e, from: a, to: n, text: i }) => [`https://translate.yandex.net/api/v1.5/tr.json/translate?key=${e}&lang=${a}-${n}&text=${encodeURIComponent(i)}`, { method: "POST", body: "" }], parse: (e) => e.json().then((e2) => {
  if (e2.code !== 200)
    throw new Error(e2.message);
  return e2.text[0];
}) };
var libreUrl = "https://libretranslate.com/translate";
var libre = { needkey: false, fetch: ({ url: e = libreUrl, key: a, from: n, to: i, text: r }) => [e, { method: "POST", body: JSON.stringify({ q: r, source: n, target: i, api_key: a }), headers: { "Content-Type": "application/json" } }], parse: (e) => e.json().then((e2) => {
  if (!e2)
    throw new Error("No response found");
  if (e2.error)
    throw new Error(e2.error);
  if (!e2.translatedText)
    throw new Error("No response found");
  return e2.translatedText;
}) };
var deepl = { needkey: true, fetch: ({ key: e, from: a, to: n, text: i }) => [`https://api${/:fx$/.test(e) ? "-free" : ""}.deepl.com/v2/translate?auth_key=${e}&source_lang=${a}&target_lang=${n}&text=${i = encodeURIComponent(i)}`, { method: "POST", body: "" }], parse: async (e) => {
  if (!e.ok) {
    if (e.status === 403)
      throw new Error("Auth Error, please review the key for DeepL");
    throw new Error(`Error ${e.status}`);
  }
  return e.json().then((e2) => e2.translations[0].text);
} };
var engines = { google, yandex, libre, deepl };
var Translate = function(e = {}) {
  if (!(this instanceof Translate))
    return new Translate(e);
  const a = { from: "en", to: "en", cache: undefined, languages, engines, engine: "google", keys: {} }, n = async (e2, a2 = {}) => {
    typeof a2 == "string" && (a2 = { to: a2 }), a2.text = e2, a2.from = languages(a2.from || n.from), a2.to = languages(a2.to || n.to), a2.cache = a2.cache || n.cache, a2.engines = a2.engines || {}, a2.engine = a2.engine || n.engine, a2.url = a2.url || n.url, a2.id = a2.id || `${a2.url}:${a2.from}:${a2.to}:${a2.engine}:${a2.text}`, a2.keys = a2.keys || n.keys || {};
    for (let e3 in n.keys)
      a2.keys[e3] = a2.keys[e3] || n.keys[e3];
    a2.key = a2.key || n.key || a2.keys[a2.engine];
    const i = a2.engines[a2.engine] || n.engines[a2.engine], r = exp$1.get(a2.id);
    if (r)
      return Promise.resolve(r);
    if (a2.to === a2.from)
      return Promise.resolve(a2.text);
    if (i.needkey && !a2.key)
      throw new Error(`The engine "${a2.engine}" needs a key, please provide it`);
    const t = i.fetch(a2);
    return fetch(...t).then(i.parse).then((e3) => exp$1.set(a2.id, e3, a2.cache));
  };
  for (let i in a)
    n[i] = e[i] === undefined ? a[i] : e[i];
  return n;
};
var exp = new Translate;
exp.Translate = Translate;

// src/enrich/translate-metadata.ts
import fetch2 from "node-fetch";
global.fetch = global.fetch || fetch2;
var langs = [];
var translateMetadata = {
  id: "translate-metadata",
  name: "Translate metadata",
  types: ["Manifest"],
  async invalidate(resource, api) {
    const caches = await api.caches.value;
    const cacheKeys = langs.map((l) => `metadata_${l}`);
    for (const lang of cacheKeys) {
      if (!caches[lang]) {
        return true;
      }
    }
    return false;
  },
  async handler(resource, api) {
    const metadata = api.resource.metadata;
    if (!metadata || langs.length === 0)
      return {};
    const getValue2 = (inputText) => Oi2(inputText, "en");
    const metadataToTranslate = metadata.map((m) => {
      return `${getValue2(m.label)}
---
${getValue2(m.value)}`;
    }).join(`
----
`);
    const translated = {};
    const cache = await api.caches.value;
    let newMetadata = [...metadata];
    for (const lang of langs) {
      translated[lang] = cache[`metadata_${lang}`] || await exp(metadataToTranslate, { to: lang });
      newMetadata = translated[lang].split(`
----
`).map((m, k3) => {
        const existing = newMetadata[k3];
        const [label, value] = m.split(`
---
`);
        return {
          label: { ...existing.label || {}, [lang]: [label] },
          value: { ...existing.value || {}, [lang]: [value] }
        };
      });
    }
    api.builder.editManifest(resource.id, (m) => {
      m.setMetadata(newMetadata);
    });
    const langCaches = {};
    for (const lang of langs) {
      langCaches[`metadata_${lang}`] = translated[lang];
    }
    return {
      didChange: true,
      caches: {
        ...langCaches
      }
    };
  }
};

// src/enrich/typesense-index.ts
import { existsSync as existsSync2 } from "fs";
import { readFile, writeFile } from "fs/promises";
import { join as join3 } from "path";
var schema2 = {
  name: "manifests",
  enable_nested_fields: true,
  fields: [
    { name: "id", type: "string" },
    { name: "type", type: "string", facet: true },
    { name: "label", type: "string" },
    { name: "full_label", type: "object", optional: true },
    { name: "summary", type: "string", optional: true },
    { name: "collections", type: "string[]", facet: true, optional: true },
    { name: "plaintext", type: "string", optional: true },
    { name: "slug", type: "string" },
    { name: "url", type: "string", optional: true },
    { name: "totalItems", type: "int32", optional: true },
    { name: "thumbnail", type: "string", index: false, optional: true }
  ]
};
var enrichTypesense = {
  id: "typesense-manifests",
  name: "Typesense manifest collection",
  types: ["Manifest", "Collection"],
  invalidate: async () => {
    return true;
  },
  async handler(resource, api) {
    const id = resource.slug.replace("manifests/", "");
    const meta = await api.meta.value;
    const indices = await api.indices.value;
    const extraTopics = {};
    for (const [k3, v2] of Object.entries(indices || {})) {
      extraTopics[`topic_${k3}`] = v2;
    }
    let plaintext = "";
    const keywordsFile = join3(api.files, "keywords.txt");
    if (existsSync2(keywordsFile)) {
      plaintext = await readFile(keywordsFile, "utf-8");
    }
    const collections = meta.partOfCollections || [];
    return {
      temp: {
        record: {
          id: btoa(id),
          type: resource.type,
          slug: resource.slug,
          label: Fo(api.resource.label),
          full_label: api.resource.label,
          summary: Fo(api.resource.summary),
          thumbnail: meta.thumbnail?.id,
          url: meta.url,
          totalItems: meta.totalItems,
          collections: collections.map((c) => c.slug),
          plaintext,
          ...extraTopics
        },
        foundTopics: Object.keys(extraTopics)
      }
    };
  },
  async collect(temp, api, config) {
    if (!temp) {
      return;
    }
    const typeSenseDir = join3(api.build.filesDir, "meta", "typesense");
    const schemaFile = join3(typeSenseDir, "manifests.schema.json");
    const dataFile = join3(typeSenseDir, "manifests.jsonl");
    const foundTopics = [];
    const topicSchema = [];
    for (const record of Object.values(temp)) {
      for (const topic of record.foundTopics) {
        if (!foundTopics.includes(topic)) {
          foundTopics.push(topic);
          topicSchema.push({
            name: topic,
            type: "string[]",
            facet: true,
            optional: true
          });
        }
      }
    }
    await mkdirp(typeSenseDir);
    await writeFile(schemaFile, JSON.stringify({ ...schema2, fields: [...schema2.fields, ...topicSchema] }, null, 2));
    const jsonList = Object.values(temp).map((record) => {
      return JSON.stringify(record.record);
    }).join(`
`);
    await writeFile(dataFile, jsonList);
  }
};

// src/enrich/typesense-plaintext.ts
import { existsSync as existsSync3 } from "fs";
import { readFile as readFile2, readdir } from "fs/promises";
import { join as join4 } from "path";
var plaintextSchema = {
  name: "manifest-plaintext",
  fields: [
    { name: "id", type: "string" },
    { name: "plaintext", type: "string" },
    { name: "manifest", type: "string" },
    { name: "canvasIndex", type: "int32" }
  ]
};
var typesensePlaintext = {
  id: "typesense-plaintext",
  name: "Typesense plaintext",
  types: ["Manifest"],
  async invalidate(resource, api, config) {
    return true;
  },
  async handler(resource, api, config) {
    const plaintextPath = join4(api.files, "plaintext");
    const pages = [];
    if (existsSync3(plaintextPath)) {
      const files = await readdir(plaintextPath);
      for (const file of files) {
        if (file.endsWith(".txt")) {
          const fileName = file.replace(".txt", "");
          const canvasIndex = Number.parseInt(fileName);
          if (Number.isNaN(canvasIndex)) {
            continue;
          }
          pages.push({
            id: btoa(resource.id + canvasIndex),
            plaintext: await readFile2(join4(plaintextPath, file), "utf-8"),
            manifest: resource.id,
            canvasIndex
          });
        }
      }
    }
    return {
      temp: { pages }
    };
  },
  async collect(temp, api, config) {
    if (!temp) {
      return;
    }
    const typeSenseDir = join4(api.build.filesDir, "meta", "typesense");
    const schemaFile = join4(typeSenseDir, "manifest-plaintext.schema.json");
    const dataFile = join4(typeSenseDir, "manifest-plaintext.jsonl");
    await Bun.write(schemaFile, JSON.stringify(plaintextSchema, null, 2));
    const jsonLines = [];
    for (const [manifest, { pages }] of Object.entries(temp)) {
      for (const page of pages) {
        jsonLines.push(JSON.stringify(page));
      }
    }
    await Bun.write(dataFile, jsonLines.join(`
`));
  }
};

// src/extract/extract-canvas-dims.ts
var extractCanvasDims = {
  id: "extract-canvas-dims",
  name: "Extract canvas dimensions",
  types: ["Canvas"],
  async invalidate(canvas, api) {
    const cache = await api.caches.value;
    return !cache.dims;
  },
  async handler(canvas, api) {
    const resource = api.resource;
    return {
      caches: {
        dims: true
      },
      meta: {
        width: resource.width,
        height: resource.height
      }
    };
  }
};

// src/extract/extract-folder-collections.ts
var extractFolderCollections = {
  id: "folder-collections",
  name: "Folder Collections",
  types: ["Manifest"],
  invalidate: async () => true,
  async handler(resource, api) {
    if (resource.source.type !== "disk")
      return {};
    const filePath = resource.source.relativePath;
    if (filePath) {
      return {
        collections: [filePath]
      };
    }
    return {};
  }
};

// src/extract/extract-metadata-analysis.ts
import { join as join5 } from "path";

// node_modules/@iiif/helpers/dist/i18n/esm/i18n.mjs
function k3(e, r, i = [], x2 = false, d = []) {
  if (d.length && (r = r.filter((t) => d.indexOf(t) === -1)), !r || r.length === 0)
    return;
  if (r.length === 1)
    return r[0];
  if (!e)
    return r.indexOf("none") !== -1 ? "none" : r[0];
  if (r.indexOf(e) !== -1)
    return e;
  const c = e.indexOf("-") !== -1 ? e.slice(0, e.indexOf("-")) : null;
  if (c && r.indexOf(c) !== -1)
    return c;
  for (const t of i)
    if (r.indexOf(t) !== -1)
      return t;
  if (!x2 && e) {
    const s = r.map((n) => n.indexOf("-") !== -1 ? n.slice(0, n.indexOf("-")) : null).indexOf(e);
    if (s !== -1)
      return r[s];
    for (const n of i) {
      const O3 = n.indexOf("-") !== -1 ? n.slice(0, n.indexOf("-")) : null, f = O3 ? r.indexOf(O3) : -1;
      if (f !== -1)
        return r[f];
    }
  }
  return r.indexOf("none") !== -1 ? "none" : r.indexOf("@none") !== -1 ? "@none" : r[0];
}
function l(e, r, i = {}) {
  const {
    strictFallback: x2 = false,
    defaultText: d = "",
    separator: c = `
`,
    fallbackLanguages: t = [],
    closest: s,
    skipLanguages: n
  } = i, O3 = Object.keys(e || {}), f = s ? r : k3(r, O3, t, x2, n);
  if (!e)
    return d;
  if (typeof e == "string")
    return e;
  const o = f ? e[f] : undefined;
  if (o && f) {
    if (typeof o == "string")
      return o;
    if (o.length === 1 && o[0] === "") {
      const v2 = i.skipLanguages || [];
      return l(e, r, {
        ...i,
        skipLanguages: [...v2, f]
      });
    }
    return o.join(c);
  }
  return "";
}
function u(e, r = {}) {
  return l(e, r.language || (typeof navigator < "u" ? navigator.language : "en"), r);
}

// src/util/cached-translate.ts
var cache = {};
async function cachedTranslate(_text, from, to2) {
  const text = _text.trim();
  const key = `${from}-${to2}-${text}`;
  if (cache[key]) {
    return cache[key];
  }
  const result = await exp(text, { from, to: to2 });
  cache[key] = result;
  return result;
}

// src/util/get-single-label.ts
async function getSingleLabel(label, options) {
  const labelLanguages = Object.keys(label || {});
  const primaryLabel = u(label, {
    language: options.language,
    fallbackLanguages: ["none"]
  });
  if (options.translate && label) {
    const availableLabelLanguages = labelLanguages.filter((l2) => l2 !== "none");
    const preferredLabelLanguage = availableLabelLanguages.find((l2) => l2 === options.language);
    if (!preferredLabelLanguage && availableLabelLanguages.length > 0) {
      const firstLabelLanguage = availableLabelLanguages[0];
      const firstLabelValues = (label[firstLabelLanguage] || []).join(" ");
      if (firstLabelLanguage && firstLabelValues) {
        return await cachedTranslate(firstLabelValues, firstLabelLanguage, options.language);
      }
    }
  }
  return primaryLabel;
}

// src/extract/extract-metadata-analysis.ts
var extractMetadataAnalysis = {
  id: "metadata-analysis",
  name: "Metadata Analysis",
  types: ["Manifest"],
  invalidate: async () => true,
  collect: async (temp, api, config) => {
    const { valueThreshold = 3 } = config || {};
    const analysisFile = {
      foundKeys: {},
      foundValues: {},
      foundValuesComma: {},
      foundLanguages: {},
      foundUniqueKeys: []
    };
    const slugs = Object.keys(temp);
    for (const slug2 of slugs) {
      const result = temp[slug2];
      for (const key of result.foundKeys) {
        if (!analysisFile.foundKeys[key]) {
          analysisFile.foundKeys[key] = 0;
        }
        analysisFile.foundKeys[key]++;
      }
      for (const key of Object.keys(result.foundValues)) {
        if (!analysisFile.foundValues[key]) {
          analysisFile.foundValues[key] = {};
        }
        for (const value of result.foundValues[key]) {
          if (!analysisFile.foundValues[key][value]) {
            analysisFile.foundValues[key][value] = 0;
          }
          analysisFile.foundValues[key][value]++;
        }
      }
      for (const key of Object.keys(result.foundValuesComma)) {
        if (!analysisFile.foundValuesComma[key]) {
          analysisFile.foundValuesComma[key] = {};
        }
        for (const value of result.foundValuesComma[key]) {
          if (!analysisFile.foundValuesComma[key][value]) {
            analysisFile.foundValuesComma[key][value] = 0;
          }
          analysisFile.foundValuesComma[key][value]++;
        }
      }
      for (const lang of result.foundLanguages) {
        if (!analysisFile.foundLanguages[lang]) {
          analysisFile.foundLanguages[lang] = 0;
        }
        analysisFile.foundLanguages[lang]++;
      }
    }
    for (const key of Object.keys(analysisFile.foundValues)) {
      const values = analysisFile.foundValues[key];
      for (const value of Object.keys(values)) {
        if (values[value] < valueThreshold) {
          delete values[value];
        }
      }
      if (Object.keys(values).length === 0) {
        delete analysisFile.foundValues[key];
        if (!analysisFile.foundUniqueKeys.includes(key)) {
          analysisFile.foundUniqueKeys.push(key);
        }
      }
    }
    for (const key of Object.keys(analysisFile.foundValuesComma)) {
      const values = analysisFile.foundValuesComma[key];
      for (const value of Object.keys(values)) {
        if (values[value] < valueThreshold) {
          delete values[value];
        }
      }
      if (Object.keys(values).length === 0) {
        delete analysisFile.foundValuesComma[key];
        if (!analysisFile.foundUniqueKeys.includes(key)) {
          analysisFile.foundUniqueKeys.push(key);
        }
      }
    }
    await mkdirp(join5(api.build.filesDir, "meta"));
    await Bun.write(join5(api.build.filesDir, "meta", "metadata-analysis.json"), JSON.stringify(analysisFile, null, 2));
  },
  handler: async (resource, api, config) => {
    const { language = "en", translate = true } = config || {};
    const foundKeys = [];
    const foundValues = {};
    const foundValuesComma = {};
    const foundLanguages = new Set;
    const fullResource = resource.vault?.get(api.resource);
    if (fullResource?.metadata) {
      const metadata = fullResource.metadata;
      for (const entry of metadata) {
        const label = entry.label || {};
        const value = entry.value || {};
        const labelLanguages = Object.keys(label);
        const valueLanguages = Object.keys(value);
        const primaryLabel = await getSingleLabel(label, {
          language,
          translate
        });
        for (const lang of labelLanguages) {
          foundLanguages.add(lang);
        }
        for (const lang of valueLanguages) {
          foundLanguages.add(lang);
        }
        if (primaryLabel) {
          foundKeys.push(primaryLabel);
          for (const lang of valueLanguages) {
            const values = value[lang];
            if (values) {
              for (const v2 of values) {
                if (!foundValues[primaryLabel]) {
                  foundValues[primaryLabel] = [];
                }
                foundValues[primaryLabel].push(v2);
                for (const value2 of v2.split(",")) {
                  const trimmed = value2.trim();
                  if (!foundValuesComma[primaryLabel]) {
                    foundValuesComma[primaryLabel] = [];
                  }
                  foundValuesComma[primaryLabel].push(trimmed);
                }
              }
            }
          }
        }
      }
    }
    return {
      temp: {
        foundKeys,
        foundValues,
        foundValuesComma,
        foundLanguages: Array.from(foundLanguages)
      }
    };
  }
};

// src/extract/extract-part-of-collection.ts
var extractPartOfCollection = {
  id: "extract-part-of-collection",
  name: "Extract Collection",
  types: ["Collection", "Manifest"],
  invalidate: async (resource, api, config) => {
    return true;
  },
  async handler(resource, api, config) {
    if (resource.type === "Collection") {
      const manifestIds = api.resource.items.map((item) => item.id);
      return {
        temp: {
          type: "Collection",
          idMapping: {
            id: resource.id,
            slug: resource.slug,
            label: api.resource.label
          },
          collectionItems: {
            [resource.id]: manifestIds
          }
        }
      };
    }
    if (resource.type === "Manifest") {
      return {
        temp: {
          type: "Manifest",
          idMapping: { id: resource.id, slug: resource.slug }
        }
      };
    }
    return {};
  },
  async collect(temp, api, config) {
    const items = Object.entries(temp);
    const manifestMapping = {};
    const manifestIsInCollection = {};
    for (const [slug2, mapping] of items) {
      if (mapping.type === "Manifest") {
        manifestMapping[mapping.idMapping.id] = slug2;
      }
    }
    for (const [slug2, mapping] of items) {
      if (mapping.type === "Collection") {
        const collectionItems = mapping.collectionItems || {};
        for (let [collectionId, manifestIds] of Object.entries(collectionItems)) {
          if (collectionId.startsWith("virtual://")) {
            collectionId = api.build.makeId({ type: "Collection", slug: slug2 });
          }
          for (const manifestId of manifestIds) {
            const manifestSlug = manifestMapping[manifestId];
            manifestIsInCollection[manifestSlug] = manifestIsInCollection[manifestSlug] || [];
            manifestIsInCollection[manifestSlug].push({
              id: collectionId,
              slug: slug2,
              label: mapping.idMapping.label
            });
          }
        }
      }
    }
    return {
      temp: manifestIsInCollection
    };
  },
  async injectManifest(resource, temp, api, config) {
    if (temp.length === 0) {
      return {};
    }
    return {
      meta: {
        partOfCollections: temp
      }
    };
  }
};

// src/extract/extract-plaintext.ts
var import_keyword_extractor = __toESM(require_keyword_extractor(), 1);
import { join as join6 } from "path";
var extractPlaintext = {
  id: "extract-plaintext",
  name: "Extract plaintext",
  types: ["Canvas"],
  invalidate: async () => {
    return true;
  },
  async collectManifest(manifest, temp, api, config) {
    if (temp.canvases) {
      const filesDir = join6(api.build.cacheDir, manifest.slug, "files", "plaintext");
      const keywordsFile = join6(api.build.cacheDir, manifest.slug, "files", "keywords.txt");
      await mkdirp(filesDir);
      const allText = [];
      for (const [canvasIdx, canvas] of Object.entries(temp.canvases || {})) {
        const text = canvas.plaintext;
        if (text) {
          const canvasFile = join6(filesDir, `${canvasIdx}.txt`);
          await mkdirp(filesDir);
          await Bun.write(canvasFile, text);
          allText.push(text);
        }
      }
      const keywords = import_keyword_extractor.default.extract(allText.join(" "), {
        language: "en",
        remove_digits: true,
        return_changed_case: true,
        remove_duplicates: true
      }).join(" ");
      if (config.keywords && keywords) {
        await Bun.write(keywordsFile, keywords);
      }
    }
  },
  async handler(resource, api) {
    if (!api.resource.annotations.length) {
      return {};
    }
    const first = api.resource.annotations[0];
    const result = await api.requestCache.fetch(first.id);
    const plaintextLines = [];
    if (result?.items?.length) {
      for (const item of result.items) {
        if (item.body) {
          const body = Array.isArray(item.body) ? item.body[0] : item.body;
          if (body.type === "TextualBody" && typeof body.value === "string") {
            plaintextLines.push(body.value);
          }
        }
      }
      return {
        temp: {
          plaintext: plaintextLines.join(`
`)
        }
      };
    }
    return {};
  }
};

// src/extract/extract-remote-source.ts
var extractRemoteSource = {
  id: "extract-remote-source",
  name: "Extract remote source",
  types: ["Manifest", "Collection"],
  invalidate: async () => true,
  handler: async (resource) => {
    if (resource.source.type === "remote") {
      const { type: type2, url } = resource.source;
      return {
        meta: { url }
      };
    }
    return {};
  }
};

// src/extract/extract-slug-source.ts
var extractSlugSource = {
  id: "extract-slug-source",
  types: ["Manifest", "Collection"],
  name: "Extract slug source",
  handler: async (resource) => {
    return {
      meta: {
        slugSource: resource.slugSource,
        totalItems: resource.subResources
      }
    };
  },
  invalidate: async () => {
    return true;
  }
};

// src/extract/extract-thumbnail.ts
var extractThumbnail = {
  id: "extract-thumbnail",
  name: "Extract Thumbnail",
  types: ["Manifest"],
  invalidate: async (resource, api, config) => {
    const cache2 = await api.caches.value;
    return !cache2.extractThumbnail && cache2.extractThumbnail !== false;
  },
  handler: async (resource, api, config) => {
    const vault = resource.vault;
    const helper = qn(vault);
    const thumbnail = await helper.getBestThumbnailAtSize(api.resource, config.width ? {
      width: config.width,
      height: config.height || config.width
    } : {
      width: 256,
      height: 256
    }, config.dereference || false);
    if (thumbnail?.best) {
      return {
        meta: { thumbnail: thumbnail.best },
        caches: { extractThumbnail: true }
      };
    }
    return {
      caches: { extractThumbnail: false }
    };
  }
};

// src/extract/extract-topics.ts
var extractTopics = {
  id: "extract-topics",
  name: "Extract Topics",
  types: ["Manifest"],
  invalidate: async () => {
    return true;
  },
  handler: async (resource, api, config) => {
    const { commaSeparated = [], translate = true, topicTypes = {}, language = "en" } = config;
    const topicsToParse = Object.keys(topicTypes);
    const latestResource = resource.vault?.get(api.resource);
    const metadata = latestResource?.metadata || [];
    const metadataLabels = await Promise.all(metadata.map((item) => getSingleLabel(item.label, { language, translate })));
    const indices = {};
    for (const topic of topicsToParse) {
      const topicTypes2 = config.topicTypes[topic];
      for (const topicType of topicTypes2) {
        const index = metadataLabels.indexOf(topicType);
        if (index === -1) {
          continue;
        }
        const values = metadata[index].value;
        const first = Object.keys(values)[0];
        const value = values[first];
        if (value) {
          if (commaSeparated.includes(topic)) {
            for (const v2 of value) {
              indices[topic] = indices[topic] || [];
              indices[topic].push(...v2.split(",").map((t) => t.trim()));
            }
          } else {
            indices[topic] = indices[topic] || [];
            indices[topic].push(...value);
          }
        }
      }
    }
    return {
      indices
    };
  }
};

// src/rewrite/flat-manifests.ts
var flatManifests = {
  id: "flat-manifests",
  name: "Flat manifests",
  types: ["Manifest", "Collection"],
  rewrite: (slug2, resource) => {
    const isManifest = resource.type === "Manifest";
    const isCollection = resource.type === "Collection";
    if (isManifest) {
      const parts = slug2.split("/");
      const lastPart = parts.pop();
      return `manifests/${lastPart}`;
    }
    if (isCollection) {
      const parts = slug2.split("/");
      const lastPart = parts.pop();
      return `collections/${lastPart}`;
    }
    return slug2;
  }
};

// src/stores/iiif-json.ts
import { existsSync as existsSync4 } from "fs";
import { readFile as readFile3, stat as stat2 } from "fs/promises";
import { dirname as dirname4, join as join9, relative as relative2 } from "path";
import { cwd } from "process";

// node_modules/fs-extra/lib/esm.mjs
var import_copy = __toESM(require_copy2(), 1);
var import_empty = __toESM(require_empty(), 1);
var import_ensure = __toESM(require_ensure(), 1);
var import_json = __toESM(require_json(), 1);
var import_mkdirs = __toESM(require_mkdirs(), 1);
var import_move = __toESM(require_move2(), 1);
var import_output_file = __toESM(require_output_file(), 1);
var import_path_exists = __toESM(require_path_exists(), 1);
var import_remove = __toESM(require_remove(), 1);
var copy = import_copy.default.copy;
var copySync = import_copy.default.copySync;
var emptyDirSync = import_empty.default.emptyDirSync;
var emptydirSync = import_empty.default.emptydirSync;
var emptyDir = import_empty.default.emptyDir;
var emptydir = import_empty.default.emptydir;
var createFile = import_ensure.default.createFile;
var createFileSync = import_ensure.default.createFileSync;
var ensureFile = import_ensure.default.ensureFile;
var ensureFileSync = import_ensure.default.ensureFileSync;
var createLink = import_ensure.default.createLink;
var createLinkSync = import_ensure.default.createLinkSync;
var ensureLink = import_ensure.default.ensureLink;
var ensureLinkSync = import_ensure.default.ensureLinkSync;
var createSymlink = import_ensure.default.createSymlink;
var createSymlinkSync = import_ensure.default.createSymlinkSync;
var ensureSymlink = import_ensure.default.ensureSymlink;
var ensureSymlinkSync = import_ensure.default.ensureSymlinkSync;
var readJson = import_json.default.readJson;
var readJSON = import_json.default.readJSON;
var readJsonSync = import_json.default.readJsonSync;
var readJSONSync = import_json.default.readJSONSync;
var writeJson = import_json.default.writeJson;
var writeJSON = import_json.default.writeJSON;
var writeJsonSync = import_json.default.writeJsonSync;
var writeJSONSync = import_json.default.writeJSONSync;
var outputJson = import_json.default.outputJson;
var outputJSON = import_json.default.outputJSON;
var outputJsonSync = import_json.default.outputJsonSync;
var outputJSONSync = import_json.default.outputJSONSync;
var mkdirs = import_mkdirs.default.mkdirs;
var mkdirsSync = import_mkdirs.default.mkdirsSync;
var mkdirp2 = import_mkdirs.default.mkdirp;
var mkdirpSync2 = import_mkdirs.default.mkdirpSync;
var ensureDir = import_mkdirs.default.ensureDir;
var ensureDirSync = import_mkdirs.default.ensureDirSync;
var move = import_move.default.move;
var moveSync = import_move.default.moveSync;
var outputFile = import_output_file.default.outputFile;
var outputFileSync = import_output_file.default.outputFileSync;
var pathExists = import_path_exists.default.pathExists;
var pathExistsSync = import_path_exists.default.pathExistsSync;
var remove = import_remove.default.remove;
var removeSync = import_remove.default.removeSync;
var esm_default = {
  ...import_copy.default,
  ...import_empty.default,
  ...import_ensure.default,
  ...import_json.default,
  ...import_mkdirs.default,
  ...import_move.default,
  ...import_output_file.default,
  ...import_path_exists.default,
  ...import_remove.default
};

// src/stores/iiif-json.ts
var import_object_hash2 = __toESM(require_object_hash(), 1);

// src/util/is-empty.ts
import { readdirSync } from "fs";
function isEmpty(path) {
  return readdirSync(path).length === 0;
}

// src/util/read-all-files.ts
import { readdirSync as readdirSync2 } from "fs";
import { join as join7 } from "path";
function* readAllFiles(dir) {
  const files = readdirSync2(dir, { withFileTypes: true });
  for (const file of files) {
    if (file.isDirectory()) {
      yield* readAllFiles(join7(dir, file.name));
    } else {
      yield join7(dir, file.name);
    }
  }
}

// src/util/read-filtered-files.ts
var import_micromatch = __toESM(require_micromatch(), 1);
function readFilteredFiles(store) {
  const allStoreFiles = readAllFiles(store.path);
  const allFiles = Array.from(allStoreFiles);
  if (store.pattern || store.ignore) {
    return import_micromatch.default(allFiles, store.pattern || "**/*", {
      ignore: store.ignore
    });
  }
  return allFiles;
}

// src/util/rewrite-path.ts
import { join as join8, relative } from "path";
function rewritePath(config) {
  return (inputPath) => {
    let currentPath = inputPath;
    if (config.base) {
      currentPath = relative(config.base, currentPath);
    }
    if (config.destination) {
      currentPath = join8(config.destination, currentPath);
    }
    if (currentPath.endsWith("_collection.yml") || currentPath.endsWith("_collection.yaml")) {
      return currentPath.replace(/\/_collection\.(yml|yaml)$/, "");
    }
    return currentPath.replace(/\.[A-Za-z0-9]+$/, "");
  };
}

// src/util/store.ts
function createProtoDirectory(resource, vault, caches = {}, other = {}) {
  return {
    "resource.json": resource,
    "vault.json": vault.getStore().getState(),
    "caches.json": caches,
    "indices.json": {},
    "meta.json": {},
    ...other
  };
}

// src/util/string-to-lang.ts
function stringToLang(input) {
  if (typeof input === "string") {
    return { none: [input] };
  }
  if (Array.isArray(input)) {
    return { none: input };
  }
  const keys = Object.keys(input);
  if (keys.length === 0) {
    return { none: [] };
  }
  const lang = {};
  for (const key of keys) {
    const value = input[key];
    if (typeof value === "string") {
      lang[key] = [value];
    } else {
      lang[key] = value;
    }
  }
  return lang;
}

// src/stores/iiif-json.ts
async function parse2(store, api) {
  const allFiles = readFilteredFiles(store);
  const fileNameToPath = rewritePath(store);
  const newAllFiles = [];
  const subFileMap = {};
  const virtualCollectionsPath = join9(api.build.virtualCacheDir, api.storeId);
  if (store.subFiles) {
    const allFilesWithoutExtension = allFiles.map(fileNameToPath);
    for (let i = 0;i < allFilesWithoutExtension.length; i++) {
      const file = allFilesWithoutExtension[i];
      let dupe = false;
      for (const toCompare of allFilesWithoutExtension) {
        if (file === toCompare)
          continue;
        if (file.startsWith(toCompare)) {
          dupe = true;
          if (!subFileMap[toCompare]) {
            subFileMap[toCompare] = [];
          }
          subFileMap[toCompare].push(allFiles[i]);
          break;
        }
      }
      if (!dupe) {
        newAllFiles.push([allFiles[i], allFilesWithoutExtension[i]]);
      }
    }
  } else {
    for (const file of allFiles) {
      newAllFiles.push([file, fileNameToPath(file)]);
    }
  }
  const manifests = [];
  for (const [file, fileWithoutExtension] of newAllFiles) {
    const fileType = await api.build.fileTypeCache.getFileType(file);
    if (!fileType) {
      api.build.log(`Warning: Could not determine file type for "${file}"`);
    }
    const source = {
      type: "disk",
      path: store.path
    };
    if (store.path) {
      const dir = dirname4(file);
      if (dir) {
        source.relativePath = relative2(store.path, dir);
      }
    }
    if (file.endsWith("/_collection.yml") || file.endsWith("/_collection.yaml")) {
      const manifestsToInclude = newAllFiles.filter(([manifestFile, full]) => {
        if (!full.startsWith(fileWithoutExtension))
          return false;
        if (manifestFile === file)
          return false;
        const relativeDir = relative2(dirname4(file), manifestFile);
        return !relativeDir.includes("/");
      });
      const loadedMetadata = await import(join9(cwd(), file));
      const { label, summary, metadata, type: _1, items: _22, ...rest } = loadedMetadata;
      const virtualCollection = {
        id: `virtual://${fileWithoutExtension}`,
        type: "Collection",
        label: label ? stringToLang(label) : fileWithoutExtension.split("/").pop() || fileWithoutExtension,
        summary: summary ? stringToLang(summary) : undefined,
        metadata: metadata ? metadata.map((item) => ({
          label: stringToLang(item.label),
          value: stringToLang(item.value)
        })) : undefined,
        items: manifestsToInclude.map(([manifestFile, fileWithoutExtension2]) => {
          const relativePath = relative2(dirname4(file), manifestFile);
          return {
            id: `./${relativePath}`,
            type: "Manifest"
          };
        }),
        ...rest
      };
      const filePath = join9(virtualCollectionsPath, `${fileWithoutExtension}.json`);
      await Bun.write(filePath, JSON.stringify(virtualCollection, null, 2));
      manifests.push({
        path: filePath,
        slug: fileWithoutExtension,
        type: "Collection",
        storeId: api.storeId,
        subFiles: subFileMap[fileWithoutExtension],
        source,
        saveToDisk: true,
        virtual: true
      });
      continue;
    }
    manifests.push({
      path: file,
      slug: fileWithoutExtension,
      type: fileType || "Manifest",
      storeId: api.storeId,
      subFiles: subFileMap[fileWithoutExtension],
      source,
      saveToDisk: true
    });
  }
  return manifests;
}
async function getKey(store, resource) {
  const file = await stat2(resource.path);
  const key = `${file.mtime}-${file.ctime}-${file.size}`;
  if (store.subFiles) {
    const subFilesFolderPath = resource.path.replace(".json", "");
    const subFilesFolder = existsSync4(subFilesFolderPath);
    if (subFilesFolder) {
      const allFiles = readAllFiles(subFilesFolderPath);
      const keys = [];
      for (const fileName of allFiles) {
        const file2 = await stat2(fileName);
        keys.push(`${file2.mtime}-${file2.ctime}-${file2.size}`);
      }
      const dirHash = import_object_hash2.default(keys);
      return `${key}_dir: ${dirHash}`;
    }
  }
  return key;
}
async function invalidate(store, resource, caches) {
  if (!caches.load) {
    return true;
  }
  const key = await getKey(store, resource);
  return key !== caches.load;
}
async function load2(store, resource, directory) {
  const file = await readFile3(resource.path, "utf-8");
  const cacheKey = await getKey(store, resource);
  const json2 = JSON.parse(file);
  const vault = new Io;
  const id = json2.id || json2["@id"];
  if (!id) {
    throw new Error(`No id found in json${resource.path}`);
  }
  if (store.subFiles) {
    const subFilesFolderPath = resource.path.replace(".json", "");
    const subFilesFolder = existsSync4(subFilesFolderPath);
    if (subFilesFolder) {
      if (subFilesFolder && await pathExists(subFilesFolderPath) && !isEmpty(subFilesFolderPath)) {
        const destination = join9(cwd(), directory, "files");
        await copy(subFilesFolderPath, destination, { overwrite: true });
      }
    }
  }
  if (resource.virtual) {
    if (resource.source.type !== "disk") {
      throw new Error("Virtual resources must be loaded from disk");
    }
    const newItems = [];
    for (const item of json2.items) {
      try {
        const { id: id2, type: type2, ...rest } = item;
        const loadedManifest = JSON.parse(await readFile3(join9(cwd(), resource.source.path, resource.source.relativePath || "", item.id), "utf-8"));
        const newId = loadedManifest.id || loadedManifest["@id"];
        const newType = loadedManifest.type || loadedManifest["@type"];
        newItems.push({
          id: newId,
          type: newType.includes("Collection") ? "Collection" : "Manifest",
          ...rest
        });
      } catch (err) {
        console.error("Warning: error loading virtual collection item", item.id, err);
      }
    }
    json2.items = newItems;
  }
  const res = await vault.load(id, json2);
  if (!res) {
    throw new Error(`Failed to load resource: ${id}`);
  }
  return createProtoDirectory({
    id,
    type: resource.type,
    path: resource.path,
    slug: resource.slug,
    storeId: resource.storeId,
    subResources: (res.items || []).length,
    saveToDisk: true,
    source: resource.source,
    virtual: resource.virtual
  }, vault, { load: cacheKey });
}
var IIIFJSONStore = {
  parse: parse2,
  invalidate,
  load: load2
};

// src/stores/iiif-remote.ts
import { existsSync as existsSync5 } from "fs";
import { stat as stat3 } from "fs/promises";
import { join as join10 } from "path";
import { cwd as cwd2 } from "process";
var IIIFRemoteStore = {
  async parse(store, api) {
    if (store.urls) {
      const toReturn = [];
      for (const url of store.urls) {
        toReturn.push(...await IIIFRemoteStore.parse({ ...store, url, urls: undefined }, api));
      }
      return toReturn;
    }
    if (!store.url) {
      return [];
    }
    const collection = await api.requestCache.fetch(store.url);
    const identifier = collection["@id"] || collection.id || "";
    const isCollection = collection["@type"] === "sc:Collection" || collection.type === "Collection";
    const isManifest = collection["@type"] === "sc:Manifest" || collection.type === "Manifest";
    if (!isCollection && !isManifest || !identifier) {
      console.log("ERROR: Could not parse collection", store.url);
      return [];
    }
    const [slug2, slugSource] = api.getSlug({
      id: collection["@id"] || collection.id || "",
      type: isManifest ? "Manifest" : "Collection"
    });
    const override = store.overrides ? `${store.overrides}/${slug2.startsWith(isManifest ? "manifests/" : "collections/") ? slug2.slice((isManifest ? "manifests/" : "collections/").length) : slug2}.json` : undefined;
    if (isManifest) {
      let source = {
        type: "remote",
        url: store.url,
        overrides: store.overrides
      };
      if (override && existsSync5(join10(cwd2(), override))) {
        source = { type: "disk", path: override, alias: slug2 };
      }
      return [
        {
          type: "Manifest",
          slug: slug2,
          slugSource,
          path: store.url,
          storeId: api.storeId,
          source,
          saveToDisk: store.saveManifests || false
        }
      ];
    }
    const allResources = [
      {
        type: "Collection",
        slug: slug2,
        slugSource,
        path: store.url,
        storeId: api.storeId,
        saveToDisk: store.saveManifests || false,
        source: { type: "remote", url: store.url, overrides: store.overrides }
      }
    ];
    const vault = new Io;
    const collectionVault = await vault.loadCollection(identifier, collection);
    if (!collectionVault) {
      return [];
    }
    const loading = [];
    for (const manifestItem of collectionVault.items) {
      loading.push(IIIFRemoteStore.parse({ ...store, url: manifestItem.id }, api));
    }
    const results = await Promise.all(loading);
    for (const result of results) {
      allResources.push(...result);
    }
    return allResources;
  },
  async invalidate(store, resource, caches) {
    if (!caches.load && !caches.urls) {
      return true;
    }
    if (resource.source.type === "disk") {
      const file = await stat3(resource.source.path);
      const key = `${file.mtime}-${file.ctime}-${file.size}`;
      return key !== caches.load;
    }
    if (caches.urls && resource.source.url) {
      return !caches.urls.includes(resource.source.url);
    }
    return true;
  },
  async load(store, resource, directory, api) {
    const json2 = resource.source.type === "disk" ? await Bun.file(resource.source.path).json() : await api.requestCache.fetch(resource.path);
    const id = json2.id || json2["@id"];
    const key = await api.requestCache.getKey(resource.path);
    if (!id) {
      throw new Error("No id found in json");
    }
    const vault = new Io;
    const res = await vault.load(id, json2);
    const caches = {};
    if (resource.source.type === "disk") {
      const file = await stat3(resource.source.path);
      caches.load = `${file.mtime}-${file.ctime}-${file.size}`;
      const pathWithoutExtension = resource.source.path.replace(".json", "");
      const subFilesFolder = existsSync5(join10(cwd2(), pathWithoutExtension));
      if (subFilesFolder) {
        if (subFilesFolder && await pathExists(resource.slug) && !isEmpty(resource.slug)) {
          const destination = join10(cwd2(), directory, "files");
          await copy(resource.slug, destination, { overwrite: true });
        }
      }
    } else if (key) {
      caches.urls = caches.urls || [];
      if (!caches.urls.includes(key)) {
        caches.urls.push(key);
      }
    }
    return createProtoDirectory({
      id,
      type: resource.type,
      path: resource.path,
      slug: resource.slug,
      storeId: api.storeId,
      slugSource: resource.slugSource,
      subResources: (res?.items || []).length,
      saveToDisk: resource.source.type === "disk" || store.saveManifests || false,
      source: resource.source
    }, vault, caches);
  }
};

// src/util/file-type-cache.ts
import { existsSync as existsSync6 } from "fs";
import { join as join11 } from "path";
import { cwd as cwd3 } from "process";
function createFiletypeCache(cacheFile) {
  let isLoaded = false;
  let didChange = false;
  let fileTypeCache = {};
  const loadIfExists = async () => {
    if (isLoaded)
      return;
    isLoaded = true;
    if (existsSync6(cacheFile)) {
      fileTypeCache = await Bun.file(cacheFile).json();
    }
  };
  return {
    async getFileType(filePath) {
      await loadIfExists();
      if (fileTypeCache[filePath]) {
        return fileTypeCache[filePath];
      }
      if (existsSync6(filePath)) {
        if (filePath.endsWith("/_collection.yml") || filePath.endsWith("/_collection.yaml")) {
          fileTypeCache[filePath] = "Collection";
          didChange = true;
          return fileTypeCache[filePath];
        }
        let jsonResource = await import(join11(cwd3(), filePath));
        if (jsonResource.default) {
          jsonResource = jsonResource.default;
        }
        let type2 = jsonResource.type || jsonResource["@type"];
        switch (type2) {
          case "sc:Manifest":
            type2 = "Manifest";
            break;
          case "sc:Collection":
            type2 = "Collection";
            break;
        }
        fileTypeCache[filePath] = type2;
        didChange = true;
        return fileTypeCache[filePath];
      }
      return null;
    },
    async save() {
      if (didChange) {
        await Bun.write(cacheFile, JSON.stringify(fileTypeCache, null, 2));
      }
    }
  };
}

// src/util/get-config.ts
import { existsSync as existsSync7 } from "fs";
import { join as join12 } from "path";
import { cwd as cwd4 } from "process";
var DEFAULT_CONFIG = {
  stores: {
    default: {
      path: "content",
      type: "iiif-json",
      pattern: "**/*.json"
    }
  }
};
var config = null;
var supportedConfigFiles = [".iiifrc.yml", ".iiifrc.yaml", "iiif.config.js", "iiif.config.ts"];
async function getConfig() {
  if (!config) {
    for (const configFileName of supportedConfigFiles) {
      if (existsSync7(join12(cwd4(), configFileName))) {
        config = await import(join12(cwd4(), configFileName));
        break;
      }
    }
  }
  if (!config || !config.stores) {
    config = DEFAULT_CONFIG;
  }
  return config;
}

// src/util/get-node-globals.ts
function getNodeGlobals() {
  const extractions = [];
  const enrichments = [];
  const rewrites = [];
  const generators = [];
  const g = global;
  if (g.__hss) {
    if (g.__hss.extractions) {
      extractions.push(...g.__hss.extractions);
    }
    if (g.__hss.enrichments) {
      enrichments.push(...g.__hss.enrichments);
    }
    if (g.__hss.rewrites) {
      rewrites.push(...g.__hss.rewrites);
    }
    if (g.__hss.generators) {
      generators.push(...g.__hss.generators);
    }
  }
  return { extractions, enrichments, rewrites, generators };
}

// src/util/load-scripts.ts
import { existsSync as existsSync8 } from "fs";
import { join as join13 } from "path";
import { cwd as cwd5 } from "process";

// src/util/python-api.ts
import { basename } from "path";

// lib/scripts.js
function extract(config2, handler) {
  if (!config2)
    return;
  global.__hss = global.__hss ? global.__hss : {};
  global.__hss.extractions = global.__hss.extractions ? global.__hss.extractions : [];
  global.__hss.extractions.push({
    invalidate: async () => true,
    ...config2,
    handler
  });
}

// src/util/run-python.ts
var import_detect_python_interpreter = __toESM(require_detect_python_interpreter(), 1);
import { spawn } from "child_process";
import { clearTimeout as clearTimeout2 } from "timers";
function runPython(scriptPath, args, stdInput, timeout) {
  return new Promise((resolve2, reject) => {
    const py = spawn(import_detect_python_interpreter.default.detect(), [scriptPath, ...args]);
    let dataString = "";
    const time = setTimeout(() => {
      py.kill();
      reject("Timeout");
    }, timeout || 30000);
    py.stdout.on("data", (data) => {
      dataString += data.toString();
    });
    py.stderr.on("data", (data) => {
      reject(data.toString());
    });
    py.stdout.on("end", () => {
      if (!dataString) {
        resolve2({});
      }
      try {
        const parsed = JSON.parse(dataString);
        clearTimeout2(time);
        resolve2(parsed);
      } catch (e) {
        reject(e);
      }
    });
    if (stdInput) {
      py.stdin.write(JSON.stringify(stdInput));
      py.stdin.end();
    }
    py.stderr.on("data", (data) => {
      reject(data.toString());
      py.kill();
    });
  });
}

// src/util/python-api.ts
async function pythonExtract(pythonScript, log) {
  const metaPython = await runPython(pythonScript, ["--meta"]);
  const id = basename(pythonScript, ".py");
  metaPython.id = metaPython.id || id;
  extract(metaPython, async (context, api) => {
    const caches = await api.caches.value;
    const cacheKey = metaPython.cacheKey;
    if (api.build.options.cache && cacheKey && caches[cacheKey]) {
      return {};
    }
    const meta = await api.meta.value;
    const indices = await api.indices.value;
    const config2 = api.config;
    const resource = api.resource;
    const response = await runPython(pythonScript, [], {
      context,
      meta,
      indices,
      caches,
      config: config2,
      resource
    });
    if (log) {
      const { logs = [], ...data } = response || {};
      if (logs.length) {
        console.log(logs.join(`
`));
      }
      return data || {};
    }
    return response || {};
  });
}

// src/util/load-scripts.ts
async function loadScripts(options, log = () => {
  return;
}) {
  if (options.scripts) {
    const scriptsPath = join13(cwd5(), options.scripts);
    let loaded = 0;
    if (existsSync8(scriptsPath)) {
      const allFiles = Array.from(readAllFiles(scriptsPath)).filter((s) => !s.endsWith("/hss.py"));
      log(`Loading ${allFiles.length} script(s)`);
      for (const file of allFiles) {
        if (file.endsWith("extract.py")) {
          if (options.python) {
            loaded++;
            await pythonExtract(file, options.debug);
          }
          continue;
        }
        if (file.endsWith(".py")) {
          continue;
        }
        try {
          await import(file);
          loaded++;
        } catch (e) {
          console.log(source_default.red(e));
          process.exit(1);
        }
      }
      if (loaded !== allFiles.length) {
        log(source_default.yellow(`Loaded ${loaded} of ${allFiles.length} scripts`));
      }
    }
  }
}

// src/util/slug-engine.ts
var NO_MATCH = [null, null];
function compileSlugConfig(config2) {
  if (config2.pattern) {
    throw new Error("config.pattern is no longer supported.");
  }
  return (slug2) => {
    const slugUrl = new URL(slug2);
    if (slugUrl.hostname !== config2.domain) {
      return NO_MATCH;
    }
    const path = slugUrl.pathname;
    if (config2.prefix && !path.startsWith(config2.prefix)) {
      return NO_MATCH;
    }
    if (config2.suffix && !path.endsWith(config2.suffix)) {
      return NO_MATCH;
    }
    const pathWithoutPrefix = config2.prefix ? path.slice(config2.prefix.length) : path;
    let pathWithoutSuffix = config2.suffix ? pathWithoutPrefix.slice(0, -config2.suffix.length) : pathWithoutPrefix;
    if (pathWithoutSuffix.startsWith("/")) {
      pathWithoutSuffix = pathWithoutSuffix.slice(1);
    }
    if (config2.pathSeparator) {
      pathWithoutSuffix = pathWithoutSuffix.replaceAll("/", config2.pathSeparator);
    }
    if (config2.addedPrefix) {
      pathWithoutSuffix = config2.addedPrefix + pathWithoutSuffix;
    }
    return [pathWithoutSuffix, { path: pathWithoutSuffix }];
  };
}
function removeTrailingSlash(str2) {
  if (str2.endsWith("/")) {
    return str2.slice(0, -1);
  }
  return str2;
}
function compileReverseSlugConfig(config2) {
  const pathSeparator = config2.pathSeparator ? new RegExp(config2.pathSeparator, "g") : null;
  return (targetPath) => {
    const domain = removeTrailingSlash(config2.domain);
    let path = removeTrailingSlash(targetPath);
    const prefix = config2.prefix || "";
    const suffix = config2.suffix || "";
    if (path.startsWith("/")) {
      path = path.slice(1);
    }
    if (path.startsWith("manifests/")) {
      path = path.slice("manifests/".length);
    }
    if (path.startsWith("collections/")) {
      path = path.slice("collections/".length);
    }
    if (config2.addedPrefix) {
      if (!path.startsWith(config2.addedPrefix)) {
        return NO_MATCH;
      }
      path = path.slice(config2.addedPrefix.length);
    }
    const parts = [`${config2.protocol || "https"}://${domain}`];
    if (prefix) {
      parts.push(prefix);
    }
    if (pathSeparator) {
      parts.push(path.replace(pathSeparator, "/"));
    } else {
      parts.push(path);
    }
    if (suffix) {
      parts.push(suffix);
    }
    return [parts.join(""), { path }];
  };
}

// src/util/store-request-cache.ts
import { createHash } from "crypto";
import { writeFile as writeFile2 } from "fs/promises";
import { readFile as readFile4 } from "fs/promises";
import { join as join14 } from "path";
var import_object_hash3 = __toESM(require_object_hash(), 1);
function createStoreRequestCache(storeKey, cacheDir, noCache = false) {
  const cache2 = new Map;
  const didChangeCache = new Map;
  return {
    async getKey(url) {
      if (cache2.has(url) || didChangeCache.has(url)) {
        return url;
      }
      return null;
    },
    async didChange(url, options) {
      let data = null;
      if (cache2.has(url)) {
        data = cache2.get(url);
      }
      if (didChangeCache.has(url)) {
        return true;
      }
      if (!data && await pathExists(url)) {
        try {
          const rawData = await readFile4(url);
          if (rawData.length) {
            data = JSON.parse(rawData.toString("utf-8"));
          }
        } catch (e) {
        }
      }
      if (!data) {
        return true;
      }
      const freshData = await fetch(url, options).then((r) => r.json());
      const didChange = import_object_hash3.default(data) !== import_object_hash3.default(freshData);
      if (didChange) {
        didChangeCache.set(url, freshData);
      }
      return didChange;
    },
    async fetch(url, options) {
      const hash = createHash("sha256").update(url).digest("hex");
      const dir = join14(cacheDir, storeKey);
      const cachePath = join14(cacheDir, `${storeKey}/${hash}.json`);
      if (didChangeCache.has(url)) {
        const data = didChangeCache.get(url);
        didChangeCache.delete(url);
        await mkdirp(dir);
        await writeFile2(cachePath, JSON.stringify(data));
        cache2.set(cachePath, data);
        return data;
      }
      if (cache2.has(cachePath)) {
        return cache2.get(cachePath);
      }
      if (await pathExists(cachePath) && !noCache) {
        const rawData = (await readFile4(cachePath)).toString("utf-8");
        if (rawData.length) {
          try {
            const data = JSON.parse(rawData);
            cache2.set(url, data);
            return data;
          } catch (e) {
          }
        }
      }
      try {
        const resp = await fetch(url, options);
        if (resp.status === 404) {
          return {};
        }
        const data = await resp.json();
        const cachedData = { ...data, _cached: true };
        cache2.set(url, cachedData);
        await mkdirp(dir);
        await writeFile2(cachePath, JSON.stringify(cachedData));
        return data;
      } catch (e) {
        console.log("Error fetching", url, e.message);
        console.error(e);
        throw e;
      }
    }
  };
}

// src/commands/build/0-parse-stores.ts
import { join as join16 } from "path";

// src/util/make-slug-helper.ts
function getDefaultSlug(slug2) {
  const url = new URL(slug2);
  let path = url.pathname;
  let extension = "";
  const parts = path.split(".");
  const lastPart = parts[parts.length - 1];
  if (lastPart.indexOf(".") !== -1) {
    const pathParts = path.split(".");
    extension = pathParts.pop() || "";
    path = pathParts.join(".");
  }
  return [path, `default:${url.hostname}/${extension}`];
}
function makeGetSlugHelper(store, slugs) {
  if (store.slugTemplates) {
    return (resource) => {
      const isManifest = resource.type === "Manifest";
      const isCollection = resource.type === "Collection";
      for (const slugTemplate of store.slugTemplates || []) {
        const compiled = slugs[slugTemplate];
        if (compiled && compiled.info.type === resource.type) {
          let [slug2] = compiled.compile(resource.id);
          if (slug2) {
            if (isManifest && slug2.startsWith("manifests/")) {
              console.log('Warning: Manifest slug should not start with "manifests/". Consider adding it to the prefix in the slug config');
            }
            if (isCollection && slug2.startsWith("collections/")) {
              console.log('Warning: Collection slug should not start with "collections/". Consider adding it to the prefix in the slug config');
            }
            if (isManifest && !slug2.startsWith("manifests/")) {
              slug2 = `manifests/${slug2}`;
            }
            if (isCollection && !slug2.startsWith("collections/")) {
              slug2 = `collections/${slug2}`;
            }
            return [slug2, slugTemplate];
          }
        }
      }
      return getDefaultSlug(resource.id);
    };
  }
  return (resource) => {
    return getDefaultSlug(resource.id);
  };
}

// src/commands/generate.ts
import { existsSync as existsSync10 } from "fs";
import { join as join15 } from "path";
import { cwd as cwd6 } from "process";

// node_modules/@iiif/parser/dist/chunk-J657UVVW.js
var e = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
var i = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
var t = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
var o = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
var r = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
var a = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
var _3 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
var I2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
var l2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
var p2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
var s = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
var n = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
var E2 = "http://iiif.io/api/image/1/level0.json";
var c = "http://iiif.io/api/image/1/profiles/level0.json";
var F2 = "http://iiif.io/api/image/1/level1.json";
var m = "http://iiif.io/api/image/1/profiles/level1.json";
var f = "http://iiif.io/api/image/1/level2.json";
var x2 = "http://iiif.io/api/image/1/profiles/level2.json";
var A2 = "http://iiif.io/api/image/2/level0.json";
var L3 = "http://iiif.io/api/image/2/profiles/level0.json";
var h2 = "http://iiif.io/api/image/2/level1.json";
var y2 = "http://iiif.io/api/image/2/profiles/level1.json";
var d = "http://iiif.io/api/image/2/level2.json";
var g = "http://iiif.io/api/image/2/profiles/level2.json";
var M2 = "level0";
var O3 = "level1";
var v2 = "level2";
var u2 = "http://iiif.io/api/image/2/level0";
var N2 = "http://iiif.io/api/image/2/level1";
var G2 = "http://iiif.io/api/image/2/level2";
var R2 = [G2, t, a, l2, n, f, x2, d, g, v2];
var C2 = [...R2, N2, i, r, I2, s, F2, m, h2, y2, O3];
var B3 = [u2, N2, G2, e, i, t, o, r, a, _3, I2, l2, p2, s, n, E2, c, F2, m, f, x2, A2, L3, h2, y2, d, g, M2, O3, v2];
var P2 = B3;

// node_modules/@iiif/parser/dist/chunk-NJNTZ6QT.js
function r2(e2) {
  for (let n2 in e2)
    (typeof e2[n2] > "u" || e2[n2] === null) && delete e2[n2];
  return e2;
}
function i2(e2) {
  return Array.isArray(e2) ? e2 : e2 ? [e2] : [];
}

// node_modules/@iiif/parser/dist/chunk-D22QKJZO.js
var d2 = Object.defineProperty;
var e2 = (b3, a2, c2) => (a2 in b3) ? d2(b3, a2, { enumerable: true, configurable: true, writable: true, value: c2 }) : b3[a2] = c2;
var f2 = (b3, a2, c2) => (e2(b3, typeof a2 != "symbol" ? a2 + "" : a2, c2), c2);

// node_modules/@iiif/parser/dist/chunk-3WVPINNO.js
var I3 = ["sc:Collection", "sc:Manifest", "sc:Canvas", "sc:AnnotationList", "oa:Annotation", "sc:Range", "sc:Layer", "sc:Sequence", "oa:Choice", "Service", "ContentResource"];
function S2(t2) {
  if (typeof t2 > "u" || t2 === null)
    throw new Error("Null or undefined is not a valid entity.");
  if (Array.isArray(t2))
    throw new Error("Array is not a valid entity");
  if (typeof t2 != "object")
    throw new Error(`${typeof t2} is not a valid entity`);
  if (typeof t2["@type"] == "string") {
    let e3 = I3.indexOf(t2["@type"]);
    if (e3 !== -1)
      return I3[e3];
  }
  if (t2.profile)
    return "Service";
  if (t2.format || t2["@type"])
    return "ContentResource";
  throw new Error("Resource type is not known");
}
var u3 = class t2 {
  constructor(e3, n2 = {}) {
    f2(this, "traversals");
    f2(this, "options");
    this.traversals = { collection: [], manifest: [], canvas: [], annotationList: [], sequence: [], annotation: [], contentResource: [], choice: [], range: [], service: [], layer: [], ...e3 }, this.options = { convertPropsToArray: true, mergeMemberProperties: true, allowUndefinedReturn: false, ...n2 };
  }
  static all(e3) {
    return new t2({ collection: [e3], manifest: [e3], canvas: [e3], annotationList: [e3], sequence: [e3], annotation: [e3], contentResource: [e3], choice: [e3], range: [e3], service: [e3], layer: [e3] });
  }
  traverseCollection(e3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCollectionItems(e3))), this.traversals.collection);
  }
  traverseCollectionItems(e3) {
    if (this.options.mergeMemberProperties) {
      let n2 = [...(e3.manifests || []).map((i3) => typeof i3 == "string" ? { "@id": i3, "@type": "sc:Manifest" } : i3), ...(e3.collections || []).map((i3) => typeof i3 == "string" ? { "@id": i3, "@type": "sc:Collection" } : i3), ...e3.members || []];
      delete e3.collections, delete e3.manifests, e3.members = n2;
    }
    return e3.manifests && (e3.manifests = e3.manifests.map((n2) => this.traverseManifest(typeof n2 == "string" ? { "@id": n2, "@type": "sc:Manifest" } : n2))), e3.collections && (e3.collections = e3.collections.map((n2) => this.traverseCollection(typeof n2 == "string" ? { "@id": n2, "@type": "sc:Collection" } : n2))), e3.members && (e3.members = e3.members.map((n2) => typeof n2 == "string" ? n2 : this.traverseUnknown(n2))), e3;
  }
  traverseManifest(e3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseManifestItems(e3))), this.traversals.manifest);
  }
  traverseManifestItems(e3) {
    return e3.sequences && (e3.sequences = e3.sequences.map((n2) => this.traverseSequence(n2))), e3.structures && (e3.structures = e3.structures.map((n2) => this.traverseRange(n2))), e3;
  }
  traverseSequence(e3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseSequenceItems(e3))), this.traversals.sequence);
  }
  traverseSequenceItems(e3) {
    return e3.canvases && (e3.canvases = e3.canvases.map((n2) => this.traverseCanvas(n2))), e3;
  }
  traverseCanvas(e3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCanvasItems(e3))), this.traversals.canvas);
  }
  traverseCanvasItems(e3) {
    return e3.images && (e3.images = e3.images.map((n2) => this.traverseAnnotation(n2))), e3.otherContent && (e3.otherContent = e3.otherContent.map((n2) => this.traverseAnnotationList(n2))), e3;
  }
  traverseRange(e3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseRangeItems(e3))), this.traversals.range);
  }
  traverseRangeItems(e3) {
    if (this.options.mergeMemberProperties) {
      let n2 = [...(e3.ranges || []).map((i3) => typeof i3 == "string" ? { "@id": i3, "@type": "sc:Range" } : i3), ...(e3.canvases || []).map((i3) => typeof i3 == "string" ? { "@id": i3, "@type": "sc:Canvas" } : i3), ...e3.members || []];
      delete e3.ranges, delete e3.canvases, e3.members = n2.length ? n2.map((i3) => this.traverseUnknown(i3)) : undefined;
    }
    return e3;
  }
  traverseAnnotationList(e3) {
    let n2 = typeof e3 == "string" ? { "@id": e3, "@type": "sc:AnnotationList" } : e3;
    return this.traverseType(this.traverseDescriptive(this.traverseAnnotationListItems(n2)), this.traversals.annotationList);
  }
  traverseAnnotationListItems(e3) {
    return e3.resources && (e3.resources = e3.resources.map((n2) => this.traverseAnnotation(n2))), e3;
  }
  traverseAnnotation(e3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseAnnotationItems(e3))), this.traversals.annotation);
  }
  traverseAnnotationItems(e3) {
    return e3.resource && (Array.isArray(e3.resource) ? e3.resource = e3.resource.map((n2) => this.traverseContentResource(n2)) : e3.resource = this.traverseContentResource(e3.resource)), e3.on, e3;
  }
  traverseLayer(e3) {
    return this.traverseType(this.traverseLinking(this.traverseLayerItems(e3)), this.traversals.layer);
  }
  traverseLayerItems(e3) {
    return e3.otherContent && (e3.otherContent = e3.otherContent.map((n2) => this.traverseAnnotationList(n2))), e3;
  }
  traverseChoice(e3) {
    return this.traverseType(this.traverseChoiceItems(e3), this.traversals.choice);
  }
  traverseChoiceItems(e3) {
    return e3.default && e3.default !== "rdf:nil" && (e3.default = this.traverseContentResource(e3.default)), e3.item && e3.item !== "rdf:nil" && (e3.item = e3.item.map((n2) => this.traverseContentResource(n2))), e3;
  }
  traverseService(e3) {
    return this.traverseType(this.traverseLinking(e3), this.traversals.service);
  }
  traverseContentResource(e3) {
    return e3["@type"] === "oa:Choice" ? this.traverseChoice(e3) : this.traverseType(this.traverseDescriptive(this.traverseLinking(e3)), this.traversals.contentResource);
  }
  traverseUnknown(e3) {
    if (!e3["@type"] || typeof e3 == "string")
      return e3;
    switch (S2(e3)) {
      case "sc:Collection":
        return this.traverseCollection(e3);
      case "sc:Manifest":
        return this.traverseManifest(e3);
      case "sc:Canvas":
        return this.traverseCanvas(e3);
      case "sc:Sequence":
        return this.traverseSequence(e3);
      case "sc:Range":
        return this.traverseRange(e3);
      case "oa:Annotation":
        return this.traverseAnnotation(e3);
      case "sc:AnnotationList":
        return this.traverseAnnotationList(e3);
      case "sc:Layer":
        return this.traverseLayer(e3);
      case "Service":
        return this.traverseService(e3);
      case "oa:Choice":
        return this.traverseChoice(e3);
      case "ContentResource":
        return this.traverseContentResource(e3);
    }
    return e3.profile ? this.traverseService(e3) : e3;
  }
  traverseImageResource(e3) {
    let n2 = Array.isArray(e3), i3 = Array.isArray(e3) ? e3 : [e3], a2 = [];
    for (let r3 of i3)
      typeof r3 == "string" ? a2.push(this.traverseContentResource({ "@id": r3, "@type": "dctypes:Image" })) : a2.push(this.traverseContentResource(r3));
    return !n2 && !this.options.convertPropsToArray ? a2[0] : a2;
  }
  traverseDescriptive(e3) {
    return e3.thumbnail && (e3.thumbnail = this.traverseImageResource(e3.thumbnail)), e3.logo && (e3.logo = this.traverseImageResource(e3.logo)), e3;
  }
  traverseOneOrMoreServices(e3) {
    let n2 = Array.isArray(e3), i3 = Array.isArray(e3) ? e3 : [e3], a2 = [];
    for (let r3 of i3)
      a2.push(this.traverseService(r3));
    return !n2 && !this.options.convertPropsToArray ? a2[0] : a2;
  }
  traverseLinking(e3) {
    return e3.related && (e3.related = this.traverseOneOrManyType(e3.related, this.traversals.contentResource)), e3.rendering && (e3.rendering = this.traverseOneOrManyType(e3.rendering, this.traversals.contentResource)), e3.service && (e3.service = this.traverseOneOrMoreServices(e3.service)), e3.seeAlso && (e3.seeAlso = this.traverseOneOrManyType(e3.seeAlso, this.traversals.contentResource)), e3.within && (typeof e3.within == "string" || (e3.within = this.traverseOneOrManyType(e3.within, this.traversals.contentResource))), e3.startCanvas && (typeof e3.startCanvas == "string" ? e3.startCanvas = this.traverseType({ "@id": e3.startCanvas, "@type": "sc:Canvas" }, this.traversals.canvas) : e3.startCanvas && this.traverseType(e3.startCanvas, this.traversals.canvas)), e3.contentLayer && (typeof e3.contentLayer == "string" ? e3.contentLayer = this.traverseLayer({ "@id": e3.contentLayer, "@type": "sc:Layer" }) : e3.contentLayer = this.traverseLayer(e3.contentLayer)), e3;
  }
  traverseOneOrManyType(e3, n2) {
    if (!Array.isArray(e3))
      if (this.options.convertPropsToArray)
        e3 = [e3];
      else
        return this.traverseType(e3, n2);
    return e3.map((i3) => this.traverseType(i3, n2));
  }
  traverseType(e3, n2) {
    return n2.reduce((i3, a2) => {
      let r3 = a2(i3);
      return typeof r3 > "u" && !this.options.allowUndefinedReturn ? i3 : r3;
    }, e3);
  }
};
var M3 = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
var O4 = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
var b3 = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
var w2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
var F3 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
var N3 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
var k4 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
var D3 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
var j2 = "http://iiif.io/api/image/1/level1.json";
var G3 = "http://iiif.io/api/image/1/profiles/level1.json";
var q2 = "http://iiif.io/api/image/1/level2.json";
var V3 = "http://iiif.io/api/image/1/profiles/level2.json";
var U2 = "http://iiif.io/api/image/2/level1.json";
var $2 = "http://iiif.io/api/image/2/profiles/level1.json";
var W3 = "http://iiif.io/api/image/2/level2.json";
var B4 = "http://iiif.io/api/image/2/profiles/level2.json";
var H2 = "level1";
var J = "level2";
var z2 = "http://iiif.io/api/image/2/level1";
var K3 = "http://iiif.io/api/image/2/level2";
var P3 = [z2, K3, M3, O4, b3, w2, F3, N3, k4, D3, j2, G3, q2, V3, U2, $2, W3, B4, H2, J];
var d3 = { attributionLabel: "Attribution", lang: "none", providerId: "http://example.org/provider", providerName: "Unknown" };
function Q2(t3) {
  if (typeof t3 == "string")
    return [t3];
  if (!t3)
    return [];
  let e3 = Array.isArray(t3) ? t3 : [t3], n2 = [];
  for (let i3 of e3) {
    if (typeof i3 == "string") {
      n2.push(i3);
      continue;
    }
    n2.push({ "@language": i3["@language"] || i3.language, "@value": i3["@value"] || i3.value });
  }
  return n2;
}
function h3(t3, e3 = "none") {
  if (!t3)
    return {};
  let n2 = Q2(t3), i3 = {};
  for (let a2 of n2) {
    if (typeof a2 == "string") {
      i3[e3] = i3[e3] ? i3[e3] : [], i3[e3].push(a2 || "");
      continue;
    }
    if (!a2["@language"]) {
      i3[e3] = i3[e3] ? i3[e3] : [], i3[e3].push(a2["@value"] || "");
      continue;
    }
    let r3 = a2["@language"];
    i3[r3] = i3[r3] ? i3[r3] : [], i3[r3].push(a2["@value"] || "");
  }
  return i3;
}
function L4(t3) {
  if (Array.isArray(t3))
    return L4(t3.find((e3) => typeof e3 == "string"));
  if (R2.indexOf(t3) !== -1)
    return "level2";
  if (P3.indexOf(t3) !== -1)
    return "level1";
  if (P2.indexOf(t3) !== -1)
    return "level0";
  if (typeof t3 == "string")
    return t3;
}
function X3(t3) {
  let e3 = Array.isArray(t3) ? t3 : [t3];
  for (let n2 of e3)
    switch (n2) {
      case "http://iiif.io/api/image/2/context.json":
      case "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2":
        return "ImageService2";
      case "http://iiif.io/api/image/1/context.json":
      case "http://library.stanford.edu/iiif/image-api/1.1/context.json":
        return "ImageService1";
      case "http://iiif.io/api/annex/openannotation/context.json":
        return "ImageApiSelector";
    }
}
function Y2(t3) {
  switch (t3) {
    case "http://iiif.io/api/image/2/level0.json":
    case "http://iiif.io/api/image/2/level1.json":
    case "http://iiif.io/api/image/2/level2.json":
      return "ImageService2";
    case "http://iiif.io/api/auth/1/kiosk":
    case "http://iiif.io/api/auth/1/login":
    case "http://iiif.io/api/auth/1/clickthrough":
    case "http://iiif.io/api/auth/1/external":
    case "http://iiif.io/api/auth/0/kiosk":
    case "http://iiif.io/api/auth/0/login":
    case "http://iiif.io/api/auth/0/clickthrough":
    case "http://iiif.io/api/auth/0/external":
      return "AuthCookieService1";
    case "http://iiif.io/api/auth/1/token":
    case "http://iiif.io/api/auth/0/token":
      return "AuthTokenService1";
    case "http://iiif.io/api/auth/1/logout":
    case "http://iiif.io/api/auth/0/logout":
      return "AuthLogoutService1";
    case "http://iiif.io/api/search/1/search":
    case "http://iiif.io/api/search/0/search":
      return "SearchService1";
    case "http://iiif.io/api/search/1/autocomplete":
    case "http://iiif.io/api/search/0/autocomplete":
      return "AutoCompleteService1";
  }
}
function _4(t3) {
  for (let e3 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
    if (t3.startsWith(`${e3}:`))
      return t3.slice(e3.length + 1);
  return t3;
}
var Z3 = ["Collection", "Manifest", "Annotation", "AnnotationPage", "Range", "Service"];
function g2(t3) {
  let e3 = t3["@id"] || t3.id, n2 = t3["@type"] || t3.type, i3 = t3.profile || undefined, a2 = t3["@context"] || undefined;
  if (i3) {
    let r3 = Y2(i3);
    if (r3)
      return r3;
  }
  if (a2) {
    let r3 = X3(a2);
    if (r3)
      return r3;
  }
  if (n2) {
    if (Array.isArray(n2)) {
      if (n2.indexOf("oa:CssStylesheet") !== -1)
        return "CssStylesheet";
      if (n2.indexOf("cnt:ContentAsText") !== -1)
        return "TextualBody";
      n2 = n2[0];
    }
    for (let r3 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
      if (n2.startsWith(`${r3}:`)) {
        n2 = n2.slice(r3.length + 1);
        break;
      }
    switch (n2) {
      case "Layer":
        return "AnnotationCollection";
      case "AnnotationList":
        return "AnnotationPage";
      case "cnt:ContentAsText":
        return "TextualBody";
    }
  }
  if (n2 && Z3.indexOf(n2) !== -1)
    return n2;
  if (t3.format) {
    if (t3.format.startsWith("image/"))
      return "Image";
    if (t3.format.startsWith("text/") || t3.format === "application/pdf")
      return "Text";
    if (t3.format.startsWith("application/"))
      return "Dataset";
  }
  return e3 && (e3.endsWith(".jpg") || e3.endsWith(".png") || e3.endsWith(".jpeg")) ? "Image" : n2 || "unknown";
}
var ee2 = /http(s)?:\/\/(creativecommons.org|rightsstatements.org)[^"'\\<\n]+/gm;
function te2(t3) {
  let e3 = t3.match(ee2);
  return e3 ? e3[0] : t3;
}
function ne3(t3, e3 = "Rights/License", n2 = "none") {
  let i3 = null, a2 = [], r3 = Array.isArray(t3) ? t3 : [t3];
  for (let o2 of r3) {
    let c2 = o2 ? te2(o2) : undefined;
    if (c2 && (c2.indexOf("creativecommons.org") !== -1 || c2.indexOf("rightsstatements.org") !== -1)) {
      c2.startsWith("https://") ? i3 = `http://${c2.slice(8)}` : i3 = c2;
      continue;
    }
    c2 && a2.push({ label: { [n2]: [e3] }, value: { [n2]: [c2] } });
  }
  return [i3, a2];
}
var ie3 = ["http://iiif.io/api/presentation/2/context.json", "http://iiif.io/api/image/2/context.json", "http://iiif.io/api/image/1/context.json", "http://library.stanford.edu/iiif/image-api/1.1/context.json", "http://iiif.io/api/search/1/context.json", "http://iiif.io/api/search/0/context.json", "http://iiif.io/api/auth/1/context.json", "http://iiif.io/api/auth/0/context.json", "http://iiif.io/api/annex/openannotation/context.json"];
function re3(t3) {
  if (t3) {
    let e3 = Array.isArray(t3) ? t3 : [t3], n2 = [];
    for (let i3 of e3)
      i3 === "http://iiif.io/api/presentation/2/context.json" && n2.push("http://iiif.io/api/presentation/3/context.json"), ie3.indexOf(i3) === -1 && n2.push(i3);
    if (e3.length)
      return n2.length === 1 ? n2[0] : n2;
  }
}
function ae3(t3) {
  return t3 ? t3.map((e3) => ({ label: h3(e3.label), value: h3(e3.value) })) : [];
}
var R3 = 0;
function x3(t3, e3) {
  let n2 = encodeURI(t3.id || t3["@id"] || "").trim();
  return n2 && e3 ? `${n2}/${e3}` : n2 || (R3++, `http://example.org/${t3["@type"]}${e3 ? `/${e3}` : ""}/${R3}`);
}
function p3(t3) {
  let e3 = [...t3.behavior || []];
  t3.viewingHint && e3.push(t3.viewingHint);
  let n2;
  return Array.isArray(t3.motivation) ? n2 = t3.motivation.map(_4) : t3.motivation && (n2 = _4(t3.motivation)), { "@context": t3["@context"] ? re3(t3["@context"]) : undefined, id: (t3["@id"] || x3(t3)).trim(), type: g2(t3), behavior: e3.length ? e3 : undefined, height: t3.height ? t3.height : undefined, width: t3.width ? t3.width : undefined, motivation: n2, viewingDirection: t3.viewingDirection, profile: t3.profile, format: t3.format ? t3.format : undefined, duration: undefined, timeMode: undefined };
}
function f3(t3) {
  let [e3, n2] = ne3(t3.license), i3 = [...t3.metadata ? ae3(t3.metadata) : [], ...n2];
  return { rights: e3, metadata: i3.length ? i3 : undefined, label: t3.label ? h3(t3.label) : undefined, requiredStatement: t3.attribution ? { label: h3(d3.attributionLabel), value: h3(t3.attribution) } : undefined, navDate: t3.navDate, summary: t3.description ? h3(t3.description) : undefined, thumbnail: se3(t3.thumbnail) };
}
function se3(t3) {
  return t3 && (Array.isArray(t3) ? t3 : [t3]).map((n2) => typeof n2 == "string" ? { id: n2, type: "Image" } : (n2.type === "unknown" && (n2.type = "Image"), n2));
}
function oe3(t3) {
  if (!t3.within)
    return;
  let e3 = Array.isArray(t3.within) ? t3.within : [t3.within], n2 = [];
  for (let i3 of e3)
    if (typeof i3 == "string") {
      if (i3)
        switch (t3["@type"]) {
          case "sc:Manifest":
            n2.push({ id: i3, type: "Collection" });
            break;
        }
    } else
      i3["@id"] && n2.push({ id: i3["@id"], type: g2(i3) });
  return n2.length ? n2 : undefined;
}
function l3(t3) {
  let e3 = t3.related ? Array.isArray(t3.related) ? t3.related : [t3.related] : [], n2 = t3.contentLayer;
  return { provider: t3.logo || e3.length ? [{ id: d3.providerId, type: "Agent", homepage: e3.length ? [e3[0]] : undefined, logo: t3.logo ? Array.isArray(t3.logo) ? t3.logo : [t3.logo] : undefined, label: h3(d3.providerName) }] : undefined, partOf: oe3(t3), rendering: t3.rendering, seeAlso: t3.seeAlso, start: t3.startCanvas, service: t3.service ? i2(t3.service) : undefined, supplementary: n2 ? [n2] : undefined };
}
function pe2(t3) {
  return { chars: t3.chars, format: t3.format ? t3.format : undefined, language: t3.language };
}
function fe2(t3) {
  return r2({ ...p3(t3), ...f3(t3), ...l3(t3), items: t3.members });
}
function ce(t3) {
  let e3 = [], n2 = [], i3;
  for (let r3 of t3.sequences || [])
    r3.canvases.length && e3.push(...r3.canvases), r3.behavior && n2.push(...r3.behavior), r3.startCanvas && (i3 = r3.startCanvas);
  let a2 = p3(t3);
  return n2.length && (a2.behavior ? a2.behavior.push(...n2) : a2.behavior = n2), r2({ ...a2, ...f3(t3), ...l3(t3), start: i3, items: e3, structures: t3.structures });
}
function le(t3) {
  return r2({ ...p3(t3), ...f3(t3), ...l3(t3), annotations: t3.otherContent && t3.otherContent.length ? t3.otherContent : undefined, items: t3.images && t3.images.length ? [{ id: x3(t3, "annotation-page"), type: "AnnotationPage", items: t3.images }] : undefined });
}
function he2(t3) {
  return r2({ ...p3(t3), ...f3(t3), ...l3(t3), items: t3.resources && t3.resources.length ? t3.resources : undefined });
}
function ue2(t3) {
  return !t3.canvases || t3.canvases.length === 0 ? { canvases: [], behavior: [] } : { canvases: t3.canvases, behavior: t3.viewingHint ? [t3.viewingHint] : [], startCanvas: t3.startCanvas };
}
function ve2(t3) {
  function e3(n2) {
    if (Array.isArray(n2)) {
      if (n2.length > 1)
        return { type: "List", items: n2.map(e3) };
      n2 = n2[0];
    }
    if (typeof n2 == "string")
      return encodeURI(n2).trim();
    if ("@type" in n2) {
      let i3;
      if (typeof n2.full == "string")
        i3 = n2.full;
      else if (n2.full["@type"] === "dctypes:Image")
        i3 = { id: n2.full["@id"], type: "Image" };
      else if (n2.full["@type"] === "sc:Canvas")
        i3 = { id: n2.full["@id"], type: "Canvas" };
      else
        throw new Error(`Unsupported source type on annotation: ${n2.full["@type"]}`);
      return { type: "SpecificResource", source: i3, selector: y3(n2.selector) };
    } else
      return encodeURI(n2["@id"]).trim();
  }
  return r2({ ...p3(t3), ...f3(t3), ...l3(t3), target: e3(t3.on), body: Array.isArray(t3.resource) ? t3.resource.map(T3) : T3(t3.resource) });
}
function T3(t3) {
  return t3.type === "Choice" ? t3 : E3(t3);
}
function E3(t3) {
  let e3 = t3;
  return r2({ ...p3(e3), ...f3(e3), ...l3(e3), ...pe2(e3) });
}
function de2(t3) {
  let e3 = [];
  return t3.default && t3.default !== "rdf:nil" && e3.push(t3.default), t3.item && t3.item !== "rdf:nil" && e3.push(...t3.item), r2({ ...p3(t3), ...f3(t3), items: e3 });
}
function ye2(t3) {
  return r2({ ...p3(t3), ...f3(t3), ...l3(t3), items: t3.members });
}
function ge2(t3) {
  let { "@id": e3, "@type": n2, "@context": i3, profile: a2, ...r3 } = t3, o2 = {};
  return e3 && (o2["@id"] = e3), o2["@type"] = g2(t3), o2["@type"] === "unknown" && (i3 && i3.length && (o2["@context"] = i3), o2["@type"] = "Service"), a2 && (o2.profile = L4(a2)), r2({ ...o2, ...r3 });
}
function me2(t3) {
  return r2({ ...p3(t3), ...f3(t3), ...l3(t3) });
}
var Ce2 = new u3({ collection: [fe2], manifest: [ce], canvas: [le], annotationList: [he2], sequence: [ue2], annotation: [ve2], contentResource: [E3], choice: [de2], range: [ye2], service: [ge2], layer: [me2] });
function Se2(t3) {
  return t3 && t3["@context"] && (t3["@context"] === "http://iiif.io/api/presentation/2/context.json" || t3["@context"].indexOf("http://iiif.io/api/presentation/2/context.json") !== -1 || t3["@context"] === "http://www.shared-canvas.org/ns/context.json") || t3["@context"] === "http://iiif.io/api/image/2/context.json" ? Ce2.traverseUnknown(t3) : t3;
}
function y3(t3) {
  if ((Array.isArray(t3["@type"]) && t3["@type"].includes("oa:SvgSelector") || t3["@type"] == "oa:SvgSelector") && (("chars" in t3) || ("value" in t3)))
    return { type: "SvgSelector", value: "chars" in t3 ? t3.chars : t3.value };
  if (t3["@type"] === "oa:FragmentSelector")
    return { type: "FragmentSelector", value: t3.value };
  if (t3["@type"] === "oa:Choice")
    return [y3(t3.default), ...(Array.isArray(t3.item) ? t3.item : [t3.item]).map(y3)];
  if (t3["@type"] == "iiif:ImageApiSelector")
    return { type: "ImageApiSelector", region: "region" in t3 ? t3.region : undefined, rotation: "rotation" in t3 ? t3.rotation : undefined };
  throw new Error(`Unsupported selector type: ${t3["@type"]}`);
}

// node_modules/@iiif/parser/dist/chunk-3Q4WO4OP.js
function v3(n2) {
  return typeof n2 == "string" ? false : !!n2 && n2.type === "SpecificResource";
}
function o2(...n2) {
  return (e3) => n2.reduce((t3, a2) => a2(t3), e3);
}
var p4 = ["Collection", "Manifest", "Canvas", "AnnotationPage", "AnnotationCollection", "Annotation", "ContentResource", "Range", "Service", "Selector", "Agent"];
function y4(n2, e3) {
  if (typeof n2 > "u" || n2 === null)
    throw new Error("Null or undefined is not a valid entity.");
  if (Array.isArray(n2))
    throw new Error("Array is not a valid entity");
  if (typeof n2 != "object") {
    if (e3)
      return e3;
    throw new Error(`${typeof n2} is not a valid entity`);
  }
  if (typeof n2.type == "string") {
    let t3 = p4.indexOf(n2.type);
    if (t3 !== -1)
      return p4[t3];
  }
  if (n2.profile)
    return "Service";
  throw new Error("Resource type is not known");
}
var l4 = class n2 {
  constructor(e3, t3 = {}) {
    f2(this, "traversals");
    f2(this, "options");
    f2(this, "_traverseManifest", o2(this.traverseManifestItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this), this.traverseManifestStructures.bind(this), this.traverseInlineAnnotationPages.bind(this)));
    f2(this, "_traverseCanvas", o2(this.traverseCanvasItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this), this.traverseInlineAnnotationPages.bind(this)));
    f2(this, "_traverseAnnotationPage", o2(this.traverseAnnotationPageItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this)));
    f2(this, "_traverseRange", o2(this.traverseRangeRanges.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this)));
    this.traversals = { collection: [], manifest: [], canvas: [], annotationCollection: [], annotationPage: [], annotation: [], contentResource: [], choice: [], range: [], service: [], agent: [], specificResource: [], geoJson: [], ...e3 }, this.options = { allowUndefinedReturn: false, ...t3 };
  }
  static all(e3) {
    return new n2({ collection: [e3], manifest: [e3], canvas: [e3], annotationCollection: [e3], annotationPage: [e3], annotation: [e3], contentResource: [e3], choice: [e3], range: [e3], service: [e3], geoJson: [e3], specificResource: [e3], agent: [e3] });
  }
  traverseDescriptive(e3) {
    return e3.thumbnail && (e3.thumbnail = i2(e3.thumbnail).map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.provider && (e3.provider = e3.provider.map((t3) => this.traverseAgent(t3, e3))), e3;
  }
  traverseLinking(e3) {
    return e3.seeAlso && (e3.seeAlso = e3.seeAlso.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.service && (e3.service = i2(e3.service).map((t3) => this.traverseService(t3))), e3.services && (e3.services = i2(e3.services).map((t3) => this.traverseService(t3, e3))), e3.logo && (e3.logo = e3.logo.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.homepage && (e3.homepage = e3.homepage.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.partOf && (e3.partOf = e3.partOf.map((t3) => typeof t3 == "string" || !t3.type ? this.traverseType(t3, { parent: e3 }, this.traversals.contentResource) : t3.type === "Canvas" ? this.traverseType(t3, { parent: e3 }, this.traversals.canvas) : t3.type === "AnnotationCollection" ? this.traverseType(t3, { parent: e3 }, this.traversals.annotationCollection) : t3.type === "Collection" ? this.traverseType(t3, { parent: e3 }, this.traversals.collection) : this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.start && (v3(e3.start) ? e3.start = this.traverseSpecificResource(e3.start, "Canvas", e3) : e3.start = this.traverseType(e3.start, { parent: e3 }, this.traversals.canvas)), e3.rendering && (e3.rendering = e3.rendering.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.supplementary && (e3.supplementary = e3.supplementary.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3;
  }
  traverseCollectionItems(e3) {
    return e3.items && e3.items.map((t3) => t3.type === "Collection" ? this.traverseCollection(t3) : this.traverseManifest(t3)), e3;
  }
  traverseCollection(e3, t3) {
    return this.traverseType(this.traverseDescriptive(this.traverseInlineAnnotationPages(this.traverseLinking(this.traverseLinkedCanvases(this.traverseCollectionItems(e3))))), { parent: t3 }, this.traversals.collection);
  }
  traverseGeoJson(e3, t3) {
    return this.traverseType(e3, { parent: t3 }, this.traversals.geoJson);
  }
  traverseNavPlace(e3) {
    return e3.navPlace && (e3.navPlace = this.traverseGeoJson(e3.navPlace, e3)), e3;
  }
  traverseManifestItems(e3) {
    return e3.items && (e3.items = e3.items.map((t3) => this.traverseCanvas(t3))), e3;
  }
  traverseManifestStructures(e3) {
    return e3.structures && (e3.structures = e3.structures.map((t3) => this.traverseRange(t3))), e3;
  }
  traverseManifest(e3, t3) {
    return this.traverseType(this._traverseManifest(e3), { parent: t3 }, this.traversals.manifest);
  }
  traverseCanvasItems(e3) {
    return e3.items = (e3.items || []).map((t3) => this.traverseAnnotationPage(t3, e3)), e3;
  }
  traverseInlineAnnotationPages(e3) {
    return typeof e3 == "string" || !e3 || e3.annotations && (e3.annotations = e3.annotations.map((t3) => this.traverseAnnotationPage(t3, e3))), e3;
  }
  traverseCanvas(e3, t3) {
    return this.traverseType(this._traverseCanvas(e3), { parent: t3 }, this.traversals.canvas);
  }
  traverseAnnotationPageItems(e3) {
    return e3.items && (e3.items = e3.items.map((t3) => this.traverseAnnotation(t3, e3))), e3;
  }
  traverseAnnotationPage(e3, t3) {
    return this.traverseType(this._traverseAnnotationPage(e3), { parent: t3 }, this.traversals.annotationPage);
  }
  traverseAnnotationBody(e3) {
    return Array.isArray(e3.body) ? e3.body = e3.body.map((t3) => this.traverseContentResource(t3, e3)) : e3.body && (e3.body = this.traverseContentResource(e3.body, e3)), e3;
  }
  traverseLinkedCanvases(e3) {
    return e3.placeholderCanvas && (e3.placeholderCanvas = this.traverseCanvas(e3.placeholderCanvas)), e3.accompanyingCanvas && (e3.accompanyingCanvas = this.traverseCanvas(e3.accompanyingCanvas)), e3;
  }
  traverseAnnotation(e3, t3) {
    return this.traverseType(this.traverseLinking(this.traverseAnnotationBody(this.traverseDescriptive(e3))), { parent: t3 }, this.traversals.annotation);
  }
  traverseContentResourceLinking(e3) {
    return typeof e3 == "string" || !e3 || e3 && e3.service && (e3.service = i2(e3.service || []).map((t3) => this.traverseService(t3, e3))), e3;
  }
  traverseContentResource(e3, t3) {
    return e3.type === "Choice" && (e3.items = e3.items.map((a2) => this.traverseContentResource(a2, e3))), v3(e3) ? this.traverseSpecificResource(e3, "ContentResource") : this.traverseType(this.traverseInlineAnnotationPages(this.traverseContentResourceLinking(e3)), { parent: t3 }, this.traversals.contentResource);
  }
  traverseSpecificResource(e3, t3, a2) {
    let s2 = e3.source;
    return typeof e3.source == "string" && (s2 = { id: e3.source, type: t3 || "unknown" }), this.traverseType({ ...e3, source: t3 === "Canvas" || s2.type === "Canvas" ? this.traverseType(s2, { parent: a2 }, this.traversals.canvas) : t3 === "ContentResource" ? this.traverseContentResource(s2, { parent: a2 }) : this.traverseUnknown(s2, { parent: a2, typeHint: t3 }) }, { parent: a2 }, this.traversals.specificResource);
  }
  traverseRangeRanges(e3) {
    return e3.items && (e3.items = e3.items.map((t3) => typeof t3 == "string" ? this.traverseCanvas({ id: t3, type: "Canvas" }, e3) : v3(t3) ? this.traverseSpecificResource(t3, "Canvas", e3) : t3.type === "Manifest" ? this.traverseManifest(t3, e3) : this.traverseRange(t3, e3))), e3;
  }
  traverseRange(e3, t3) {
    return this.traverseType(this._traverseRange(e3), { parent: t3 }, this.traversals.range);
  }
  traverseAgent(e3, t3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(e3)), { parent: t3 }, this.traversals.agent);
  }
  traverseType(e3, t3, a2) {
    return a2.reduce((s2, c2) => {
      let h4 = c2(s2, t3);
      return typeof h4 > "u" && !this.options.allowUndefinedReturn ? s2 : h4;
    }, e3);
  }
  traverseService(e3, t3) {
    let a2 = Object.assign({}, e3);
    return a2 && a2.service && (a2.service = i2(a2.service).map((s2) => this.traverseService(s2))), this.traverseType(a2, { parent: t3 }, this.traversals.service);
  }
  traverseUnknown(e3, { parent: t3, typeHint: a2 } = {}) {
    let s2 = y4(e3, a2);
    switch (s2) {
      case "Collection":
        return this.traverseCollection(e3, t3);
      case "Manifest":
        return this.traverseManifest(e3, t3);
      case "Canvas":
        return this.traverseCanvas(e3, t3);
      case "AnnotationPage":
        return this.traverseAnnotationPage(e3, t3);
      case "Annotation":
        return this.traverseAnnotation(e3, t3);
      case "ContentResource":
        return this.traverseContentResource(e3, t3);
      case "Range":
        return this.traverseRange(e3, t3);
      case "Service":
        return this.traverseService(e3, t3);
      case "Agent":
        return this.traverseAgent(e3, t3);
      default:
        throw new Error(`Unknown or unsupported resource type of ${s2}`);
    }
  }
};

// node_modules/@iiif/parser/dist/chunk-I7GUVEYK.js
function L5(e3, n3) {
  let i3 = n3 || "unknown";
  if (!e3)
    return;
  if (typeof e3 == "string")
    return { id: e3, type: i3 };
  if (v3(e3))
    return L5(e3.source, n3);
  let r3 = i3 && i3 !== "unknown" ? i3 : e3.type || e3["@type"], t3 = e3.id || e3["@id"];
  if (r3 && r3.indexOf(":") !== -1 && (r3 = r3.split(":").pop()), t3 && r3)
    return { id: t3, type: r3 };
}
var w3 = {};
var f4 = "iiif-parser:hasPart";
var v4 = "iiif-parser:partOf";
var T4 = "iiif-parser:isExternal";
var m2 = "__$UNSET$__";
var I4 = "__$UNWRAP$__";
var o3 = [];
Object.freeze(o3);
Object.freeze(w3);
function te3(e3) {
  if (e3 === w3 || Object.keys(e3).length === 0)
    return true;
  for (let n3 in e3)
    return false;
  return true;
}
function oe4(e3, n3) {
  if (n3 && n3["@explicit"]) {
    let i3 = {}, r3 = Object.keys(n3);
    for (let t3 of r3)
      t3 === v4 || t3 === "@explicit" || (te3(n3[t3]) ? i3[t3] = e3[t3] : i3[t3] = n3[t3]);
    return i3;
  }
  return e3;
}
function F4(e3, n3, i3) {
  let r3 = L5(n3);
  if (!r3)
    return [undefined, undefined];
  let t3 = e3.requests[r3.id], a2 = r3.type || e3.mapping[r3.id];
  if (!a2 || t3 && t3.resourceUri && (!e3.entities[a2] || !e3.entities[a2][t3.resourceUri]))
    return [undefined, undefined];
  let s2 = e3.entities[a2][t3 ? t3.resourceUri : r3.id];
  if (r3.type && !s2)
    return F4(e3, { id: r3.id }, i3);
  if (s2 && s2[f4]) {
    let c2 = s2[f4].find((l5) => i3 ? l5[v4] === i3.id : l5[v4] === s2.id);
    return [oe4(s2, c2), s2];
  }
  return [s2, s2];
}
var K4 = { id: "https://iiif-parser/annotation-page", type: "AnnotationPage", behavior: o3, label: null, thumbnail: o3, summary: null, requiredStatement: null, metadata: o3, rights: null, provider: o3, items: o3, seeAlso: o3, homepage: o3, rendering: o3, service: o3 };
var G4 = { id: "https://iiif-parser/empty-canvas", type: "Canvas", label: null, behavior: o3, thumbnail: o3, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: o3, rights: null, navDate: null, provider: o3, items: o3, annotations: o3, seeAlso: o3, homepage: o3, partOf: o3, rendering: o3, service: o3, duration: 0, height: 0, width: 0 };
var X4 = { id: "https://iiif-parser/empty-collection", type: "Collection", label: null, viewingDirection: "left-to-right", behavior: o3, thumbnail: o3, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: o3, rights: null, navDate: null, provider: o3, items: o3, annotations: o3, seeAlso: o3, homepage: o3, partOf: o3, rendering: o3, service: o3, services: o3 };
var Y3 = { id: "https://iiif-parser/empty-manifest", type: "Manifest", annotations: o3, behavior: o3, homepage: o3, items: o3, label: null, metadata: o3, navDate: null, provider: o3, partOf: o3, accompanyingCanvas: null, placeholderCanvas: null, rendering: o3, requiredStatement: null, rights: null, seeAlso: o3, service: o3, services: o3, start: null, structures: o3, summary: null, thumbnail: o3, viewingDirection: "left-to-right" };
var J2 = { id: "https://iiif-parser/empty-canvas", type: "Range", label: null, behavior: o3, thumbnail: o3, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: o3, rights: null, navDate: null, provider: o3, items: o3, annotations: o3, seeAlso: o3, homepage: o3, partOf: o3, rendering: o3, service: o3, start: null, supplementary: null, viewingDirection: "left-to-right" };
var B5 = { id: "https://iiif-parser/empty-agent", type: "Agent", label: {}, logo: o3, seeAlso: o3, homepage: o3 };
var Q3 = { id: "https://iiif-parser/empty-service", type: "UnknownService" };
function _5(e3, n3 = {}) {
  if (Array.isArray(e3))
    return _5(e3[0]);
  if (typeof e3 == "string") {
    let [i3, r3] = e3.split("#");
    return r3 ? { type: "SpecificResource", source: { id: i3, type: n3.typeHint || "Unknown" }, selector: { type: "FragmentSelector", value: r3 } } : { type: "SpecificResource", source: { id: i3, type: n3.typeMap && n3.typeMap[i3] || n3.typeHint || "Unknown" } };
  }
  if (e3.type === "Choice" || e3.type === "List" || e3.type === "Composite" || e3.type === "Independents")
    return _5(e3.items[0]);
  if (e3.type === "SpecificResource")
    return e3.source.type === "Canvas" && e3.source.partOf && typeof e3.source.partOf == "string" && (e3.source.partOf = [{ id: e3.source.partOf, type: "Manifest" }]), e3.selector ? { type: "SpecificResource", source: e3.source, selector: e3.selector } : { type: "SpecificResource", source: e3.source };
  if (e3.id) {
    e3.type === "Canvas" && e3.partOf && typeof e3.partOf == "string" && (e3.partOf = [{ id: e3.partOf, type: "Manifest" }]);
    let [i3, r3] = e3.id.split("#");
    return r3 ? { type: "SpecificResource", source: { ...e3, id: i3 }, selector: { type: "FragmentSelector", value: r3 } } : { type: "SpecificResource", source: { ...e3, id: i3 } };
  }
  return { type: "SpecificResource", source: e3 };
}
function ae4() {
  return { Collection: {}, Manifest: {}, Canvas: {}, AnnotationPage: {}, AnnotationCollection: {}, Annotation: {}, ContentResource: {}, Range: {}, Service: {}, Selector: {}, Agent: {} };
}
function Z4(e3, n3) {
  if (typeof e3 == "string")
    return { id: e3, type: n3 };
  if (!e3.id)
    throw new Error(`Invalid resource does not have an ID (${JSON.stringify(e3)}, ${n3})`);
  return e3;
}
function se4(e3, n3) {
  return (i3, r3) => {
    let t3 = e3[i3] ? e3[i3] : {};
    return (a2, s2) => {
      let c2 = Z4(a2, r3 || i3);
      return c2 && c2.id && i3 ? (t3[c2.id] = t3[c2.id] ? W4(t3[c2.id], c2, { parent: s2.parent, isTopLevel: n3.id === c2.id }) : W4({ id: c2.id, type: c2.type }, c2, { parent: s2.parent, isTopLevel: n3.id === c2.id }), { id: c2.id, type: i3 === "ContentResource" ? i3 : c2.type }) : c2;
    };
  };
}
function $3(e3, n3, i3) {
  if (!n3)
    return e3;
  if (Array.isArray(e3)) {
    if (!Array.isArray(n3))
      throw new Error("Cannot merge array with non-array");
    let r3 = [...e3];
    for (let t3 of n3)
      if (t3["@id"] && !t3.id && (t3.id = t3["@id"]), t3["@type"] && !t3.type && (t3.type = t3["@type"]), t3 != null)
        if (Array.isArray(t3))
          r3.push(t3);
        else if (typeof t3 == "object" && t3.id && t3.type) {
          let a2 = r3.findIndex((s2) => s2.id === t3.id && s2.type === t3.type);
          a2 >= 0 && (r3[a2] = $3(r3[a2], t3));
        } else
          e3.indexOf(t3) === -1 && r3.push(t3);
    return r3;
  } else if (typeof e3 == "object") {
    if (Array.isArray(n3) || typeof n3 != "object")
      throw new Error("Cannot merge object with non-object");
    let r3 = { ...e3 }, t3 = [], a2 = [], s2 = Object.keys(e3).filter((l5) => l5 !== f4 && l5 !== "id" && l5 !== "type"), c2 = {}, A3 = {};
    for (let [l5, u4] of Object.entries(n3)) {
      if (l5 === f4 || l5 === "id" || l5 === "type")
        continue;
      let y5 = r3[l5];
      y5 === u4 ? a2.push(l5) : y5 === o3 || !y5 ? (t3.push(l5), r3[l5] = u4) : (y5 && u4 && (c2[l5] = y5, A3[l5] = u4), r3[l5] = $3(y5, u4), r3[l5] === c2[l5] && (a2.push(l5), delete c2[l5]));
    }
    if (i3 && (i3.parent && i3.parent.id || i3.isTopLevel)) {
      let l5 = [], u4 = {};
      if (i3.parent ? u4[v4] = i3.parent.id : i3.isTopLevel && (u4[v4] = e3.id), r3[f4] && r3[f4].length) {
        let y5 = !(r3[f4] || []).find((g3) => g3["@explicit"]), C3 = t3.length > 0 || a2.length !== s2.length;
        if (y5 && C3)
          for (let g3 of r3[f4]) {
            let p5 = { ...g3 }, j3 = Object.keys(c2);
            if (p5) {
              p5["@explicit"] = true;
              for (let M4 of s2)
                M4 !== f4 && (p5[M4] = w3);
              for (let M4 of j3)
                p5[M4] = c2[M4];
            }
            l5.push(p5);
          }
        else
          l5.push(...r3[f4]);
        if (C3) {
          let g3 = Object.keys(A3);
          u4["@explicit"] = true;
          for (let p5 of t3)
            u4[p5] = w3;
          for (let p5 of a2)
            u4[p5] = w3;
          for (let p5 of g3)
            u4[p5] = A3[p5];
        }
      }
      u4.id = r3.id, u4.type = r3.type, l5.push(u4), r3[f4] = l5;
    }
    return r3;
  } else if (e3)
    return e3;
  return n3;
}
function W4(e3, n3, i3) {
  if (typeof e3 == "string")
    return e3;
  if (n3.id !== e3.id || n3.type !== e3.type) {
    if (n3.type === "ImageService3")
      return n3;
    if (e3.type === "ImageService3")
      return e3;
    throw new Error(`Can only merge entities with identical identifiers and type! ${n3.type}(${n3.id}) => ${e3.type}(${e3.id})`);
  }
  return $3({ ...e3 }, n3, i3);
}
function le2(e3) {
  return (n3, i3) => (r3) => {
    let { id: t3, type: a2 } = Z4(r3, i3 || n3);
    if (typeof t3 > "u")
      throw new Error("Found invalid entity without an ID.");
    return n3 === "ContentResource" || n3 === "Service" ? e3[t3] = n3 : e3[t3] = a2, r3;
  };
}
function ce2(e3) {
  let n3 = Object.assign({}, e3);
  if (n3["@id"] && (n3.id = n3["@id"]), n3["@type"] && (n3.type = n3["@type"]), n3.service) {
    let i3 = [];
    n3.service = Array.isArray(n3.service) ? n3.service : [n3.service];
    for (let r3 of n3.service)
      i3.push({ id: r3["@id"] || r3.id, type: r3["@type"] || r3.type });
    n3.service = i3;
  }
  return Object.assign({}, Q3, n3);
}
function de3(e3) {
  return (n3) => {
    e3.Service = e3.Service ? e3.Service : {};
    let i3 = n3.id || n3["@id"], r3 = ce2(n3);
    return r3 && r3.id && (e3.Service[r3.id] ? e3.Service[i3] = W4(e3.Service[i3], r3) : e3.Service[i3] = r3), n3;
  };
}
function ue3(e3) {
  let n3 = JSON.stringify(e3), i3 = 5381, r3 = n3.length;
  for (;r3; )
    i3 = i3 * 33 ^ n3.charCodeAt(--r3);
  let a2 = (i3 >>> 0).toString(16);
  return a2.length % 2 ? "0" + a2 : a2;
}
function U3(e3) {
  return (n3) => typeof n3 == "string" ? { id: n3, type: e3 } : n3.id ? n3.type ? n3 : { type: e3, ...n3 } : { id: `vault://${ue3(n3)}`, type: e3, ...n3 };
}
function E4(e3) {
  return (n3) => ({ ...e3, ...n3 });
}
function D4(e3) {
  return Array.isArray(e3) ? e3 : [e3];
}
function fe3(e3) {
  return e3.body && (e3.body = D4(e3.body)), e3.seeAlso && (e3.seeAlso = D4(e3.seeAlso)), e3.audience && (e3.audience = D4(e3.audience)), e3.accessibility && (e3.accessibility = D4(e3.accessibility)), e3.motivation && (e3.motivation = D4(e3.motivation)), e3;
}
function ee3(e3, { typeHint: n3, partOfTypeHint: i3 } = {}) {
  if (typeof e3 == "string" && (e3 = { id: e3, type: n3 || "unknown" }), v3(e3))
    return typeof e3.source == "string" && (e3.source = { id: e3.source, type: n3 || "unknown" }), e3.source.type === "Canvas" && e3.source.partOf && typeof e3.source.partOf == "string" && (e3.source.partOf = [{ id: e3.source.partOf, type: i3 || "Manifest" }]), e3;
  let r3;
  if ((e3.id || "").indexOf("#") !== -1) {
    let [t3, a2] = (e3.id || "").split("#");
    e3.id = t3, a2 && (r3 = { type: "FragmentSelector", value: a2 });
  }
  return { type: "SpecificResource", source: e3, selector: r3 };
}
function pe3(e3) {
  let n3 = Object.assign({}, e3);
  return e3 && e3.items && (n3.items = e3.items.map((i3) => typeof i3 == "string" || i3.type === "Canvas" ? ee3(i3) : i3)), n3;
}
function ye3(e3) {
  let n3 = Object.assign({}, e3);
  return n3.start ? (n3.start = ee3(n3.start, { typeHint: "Canvas" }), n3) : e3;
}
function me3(e3) {
  let n3 = Object.assign({}, e3);
  return n3.target ? (n3.target = _5(n3.target, { typeHint: "Canvas" }), n3) : e3;
}
function ge3(e3) {
  return e3;
}
function q3(e3) {
  return typeof e3.items > "u" && (e3[T4] = true), e3;
}
function Fe2(e3) {
  let n3 = Se2(e3), i3 = ae4(), r3 = {}, t3 = se4(i3, n3), a2 = le2(r3), c2 = new l4({ collection: [q3, E4(X4), a2("Collection"), t3("Collection")], manifest: [q3, E4(Y3), ye3, a2("Manifest"), t3("Manifest")], canvas: [E4(G4), a2("Canvas"), t3("Canvas")], annotationPage: [q3, U3("AnnotationPage"), E4(K4), a2("AnnotationPage"), t3("AnnotationPage")], annotation: [U3("Annotation"), fe3, me3, a2("Annotation"), t3("Annotation")], contentResource: [U3("ContentResource"), a2("ContentResource"), t3("ContentResource")], range: [E4(J2), pe3, a2("Range", "Canvas"), t3("Range", "Canvas")], agent: [E4(B5), a2("Agent"), t3("Agent")], specificResource: [ge3], service: [de3(i3)] }).traverseUnknown(n3);
  return { entities: i3, resource: c2, mapping: r3 };
}
function ve3(e3) {
  let n3 = {};
  for (let [i3, r3] of e3) {
    if (i3 === I4 && r3 !== m2)
      return r3;
    r3 !== m2 && typeof r3 < "u" && r3 !== null && (n3[i3] = r3);
  }
  return n3;
}
function $e(e3, n3, i3) {
  if (!n3.type || !n3.id)
    throw new Error("Unknown entity");
  if (!i3[n3.type])
    throw new Error(`Serializer not found for ${n3.type}`);
  function r3(t3, a2, s2 = 0) {
    let c2 = i3[t3.type];
    if (!c2)
      return m2;
    if (s2 > 20)
      throw new Error("Circular reference: " + t3.id + " " + t3.type);
    let [A3, l5] = F4(e3, t3.type ? t3 : t3.id, a2) || (t3.id && t3.type ? t3 : null);
    if (!A3)
      return m2;
    let u4 = c2(A3, e3, { parent: a2, isTopLevel: n3.id === t3.id, fullResource: l5 }), y5 = u4.next();
    for (;!y5.done; ) {
      let C3 = y5.value, g3 = m2;
      if (C3)
        if (Array.isArray(C3)) {
          let p5 = [];
          for (let j3 of C3)
            p5.push(r3(j3, t3, s2 + 1));
          g3 = p5;
        } else
          g3 = r3(C3, t3, s2 + 1);
      y5 = u4.next(g3);
    }
    return y5.value === m2 ? m2 : ve3(y5.value);
  }
  return r3(n3);
}
function P4(e3, { allowSourceString: n3 = true, allowString: i3 = false, allowedStringType: r3 } = {}) {
  let t3 = (a2) => {
    if (n3 && a2 && a2.source && typeof a2.source != "string") {
      let s2 = Object.keys(a2.source);
      if (a2.source.id && a2.source.type && s2.length === 2)
        return { ...a2, source: a2.source.id };
    }
    return a2;
  };
  if (e3) {
    if (e3.source && e3.source.partOf)
      return t3(e3);
    let a2 = Object.keys(e3);
    if (a2.length === 2 && e3.type && e3.source || a2.length === 3 && e3.type && e3.source && a2.indexOf("selector") !== -1 && !e3.selector)
      return i3 && (!r3 || r3 === e3.source.type) ? e3.source.id : e3.source.type === "ContentResource" ? { type: "SpecificResource", source: e3.source.id } : e3.source;
    if (e3.selector && !Array.isArray(e3.selector) && typeof e3.selector != "string" && e3.selector.type === "FragmentSelector") {
      let s2 = `${e3.source.id}#${e3.selector.value}`;
      return i3 ? s2 : { id: s2, type: e3.source.type };
    }
  }
  return t3(e3);
}
function O5(e3) {
  if (!e3)
    return;
  let n3 = Object.keys(e3);
  if (n3.length !== 0) {
    if (n3.length === 1) {
      let i3 = n3[0];
      if (!i3)
        return "";
      let r3 = (e3[i3] || []).join("");
      return i3 === "@none" || i3 === "none" || i3 === "en" ? r3 : { "@language": i3, "@value": r3 };
    }
    return n3.map((i3) => ({ "@language": i3, "@value": (e3[i3] || []).join("") }));
  }
}
function ne4(e3) {
  return Array.isArray(e3) ? e3.map((n3) => ne4(n3)) : typeof e3 == "string" ? e3 : e3.type && e3.type === "Canvas" ? e3.id : e3;
}
function h4(e3, n3 = false) {
  if (e3)
    return e3.length > 1 && !n3 ? e3 : e3[0] || undefined;
}
function he3(e3) {
  if (e3) {
    if (typeof e3 == "string")
      return { "@id": e3 };
    if ("@id" in e3) {
      let n3 = { ...e3 };
      return delete n3["@type"], n3;
    }
    return { "@context": "http://iiif.io/api/image/2/context.json", "@id": e3.id, profile: `http://iiif.io/api/image/2/profiles/${e3.profile}.json` };
  }
}
function N4(e3, n3) {
  return [["@id", e3.id], ["@type", n3], ["format", e3.format], ["height", e3.height], ["width", e3.width], ["viewingDirection", e3.viewingDirection !== "left-to-right" ? e3.viewingDirection : undefined], ["license", e3.license ? e3.license : undefined]];
}
function* b4(e3) {
  let n3 = e3.provider ? yield e3.provider[0] : undefined;
  return [["label", O5(e3.label)], ["metadata", e3.metadata && e3.metadata.length ? e3.metadata.map((i3) => ({ label: O5(i3.label) || "", value: O5(i3.value) || "" })) : undefined], ["description", O5(e3.summary)], ["thumbnail", h4(yield e3.thumbnail)], ["navDate", e3.navDate], ["logo", n3 ? h4(n3.logo) : undefined], ["homepage", n3 ? n3.homepage : undefined], ["attribution", e3.requiredStatement ? O5(e3.requiredStatement.value) : undefined]];
}
function* k5(e3) {
  let n3 = e3.start && e3.start.type && e3.start.type === "SpecificResource" ? P4(e3.start) : e3.start;
  return [["seeAlso", h4(yield e3.seeAlso)], ["service", h4((e3.service || []).map(he3))], ["rendering", h4(yield e3.rendering)], ["startCanvas", n3 ? n3.id : undefined]];
}
function Se3(e3) {
  return e3.type === "SpecificResource";
}
function Re2(e3) {
  return e3 && e3.type === "FragmentSelector";
}
function Ae2(e3) {
  if (e3 && Se3(e3)) {
    let n3 = e3.id, i3 = e3.selector ? Array.isArray(e3.selector) ? e3.selector[0] : e3.selector : undefined;
    return Re2(i3) && (n3 += "#" + i3.value), n3;
  }
  return e3?.id;
}
var Ke2 = { Manifest: function* (e3, n3, { isTopLevel: i3 }) {
  return [...i3 ? [["@context", "http://iiif.io/api/presentation/2/context.json"]] : [], ...N4(e3, "sc:Manifest"), ...yield* b4(e3), ...yield* k5(e3), ["sequences", [{ "@id": `${e3.id}/sequence0`, "@type": "sc:Sequence", canvases: yield e3.items }]], ["structures", yield e3.structures]];
}, Canvas: function* (e3) {
  let i3 = (yield e3.items)[0];
  return [...N4(e3, "sc:Canvas"), ...yield* b4(e3), ...yield* k5(e3), ["images", i3 ? [i3.resources] : undefined], ["annotations", e3.annotations && e3.annotations.length ? h4(yield e3.annotations) : undefined]];
}, AnnotationPage: function* (e3) {
  return [...N4(e3, "sc:AnnotationList"), ...yield* b4(e3), ["resources", e3.items && e3.items.length ? h4(yield e3.items) : undefined]];
}, Annotation: function* (e3) {
  return [["@id", e3.id], ["@type", "oa:Annotation"], ["motivation", "sc:painting"], ["on", ne4(e3.target)], ["resource", h4(yield e3.body, true)]];
}, ContentResource: function* (e3) {
  switch (e3.type) {
    case "Image":
      return [...N4(e3, "dctypes:Image"), ...yield* b4(e3), ...yield* k5(e3)];
    case "Text":
    case "Dataset":
    default:
      return [...N4(e3, undefined), ...yield* b4(e3)];
  }
}, AnnotationCollection: function* (e3) {
  return [["@id", e3.id], ["@type", "sc:Layer"], ["label", O5(e3.label)]];
}, Collection: function* (e3) {
  return [...N4(e3, "sc:Collection"), ...yield* b4(e3), ...yield* k5(e3), ["members", yield* e3.items]];
}, Range: function* (e3) {
  let n3 = [], i3 = [];
  if (e3.items)
    for (let r3 of e3.items) {
      let t3 = r3.type === "SpecificResource" ? r3.source : r3;
      if (t3) {
        let a2 = yield t3;
        n3.push({ "@id": Ae2(r3), "@type": t3.type, label: a2 ? a2.label : undefined, within: e3.id }), t3.type === "Canvas" && i3.push(t3.id);
      }
    }
  return [...N4(e3, "sc:Range"), ...yield* b4(e3), ...yield* k5(e3), ["canvases", i3.length === n3.length ? i3 : undefined], ["members", i3.length !== n3.length ? n3 : undefined]];
} };
function x4(e3) {
  return [["id", e3.id?.startsWith("vault://") ? undefined : e3.id], ["type", e3.type], ["format", e3.format], ["profile", e3.profile], ["height", e3.height || undefined], ["width", e3.width || undefined], ["duration", e3.duration || undefined], ["viewingDirection", e3.viewingDirection !== "left-to-right" ? e3.viewingDirection : undefined], ["behavior", e3.behavior && e3.behavior.length ? e3.behavior : undefined], ["timeMode", e3.timeMode], ["motivation", Array.isArray(e3.motivation) ? e3.motivation[0] : e3.motivation], [f4, m2]];
}
function d4(e3) {
  if (e3 === m2 || !e3 || e3.length === 0)
    return;
  let n3 = e3.filter((i3) => i3 !== m2);
  if (n3.length !== 0)
    return n3;
}
function re4(e3) {
  if (e3 && e3.type && e3.type === "ImageService2") {
    let { id: n3, type: i3, profile: r3, ...t3 } = e3, a2 = typeof r3 == "string" ? r3 : Array.isArray(r3) ? r3.find((s2) => typeof s2 == "string") : "";
    return { "@id": n3, "@type": i3, profile: a2 ? a2.startsWith("http") ? a2 : `http://iiif.io/api/image/2/${a2}.json` : "http://iiif.io/api/image/2/level0.json", ...t3 };
  }
  return e3;
}
function ie4(e3) {
  if (Array.isArray(e3) || (e3 = e3 ? [e3] : []), !(!e3 || e3.length === 0))
    return e3.map(re4);
}
function* S3(e3) {
  return [["label", e3.label], ["metadata", d4(e3.metadata)], ["summary", e3.summary], ["requiredStatement", e3.requiredStatement], ["rights", Array.isArray(e3.rights) ? e3.rights[0] || undefined : e3.rights || undefined], ["navDate", e3.navDate], ["language", e3.language], ["thumbnail", d4(yield e3.thumbnail)], ["placeholderCanvas", yield e3.placeholderCanvas], ["accompanyingCanvas", yield e3.accompanyingCanvas], ["provider", d4(yield e3.provider)]];
}
function* R4(e3) {
  return [["seeAlso", d4(yield e3.seeAlso)], ["service", d4(ie4(e3.service))], ["services", d4(ie4(e3.services))], ["rendering", d4(yield e3.rendering)], ["supplementary", d4(yield e3.supplementary)], ["homepage", d4(yield e3.homepage)], ["logo", d4(yield e3.logo)], ["partOf", d4(yield e3.partOf)], ["start", e3.start ? P4(e3.start) : e3.start]];
}
var Be = { Manifest: function* (e3, n3, { isTopLevel: i3 }) {
  return i3 ? [["@context", e3["@context"] ? e3["@context"] : "http://iiif.io/api/presentation/3/context.json"], ...x4(e3), ...yield* S3(e3), ...yield* R4(e3), ["items", yield e3.items], ["structures", d4(yield e3.structures)], ["annotations", d4(yield e3.annotations)], ["navPlace", e3.navPlace]] : [...x4(e3), ...yield* S3(e3)];
}, Canvas: function* (e3) {
  return [...x4(e3), ...yield* S3(e3), ...yield* R4(e3), ["items", yield e3.items], ["annotations", d4(yield e3.annotations)], ["navPlace", e3.navPlace]];
}, Agent: function* (e3) {
  return [["id", e3.id], ["type", "Agent"], ["label", e3.label], ...yield* R4(e3)];
}, AnnotationPage: function* (e3) {
  let n3 = Object.entries(e3).map(([r3, t3]) => [r3, Array.isArray(t3) ? d4(t3) : t3]).filter(([r3, t3]) => r3 !== "items" && r3 !== "id" && r3 !== f4 && r3 !== v4 && r3 !== T4), i3 = yield e3.items;
  return [["id", e3.id?.startsWith("vault://") ? undefined : e3.id], ...n3, ...yield* R4(e3), ["items", i3.length || e3[T4] === false ? i3 : m2]];
}, Service: function* (e3) {
  return [[I4, re4(e3)]];
}, Annotation: function* (e3) {
  let n3 = Object.entries(e3).map(([r3, t3]) => r3 === "motivation" ? [r3, Array.isArray(t3) ? t3[0] : t3] : r3 === "target" ? [r3, P4(t3, { allowString: true, allowSourceString: true, allowedStringType: "Canvas" })] : [r3, Array.isArray(t3) ? d4(t3) : t3]).filter(([r3]) => r3 !== "body" && r3 !== f4 && r3 !== T4), i3;
  if (Array.isArray(e3.body)) {
    let r3 = [];
    for (let t3 of e3.body)
      if (t3 && v3(t3)) {
        let a2 = { ...t3 };
        a2.source = yield t3.source, r3.push(P4(a2, { allowSourceString: true }));
      } else
        r3.push(yield t3);
    i3 = r3;
  } else
    e3.body && v3(e3.body) ? (i3 = { ...e3.body }, i3.source = yield e3.body.source) : i3 = yield e3.body;
  return [...n3, ...yield* S3(e3), ...yield* R4(e3), ["body", i3.length === 1 ? i3[0] : i3]];
}, ContentResource: function* (e3) {
  return Ce3([...x4(e3), ...yield* S3(e3), ...yield* R4(e3), ["annotations", d4(yield e3.annotations)], ["items", d4(yield e3.items)]], e3);
}, AnnotationCollection: function* (e3) {
  return [["id", e3.id], ["type", "AnnotationCollection"], ["label", e3.label]];
}, Collection: function* (e3, n3, { isTopLevel: i3 }) {
  return i3 ? [["@context", "http://iiif.io/api/presentation/3/context.json"], ...x4(e3), ...yield* S3(e3), ...yield* R4(e3), ["items", d4(yield e3.items)], ["navPlace", e3.navPlace]] : [...x4(e3), ...yield* S3(e3)];
}, Range: function* (e3) {
  let n3 = [];
  for (let i3 of e3.items)
    i3.type === "Range" ? n3.push(yield i3) : i3 && i3.type === "SpecificResource" ? n3.push(P4(i3)) : n3.push(i3);
  return [...x4(e3), ...yield* S3(e3), ...yield* R4(e3), ["items", n3], ["annotations", d4(yield e3.annotations)], ["navPlace", e3.navPlace]];
} };
function Ce3(e3, n3) {
  let i3 = Object.keys(n3), r3 = e3.map(([t3]) => t3);
  for (let t3 of i3)
    t3 === f4 || t3 === T4 || r3.indexOf(t3) === -1 && typeof n3[t3] < "u" && e3.push([t3, n3[t3]]);
  return e3;
}

// node_modules/@iiif/builder/node_modules/@iiif/helpers/dist/vault/esm/vault.mjs
var me4 = Object.defineProperty;
var Re3 = (t3, e3, i3) => (e3 in t3) ? me4(t3, e3, { enumerable: true, configurable: true, writable: true, value: i3 }) : t3[e3] = i3;
var _6 = (t3, e3, i3) => (Re3(t3, typeof e3 != "symbol" ? e3 + "" : e3, i3), i3);
var p5 = function(e3) {
  return function() {
    const i3 = { type: e3, getType: () => e3, toString: () => e3 };
    return (n3, r3) => ({
      ...i3,
      ...n3 !== undefined && { payload: n3 },
      ...r3 !== undefined && { meta: r3 }
    });
  };
};
var X5 = "@iiif/IMPORT_ENTITIES";
var K5 = "@iiif/MODIFY_ENTITY_FIELD";
var Z5 = "@iiif/REORDER_ENTITY_FIELD";
var ee4 = "@iiif/ADD_REFERENCE";
var N5 = "@iiif/UPDATE_REFERENCE";
var te4 = "@iiif/REMOVE_REFERENCE";
var ie5 = "@iiif/ADD_METADATA";
var re5 = "@iiif/REMOVE_METADATA";
var k6 = "@iiif/UPDATE_METADATA";
var ne5 = "@iiif/REORDER_METADATA";
var se5 = p5(X5)();
var Oe = p5(K5)();
var De2 = p5(Z5)();
var Ie = p5(ee4)();
var Me2 = p5(te4)();
var Ce4 = p5(N5)();
var we2 = p5(ie5)();
var Pe2 = p5(k6)();
var Ue2 = p5(re5)();
var Fe3 = p5(ne5)();
var Ne = {
  importEntities: se5,
  modifyEntityField: Oe,
  reorderEntityField: De2,
  addReference: Ie,
  removeReference: Me2,
  updateReference: Ce4,
  addMetadata: we2,
  removeMetadata: Ue2,
  updateMetadata: Pe2,
  reorderMetadata: Fe3
};
var oe5 = "@iiif/ADD_MAPPING";
var ce3 = "@iiif/ADD_MAPPINGS";
var ke2 = p5(oe5)();
var qe = p5(ce3)();
var ae5 = "@iiif/SET_META_VALUE";
var ue4 = "@iiif/SET_META_VALUE_DYNAMIC";
var de4 = "@iiif/UNSET_META_VALUE";
var xe3 = p5(ae5)();
var Ve2 = p5(ue4)();
var Le2 = p5(de4)();
var j3 = {
  setMetaValue: xe3,
  setMetaValueDynamic: Ve2,
  unsetMetaValue: Le2
};
var q4 = "RESOURCE_ERROR";
var fe4 = "RESOURCE_LOADING";
var x5 = "RESOURCE_READY";
var le3 = "@iiif/REQUEST_RESOURCE";
var he4 = "@iiif/REQUEST_ERROR";
var pe4 = "@iiif/REQUEST_MISMATCH";
var ye4 = "@iiif/REQUEST_COMPLETE";
var Be2 = "@iiif/REQUEST_OFFLINE_RESOURCE";
var Qe = p5(le3)();
var V4 = p5(he4)();
var je2 = p5(pe4)();
var ze2 = p5(ye4)();
var Q4 = "@iiif/BATCH";
var Ye = "@iiif/BATCH_IMPORT";
var L6 = p5(Q4)();
var He = (t3, e3) => {
  const { entities: i3, resource: n3, mapping: r3 } = Fe2(e3);
  if (n3.id === undefined)
    return [V4({ id: t3, message: "ID is not defined in resource." })];
  const s2 = [se5({ entities: i3 }), qe({ mapping: r3 })];
  return n3.id !== t3 && (s2.push(ke2({ id: t3, type: n3.type })), s2.push(je2({ requestId: t3, actualId: n3.id }))), s2.push(ze2({ id: t3 })), s2;
};
var z3 = Number.isNaN || function(e3) {
  return typeof e3 == "number" && e3 !== e3;
};
function Je(t3, e3) {
  return !!(t3 === e3 || z3(t3) && z3(e3));
}
function Y4(t3, e3) {
  if (!Array.isArray(t3) || !Array.isArray(e3))
    return t3 === e3;
  if (t3.length !== e3.length)
    return false;
  for (let i3 = 0;i3 < t3.length; i3++)
    if (!Je(t3[i3], e3[i3]))
      return false;
  return true;
}
function w4(t3, e3, i3) {
  const n3 = t3.iiif.requests[e3], r3 = t3.iiif.mapping[e3];
  if (!r3 || !t3.iiif.entities[r3][n3.resourceUri])
    return;
  const s2 = t3.iiif.entities[r3][n3.resourceUri];
  if (s2 && s2[f4]) {
    const o4 = s2[f4].find((u4) => i3 ? u4[v4] === i3.id : u4[v4] === s2.id);
    return oe4(s2, o4);
  }
  return s2;
}
function Ge2(t3) {
  return t3 && typeof t3.then == "function";
}
function H3(t3, e3, { waitTimeout: i3 = 30 } = {}) {
  return (n3, r3) => {
    const s2 = t3.getStore(), o4 = s2.getState(), u4 = o4.iiif.requests[n3];
    if (u4) {
      if (u4.loadingState === x5) {
        const d5 = w4(o4, n3);
        if (d5)
          return d5;
      }
      switch (u4.loadingState) {
        case q4:
          break;
        case fe4:
          return (async () => {
            let d5, a2 = false;
            try {
              const f5 = await Promise.race([
                new Promise((S4, E5) => {
                  a2 || (d5 = s2.subscribe(() => {
                    const R5 = s2.getState();
                    if (R5.iiif.requests[n3].loadingState === q4) {
                      E5();
                      return;
                    }
                    if (R5.iiif.requests[n3].loadingState === x5) {
                      const y5 = w4(R5, n3);
                      y5 ? S4(y5) : E5();
                    }
                  }));
                }),
                new Promise((S4, E5) => setTimeout(() => {
                  a2 = true, E5();
                }, i3 * 60 * 1000))
              ]);
              if (d5 && d5(), f5)
                return f5;
            } catch {
              d5 && d5();
            }
          })();
      }
    }
    t3.dispatch(Qe({ id: n3 }));
    const l5 = (d5) => {
      if (!d5)
        return;
      !d5.id && !d5["@id"] && (d5["@type"] && (d5["@id"] = n3), d5.id = n3);
      const a2 = He(n3, d5);
      return t3.dispatch(L6({ actions: a2 })), w4(s2.getState(), n3);
    };
    try {
      const d5 = e3(n3, r3);
      return Ge2(d5) ? (async () => {
        try {
          return l5(await d5);
        } catch (a2) {
          throw t3.dispatch(V4({ id: n3, message: a2.toString() })), a2;
        }
      })() : l5(d5);
    } catch (d5) {
      throw t3.dispatch(V4({ id: n3, message: d5.toString() })), d5;
    }
  };
}
function Ee2() {
  return {
    Collection: {},
    Manifest: {},
    Canvas: {},
    AnnotationPage: {},
    AnnotationCollection: {},
    Annotation: {},
    ContentResource: {},
    Range: {},
    Service: {},
    Selector: {},
    Agent: {}
  };
}
var J3 = (t3) => {
  let e3;
  const i3 = /* @__PURE__ */ new Set, n3 = (l5, d5) => {
    const a2 = typeof l5 == "function" ? l5(e3) : l5;
    if (!Object.is(a2, e3)) {
      const f5 = e3;
      e3 = d5 ?? typeof a2 != "object" ? a2 : Object.assign({}, e3, a2), i3.forEach((S4) => S4(e3, f5));
    }
  }, r3 = () => e3, u4 = { setState: n3, getState: r3, subscribe: (l5) => (i3.add(l5), () => i3.delete(l5)), destroy: () => {
    i3.clear();
  } };
  return e3 = t3(n3, r3, u4), u4;
};
var We2 = (t3) => t3 ? J3(t3) : J3;
var $e2 = (t3, e3) => (i3, n3, r3) => (r3.dispatch = (s2) => (i3((o4) => t3(o4, s2), false, s2), s2), r3.dispatchFromDevtools = true, { dispatch: (...s2) => r3.dispatch(...s2), ...e3 });
var Xe = $e2;
var B6 = /* @__PURE__ */ new Map;
var D5 = (t3) => {
  const e3 = B6.get(t3);
  return e3 ? Object.fromEntries(Object.entries(e3.stores).map(([i3, n3]) => [i3, n3.getState()])) : {};
};
var Ke3 = (t3, e3, i3) => {
  if (t3 === undefined)
    return {
      type: "untracked",
      connection: e3.connect(i3)
    };
  const n3 = B6.get(i3.name);
  if (n3)
    return { type: "tracked", store: t3, ...n3 };
  const r3 = {
    connection: e3.connect(i3),
    stores: {}
  };
  return B6.set(i3.name, r3), { type: "tracked", store: t3, ...r3 };
};
var Ze = (t3, e3 = {}) => (i3, n3, r3) => {
  const { enabled: s2, anonymousActionType: o4, store: u4, ...l5 } = e3;
  let d5;
  try {
    d5 = (s2 ?? false) && window.__REDUX_DEVTOOLS_EXTENSION__;
  } catch {
  }
  if (!d5)
    return t3(i3, n3, r3);
  const { connection: a2, ...f5 } = Ke3(u4, d5, l5);
  let S4 = true;
  r3.setState = (y5, A3, h5) => {
    const m3 = i3(y5, A3);
    if (!S4)
      return m3;
    const C3 = h5 === undefined ? { type: o4 || "anonymous" } : typeof h5 == "string" ? { type: h5 } : h5;
    return u4 === undefined ? (a2 == null || a2.send(C3, n3()), m3) : (a2 == null || a2.send({
      ...C3,
      type: `${u4}/${C3.type}`
    }, {
      ...D5(l5.name),
      [u4]: r3.getState()
    }), m3);
  };
  const E5 = (...y5) => {
    const A3 = S4;
    S4 = false, i3(...y5), S4 = A3;
  }, R5 = t3(r3.setState, n3, r3);
  if (f5.type === "untracked" ? a2 == null || a2.init(R5) : (f5.stores[f5.store] = r3, a2 == null || a2.init(Object.fromEntries(Object.entries(f5.stores).map(([y5, A3]) => [
    y5,
    y5 === f5.store ? R5 : A3.getState()
  ])))), r3.dispatchFromDevtools && typeof r3.dispatch == "function") {
    let y5 = false;
    const A3 = r3.dispatch;
    r3.dispatch = (...h5) => {
      A3(...h5);
    };
  }
  return a2.subscribe((y5) => {
    var A3;
    switch (y5.type) {
      case "ACTION":
        if (typeof y5.payload != "string") {
          console.error("[zustand devtools middleware] Unsupported action format");
          return;
        }
        return P5(y5.payload, (h5) => {
          if (h5.type === "__setState") {
            if (u4 === undefined) {
              E5(h5.state);
              return;
            }
            Object.keys(h5.state).length !== 1 && console.error(`
                    [zustand devtools middleware] Unsupported __setState action format. 
                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),
                    and value of this only key should be a state object. Example: { "type": "__setState", "state": { "abc123Store": { "foo": "bar" } } }
                    `);
            const m3 = h5.state[u4];
            if (m3 == null)
              return;
            JSON.stringify(r3.getState()) !== JSON.stringify(m3) && E5(m3);
            return;
          }
          r3.dispatchFromDevtools && typeof r3.dispatch == "function" && r3.dispatch(h5);
        });
      case "DISPATCH":
        switch (y5.payload.type) {
          case "RESET":
            return E5(R5), u4 === undefined ? a2 == null ? undefined : a2.init(r3.getState()) : a2 == null ? undefined : a2.init(D5(l5.name));
          case "COMMIT":
            if (u4 === undefined) {
              a2 == null || a2.init(r3.getState());
              return;
            }
            return a2 == null ? undefined : a2.init(D5(l5.name));
          case "ROLLBACK":
            return P5(y5.state, (h5) => {
              if (u4 === undefined) {
                E5(h5), a2 == null || a2.init(r3.getState());
                return;
              }
              E5(h5[u4]), a2 == null || a2.init(D5(l5.name));
            });
          case "JUMP_TO_STATE":
          case "JUMP_TO_ACTION":
            return P5(y5.state, (h5) => {
              if (u4 === undefined) {
                E5(h5);
                return;
              }
              JSON.stringify(r3.getState()) !== JSON.stringify(h5[u4]) && E5(h5[u4]);
            });
          case "IMPORT_STATE": {
            const { nextLiftedState: h5 } = y5.payload, m3 = (A3 = h5.computedStates.slice(-1)[0]) == null ? undefined : A3.state;
            if (!m3)
              return;
            E5(u4 === undefined ? m3 : m3[u4]), a2 == null || a2.send(null, h5);
            return;
          }
          case "PAUSE_RECORDING":
            return S4 = !S4;
        }
        return;
    }
  }), R5;
};
var et = Ze;
var P5 = (t3, e3) => {
  let i3;
  try {
    i3 = JSON.parse(t3);
  } catch (n3) {
    console.error("[zustand devtools middleware] Could not parse the received json", n3);
  }
  i3 !== undefined && e3(i3);
};
var tt2 = (t3) => (e3, i3, n3) => {
  const r3 = n3.subscribe;
  return n3.subscribe = (o4, u4, l5) => {
    let d5 = o4;
    if (u4) {
      const a2 = (l5 == null ? undefined : l5.equalityFn) || Object.is;
      let f5 = o4(n3.getState());
      d5 = (S4) => {
        const E5 = o4(S4);
        if (!a2(f5, E5)) {
          const R5 = f5;
          u4(f5 = E5, R5);
        }
      }, l5 != null && l5.fireImmediately && u4(f5, f5);
    }
    return r3(d5);
  }, t3(e3, i3, n3);
};
var it2 = tt2;
var rt2 = (t3 = {}, e3) => {
  switch (e3.type) {
    case oe5:
      return {
        ...t3,
        [e3.payload.id]: e3.payload.type
      };
    case ce3:
      return {
        ...t3,
        ...e3.payload.mapping
      };
    default:
      return t3;
  }
};
function U4(t3, e3, i3, n3) {
  return !(!t3[i3] || !t3[i3][e3] || !t3[i3][e3][n3] || !Array.isArray(t3[i3][e3][n3]));
}
function nt2(t3, e3) {
  const i3 = {}, n3 = [];
  for (const [r3, s2] of Object.entries(t3 || {})) {
    n3.push(r3);
    const o4 = (e3 || {})[r3];
    if (!o4 || o4.length === 0) {
      i3[r3] = s2;
      continue;
    }
    i3[r3] = o4;
  }
  for (const [r3, s2] of Object.entries(e3 || {}))
    n3.indexOf(r3) === -1 && (i3[r3] = s2);
  return i3;
}
function c2(t3) {
  return t3.payload;
}
function F5(t3, e3) {
  return typeof t3 > "u" ? e3 : t3;
}
var st2 = (t3 = Ee2(), e3) => {
  var n3;
  const i3 = (r3, s2) => ({
    ...t3,
    [c2(e3).type]: {
      ...t3[c2(e3).type],
      [c2(e3).id]: {
        ...r3,
        ...s2
      }
    }
  });
  switch (e3.type) {
    case K5: {
      if (!t3[c2(e3).type] || !t3[c2(e3).type][c2(e3).id])
        return t3;
      const r3 = t3[c2(e3).type][c2(e3).id];
      return typeof r3 == "string" ? t3 : i3(r3, { [c2(e3).key]: c2(e3).value });
    }
    case Z5: {
      if (!U4(t3, c2(e3).id, c2(e3).type, c2(e3).key))
        return t3;
      const r3 = t3[c2(e3).type][c2(e3).id];
      if (typeof r3 == "string")
        return t3;
      const s2 = Array.from(r3[c2(e3).key]), [o4] = s2.splice(c2(e3).startIndex, 1);
      return s2.splice(c2(e3).endIndex, 0, o4), i3(r3, { [c2(e3).key]: s2 });
    }
    case X5: {
      const r3 = Object.keys(c2(e3).entities), s2 = { ...t3 };
      for (const o4 of r3) {
        const u4 = c2(e3).entities[o4], l5 = { ...t3[o4] || {} };
        let d5 = false;
        const a2 = Object.keys(u4 || {}) || [];
        if (u4 && a2) {
          for (const f5 of a2)
            d5 = true, l5[f5] = t3[o4][f5] ? nt2(t3[o4][f5], u4[f5]) : u4[f5];
          d5 && (s2[o4] = l5);
        }
      }
      return s2;
    }
    case ee4: {
      if (!U4(t3, c2(e3).id, c2(e3).type, c2(e3).key))
        return t3;
      const r3 = t3[c2(e3).type][c2(e3).id], s2 = Array.from(r3[c2(e3).key]);
      return s2.splice(F5(c2(e3).index, s2.length + 1), 0, c2(e3).reference), i3(r3, { [c2(e3).key]: s2 });
    }
    case N5:
    case te4: {
      if (!U4(t3, c2(e3).id, c2(e3).type, c2(e3).key))
        return t3;
      const r3 = t3[c2(e3).type][c2(e3).id], s2 = Array.from(r3[c2(e3).key]), o4 = F5(c2(e3).index, s2.findIndex((u4) => u4 && u4.id === c2(e3).reference.id));
      return o4 === -1 || ((n3 = s2[o4]) == null ? undefined : n3.id) !== c2(e3).reference.id ? t3 : (e3.type === N5 ? s2.splice(o4, 1, c2(e3).reference) : s2.splice(o4, 1), i3(r3, { [c2(e3).key]: s2 }));
    }
    case ie5: {
      const r3 = t3[c2(e3).type][c2(e3).id];
      if (!r3)
        return t3;
      const s2 = Array.from(r3.metadata || []), o4 = c2(e3);
      return s2.splice(F5(e3.payload.beforeIndex, s2.length + 1), 0, {
        label: o4.label,
        value: o4.label
      }), i3(r3, { metadata: s2 });
    }
    case ne5: {
      const r3 = t3[c2(e3).type][c2(e3).id];
      if (typeof r3 == "string" || !r3)
        return t3;
      const s2 = Array.from(r3.metadata || []), [o4] = s2.splice(c2(e3).startIndex, 1);
      return s2.splice(c2(e3).endIndex, 0, o4), i3(r3, { metadata: s2 });
    }
    case k6:
    case re5: {
      const r3 = t3[c2(e3).type][c2(e3).id], s2 = Array.from(r3.metadata || []), o4 = c2(e3).atIndex;
      return typeof o4 > "u" || o4 === -1 || !s2[o4] ? t3 : (e3.type === k6 ? s2.splice(o4, 1, { label: c2(e3).label, value: c2(e3).value }) : s2.splice(o4, 1), i3(r3, { metadata: s2 }));
    }
    default:
      return t3;
  }
};
var ot2 = (t3 = {}, e3) => {
  switch (e3.type) {
    case le3:
    case Be2:
      return {
        ...t3,
        [e3.payload.id]: {
          requestUri: e3.payload.id,
          loadingState: fe4,
          uriMismatch: false,
          resourceUri: e3.payload.id
        }
      };
    case pe4:
      return {
        ...t3,
        [e3.payload.requestId]: {
          ...t3[e3.payload.requestId] || {},
          uriMismatch: true,
          resourceUri: e3.payload.actualId
        },
        [e3.payload.actualId]: {
          requestUri: e3.payload.requestId,
          loadingState: t3[e3.payload.requestId].loadingState,
          uriMismatch: true,
          resourceUri: e3.payload.actualId
        }
      };
    case he4:
      return {
        ...t3,
        [e3.payload.id]: {
          ...t3[e3.payload.id] || {},
          loadingState: q4,
          error: e3.payload.message
        }
      };
    case ye4:
      return {
        ...t3,
        [e3.payload.id]: {
          ...t3[e3.payload.id] || {},
          loadingState: x5,
          error: undefined
        }
      };
  }
  return t3;
};
var ct2 = (t3 = {}, e3) => {
  const { id: i3, updateValue: n3, value: r3, meta: s2, key: o4 } = e3 && e3.payload || {};
  switch (e3.type) {
    case ae5:
      return {
        ...t3,
        [i3]: {
          ...t3[i3] || {},
          [s2]: {
            ...t3[i3] ? t3[i3][s2] || {} : {},
            [o4]: r3
          }
        }
      };
    case ue4:
      return {
        ...t3,
        [i3]: {
          ...t3[i3] || {},
          [s2]: {
            ...t3[i3] ? t3[i3][s2] || {} : {},
            [o4]: t3[i3] && t3[i3][s2] ? n3(t3[i3][s2][o4]) : n3(undefined)
          }
        }
      };
    case de4:
      return t3[i3] && t3[i3][s2] && t3[i3][s2][o4] ? {
        ...t3,
        [i3]: {
          ...t3[i3] || {},
          [s2]: {
            ...t3[i3] ? t3[i3][s2] || {} : {},
            [o4]: undefined
          }
        }
      } : t3;
    default:
      return t3;
  }
};
function Se4(t3 = {}) {
  const e3 = Object.keys(t3);
  return function(n3 = {}, r3) {
    let s2 = false;
    const o4 = {};
    for (let u4 = 0;u4 < e3.length; u4++) {
      const l5 = e3[u4];
      o4[l5] = t3[l5](n3[l5], r3), s2 = s2 || o4[l5] !== n3[l5];
    }
    return s2 ? o4 : n3;
  };
}
function at2(t3) {
  return (e3, i3) => i3 && i3.type === Q4 ? i3.payload.actions.reduce(t3, e3) : i3 && i3.type === Ye ? {
    ...e3,
    iiif: {
      ...e3.iiif,
      ...i3.payload.state
    }
  } : t3(e3, i3);
}
var ut2 = Se4({
  mapping: rt2,
  entities: st2,
  requests: ot2,
  meta: ct2
});
function dt2() {
  return {
    iiif: {
      entities: Ee2(),
      meta: {},
      mapping: {},
      requests: {}
    }
  };
}
function ft2(t3 = {}) {
  const {
    enableDevtools: e3 = false,
    iiifStoreName: i3 = "iiif",
    defaultState: n3 = dt2(),
    customReducers: r3 = {}
  } = t3, s2 = at2(Se4({ [i3]: ut2, ...r3 }));
  return We2(it2(et(Xe(s2, n3), { enabled: e3 })));
}
function lt2(t3) {
  return { all: t3 = t3 || /* @__PURE__ */ new Map, on: function(e3, i3) {
    var n3 = t3.get(e3);
    n3 ? n3.push(i3) : t3.set(e3, [i3]);
  }, off: function(e3, i3) {
    var n3 = t3.get(e3);
    n3 && (i3 ? n3.splice(n3.indexOf(i3) >>> 0, 1) : t3.set(e3, []));
  }, emit: function(e3, i3) {
    var n3 = t3.get(e3);
    n3 && n3.slice().map(function(r3) {
      r3(i3);
    }), (n3 = t3.get("*")) && n3.slice().map(function(r3) {
      r3(e3, i3);
    });
  } };
}
function g3(t3, e3, i3, n3 = true) {
  e3[O6] = e3[O6] || [], e3[O6].push(t3);
  const r3 = /* @__PURE__ */ new Map;
  Object.defineProperty(e3, t3, {
    enumerable: n3,
    get() {
      if (typeof e3[T5][t3] > "u")
        return;
      const s2 = e3[T5][t3];
      if (!s2)
        return s2;
      const o4 = i3.get(e3[T5][t3], {
        parent: this.id ? { id: this.id, type: this.type } : undefined
      });
      return r3.has(o4) || (r3.clear(), r3.set(o4, b5(o4, i3))), r3.get(o4);
    },
    set(s2) {
      e3[T5][t3] !== s2 && (this[v5] ? i3.modifyEntityField({ id: this.id, type: this.type }, t3, ge4(s2)) : this[T5][t3] = s2);
    }
  });
}
var T5 = Symbol.for("_refs_");
var v5 = Symbol.for("_reactive_");
var O6 = Symbol.for("_defined_");
var G5 = Symbol.for("_parent_");
function ht2(t3, e3 = false, i3) {
  const n3 = {
    id: "",
    type: "unknown",
    [O6]: [],
    [T5]: {},
    [G5]: i3 || null,
    [v5]: null,
    is(r3) {
      return typeof r3 == "string" ? this.id === r3 : r3.id ? r3.id === this.id : false;
    },
    reactive() {
      if (!this[v5])
        return this[v5] = this.subscribe(() => this.refresh(), true), () => {
          this.unreactive();
        };
    },
    refresh() {
      if (this.id) {
        const r3 = this.unwrap();
        for (const s2 of Object.keys(r3 || {}))
          this[O6].includes(s2) ? this[T5][s2] = r3[s2] : this[s2] = r3[s2];
      }
    },
    unreactive() {
      this[v5] && (this[v5](), this[v5] = null);
    },
    unwrap() {
      if (!this.id)
        throw new Error("Invalid object");
      const r3 = this[G5];
      return t3.get(this.id, { parent: r3 ? { id: r3, type: "unknown" } : undefined });
    },
    toPresentation3() {
      return t3.toPresentation3(this.unwrap());
    },
    toPresentation2() {
      return t3.toPresentation2(this.unwrap());
    },
    valueOf() {
      return this.unwrap();
    },
    toJSON() {
      const r3 = this;
      return {
        ...r3,
        items: r3.items,
        annotations: r3.annotations,
        structures: r3.structures,
        seeAlso: r3.seeAlso,
        service: r3.service,
        services: r3.services,
        rendering: r3.rendering,
        partOf: r3.partOf,
        start: r3.start,
        supplementary: r3.supplementary,
        homepage: r3.homepage,
        thumbnail: r3.thumbnail,
        placeholderCanvas: r3.placeholderCanvas,
        accompanyingCanvas: r3.accompanyingCanvas,
        provider: r3.provider
      };
    },
    subscribe(r3, s2 = true) {
      return t3.subscribe(() => this.id ? t3.get(this.id) : null, r3, s2);
    }
  };
  return g3("items", n3, t3), g3("annotations", n3, t3), g3("structures", n3, t3), g3("seeAlso", n3, t3), g3("rendering", n3, t3), g3("partOf", n3, t3), g3("start", n3, t3, false), g3("supplementary", n3, t3), g3("homepage", n3, t3), g3("thumbnail", n3, t3), g3("placeholderCanvas", n3, t3, false), g3("accompanyingCanvas", n3, t3, false), g3("provider", n3, t3), g3("body", n3, t3), g3("logo", n3, t3), n3;
}
function pt2(t3) {
  return !!t3[O6];
}
function ge4(t3) {
  return Array.isArray(t3) ? t3.map((e3) => ge4(e3)) : !t3 || !t3.type ? t3 : { id: t3.id, type: t3.type };
}
function b5(t3, e3, i3 = false, n3) {
  if (Array.isArray(t3))
    return t3.map((u4) => b5(u4, e3, i3));
  if (!t3 || !t3.type || !t3.id)
    return t3;
  const r3 = ht2(e3, i3), s2 = Object.create(r3), o4 = Object.assign(s2, t3);
  return i3 && o4.reactive(), o4;
}
function W5(t3) {
  switch (t3) {
    case "Image":
    case "Video":
    case "Sound":
    case "Dataset":
    case "Text":
    case "Composite":
    case "List":
    case "Independents":
    case "Audience":
      return "ContentResource";
    case "ImageService1":
    case "ImageService2":
    case "ImageService3":
      return "Service";
  }
  return t3;
}

class yt2 {
  constructor(e3, i3) {
    _6(this, "options");
    _6(this, "store");
    _6(this, "emitter");
    _6(this, "isBatching", false);
    _6(this, "batchQueue", []);
    _6(this, "remoteFetcher");
    _6(this, "staticFetcher");
    _6(this, "defaultFetcher", (e4) => fetch(e4).then((i4) => i4.json()));
    this.options = Object.assign({
      reducers: {},
      customFetcher: this.defaultFetcher,
      enableDevtools: true
    }, e3 || {}), this.store = i3 || ft2({
      customReducers: this.options.reducers,
      defaultState: this.options.defaultState,
      enableDevtools: this.options.enableDevtools
    }), this.emitter = lt2(), this.remoteFetcher = H3(this, this.options.customFetcher), this.staticFetcher = H3(this, (n3, r3) => r3);
  }
  batch(e3) {
    this.isBatching = true;
    try {
      e3(this), this.isBatching = false, this.dispatch(L6({ actions: this.batchQueue }));
    } catch (i3) {
      throw this.batchQueue = [], this.isBatching = false, i3;
    }
    this.batchQueue = [];
  }
  async asyncBatch(e3) {
    this.isBatching = true;
    try {
      await e3(this), this.isBatching = false, this.dispatch(L6({ actions: this.batchQueue }));
    } catch (i3) {
      throw this.batchQueue = [], this.isBatching = false, i3;
    }
    this.batchQueue = [];
  }
  modifyEntityField(e3, i3, n3) {
    this.dispatch(Ne.modifyEntityField({
      id: e3.id,
      type: e3.type,
      key: i3,
      value: n3
    }));
  }
  dispatch(e3) {
    if (this.isBatching)
      this.batchQueue.push(e3);
    else {
      if (e3.type === Q4) {
        for (const r3 of e3.payload.actions)
          this.emitter.emit(r3.type, { action: r3, state: this.store.getState() });
        this.store.dispatch(e3);
        const n3 = this.getState();
        for (const r3 of e3.payload.actions)
          this.emitter.emit(`after:${r3.type}`, { action: r3, state: n3 });
        return;
      }
      this.emitter.emit(e3.type, { action: e3, state: this.store.getState() }), this.store.dispatch(e3);
      const i3 = this.store.getState();
      this.emitter.emit(`after:${e3.type}`, { action: e3, state: i3 });
      return;
    }
  }
  on(e3, i3) {
    return this.emitter.on(e3, i3), () => {
      this.emitter.off(e3, i3);
    };
  }
  serialize(e3, i3) {
    return $e(this.getState().iiif, e3, i3);
  }
  toPresentation2(e3) {
    return this.serialize(e3, Ke2);
  }
  toPresentation3(e3) {
    return this.serialize(e3, Be);
  }
  hydrate(e3, i3, n3 = {}) {
    return this.get(e3, i3, { ...n3, skipSelfReturn: false });
  }
  get(e3, i3, n3 = {}) {
    typeof i3 != "string" && (n3 = i3 || {}, i3 = undefined);
    const { skipSelfReturn: r3 = true } = n3 || {};
    let s2 = n3.parent ? typeof n3.parent == "string" ? n3.parent : n3.parent.id : undefined;
    if (Array.isArray(e3))
      return e3.map((f5) => this.get(f5, n3));
    const o4 = this.getState();
    if (v3(e3) && !n3.preserveSpecificResources && (e3 = e3.source), typeof e3 == "string") {
      const f5 = W5(i3 || o4.iiif.mapping[e3]);
      if (!f5)
        return r3 ? null : { id: e3, type: "unknown" };
      e3 = { id: e3, type: f5 };
    }
    if (e3 && e3.partOf && !s2 && !n3.skipPartOfCheck) {
      const f5 = Array.isArray(e3.partOf) ? e3.partOf[0] : e3.partOf;
      f5 && (typeof f5 == "string" && (s2 = f5), typeof f5.id == "string" && (s2 = f5.id));
    }
    const u4 = W5(i3 || (e3 == null ? undefined : e3.type)), l5 = e3 == null ? undefined : e3.id, d5 = o4.iiif.entities[u4];
    if (!d5) {
      const f5 = o4.iiif.requests[l5];
      return f5 && f5.resourceUri !== l5 ? this.get(f5.resourceUri, n3) : r3 ? null : e3;
    }
    const a2 = d5[e3.id];
    if (a2 && a2[f4]) {
      const f5 = a2[f4].find((S4) => s2 ? S4[v4] === s2 : S4[v4] === a2.id);
      return oe4(a2, f5);
    }
    return d5[e3.id] || (r3 ? null : e3);
  }
  select(e3) {
    return e3(this.getState());
  }
  getStore() {
    return this.store;
  }
  getState() {
    return this.store.getState();
  }
  deep(e3, i3) {
    if (typeof e3 > "u")
      return this.get(i3, { skipSelfReturn: false });
    if (typeof e3 == "function")
      try {
        const r3 = e3(this.get(i3, { skipSelfReturn: false })), s2 = (o4) => this.deep(o4, r3);
        return s2.size = Array.isArray(r3) ? r3.length : 1, s2;
      } catch {
        const s2 = (o4) => this.deep(o4, undefined);
        return s2.size = 0, s2;
      }
    const n3 = (r3) => this.deep(r3, e3);
    return n3.size = Array.isArray(e3) ? e3.length : 1, n3;
  }
  loadManifest(e3, i3) {
    const n3 = typeof e3 == "string" ? e3 : e3.id;
    return this.load(n3, i3);
  }
  loadCollection(e3, i3) {
    const n3 = typeof e3 == "string" ? e3 : e3.id;
    return this.load(n3, i3);
  }
  load(e3, i3) {
    const n3 = typeof e3 == "string" ? e3 : e3.id;
    return i3 ? Promise.resolve(this.staticFetcher(n3, i3)) : Promise.resolve(this.remoteFetcher(n3));
  }
  loadSync(e3, i3) {
    const n3 = typeof e3 == "string" ? e3 : e3.id;
    return this.staticFetcher(n3, i3);
  }
  loadManifestSync(e3, i3) {
    const n3 = typeof e3 == "string" ? e3 : e3.id;
    return this.loadSync(n3, i3);
  }
  loadCollectionSync(e3, i3) {
    const n3 = typeof e3 == "string" ? e3 : e3.id;
    return this.loadSync(n3, i3);
  }
  areInputsEqual(e3, i3) {
    return Y4(e3, i3);
  }
  subscribe(e3, i3, n3) {
    return typeof n3 > "u" && (typeof i3 > "u" || i3 === false || i3 === true) && (n3 = i3, i3 = e3, e3 = (r3) => r3), this.store.subscribe(e3, (r3) => i3(r3, this), {
      equalityFn: Y4,
      fireImmediately: !n3
    });
  }
  async ensureLoaded(e3) {
    const i3 = typeof e3 == "string" ? e3 : e3.id;
    this.requestStatus(i3) || await this.load(i3);
  }
  requestStatus(e3) {
    return this.select((i3) => i3.iiif.requests[e3]);
  }
  getResourceMeta(e3, i3) {
    const n3 = this.getState().iiif.meta[e3];
    if (n3)
      return i3 ? n3[i3] : n3;
  }
  getObject(e3, i3, n3 = {}) {
    const { reactive: r3, ...s2 } = n3;
    return b5(this.get(e3, i3, s2), this, r3);
  }
  async loadObject(e3, i3) {
    return b5(await this.load(e3, i3), this);
  }
  async loadManifestObject(e3, i3) {
    return b5(await this.loadManifest(e3, i3), this);
  }
  async loadCollectionObject(e3, i3) {
    return b5(await this.loadCollection(e3, i3), this);
  }
  wrapObject(e3) {
    return b5(this.get(e3, { skipSelfReturn: false }), this);
  }
  isWrapped(e3) {
    return pt2(e3);
  }
  setMetaValue([e3, i3, n3], r3) {
    this.dispatch(typeof r3 == "function" ? j3.setMetaValueDynamic({
      id: e3,
      meta: i3,
      key: n3,
      updateValue: r3
    }) : j3.setMetaValue({
      id: e3,
      meta: i3,
      key: n3,
      value: r3
    }));
  }
}

// node_modules/@iiif/builder/dist/esm/index.mjs
var Mt = Object.defineProperty;
var Tt2 = (e3, t3, i3) => (t3 in e3) ? Mt(e3, t3, { enumerable: true, configurable: true, writable: true, value: i3 }) : e3[t3] = i3;
var A3 = (e3, t3, i3) => (Tt2(e3, typeof t3 != "symbol" ? t3 + "" : t3, i3), i3);
function w5(e3) {
  return typeof e3 == "string" ? false : !!e3 && e3.type === "SpecificResource";
}
var M4 = {};
var v6 = "iiif-parser:hasPart";
var K6 = "iiif-parser:partOf";
var Lt = "iiif-parser:isExternal";
var a2 = [];
Object.freeze(a2), Object.freeze(M4);
var z4 = { id: "https://iiif-parser/annotation-page", type: "AnnotationPage", behavior: a2, label: null, thumbnail: a2, summary: null, requiredStatement: null, metadata: a2, rights: null, provider: a2, items: a2, seeAlso: a2, homepage: a2, rendering: a2, service: a2 };
var Y5 = { id: "https://iiif-parser/empty-canvas", type: "Canvas", label: null, behavior: a2, thumbnail: a2, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: a2, rights: null, navDate: null, provider: a2, items: a2, annotations: a2, seeAlso: a2, homepage: a2, partOf: a2, rendering: a2, service: a2, duration: 0, height: 0, width: 0 };
var P6 = { id: "https://iiif-parser/empty-collection", type: "Collection", label: null, viewingDirection: "left-to-right", behavior: a2, thumbnail: a2, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: a2, rights: null, navDate: null, provider: a2, items: a2, annotations: a2, seeAlso: a2, homepage: a2, partOf: a2, rendering: a2, service: a2, services: a2 };
var F6 = { id: "https://iiif-parser/empty-manifest", type: "Manifest", annotations: a2, behavior: a2, homepage: a2, items: a2, label: null, metadata: a2, navDate: null, provider: a2, partOf: a2, accompanyingCanvas: null, placeholderCanvas: null, rendering: a2, requiredStatement: null, rights: null, seeAlso: a2, service: a2, services: a2, start: null, structures: a2, summary: null, thumbnail: a2, viewingDirection: "left-to-right" };
var Ot2 = { id: "https://iiif-parser/empty-canvas", type: "Range", label: null, behavior: a2, thumbnail: a2, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: a2, rights: null, navDate: null, provider: a2, items: a2, annotations: a2, seeAlso: a2, homepage: a2, partOf: a2, rendering: a2, service: a2, start: null, supplementary: null, viewingDirection: "left-to-right" };
var Pt2 = { id: "https://iiif-parser/empty-agent", type: "Agent", label: {}, logo: a2, seeAlso: a2, homepage: a2 };
var Ft = { id: "https://iiif-parser/empty-service", type: "UnknownService" };
function E5(e3) {
  return Array.isArray(e3) ? e3 : e3 ? [e3] : [];
}
function T6(...e3) {
  return (t3) => e3.reduce((i3, n3) => n3(i3), t3);
}
var X6 = ["Collection", "Manifest", "Canvas", "AnnotationPage", "AnnotationCollection", "Annotation", "ContentResource", "Range", "Service", "Selector", "Agent"];
function Dt2(e3, t3) {
  if (typeof e3 > "u" || e3 === null)
    throw new Error("Null or undefined is not a valid entity.");
  if (Array.isArray(e3))
    throw new Error("Array is not a valid entity");
  if (typeof e3 != "object") {
    if (t3)
      return t3;
    throw new Error(`${typeof e3} is not a valid entity`);
  }
  if (typeof e3.type == "string") {
    const i3 = X6.indexOf(e3.type);
    if (i3 !== -1)
      return X6[i3];
  }
  if (e3.profile)
    return "Service";
  throw new Error("Resource type is not known");
}

class q5 {
  constructor(t3, i3 = {}) {
    A3(this, "traversals"), A3(this, "options"), A3(this, "_traverseManifest", T6(this.traverseManifestItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this), this.traverseManifestStructures.bind(this), this.traverseInlineAnnotationPages.bind(this))), A3(this, "_traverseCanvas", T6(this.traverseCanvasItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this), this.traverseInlineAnnotationPages.bind(this))), A3(this, "_traverseAnnotationPage", T6(this.traverseAnnotationPageItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this))), A3(this, "_traverseRange", T6(this.traverseRangeRanges.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this))), this.traversals = { collection: [], manifest: [], canvas: [], annotationCollection: [], annotationPage: [], annotation: [], contentResource: [], choice: [], range: [], service: [], agent: [], specificResource: [], geoJson: [], ...t3 }, this.options = { allowUndefinedReturn: false, ...i3 };
  }
  static all(t3) {
    return new q5({ collection: [t3], manifest: [t3], canvas: [t3], annotationCollection: [t3], annotationPage: [t3], annotation: [t3], contentResource: [t3], choice: [t3], range: [t3], service: [t3], geoJson: [t3], specificResource: [t3], agent: [t3] });
  }
  traverseDescriptive(t3) {
    return t3.thumbnail && (t3.thumbnail = E5(t3.thumbnail).map((i3) => this.traverseType(i3, { parent: t3 }, this.traversals.contentResource))), t3.provider && (t3.provider = t3.provider.map((i3) => this.traverseAgent(i3, t3))), t3;
  }
  traverseLinking(t3) {
    return t3.seeAlso && (t3.seeAlso = t3.seeAlso.map((i3) => this.traverseType(i3, { parent: t3 }, this.traversals.contentResource))), t3.service && (t3.service = E5(t3.service).map((i3) => this.traverseService(i3))), t3.services && (t3.services = E5(t3.services).map((i3) => this.traverseService(i3, t3))), t3.logo && (t3.logo = t3.logo.map((i3) => this.traverseType(i3, { parent: t3 }, this.traversals.contentResource))), t3.homepage && (t3.homepage = t3.homepage.map((i3) => this.traverseType(i3, { parent: t3 }, this.traversals.contentResource))), t3.partOf && (t3.partOf = t3.partOf.map((i3) => typeof i3 == "string" || !i3.type ? this.traverseType(i3, { parent: t3 }, this.traversals.contentResource) : i3.type === "Canvas" ? this.traverseType(i3, { parent: t3 }, this.traversals.canvas) : i3.type === "AnnotationCollection" ? this.traverseType(i3, { parent: t3 }, this.traversals.annotationCollection) : i3.type === "Collection" ? this.traverseType(i3, { parent: t3 }, this.traversals.collection) : this.traverseType(i3, { parent: t3 }, this.traversals.contentResource))), t3.start && (w5(t3.start) ? t3.start = this.traverseSpecificResource(t3.start, "Canvas", t3) : t3.start = this.traverseType(t3.start, { parent: t3 }, this.traversals.canvas)), t3.rendering && (t3.rendering = t3.rendering.map((i3) => this.traverseType(i3, { parent: t3 }, this.traversals.contentResource))), t3.supplementary && (t3.supplementary = t3.supplementary.map((i3) => this.traverseType(i3, { parent: t3 }, this.traversals.contentResource))), t3;
  }
  traverseCollectionItems(t3) {
    return t3.items && t3.items.map((i3) => i3.type === "Collection" ? this.traverseCollection(i3) : this.traverseManifest(i3)), t3;
  }
  traverseCollection(t3, i3) {
    return this.traverseType(this.traverseDescriptive(this.traverseInlineAnnotationPages(this.traverseLinking(this.traverseLinkedCanvases(this.traverseCollectionItems(t3))))), { parent: i3 }, this.traversals.collection);
  }
  traverseGeoJson(t3, i3) {
    return this.traverseType(t3, { parent: i3 }, this.traversals.geoJson);
  }
  traverseNavPlace(t3) {
    return t3.navPlace && (t3.navPlace = this.traverseGeoJson(t3.navPlace, t3)), t3;
  }
  traverseManifestItems(t3) {
    return t3.items && (t3.items = t3.items.map((i3) => this.traverseCanvas(i3))), t3;
  }
  traverseManifestStructures(t3) {
    return t3.structures && (t3.structures = t3.structures.map((i3) => this.traverseRange(i3))), t3;
  }
  traverseManifest(t3, i3) {
    return this.traverseType(this._traverseManifest(t3), { parent: i3 }, this.traversals.manifest);
  }
  traverseCanvasItems(t3) {
    return t3.items = (t3.items || []).map((i3) => this.traverseAnnotationPage(i3, t3)), t3;
  }
  traverseInlineAnnotationPages(t3) {
    return typeof t3 == "string" || !t3 || t3.annotations && (t3.annotations = t3.annotations.map((i3) => this.traverseAnnotationPage(i3, t3))), t3;
  }
  traverseCanvas(t3, i3) {
    return this.traverseType(this._traverseCanvas(t3), { parent: i3 }, this.traversals.canvas);
  }
  traverseAnnotationPageItems(t3) {
    return t3.items && (t3.items = t3.items.map((i3) => this.traverseAnnotation(i3, t3))), t3;
  }
  traverseAnnotationPage(t3, i3) {
    return this.traverseType(this._traverseAnnotationPage(t3), { parent: i3 }, this.traversals.annotationPage);
  }
  traverseAnnotationBody(t3) {
    return Array.isArray(t3.body) ? t3.body = t3.body.map((i3) => this.traverseContentResource(i3, t3)) : t3.body && (t3.body = this.traverseContentResource(t3.body, t3)), t3;
  }
  traverseLinkedCanvases(t3) {
    return t3.placeholderCanvas && (t3.placeholderCanvas = this.traverseCanvas(t3.placeholderCanvas)), t3.accompanyingCanvas && (t3.accompanyingCanvas = this.traverseCanvas(t3.accompanyingCanvas)), t3;
  }
  traverseAnnotation(t3, i3) {
    return this.traverseType(this.traverseLinking(this.traverseAnnotationBody(this.traverseDescriptive(t3))), { parent: i3 }, this.traversals.annotation);
  }
  traverseContentResourceLinking(t3) {
    return typeof t3 == "string" || !t3 || t3 && t3.service && (t3.service = E5(t3.service || []).map((i3) => this.traverseService(i3, t3))), t3;
  }
  traverseContentResource(t3, i3) {
    return t3.type === "Choice" && (t3.items = t3.items.map((n3) => this.traverseContentResource(n3, t3))), w5(t3) ? this.traverseSpecificResource(t3, "ContentResource") : this.traverseType(this.traverseInlineAnnotationPages(this.traverseContentResourceLinking(t3)), { parent: i3 }, this.traversals.contentResource);
  }
  traverseSpecificResource(t3, i3, n3) {
    let s2 = t3.source;
    return typeof t3.source == "string" && (s2 = { id: t3.source, type: i3 || "unknown" }), this.traverseType({ ...t3, source: i3 === "Canvas" || s2.type === "Canvas" ? this.traverseType(s2, { parent: n3 }, this.traversals.canvas) : i3 === "ContentResource" ? this.traverseContentResource(s2, { parent: n3 }) : this.traverseUnknown(s2, { parent: n3, typeHint: i3 }) }, { parent: n3 }, this.traversals.specificResource);
  }
  traverseRangeRanges(t3) {
    return t3.items && (t3.items = t3.items.map((i3) => typeof i3 == "string" ? this.traverseCanvas({ id: i3, type: "Canvas" }, t3) : w5(i3) ? this.traverseSpecificResource(i3, "Canvas", t3) : i3.type === "Manifest" ? this.traverseManifest(i3, t3) : this.traverseRange(i3, t3))), t3;
  }
  traverseRange(t3, i3) {
    return this.traverseType(this._traverseRange(t3), { parent: i3 }, this.traversals.range);
  }
  traverseAgent(t3, i3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(t3)), { parent: i3 }, this.traversals.agent);
  }
  traverseType(t3, i3, n3) {
    return n3.reduce((s2, r3) => {
      const d5 = r3(s2, i3);
      return typeof d5 > "u" && !this.options.allowUndefinedReturn ? s2 : d5;
    }, t3);
  }
  traverseService(t3, i3) {
    const n3 = Object.assign({}, t3);
    return n3 && n3.service && (n3.service = E5(n3.service).map((s2) => this.traverseService(s2))), this.traverseType(n3, { parent: i3 }, this.traversals.service);
  }
  traverseUnknown(t3, { parent: i3, typeHint: n3 } = {}) {
    const s2 = Dt2(t3, n3);
    switch (s2) {
      case "Collection":
        return this.traverseCollection(t3, i3);
      case "Manifest":
        return this.traverseManifest(t3, i3);
      case "Canvas":
        return this.traverseCanvas(t3, i3);
      case "AnnotationPage":
        return this.traverseAnnotationPage(t3, i3);
      case "Annotation":
        return this.traverseAnnotation(t3, i3);
      case "ContentResource":
        return this.traverseContentResource(t3, i3);
      case "Range":
        return this.traverseRange(t3, i3);
      case "Service":
        return this.traverseService(t3, i3);
      case "Agent":
        return this.traverseAgent(t3, i3);
      default: {
        if (n3)
          return n3;
        throw new Error(`Unknown or unsupported resource type of ${s2}`);
      }
    }
  }
}
var Q5 = ["sc:Collection", "sc:Manifest", "sc:Canvas", "sc:AnnotationList", "oa:Annotation", "sc:Range", "sc:Layer", "sc:Sequence", "oa:Choice", "Service", "ContentResource"];
function kt(e3) {
  if (typeof e3 > "u" || e3 === null)
    throw new Error("Null or undefined is not a valid entity.");
  if (Array.isArray(e3))
    throw new Error("Array is not a valid entity");
  if (typeof e3 != "object")
    throw new Error(`${typeof e3} is not a valid entity`);
  if (typeof e3["@type"] == "string") {
    const t3 = Q5.indexOf(e3["@type"]);
    if (t3 !== -1)
      return Q5[t3];
  }
  if (e3.profile)
    return "Service";
  if (e3.format || e3["@type"])
    return "ContentResource";
  throw new Error("Resource type is not known");
}

class W6 {
  constructor(t3, i3 = {}) {
    A3(this, "traversals"), A3(this, "options"), this.traversals = { collection: [], manifest: [], canvas: [], annotationList: [], sequence: [], annotation: [], contentResource: [], choice: [], range: [], service: [], layer: [], ...t3 }, this.options = { convertPropsToArray: true, mergeMemberProperties: true, allowUndefinedReturn: false, ...i3 };
  }
  static all(t3) {
    return new W6({ collection: [t3], manifest: [t3], canvas: [t3], annotationList: [t3], sequence: [t3], annotation: [t3], contentResource: [t3], choice: [t3], range: [t3], service: [t3], layer: [t3] });
  }
  traverseCollection(t3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCollectionItems(t3))), this.traversals.collection);
  }
  traverseCollectionItems(t3) {
    if (this.options.mergeMemberProperties) {
      const i3 = [...(t3.manifests || []).map((n3) => typeof n3 == "string" ? { "@id": n3, "@type": "sc:Manifest" } : n3), ...(t3.collections || []).map((n3) => typeof n3 == "string" ? { "@id": n3, "@type": "sc:Collection" } : n3), ...t3.members || []];
      delete t3.collections, delete t3.manifests, t3.members = i3;
    }
    return t3.manifests && (t3.manifests = t3.manifests.map((i3) => this.traverseManifest(typeof i3 == "string" ? { "@id": i3, "@type": "sc:Manifest" } : i3))), t3.collections && (t3.collections = t3.collections.map((i3) => this.traverseCollection(typeof i3 == "string" ? { "@id": i3, "@type": "sc:Collection" } : i3))), t3.members && (t3.members = t3.members.map((i3) => typeof i3 == "string" ? i3 : this.traverseUnknown(i3))), t3;
  }
  traverseManifest(t3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseManifestItems(t3))), this.traversals.manifest);
  }
  traverseManifestItems(t3) {
    return t3.sequences && (t3.sequences = t3.sequences.map((i3) => this.traverseSequence(i3))), t3.structures && (t3.structures = t3.structures.map((i3) => this.traverseRange(i3))), t3;
  }
  traverseSequence(t3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseSequenceItems(t3))), this.traversals.sequence);
  }
  traverseSequenceItems(t3) {
    return t3.canvases && (t3.canvases = t3.canvases.map((i3) => this.traverseCanvas(i3))), t3;
  }
  traverseCanvas(t3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCanvasItems(t3))), this.traversals.canvas);
  }
  traverseCanvasItems(t3) {
    return t3.images && (t3.images = t3.images.map((i3) => this.traverseAnnotation(i3))), t3.otherContent && (t3.otherContent = t3.otherContent.map((i3) => this.traverseAnnotationList(i3))), t3;
  }
  traverseRange(t3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseRangeItems(t3))), this.traversals.range);
  }
  traverseRangeItems(t3) {
    if (this.options.mergeMemberProperties) {
      const i3 = [...(t3.ranges || []).map((n3) => typeof n3 == "string" ? { "@id": n3, "@type": "sc:Range" } : n3), ...(t3.canvases || []).map((n3) => typeof n3 == "string" ? { "@id": n3, "@type": "sc:Canvas" } : n3), ...t3.members || []];
      delete t3.ranges, delete t3.canvases, t3.members = i3.length ? i3.map((n3) => this.traverseUnknown(n3)) : undefined;
    }
    return t3;
  }
  traverseAnnotationList(t3) {
    const i3 = typeof t3 == "string" ? { "@id": t3, "@type": "sc:AnnotationList" } : t3;
    return this.traverseType(this.traverseDescriptive(this.traverseAnnotationListItems(i3)), this.traversals.annotationList);
  }
  traverseAnnotationListItems(t3) {
    return t3.resources && (t3.resources = t3.resources.map((i3) => this.traverseAnnotation(i3))), t3;
  }
  traverseAnnotation(t3) {
    return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseAnnotationItems(t3))), this.traversals.annotation);
  }
  traverseAnnotationItems(t3) {
    return t3.resource && (Array.isArray(t3.resource) ? t3.resource = t3.resource.map((i3) => this.traverseContentResource(i3)) : t3.resource = this.traverseContentResource(t3.resource)), t3.on, t3;
  }
  traverseLayer(t3) {
    return this.traverseType(this.traverseLinking(this.traverseLayerItems(t3)), this.traversals.layer);
  }
  traverseLayerItems(t3) {
    return t3.otherContent && (t3.otherContent = t3.otherContent.map((i3) => this.traverseAnnotationList(i3))), t3;
  }
  traverseChoice(t3) {
    return this.traverseType(this.traverseChoiceItems(t3), this.traversals.choice);
  }
  traverseChoiceItems(t3) {
    return t3.default && t3.default !== "rdf:nil" && (t3.default = this.traverseContentResource(t3.default)), t3.item && t3.item !== "rdf:nil" && (t3.item = t3.item.map((i3) => this.traverseContentResource(i3))), t3;
  }
  traverseService(t3) {
    return this.traverseType(this.traverseLinking(t3), this.traversals.service);
  }
  traverseContentResource(t3) {
    return t3["@type"] === "oa:Choice" ? this.traverseChoice(t3) : this.traverseType(this.traverseDescriptive(this.traverseLinking(t3)), this.traversals.contentResource);
  }
  traverseUnknown(t3) {
    if (!t3["@type"] || typeof t3 == "string")
      return t3;
    switch (kt(t3)) {
      case "sc:Collection":
        return this.traverseCollection(t3);
      case "sc:Manifest":
        return this.traverseManifest(t3);
      case "sc:Canvas":
        return this.traverseCanvas(t3);
      case "sc:Sequence":
        return this.traverseSequence(t3);
      case "sc:Range":
        return this.traverseRange(t3);
      case "oa:Annotation":
        return this.traverseAnnotation(t3);
      case "sc:AnnotationList":
        return this.traverseAnnotationList(t3);
      case "sc:Layer":
        return this.traverseLayer(t3);
      case "Service":
        return this.traverseService(t3);
      case "oa:Choice":
        return this.traverseChoice(t3);
      case "ContentResource":
        return this.traverseContentResource(t3);
    }
    return t3.profile ? this.traverseService(t3) : t3;
  }
  traverseImageResource(t3) {
    const i3 = Array.isArray(t3), n3 = Array.isArray(t3) ? t3 : [t3], s2 = [];
    for (const r3 of n3)
      typeof r3 == "string" ? s2.push(this.traverseContentResource({ "@id": r3, "@type": "dctypes:Image" })) : s2.push(this.traverseContentResource(r3));
    return !i3 && !this.options.convertPropsToArray ? s2[0] : s2;
  }
  traverseDescriptive(t3) {
    return t3.thumbnail && (t3.thumbnail = this.traverseImageResource(t3.thumbnail)), t3.logo && (t3.logo = this.traverseImageResource(t3.logo)), t3;
  }
  traverseOneOrMoreServices(t3) {
    const i3 = Array.isArray(t3), n3 = Array.isArray(t3) ? t3 : [t3], s2 = [];
    for (const r3 of n3)
      s2.push(this.traverseService(r3));
    return !i3 && !this.options.convertPropsToArray ? s2[0] : s2;
  }
  traverseLinking(t3) {
    return t3.related && (t3.related = this.traverseOneOrManyType(t3.related, this.traversals.contentResource)), t3.rendering && (t3.rendering = this.traverseOneOrManyType(t3.rendering, this.traversals.contentResource)), t3.service && (t3.service = this.traverseOneOrMoreServices(t3.service)), t3.seeAlso && (t3.seeAlso = this.traverseOneOrManyType(t3.seeAlso, this.traversals.contentResource)), t3.within && (typeof t3.within == "string" || (t3.within = this.traverseOneOrManyType(t3.within, this.traversals.contentResource))), t3.startCanvas && (typeof t3.startCanvas == "string" ? t3.startCanvas = this.traverseType({ "@id": t3.startCanvas, "@type": "sc:Canvas" }, this.traversals.canvas) : t3.startCanvas && this.traverseType(t3.startCanvas, this.traversals.canvas)), t3.contentLayer && (typeof t3.contentLayer == "string" ? t3.contentLayer = this.traverseLayer({ "@id": t3.contentLayer, "@type": "sc:Layer" }) : t3.contentLayer = this.traverseLayer(t3.contentLayer)), t3;
  }
  traverseOneOrManyType(t3, i3) {
    if (!Array.isArray(t3))
      if (this.options.convertPropsToArray)
        t3 = [t3];
      else
        return this.traverseType(t3, i3);
    return t3.map((n3) => this.traverseType(n3, i3));
  }
  traverseType(t3, i3) {
    return i3.reduce((n3, s2) => {
      const r3 = s2(n3);
      return typeof r3 > "u" && !this.options.allowUndefinedReturn ? n3 : r3;
    }, t3);
  }
}
var xt2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
var Z6 = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
var J4 = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
var Nt2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
var tt3 = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
var et2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
var jt2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
var it3 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
var nt3 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
var Gt2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
var st3 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
var rt3 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
var Bt = "http://iiif.io/api/image/1/level0.json";
var Vt = "http://iiif.io/api/image/1/profiles/level0.json";
var at3 = "http://iiif.io/api/image/1/level1.json";
var ot3 = "http://iiif.io/api/image/1/profiles/level1.json";
var ht3 = "http://iiif.io/api/image/1/level2.json";
var dt3 = "http://iiif.io/api/image/1/profiles/level2.json";
var $t2 = "http://iiif.io/api/image/2/level0.json";
var Ut2 = "http://iiif.io/api/image/2/profiles/level0.json";
var ct3 = "http://iiif.io/api/image/2/level1.json";
var ft3 = "http://iiif.io/api/image/2/profiles/level1.json";
var pt3 = "http://iiif.io/api/image/2/level2.json";
var lt3 = "http://iiif.io/api/image/2/profiles/level2.json";
var qt2 = "level0";
var vt2 = "level1";
var ut3 = "level2";
var Wt = "http://iiif.io/api/image/2/level0";
var yt3 = "http://iiif.io/api/image/2/level1";
var mt2 = "http://iiif.io/api/image/2/level2";
var Ht2 = [yt3, mt2, Z6, J4, tt3, et2, it3, nt3, st3, rt3, at3, ot3, ht3, dt3, ct3, ft3, pt3, lt3, vt2, ut3];
var Kt2 = [Wt, yt3, mt2, xt2, Z6, J4, Nt2, tt3, et2, jt2, it3, nt3, Gt2, st3, rt3, Bt, Vt, at3, ot3, ht3, dt3, $t2, Ut2, ct3, ft3, pt3, lt3, qt2, vt2, ut3];
function u4(e3) {
  for (const t3 in e3)
    (typeof e3[t3] > "u" || e3[t3] === null) && delete e3[t3];
  return e3;
}
var D6 = { attributionLabel: "Attribution", lang: "none", providerId: "http://example.org/provider", providerName: "Unknown" };
function zt(e3) {
  if (typeof e3 == "string")
    return [e3];
  if (!e3)
    return [];
  const t3 = Array.isArray(e3) ? e3 : [e3], i3 = [];
  for (const n3 of t3) {
    if (typeof n3 == "string") {
      i3.push(n3);
      continue;
    }
    i3.push({ "@language": n3["@language"] || n3.language, "@value": n3["@value"] || n3.value });
  }
  return i3;
}
function C3(e3, t3 = "none") {
  if (!e3)
    return {};
  const i3 = zt(e3), n3 = {};
  for (const s2 of i3) {
    if (typeof s2 == "string") {
      n3[t3] = n3[t3] ? n3[t3] : [], n3[t3].push(s2 || "");
      continue;
    }
    if (!s2["@language"]) {
      n3[t3] = n3[t3] ? n3[t3] : [], n3[t3].push(s2["@value"] || "");
      continue;
    }
    const r3 = s2["@language"];
    n3[r3] = n3[r3] ? n3[r3] : [], n3[r3].push(s2["@value"] || "");
  }
  return n3;
}
function gt2(e3) {
  if (Array.isArray(e3))
    return gt2(e3.find((t3) => typeof t3 == "string"));
  if (Kt2.indexOf(e3) !== -1)
    return "level2";
  if (Ht2.indexOf(e3) !== -1)
    return "level1";
  if (typeof e3 == "string")
    return e3;
}
function Yt2(e3) {
  const t3 = Array.isArray(e3) ? e3 : [e3];
  for (const i3 of t3)
    switch (i3) {
      case "http://iiif.io/api/image/2/context.json":
      case "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2":
        return "ImageService2";
      case "http://iiif.io/api/image/1/context.json":
      case "http://library.stanford.edu/iiif/image-api/1.1/context.json":
        return "ImageService1";
      case "http://iiif.io/api/annex/openannotation/context.json":
        return "ImageApiSelector";
    }
}
function Xt2(e3) {
  switch (e3) {
    case "http://iiif.io/api/image/2/level0.json":
    case "http://iiif.io/api/image/2/level1.json":
    case "http://iiif.io/api/image/2/level2.json":
      return "ImageService2";
    case "http://iiif.io/api/auth/1/kiosk":
    case "http://iiif.io/api/auth/1/login":
    case "http://iiif.io/api/auth/1/clickthrough":
    case "http://iiif.io/api/auth/1/external":
    case "http://iiif.io/api/auth/0/kiosk":
    case "http://iiif.io/api/auth/0/login":
    case "http://iiif.io/api/auth/0/clickthrough":
    case "http://iiif.io/api/auth/0/external":
      return "AuthCookieService1";
    case "http://iiif.io/api/auth/1/token":
    case "http://iiif.io/api/auth/0/token":
      return "AuthTokenService1";
    case "http://iiif.io/api/auth/1/logout":
    case "http://iiif.io/api/auth/0/logout":
      return "AuthLogoutService1";
    case "http://iiif.io/api/search/1/search":
    case "http://iiif.io/api/search/0/search":
      return "SearchService1";
    case "http://iiif.io/api/search/1/autocomplete":
    case "http://iiif.io/api/search/0/autocomplete":
      return "AutoCompleteService1";
  }
}
function At2(e3) {
  for (const t3 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
    if (e3.startsWith(`${t3}:`))
      return e3.slice(t3.length + 1);
  return e3;
}
var Qt2 = ["Collection", "Manifest", "Annotation", "AnnotationPage", "Range", "Service"];
function k7(e3) {
  const t3 = e3["@id"] || e3.id;
  let i3 = e3["@type"] || e3.type;
  const n3 = e3.profile || undefined, s2 = e3["@context"] || undefined;
  if (n3) {
    const r3 = Xt2(n3);
    if (r3)
      return r3;
  }
  if (s2) {
    const r3 = Yt2(s2);
    if (r3)
      return r3;
  }
  if (i3) {
    if (Array.isArray(i3)) {
      if (i3.indexOf("oa:CssStylesheet") !== -1)
        return "CssStylesheet";
      if (i3.indexOf("cnt:ContentAsText") !== -1)
        return "TextualBody";
      i3 = i3[0];
    }
    for (const r3 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
      if (i3.startsWith(`${r3}:`)) {
        i3 = i3.slice(r3.length + 1);
        break;
      }
    switch (i3) {
      case "Layer":
        return "AnnotationCollection";
      case "AnnotationList":
        return "AnnotationPage";
      case "cnt:ContentAsText":
        return "TextualBody";
    }
  }
  if (i3 && Qt2.indexOf(i3) !== -1)
    return i3;
  if (e3.format) {
    if (e3.format.startsWith("image/"))
      return "Image";
    if (e3.format.startsWith("text/") || e3.format === "application/pdf")
      return "Text";
    if (e3.format.startsWith("application/"))
      return "Dataset";
  }
  return t3 && (t3.endsWith(".jpg") || t3.endsWith(".png") || t3.endsWith(".jpeg")) ? "Image" : i3 || "unknown";
}
var Zt2 = /http(s)?:\/\/(creativecommons.org|rightsstatements.org)[^"'\\<\n]+/gm;
function Jt2(e3) {
  const t3 = e3.match(Zt2);
  return t3 ? t3[0] : e3;
}
function te5(e3, t3 = "Rights/License", i3 = "none") {
  let n3 = null;
  const s2 = [], r3 = Array.isArray(e3) ? e3 : [e3];
  for (const d5 of r3) {
    const o4 = d5 ? Jt2(d5) : undefined;
    if (o4 && (o4.indexOf("creativecommons.org") !== -1 || o4.indexOf("rightsstatements.org") !== -1)) {
      o4.startsWith("https://") ? n3 = `http://${o4.slice(8)}` : n3 = o4;
      continue;
    }
    o4 && s2.push({ label: { [i3]: [t3] }, value: { [i3]: [o4] } });
  }
  return [n3, s2];
}
var ee5 = ["http://iiif.io/api/presentation/2/context.json", "http://iiif.io/api/image/2/context.json", "http://iiif.io/api/image/1/context.json", "http://library.stanford.edu/iiif/image-api/1.1/context.json", "http://iiif.io/api/search/1/context.json", "http://iiif.io/api/search/0/context.json", "http://iiif.io/api/auth/1/context.json", "http://iiif.io/api/auth/0/context.json", "http://iiif.io/api/annex/openannotation/context.json"];
function ie6(e3) {
  if (e3) {
    const t3 = Array.isArray(e3) ? e3 : [e3], i3 = [];
    for (const n3 of t3)
      n3 === "http://iiif.io/api/presentation/2/context.json" && i3.push("http://iiif.io/api/presentation/3/context.json"), ee5.indexOf(n3) === -1 && i3.push(n3);
    if (t3.length)
      return i3.length === 1 ? i3[0] : i3;
  }
}
function ne6(e3) {
  return e3 ? e3.map((t3) => ({ label: C3(t3.label), value: C3(t3.value) })) : [];
}
var It2 = 0;
function Ct(e3, t3) {
  const i3 = encodeURI(e3.id || e3["@id"] || "").trim();
  return i3 && t3 ? `${i3}/${t3}` : i3 || (It2++, `http://example.org/${e3["@type"]}${t3 ? `/${t3}` : ""}/${It2}`);
}
function y5(e3) {
  const t3 = [...e3.behavior || []];
  e3.viewingHint && t3.push(e3.viewingHint);
  let i3;
  return Array.isArray(e3.motivation) ? i3 = e3.motivation.map(At2) : e3.motivation && (i3 = At2(e3.motivation)), { "@context": e3["@context"] ? ie6(e3["@context"]) : undefined, id: (e3["@id"] || Ct(e3)).trim(), type: k7(e3), behavior: t3.length ? t3 : undefined, height: e3.height ? e3.height : undefined, width: e3.width ? e3.width : undefined, motivation: i3, viewingDirection: e3.viewingDirection, profile: e3.profile, format: e3.format ? e3.format : undefined, duration: undefined, timeMode: undefined };
}
function m3(e3) {
  const [t3, i3] = te5(e3.license), n3 = [...e3.metadata ? ne6(e3.metadata) : [], ...i3];
  return { rights: t3, metadata: n3.length ? n3 : undefined, label: e3.label ? C3(e3.label) : undefined, requiredStatement: e3.attribution ? { label: C3(D6.attributionLabel), value: C3(e3.attribution) } : undefined, navDate: e3.navDate, summary: e3.description ? C3(e3.description) : undefined, thumbnail: se6(e3.thumbnail) };
}
function se6(e3) {
  return e3 && (Array.isArray(e3) ? e3 : [e3]).map((i3) => typeof i3 == "string" ? { id: i3, type: "Image" } : (i3.type === "unknown" && (i3.type = "Image"), i3));
}
function re6(e3) {
  if (!e3.within)
    return;
  const t3 = Array.isArray(e3.within) ? e3.within : [e3.within], i3 = [];
  for (const n3 of t3)
    if (typeof n3 == "string") {
      if (n3)
        switch (e3["@type"]) {
          case "sc:Manifest":
            i3.push({ id: n3, type: "Collection" });
            break;
        }
    } else
      n3["@id"] && i3.push({ id: n3["@id"], type: k7(n3) });
  return i3.length ? i3 : undefined;
}
function I5(e3) {
  const t3 = e3.related ? Array.isArray(e3.related) ? e3.related : [e3.related] : [], i3 = e3.contentLayer;
  return { provider: e3.logo || t3.length ? [{ id: D6.providerId, type: "Agent", homepage: t3.length ? [t3[0]] : undefined, logo: e3.logo ? Array.isArray(e3.logo) ? e3.logo : [e3.logo] : undefined, label: C3(D6.providerName) }] : undefined, partOf: re6(e3), rendering: e3.rendering, seeAlso: e3.seeAlso, start: e3.startCanvas, service: e3.service ? E5(e3.service) : undefined, supplementary: i3 ? [i3] : undefined };
}
function ae6(e3) {
  return { chars: e3.chars, format: e3.format ? e3.format : undefined, language: e3.language };
}
function oe6(e3) {
  return u4({ ...y5(e3), ...m3(e3), ...I5(e3), items: e3.members });
}
function he5(e3) {
  const t3 = [], i3 = [];
  let n3;
  for (const r3 of e3.sequences || [])
    r3.canvases.length && t3.push(...r3.canvases), r3.behavior && i3.push(...r3.behavior), r3.startCanvas && (n3 = r3.startCanvas);
  const s2 = y5(e3);
  return i3.length && (s2.behavior ? s2.behavior.push(...i3) : s2.behavior = i3), u4({ ...s2, ...m3(e3), ...I5(e3), start: n3, items: t3, structures: e3.structures });
}
function de5(e3) {
  return u4({ ...y5(e3), ...m3(e3), ...I5(e3), annotations: e3.otherContent && e3.otherContent.length ? e3.otherContent : undefined, items: e3.images && e3.images.length ? [{ id: Ct(e3, "annotation-page"), type: "AnnotationPage", items: e3.images }] : undefined });
}
function ce4(e3) {
  return u4({ ...y5(e3), ...m3(e3), ...I5(e3), items: e3.resources && e3.resources.length ? e3.resources : undefined });
}
function fe5(e3) {
  return !e3.canvases || e3.canvases.length === 0 ? { canvases: [], behavior: [] } : { canvases: e3.canvases, behavior: e3.viewingHint ? [e3.viewingHint] : [], startCanvas: e3.startCanvas };
}
function pe5(e3) {
  function t3(i3) {
    if (Array.isArray(i3)) {
      if (i3.length > 1)
        return { type: "List", items: i3.map(t3) };
      i3 = i3[0];
    }
    if (typeof i3 == "string")
      return encodeURI(i3).trim();
    if ("@type" in i3) {
      let n3;
      if (typeof i3.full == "string")
        n3 = i3.full;
      else if (i3.full["@type"] === "dctypes:Image")
        n3 = { id: i3.full["@id"], type: "Image" };
      else if (i3.full["@type"] === "sc:Canvas")
        n3 = { id: i3.full["@id"], type: "Canvas" };
      else
        throw new Error(`Unsupported source type on annotation: ${i3.full["@type"]}`);
      return { type: "SpecificResource", source: n3, selector: N6(i3.selector) };
    } else
      return encodeURI(i3["@id"]).trim();
  }
  return u4({ ...y5(e3), ...m3(e3), ...I5(e3), target: t3(e3.on), body: Array.isArray(e3.resource) ? e3.resource.map(x6) : x6(e3.resource) });
}
function x6(e3) {
  const t3 = e3;
  return u4({ ...y5(t3), ...m3(t3), ...I5(t3), ...ae6(t3) });
}
function le4(e3) {
  const t3 = [];
  return e3.default && e3.default !== "rdf:nil" && t3.push(e3.default), e3.item && e3.item !== "rdf:nil" && t3.push(...e3.item), { ...y5(e3), ...m3(e3), items: t3 };
}
function ve4(e3) {
  return u4({ ...y5(e3), ...m3(e3), ...I5(e3), items: e3.members });
}
function ue5(e3) {
  const { "@id": t3, "@type": i3, "@context": n3, profile: s2, ...r3 } = e3, d5 = {};
  return t3 && (d5["@id"] = t3), d5["@type"] = k7(e3), d5["@type"] === "unknown" && (n3 && n3.length && (d5["@context"] = n3), d5["@type"] = "Service"), s2 && (d5.profile = gt2(s2)), u4({ ...d5, ...r3 });
}
function ye5(e3) {
  return u4({ ...y5(e3), ...m3(e3), ...I5(e3) });
}
var me5 = new W6({ collection: [oe6], manifest: [he5], canvas: [de5], annotationList: [ce4], sequence: [fe5], annotation: [pe5], contentResource: [x6], choice: [le4], range: [ve4], service: [ue5], layer: [ye5] });
function ge5(e3) {
  return e3 && e3["@context"] && (e3["@context"] === "http://iiif.io/api/presentation/2/context.json" || e3["@context"].indexOf("http://iiif.io/api/presentation/2/context.json") !== -1 || e3["@context"] === "http://www.shared-canvas.org/ns/context.json") || e3["@context"] === "http://iiif.io/api/image/2/context.json" ? me5.traverseUnknown(e3) : e3;
}
function N6(e3) {
  if ((Array.isArray(e3["@type"]) && e3["@type"].includes("oa:SvgSelector") || e3["@type"] == "oa:SvgSelector") && (("chars" in e3) || ("value" in e3)))
    return { type: "SvgSelector", value: "chars" in e3 ? e3.chars : e3.value };
  if (e3["@type"] === "oa:FragmentSelector")
    return { type: "FragmentSelector", value: e3.value };
  if (e3["@type"] === "oa:Choice")
    return [N6(e3.default), ...(Array.isArray(e3.item) ? e3.item : [e3.item]).map(N6)];
  if (e3["@type"] == "iiif:ImageApiSelector")
    return { type: "ImageApiSelector", region: "region" in e3 ? e3.region : undefined, rotation: "rotation" in e3 ? e3.rotation : undefined };
  throw new Error(`Unsupported selector type: ${e3["@type"]}`);
}
function j4(e3, t3 = {}) {
  if (Array.isArray(e3))
    return j4(e3[0]);
  if (typeof e3 == "string") {
    const [i3, n3] = e3.split("#");
    return n3 ? { type: "SpecificResource", source: { id: i3, type: t3.typeHint || "Unknown" }, selector: { type: "FragmentSelector", value: n3 } } : { type: "SpecificResource", source: { id: i3, type: t3.typeMap && t3.typeMap[i3] || t3.typeHint || "Unknown" } };
  }
  if (e3.type === "Choice" || e3.type === "List" || e3.type === "Composite" || e3.type === "Independents")
    return j4(e3.items[0]);
  if (e3.type === "SpecificResource")
    return e3.source.type === "Canvas" && e3.source.partOf && typeof e3.source.partOf == "string" && (e3.source.partOf = [{ id: e3.source.partOf, type: "Manifest" }]), e3.selector ? { type: "SpecificResource", source: e3.source, selector: e3.selector } : { type: "SpecificResource", source: e3.source };
  if (e3.id) {
    e3.type === "Canvas" && e3.partOf && typeof e3.partOf == "string" && (e3.partOf = [{ id: e3.partOf, type: "Manifest" }]);
    const [i3, n3] = e3.id.split("#");
    return n3 ? { type: "SpecificResource", source: { ...e3, id: i3 }, selector: { type: "FragmentSelector", value: n3 } } : { type: "SpecificResource", source: { ...e3, id: i3 } };
  }
  return { type: "SpecificResource", source: e3 };
}
function Ae3() {
  return { Collection: {}, Manifest: {}, Canvas: {}, AnnotationPage: {}, AnnotationCollection: {}, Annotation: {}, ContentResource: {}, Range: {}, Service: {}, Selector: {}, Agent: {} };
}
function Et2(e3, t3) {
  if (typeof e3 == "string")
    return { id: e3, type: t3 };
  if (!e3.id)
    throw new Error(`Invalid resource does not have an ID (${JSON.stringify(e3)}, ${t3})`);
  return e3;
}
function Ie2(e3, t3) {
  return (i3, n3) => {
    const s2 = e3[i3] ? e3[i3] : {};
    return (r3, d5) => {
      const o4 = Et2(r3, n3 || i3);
      return o4 && o4.id && i3 ? (s2[o4.id] = s2[o4.id] ? B7(s2[o4.id], o4, { parent: d5.parent, isTopLevel: t3.id === o4.id }) : B7({ id: o4.id, type: o4.type }, o4, { parent: d5.parent, isTopLevel: t3.id === o4.id }), { id: o4.id, type: i3 === "ContentResource" ? i3 : o4.type }) : o4;
    };
  };
}
function G6(e3, t3, i3) {
  if (!t3)
    return e3;
  if (Array.isArray(e3)) {
    if (!Array.isArray(t3))
      throw new Error("Cannot merge array with non-array");
    const n3 = [...e3];
    for (const s2 of t3)
      if (s2["@id"] && !s2.id && (s2.id = s2["@id"]), s2["@type"] && !s2.type && (s2.type = s2["@type"]), s2 != null)
        if (Array.isArray(s2))
          n3.push(s2);
        else if (typeof s2 == "object" && s2.id && s2.type) {
          const r3 = n3.findIndex((d5) => d5.id === s2.id && d5.type === s2.type);
          r3 >= 0 && (n3[r3] = G6(n3[r3], s2));
        } else
          e3.indexOf(s2) === -1 && n3.push(s2);
    return n3;
  } else if (typeof e3 == "object") {
    if (Array.isArray(t3) || typeof t3 != "object")
      throw new Error("Cannot merge object with non-object");
    const n3 = { ...e3 }, s2 = [], r3 = [], d5 = Object.keys(e3).filter((h5) => h5 !== v6 && h5 !== "id" && h5 !== "type"), o4 = {}, l5 = {};
    for (const [h5, c3] of Object.entries(t3)) {
      if (h5 === v6 || h5 === "id" || h5 === "type")
        continue;
      const g4 = n3[h5];
      g4 === c3 ? r3.push(h5) : g4 === a2 || !g4 ? (s2.push(h5), n3[h5] = c3) : (g4 && c3 && (o4[h5] = g4, l5[h5] = c3), n3[h5] = G6(g4, c3), n3[h5] === o4[h5] && (r3.push(h5), delete o4[h5]));
    }
    if (i3 && (i3.parent && i3.parent.id || i3.isTopLevel)) {
      const h5 = [], c3 = {};
      if (i3.parent ? c3[K6] = i3.parent.id : i3.isTopLevel && (c3[K6] = e3.id), n3[v6] && n3[v6].length) {
        const g4 = !(n3[v6] || []).find((R5) => R5["@explicit"]), H4 = s2.length > 0 || r3.length !== d5.length;
        if (g4 && H4)
          for (const R5 of n3[v6]) {
            const f5 = { ...R5 }, St2 = Object.keys(o4);
            if (f5) {
              f5["@explicit"] = true;
              for (const b6 of d5)
                b6 !== v6 && (f5[b6] = M4);
              for (const b6 of St2)
                f5[b6] = o4[b6];
            }
            h5.push(f5);
          }
        else
          h5.push(...n3[v6]);
        if (H4) {
          const R5 = Object.keys(l5);
          c3["@explicit"] = true;
          for (const f5 of s2)
            c3[f5] = M4;
          for (const f5 of r3)
            c3[f5] = M4;
          for (const f5 of R5)
            c3[f5] = l5[f5];
        }
      }
      c3.id = n3.id, c3.type = n3.type, h5.push(c3), n3[v6] = h5;
    }
    return n3;
  } else if (e3)
    return e3;
  return t3;
}
function B7(e3, t3, i3) {
  if (typeof e3 == "string")
    return e3;
  if (t3.id !== e3.id || t3.type !== e3.type) {
    if (t3.type === "ImageService3")
      return t3;
    if (e3.type === "ImageService3")
      return e3;
    throw new Error(`Can only merge entities with identical identifiers and type! ${t3.type}(${t3.id}) => ${e3.type}(${e3.id})`);
  }
  return G6({ ...e3 }, t3, i3);
}
function Ce5(e3) {
  return (t3, i3) => (n3) => {
    const { id: s2, type: r3 } = Et2(n3, i3 || t3);
    if (typeof s2 > "u")
      throw new Error("Found invalid entity without an ID.");
    return t3 === "ContentResource" || t3 === "Service" ? e3[s2] = t3 : e3[s2] = r3, n3;
  };
}
function Ee3(e3) {
  const t3 = Object.assign({}, e3);
  if (t3["@id"] && (t3.id = t3["@id"]), t3["@type"] && (t3.type = t3["@type"]), t3.service) {
    const i3 = [];
    t3.service = Array.isArray(t3.service) ? t3.service : [t3.service];
    for (const n3 of t3.service)
      i3.push({ id: n3["@id"] || n3.id, type: n3["@type"] || n3.type });
    t3.service = i3;
  }
  return Object.assign({}, Ft, t3);
}
function _e(e3) {
  return (t3) => {
    e3.Service = e3.Service ? e3.Service : {};
    const i3 = t3.id || t3["@id"], n3 = Ee3(t3);
    return n3 && n3.id && (e3.Service[n3.id] ? e3.Service[i3] = B7(e3.Service[i3], n3) : e3.Service[i3] = n3), t3;
  };
}
function Re4(e3) {
  const t3 = JSON.stringify(e3);
  let i3 = 5381, n3 = t3.length;
  for (;n3; )
    i3 = i3 * 33 ^ t3.charCodeAt(--n3);
  const r3 = (i3 >>> 0).toString(16);
  return r3.length % 2 ? "0" + r3 : r3;
}
function V5(e3) {
  return (t3) => typeof t3 == "string" ? { id: t3, type: e3 } : t3.id ? t3.type ? t3 : { type: e3, ...t3 } : { id: `vault://${Re4(t3)}`, type: e3, ...t3 };
}
function _7(e3) {
  return (t3) => ({ ...e3, ...t3 });
}
function S4(e3) {
  return Array.isArray(e3) ? e3 : [e3];
}
function be(e3) {
  return e3.body && (e3.body = S4(e3.body)), e3.seeAlso && (e3.seeAlso = S4(e3.seeAlso)), e3.audience && (e3.audience = S4(e3.audience)), e3.accessibility && (e3.accessibility = S4(e3.accessibility)), e3.motivation && (e3.motivation = S4(e3.motivation)), e3;
}
function _t2(e3, { typeHint: t3, partOfTypeHint: i3 } = {}) {
  if (typeof e3 == "string" && (e3 = { id: e3, type: t3 || "unknown" }), w5(e3))
    return typeof e3.source == "string" && (e3.source = { id: e3.source, type: t3 || "unknown" }), e3.source.type === "Canvas" && e3.source.partOf && typeof e3.source.partOf == "string" && (e3.source.partOf = [{ id: e3.source.partOf, type: i3 || "Manifest" }]), e3;
  let n3;
  if ((e3.id || "").indexOf("#") !== -1) {
    const [s2, r3] = (e3.id || "").split("#");
    e3.id = s2, r3 && (n3 = { type: "FragmentSelector", value: r3 });
  }
  return { type: "SpecificResource", source: e3, selector: n3 };
}
function Se5(e3) {
  const t3 = Object.assign({}, e3);
  return e3 && e3.items && (t3.items = e3.items.map((i3) => typeof i3 == "string" || i3.type === "Canvas" ? _t2(i3) : i3)), t3;
}
function we3(e3) {
  const t3 = Object.assign({}, e3);
  return t3.start ? (t3.start = _t2(t3.start, { typeHint: "Canvas" }), t3) : e3;
}
function Me3(e3) {
  const t3 = Object.assign({}, e3);
  return t3.target ? (t3.target = j4(t3.target, { typeHint: "Canvas" }), t3) : e3;
}
function Te(e3) {
  return e3;
}
function $4(e3) {
  return typeof e3.items > "u" && (e3[Lt] = true), e3;
}
function Le3(e3) {
  const t3 = ge5(e3), i3 = Ae3(), n3 = {}, s2 = Ie2(i3, t3), r3 = Ce5(n3), o4 = new q5({ collection: [$4, _7(P6), r3("Collection"), s2("Collection")], manifest: [$4, _7(F6), we3, r3("Manifest"), s2("Manifest")], canvas: [_7(Y5), r3("Canvas"), s2("Canvas")], annotationPage: [$4, V5("AnnotationPage"), _7(z4), r3("AnnotationPage"), s2("AnnotationPage")], annotation: [V5("Annotation"), be, Me3, r3("Annotation"), s2("Annotation")], contentResource: [V5("ContentResource"), r3("ContentResource"), s2("ContentResource")], range: [_7(Ot2), Se5, r3("Range", "Canvas"), s2("Range", "Canvas")], agent: [_7(Pt2), r3("Agent"), s2("Agent")], specificResource: [Te], service: [_e(i3)] }).traverseUnknown(t3);
  return { entities: i3, resource: o4, mapping: n3 };
}
var p6 = function(e3) {
  return function() {
    const t3 = { type: e3, getType: () => e3, toString: () => e3 };
    return (i3, n3) => ({ ...t3, ...i3 !== undefined && { payload: i3 }, ...n3 !== undefined && { meta: n3 } });
  };
};
var Oe2 = "@iiif/IMPORT_ENTITIES";
var Pe3 = "@iiif/MODIFY_ENTITY_FIELD";
var Fe4 = "@iiif/REORDER_ENTITY_FIELD";
var De3 = "@iiif/ADD_REFERENCE";
var ke3 = "@iiif/UPDATE_REFERENCE";
var xe4 = "@iiif/REMOVE_REFERENCE";
var Ne2 = "@iiif/ADD_METADATA";
var je3 = "@iiif/REMOVE_METADATA";
var Ge3 = "@iiif/UPDATE_METADATA";
var Be3 = "@iiif/REORDER_METADATA";
var Ve3 = p6(Oe2)();
var $e3 = p6(Pe3)();
var Ue3 = p6(Fe4)();
var qe2 = p6(De3)();
var We3 = p6(xe4)();
var He2 = p6(ke3)();
var Ke4 = p6(Ne2)();
var ze3 = p6(Ge3)();
var Ye2 = p6(je3)();
var Xe2 = p6(Be3)();
var Rt = { importEntities: Ve3, modifyEntityField: $e3, reorderEntityField: Ue3, addReference: qe2, removeReference: We3, updateReference: He2, addMetadata: Ke4, removeMetadata: Ye2, updateMetadata: ze3, reorderMetadata: Xe2 };
var Qe2 = "@iiif/ADD_MAPPING";
var Ze2 = "@iiif/ADD_MAPPINGS";
var Je2 = p6(Qe2)();
var ti3 = p6(Ze2)();
var ei3 = { addMapping: Je2, addMappings: ti3 };

class L7 {
  builder;
  entity;
  modified = new Set;
  newInstances = [];
  editedInstances = [];
  embeddedInstances = [];
  get id() {
    return this.entity.id;
  }
  reset(t3) {
    this.entity = t3, this.modified = new Set, this.embeddedInstances = [], this.editedInstances = [], this.newInstances = [];
  }
  importRawJson(t3) {
    const { entities: i3, resource: n3 } = Le3(t3), s2 = Object.keys(i3);
    for (const r3 of s2) {
      const d5 = i3[r3], o4 = Object.keys(d5);
      for (const l5 of o4)
        this.embeddedInstances.push(d5[l5]);
    }
    return [{ id: n3.id, type: n3.type }, n3];
  }
  dispose() {
    for (const t3 of this.newInstances)
      t3.dispose();
    for (const t3 of this.editedInstances)
      t3.dispose();
    this.builder = null, this.entity = null, this.modified = null, this.newInstances = null, this.editedInstances = null;
  }
  constructor(t3, i3) {
    this.builder = t3, this.entity = { ...i3 };
  }
  getEmbeddedInstances() {
    const t3 = [];
    for (const i3 of this.editedInstances)
      t3.push(...i3.getEmbeddedInstances());
    return t3.push(...this.embeddedInstances), t3;
  }
  getModifiedFields() {
    const t3 = [];
    for (const i3 of this.editedInstances)
      t3.push(...i3.getModifiedFields());
    for (const i3 of this.modified.values()) {
      const n3 = this.entity[i3];
      t3.push({ id: this.entity.id, type: this.entity.type, value: n3, key: i3 });
    }
    return t3;
  }
  getModifiedEntities() {
    const t3 = [];
    for (const i3 of this.editedInstances)
      t3.push(...i3.getNestedEntities()), t3.push(i3.entity);
    return t3;
  }
  getNestedEntities() {
    const t3 = [];
    for (const i3 of this.newInstances)
      t3.push(...i3.getNestedEntities()), t3.push(i3.entity);
    for (const i3 of this.editedInstances)
      t3.push(...i3.getEmbeddedInstances());
    return t3.push(...this.embeddedInstances), t3;
  }
  set label(t3) {
    this.setLabel(t3);
  }
  setLabel(t3) {
    this.modified.add("label"), this.entity.label = t3;
  }
  addLabel(t3, i3) {
    this.addLanguageProperty("label", t3, i3);
  }
  set metadata(t3) {
    this.setMetadata(t3);
  }
  setMetadata(t3) {
    this.modified.add("metadata"), this.entity.metadata = t3;
  }
  addMetadata(t3, i3) {
    this.modified.add("metadata"), this.entity.metadata = [...this.entity.metadata, { label: t3, value: i3 }];
  }
  set summary(t3) {
    this.setLabel(t3);
  }
  setSummary(t3) {
    this.modified.add("summary"), this.entity.summary = t3;
  }
  addSummary(t3, i3) {
    this.addLanguageProperty("summary", t3, i3);
  }
  set requiredStatement(t3) {
    this.setRequiredStatement(t3);
  }
  setRequiredStatement(t3) {
    this.modified.add("requiredStatement"), this.entity.requiredStatement = t3;
  }
  set rights(t3) {
    this.setRights(t3);
  }
  setRights(t3) {
    this.modified.add("rights"), this.entity.rights = t3;
  }
  addThumbnail(t3) {
    this.modified.add("thumbnail"), this.entity.thumbnail = [...this.entity.thumbnail, this.addEmbeddedInstance(t3, "ContentResource")];
  }
  set height(t3) {
    this.setHeight(t3);
  }
  setHeight(t3) {
    this.isCanvas(this.entity) && (this.modified.add("height"), this.entity.height = t3);
  }
  set width(t3) {
    this.setWidth(t3);
  }
  setWidth(t3) {
    this.isCanvas(this.entity) && (this.modified.add("width"), this.entity.width = t3);
  }
  set duration(t3) {
    this.setDuration(t3);
  }
  setDuration(t3) {
    this.isCanvas(this.entity) && (this.modified.add("duration"), this.entity.duration = t3);
  }
  set viewingDirection(t3) {
    this.setViewingDirection(t3);
  }
  setViewingDirection(t3) {
    if (this.isManifest(this.entity)) {
      let i3 = "left-to-right";
      switch (t3) {
        case "left-to-right":
        case 0:
          i3 = "left-to-right";
          break;
        case "right-to-left":
        case 1:
          i3 = "right-to-left";
          break;
        case "top-to-bottom":
        case 2:
          i3 = "top-to-bottom";
          break;
        case "bottom-to-top":
        case 3:
          i3 = "bottom-to-top";
          break;
      }
      this.modified.add("viewingDirection"), this.entity.viewingDirection = i3;
    }
  }
  set behavior(t3) {
    this.setBehavior(t3);
  }
  set behaviour(t3) {
    this.setBehavior(t3);
  }
  setBehavior(t3) {
    this.modified.add("behavior"), this.entity.behavior = Array.isArray(t3) ? t3 : [t3];
  }
  setBehaviour(t3) {
    this.setBehavior(t3);
  }
  addBehaviour(t3) {
    this.addBehavior(t3);
  }
  addBehavior(t3) {
    this.modified.add("behavior"), this.entity.behavior = [...this.entity.behavior, t3];
  }
  set seeAlso(t3) {
    this.setSeeAlso(t3);
  }
  setSeeAlso(t3) {
    this.modified.add("seeAlso"), this.entity.seeAlso = t3.map((i3) => this.addEmbeddedInstance(i3, "ContentResource"));
  }
  addSeeAlso(t3) {
    this.modified.add("seeAlso"), this.entity.seeAlso = [...this.entity.seeAlso, this.addEmbeddedInstance(t3, "ContentResource")];
  }
  set service(t3) {
    this.setService(t3);
  }
  addServiceProperty(t3) {
    this.modified.add("service"), this.entity.service = [...this.entity.service, t3];
  }
  setService(t3) {
    this.modified.add("service"), this.entity.service = t3;
  }
  set homepage(t3) {
    this.setHomepage(t3);
  }
  setHomepage(t3) {
    this.modified.add("homepage"), this.entity.homepage = [...this.entity.homepage, this.addEmbeddedInstance(t3, "ContentResource")];
  }
  set rendering(t3) {
    this.setRendering(t3);
  }
  setRendering(t3) {
    this.modified.add("rendering"), this.entity.rendering = t3.map((i3) => this.addEmbeddedInstance(i3, "ContentResource"));
  }
  addRendering(t3) {
    this.modified.add("rendering"), this.entity.rendering = [...this.entity.rendering, this.addEmbeddedInstance(t3, "ContentResource")];
  }
  set partOf(t3) {
    this.setPartOf(t3);
  }
  setPartOf(t3, i3 = true) {
    (this.isCollection(this.entity) || this.isManifest(this.entity) || this.isCanvas(this.entity)) && (this.modified.add("partOf"), this.entity.partOf = t3);
  }
  isPartOf(t3) {
    (this.isCollection(this.entity) || this.isManifest(this.entity) || this.isCanvas(this.entity)) && (this.modified.add("partOf"), this.entity.partOf = [...this.entity.partOf, t3]);
  }
  set start(t3) {
    this.setStart(t3);
  }
  setStart(t3) {
    this.isManifest(this.entity) && (this.entity.start = t3);
  }
  addAnnotations(t3) {
    this.isCanvas(this.entity) && (this.modified.add("annotations"), this.entity.annotations = [...this.entity.annotations, this.addEmbeddedInstance(t3, "AnnotationPage")]);
  }
  set services(t3) {
    this.setServices(t3);
  }
  addServicesProperty(t3) {
    this.isManifest(this.entity) && (this.modified.add("services"), this.entity.services = [...this.entity.services, t3]);
  }
  setServices(t3) {
    this.isManifest(this.entity) && (this.modified.add("services"), this.entity.services = t3);
  }
  addEmbeddedInstance(t3, i3) {
    return this.embeddedInstances.push(t3), { id: t3.id, type: i3 || t3.type };
  }
  isAnnotationPage(t3) {
    return t3.type === "AnnotationPage";
  }
  isCanvas(t3) {
    return t3.type === "Canvas";
  }
  isManifest(t3) {
    return t3.type === "Manifest";
  }
  isCollection(t3) {
    return t3.type === "Collection";
  }
  addLanguageProperty(t3, i3, n3 = "none") {
    if (typeof this.entity[t3] < "u")
      this.modified.add(t3), this.entity[t3] = this.entity[t3] ? this.entity[t3] : {}, this.entity[t3][n3] = Array.isArray(i3) ? i3 : [i3];
    else
      throw new Error(`Invalid field "${t3}"`);
  }
}

class ii2 extends L7 {
  defaultAnnotationTarget;
  constructor(t3, i3, n3) {
    super(t3, i3);
    this.defaultAnnotationTarget = n3;
  }
  createAnnotation(t3) {
    this.defaultAnnotationTarget && !t3.target && (t3.target = this.defaultAnnotationTarget);
    const [i3] = this.importRawJson(t3);
    this.modified.add("items"), this.entity.items = [...this.entity.items, i3];
  }
}

class bt2 extends L7 {
  firstAnnotationPage;
  constructor(t3, i3) {
    super(t3, i3);
  }
  createAnnotationPage(t3, i3, n3 = false) {
    const s2 = new ii2(this.builder, { ...z4, id: t3 }, this.entity.id);
    i3(s2), this.newInstances.push(s2), !this.firstAnnotationPage && !n3 && (this.firstAnnotationPage = s2);
    const r3 = n3 ? "annotations" : "items";
    this.modified.add(r3), this.entity[r3] = [...this.entity[r3], { id: t3, type: "AnnotationPage" }];
  }
  createAnnotation(t3, i3) {
    this.firstAnnotationPage ? this.firstAnnotationPage.createAnnotation(i3) : this.createAnnotationPage(`${this.entity.id}/annotation-page`, (n3) => {
      n3.createAnnotation(i3);
    });
  }
}

class U5 extends L7 {
  constructor(t3, i3) {
    super(t3, i3);
  }
  createCanvas(t3, i3) {
    const n3 = new bt2(this.builder, { ...Y5, id: t3 });
    i3(n3), this.newInstances.push(n3), this.modified.add("items"), this.entity.items = [...this.entity.items, { id: t3, type: "Canvas" }];
  }
  editCanvas(t3, i3) {
    const n3 = this.builder.vault.get({ id: t3, type: "Canvas" }), s2 = new bt2(this.builder, { ...n3 });
    i3(s2), this.newInstances.push(s2);
  }
}

class O7 extends L7 {
  constructor(t3, i3) {
    super(t3, i3);
  }
  createManifest(t3, i3) {
    const n3 = new U5(this.builder, { ...F6, id: t3 });
    i3(n3), this.newInstances.push(n3), this.modified.add("items"), this.entity.items = [...this.entity.items, n3.entity];
  }
  createCollection(t3, i3) {
    const n3 = new O7(this.builder, { ...P6, id: t3 });
    i3(n3), this.newInstances.push(n3), this.modified.add("items"), this.entity.items = [...this.entity.items, n3.entity];
  }
}

class ni3 {
  vault;
  constructor(t3) {
    this.vault = t3 || new yt2;
  }
  processBuilder(t3, i3) {
    const n3 = t3.entity, s2 = t3.getModifiedFields(), r3 = this.vault.getStore(), d5 = { Manifest: {}, Annotation: {}, AnnotationCollection: {}, AnnotationPage: {}, Canvas: {}, Collection: {}, ContentResource: {}, Range: {}, Selector: {}, Service: {} }, o4 = {};
    i3 && (o4[n3.id] = n3.type, d5[n3.type][n3.id] = n3);
    const l5 = t3.getNestedEntities();
    if (l5.length)
      for (const h5 of l5)
        o4[h5.id] = d5[h5.type] ? h5.type : "ContentResource", (d5[h5.type] ? d5[h5.type] : d5.ContentResource)[h5.id] = h5;
    (l5.length || i3) && (r3.dispatch(Rt.importEntities({ entities: d5 })), r3.dispatch(ei3.addMappings({ mapping: o4 })));
    for (const h5 of s2)
      d5[h5.type][h5.id] || r3.dispatch(Rt.modifyEntityField(h5));
    t3.dispose();
  }
  createCollection(t3, i3) {
    const n3 = new O7(this, { ...P6, id: t3 });
    return i3(n3), this.processBuilder(n3, true), this.vault.get({ id: t3, type: "Collection" });
  }
  editCollection(t3, i3) {
    const n3 = this.vault.get({ id: t3, type: "Collection" }), s2 = new O7(this, { ...n3 });
    return i3(s2), this.processBuilder(s2, false), this.vault.get({ id: t3, type: "Collection" });
  }
  createManifest(t3, i3) {
    const n3 = new U5(this, { ...F6, id: t3 });
    return i3(n3), this.processBuilder(n3, true), this.vault.get({ id: t3, type: "Manifest" });
  }
  editManifest(t3, i3) {
    const n3 = this.vault.get({ id: t3, type: "Manifest" }), s2 = new U5(this, { ...n3 });
    return i3(s2), this.processBuilder(s2, false), this.vault.get({ id: t3, type: "Manifest" });
  }
  toPresentation3(t3) {
    return this.vault.toPresentation3(t3);
  }
  toPresentation2(t3) {
    return this.vault.toPresentation2(t3);
  }
}

// src/generator/nasa-generator/query-string-stringify.ts
function queryStringStringify(obj) {
  const query = new URLSearchParams;
  const keys = obj ? Object.keys(obj) : [];
  for (const key of keys) {
    const value = obj[key];
    if (typeof value !== "undefined" && value !== null) {
      if (Array.isArray(value)) {
        query.set(key, value.join(","));
      } else {
        query.set(key, value.toString());
      }
    }
  }
  return query.toString();
}

// src/generator/nasa-generator/NASA.ts
class NASA {
  static BASE_URL = "https://images-api.nasa.gov";
  fetcher;
  constructor(fetcher) {
    this.fetcher = fetcher;
  }
  async search(params) {
    const reqUrl = new URL(`${NASA.BASE_URL}/search`);
    reqUrl.search = queryStringStringify(params);
    const response = await fetch(reqUrl.toString(), {
      headers: {
        Accept: "application/json"
      }
    });
    return await response.json();
  }
  async asset(nasa_id) {
    return this.fetcher(`${NASA.BASE_URL}/asset/${nasa_id}`, {
      headers: { Accept: "application/json" }
    });
  }
  async assetMetadata(nasa_id) {
    return this.fetcher(`${NASA.BASE_URL}/asset/${nasa_id}/metadata.json`, {
      headers: { Accept: "application/json" }
    });
  }
  async link(_link) {
    const url = new URL(_link);
    url.protocol = "https";
    const link = url.toString();
    return this.fetcher(link, { headers: { Accept: "application/json" } });
  }
}

// src/generator/nasa-generator/asset-to-manifest.ts
async function assetToManifest(nasaId, asset, api, builder, baseUrl) {
  const metadataLink = asset.collection.items.find((i3) => i3.href.endsWith("metadata.json"));
  const thumbnailLink = asset.collection.items.find((i3) => i3.href.endsWith("~thumb.jpg"));
  const originalLink = asset.collection.items.find((i3) => i3.href.indexOf("~orig.") !== -1);
  if (!metadataLink || !originalLink) {
    return null;
  }
  const metadata = await api.link(asset.collection.items.find((i3) => i3.href.endsWith("metadata.json")).href);
  const title = metadata["AVAIL:Title"] || metadata["XMP:Title"] || metadata["IPTC:ObjectName"];
  const description = metadata["EXIF:ImageDescription"] || metadata["AVAIL:Description"] || metadata["XMP:Description"] || metadata["IPTC:Caption-Abstract"];
  const location = metadata["AVAIL:Location"] || metadata["XMP:Location"];
  const subjectTree = metadata["XMP:HierarchicalSubject"];
  const copyright = metadata["XMP:Rights"] || metadata["EXIF:Copyright"];
  const credit = metadata["IPTC:Credit"] || metadata["XMP:Credit"];
  const lensMode = metadata["EXIF:LensModel"];
  const subjects = metadata["AVAIL:Keywords"] || metadata["IPTC:Keywords"] || metadata["XMP:Subject"];
  const dateCreated = metadata["IPTC:DateCreated"] || metadata["XMP:DateCreated"] || metadata["AVAIL:DateCreated"];
  const width = metadata["File:ImageWidth"] || metadata["EXIF:ImageWidth"] || metadata["EXIF:ExifImageWidth"] || 1024;
  const height = metadata["File:ImageHeight"] || metadata["EXIF:ImageHeight"] || metadata["EXIF:ExifImageHeight"] || 1024;
  const created = dateCreated ? new Date(dateCreated) : null;
  const manifestId = `${baseUrl}/${nasaId}.json`;
  const builtManifest = builder.createManifest(manifestId, (manifest) => {
    manifest.addLabel(title || `Image ${nasaId}`, "en");
    if (description) {
      manifest.addSummary(description, "en");
    }
    description && manifest.addMetadata({ en: ["Summary"] }, { en: [description] });
    location && manifest.addMetadata({ en: ["Location"] }, { en: [location] });
    subjectTree && manifest.addMetadata({ en: ["Subject tree"] }, { en: [subjectTree] });
    subjects && manifest.addMetadata({ en: ["Subjects"] }, { en: subjects });
    credit && manifest.addMetadata({ en: ["Image credit"] }, { en: credit.split("/") });
    created && !Number.isNaN(created.getFullYear()) && manifest.addMetadata({ en: ["Year"] }, { en: [`${created.getFullYear()}`] });
    dateCreated && manifest.addMetadata({ en: ["Date"] }, { en: [dateCreated] });
    lensMode && manifest.addMetadata({ en: ["Lens"] }, { en: [lensMode] });
    if (copyright) {
      manifest.setRequiredStatement({
        label: { en: ["Copyright"] },
        value: { en: [copyright] }
      });
    } else if (credit) {
      manifest.setRequiredStatement({
        label: { en: ["Credit"] },
        value: { en: [credit] }
      });
    }
    manifest.createCanvas(`${manifestId}/c0`, (canvas) => {
      canvas.addLabel(title || `Image ${nasaId}`, "en");
      canvas.setWidth(width);
      canvas.setHeight(height);
      if (thumbnailLink) {
        canvas.addThumbnail({
          id: thumbnailLink.href,
          type: "Image"
        });
      }
      canvas.createAnnotation(`${manifestId}/c0/annotation`, {
        id: `${manifestId}/c0/annotation`,
        type: "Annotation",
        motivation: "painting",
        body: {
          id: originalLink.href,
          type: "Image",
          format: "image/jpg",
          height,
          width
        }
      });
    });
  });
  return builder.toPresentation3(builtManifest);
}

// src/generator/nasa-generator.ts
var nasaGenerator = {
  id: "nasa-generator",
  name: "NASA Generator",
  async prepare(gen) {
    const api = new NASA(gen.requestCache.fetch);
    const q6 = gen.config.query;
    const maxPages = gen.config.maxPages || 1;
    const maxResults = gen.config.maxResults || 50;
    const search = await api.search({
      description: q6,
      media_type: ["image"],
      page: 1
    });
    const foundResources = [];
    let nextPage = search.collection.links.find((l5) => l5.rel === "next");
    let currentChecked = 1;
    let currentResults = 0;
    for (const result of search.collection.items) {
      const item = result.data[0];
      currentResults++;
      if (currentResults > maxResults)
        break;
      foundResources.push({
        id: item.nasa_id,
        type: "Manifest",
        data: item
      });
    }
    while (nextPage && currentChecked <= maxPages) {
      const next = await api.link(nextPage.href);
      for (const result of next.collection.items) {
        currentResults++;
        if (currentResults > maxResults)
          break;
        const item = result.data[0];
        foundResources.push({
          id: item.nasa_id,
          type: "Manifest",
          data: item
        });
      }
      nextPage = next.collection.links.find((l5) => l5.rel === "next");
      currentChecked++;
    }
    return foundResources;
  },
  async generateEach(resource, directory, api) {
    const nasa = new NASA(api.requestCache.fetch);
    const fullData = await nasa.asset(resource.id);
    const manifest = await assetToManifest(resource.id, fullData, nasa, api.builder, "https://example.org/");
    api.saveJson(`${resource.id}.json`, manifest);
    return {
      cache: {
        resource,
        fullData
      }
    };
  }
};

// src/util/lazy-value.ts
function lazyValue(loader2) {
  let isLoaded = false;
  let value = null;
  return {
    get value() {
      if (!isLoaded) {
        value = loader2();
        isLoaded = true;
      }
      return value;
    }
  };
}

// src/util/load-json.ts
import { existsSync as existsSync9 } from "fs";
async function loadJson(filePath, allowEmpty = false) {
  if (allowEmpty) {
    if (!existsSync9(filePath)) {
      return {};
    }
  }
  const file = Bun.file(filePath);
  return file.json();
}

// src/util/make-progress-bar.ts
var import_cli_progress = __toESM(require_cli_progress(), 1);
function makeProgressBar(label, totalResources) {
  const progress = new import_cli_progress.SingleBar({
    format: `${source_default.bold(label)} |${source_default.cyan("{bar}")}| {percentage}% \u2013 {value}/{total} Resources`,
    barCompleteChar: "\u2588",
    barIncompleteChar: "\u2591",
    clearOnComplete: true
  });
  progress.start(totalResources, 0);
  return progress;
}

// src/commands/generate.ts
var defaultGenerators = [
  nasaGenerator
];
var defaultCacheDir = "./.iiif/_generator";
async function generate(options, command) {
  const config2 = await getConfig();
  await loadScripts(options);
  const globals = getNodeGlobals();
  const generatorDirectory = join15(cwd6(), defaultCacheDir);
  const allGenerators = [...defaultGenerators, ...globals.generators];
  await mkdirp(generatorDirectory);
  let savingFiles = [];
  const saveJson = (file, contents) => {
    savingFiles.push(Bun.write(file, JSON.stringify(contents, null, 2)));
  };
  const waitSavingFiles = async () => {
    await Promise.all(savingFiles);
    savingFiles = [];
  };
  let totalResources = 0;
  if (config2.generators) {
    const generators = Object.keys(config2.generators);
    for (const generatorName of generators) {
      const generator = config2.generators[generatorName];
      const generatorType = generator.type;
      const generatorConfig = generator.config || {};
      const foundGenerator = allGenerators.find((g4) => g4.id === generatorType);
      if (!foundGenerator) {
        throw new Error(`Unknown generator type: ${generatorType}`);
      }
      const buildDirectory = generator.output ? join15(cwd6(), generator.output) : join15(generatorDirectory, generatorName, "build");
      const cacheDirectory = join15(generatorDirectory, generatorName);
      const resourcesDirectory = join15(cacheDirectory, "resources");
      const requestCache = createStoreRequestCache("requests", cacheDirectory, !options.cache);
      await mkdirp(cacheDirectory);
      await mkdirp(buildDirectory);
      const globalCacheFile = join15(cacheDirectory, "cache.json");
      const globalCache = lazyValue(() => loadJson(globalCacheFile));
      const generatorApi = {
        config: generatorConfig,
        caches: globalCache,
        cacheDirectory,
        saveJson: (file, contents) => saveJson(join15(buildDirectory, file), contents),
        builder: new ni3,
        requestCache
      };
      const resources = await foundGenerator.prepare(generatorApi);
      const resourceCaches = {};
      const invalidateMap = {};
      const progress = makeProgressBar(`Generating ${generator.type} using ${foundGenerator.name}`, resources.length);
      totalResources += resources.length;
      let globalInvalidate = false;
      const invalidate2 = foundGenerator.invalidate ? await foundGenerator.invalidate(resources, generatorApi) : !existsSync10(globalCacheFile);
      globalInvalidate = globalInvalidate || invalidate2;
      if (!invalidate2) {
        for (const resource of resources) {
          if (!resource.id) {
            throw new Error(`Resource ${resource.type} has no id`);
          }
          const resourceCacheFile = join15(resourcesDirectory, resource.id, "cache.json");
          resourceCaches[resource.id] = lazyValue(() => loadJson(resourceCacheFile));
          invalidateMap[resource.id] = foundGenerator.invalidateEach ? await foundGenerator.invalidateEach(resource, generatorApi) : existsSync10(resourceCacheFile);
          globalInvalidate = globalInvalidate || invalidateMap[resource.id];
        }
      }
      for (const resource of resources) {
        const shouldRun = invalidate2 || invalidateMap[resource.id];
        if (!shouldRun) {
          progress.increment();
          continue;
        }
        const resourceCache = resourceCaches[resource.id];
        const resourceDirectory = join15(resourcesDirectory, resource.id);
        const generateApi = {
          config: generatorConfig,
          caches: resourceCache,
          cacheDirectory: resourceDirectory,
          saveJson: (file, contents) => saveJson(join15(buildDirectory, file), contents),
          builder: new ni3,
          requestCache
        };
        await mkdirp(resourceDirectory);
        const response = foundGenerator.generateEach ? await foundGenerator.generateEach(resource, buildDirectory, generateApi) : { cache: {} };
        const cache2 = response.cache || {};
        progress.increment();
        saveJson(join15(resourceDirectory, "cache.json"), cache2);
      }
      await waitSavingFiles();
      if (foundGenerator.generate && globalInvalidate) {
        const response = await foundGenerator.generate(resources, cacheDirectory, generatorApi);
        const cache2 = response.cache || {};
        const store = response.store || {};
        saveJson(join15(cacheDirectory, "cache.json"), cache2);
      }
      await waitSavingFiles();
      if (foundGenerator.postGenerate) {
        await foundGenerator.postGenerate(resources, cacheDirectory, generatorApi);
      }
      await waitSavingFiles();
      progress.stop();
    }
    console.log(`Generated ${totalResources} resources`);
  }
}

// src/commands/build/0-parse-stores.ts
async function parseStores(buildConfig) {
  const {
    config: config2,
    stores,
    requestCacheDir,
    storeTypes,
    slugs,
    manifestRewrites,
    collectionRewrites
  } = buildConfig;
  await mkdirp(requestCacheDir);
  const storeResources = {};
  const filesToWatch = [];
  if (config2.generators) {
    const keys = Object.keys(config2.generators);
    for (const key of keys) {
      const generator = config2.generators[key];
      if (generator.output)
        continue;
      stores.push(key);
      config2.stores[key] = {
        type: "iiif-json",
        path: `./${join16(defaultCacheDir, key, "build")}`
      };
    }
  }
  for (const storeId of stores) {
    const requestCache = createStoreRequestCache(storeId, requestCacheDir);
    storeResources[storeId] = [];
    const storeConfig = config2.stores[storeId];
    const storeType = storeTypes[storeConfig.type];
    if (!storeType) {
      throw new Error(`Unknown store type: ${storeConfig.type}`);
    }
    const getSlug = makeGetSlugHelper(storeConfig, slugs);
    const resources = await storeType.parse(storeConfig, {
      storeId,
      requestCache,
      getSlug,
      build: buildConfig
    });
    for (const resource of resources) {
      if (resource.type === "Manifest") {
        for (const rewrite of manifestRewrites) {
          if (rewrite.rewrite) {
            const newSlug = await rewrite.rewrite(resource.slug, resource);
            if (newSlug && typeof newSlug === "string") {
              resource.slug = newSlug;
            }
          }
        }
      }
      if (resource.type === "Collection") {
        for (const rewrite of collectionRewrites) {
          if (rewrite.rewrite) {
            const newSlug = await rewrite.rewrite(resource.slug, resource);
            if (newSlug && typeof newSlug === "string") {
              resource.slug = newSlug;
            }
          }
        }
      }
      filesToWatch.push(resource.path);
      storeResources[storeId].push(resource);
    }
  }
  return {
    storeResources,
    filesToWatch
  };
}

// src/commands/build/1-load-stores.ts
import { existsSync as existsSync11 } from "fs";
import { join as join17 } from "path";
async function loadStores({ storeResources }, buildConfig) {
  const { options, config: config2, stores, cacheDir, storeTypes, requestCacheDir, log, canvasExtractions, canvasEnrichment } = buildConfig;
  const allResources = [];
  const allPaths = {};
  const overrides = {};
  const rewrites = {};
  const editable = {};
  const idsToSlugs = {};
  const uniqueSlugs = [];
  for (const store of stores) {
    const requestCache = createStoreRequestCache(store, requestCacheDir);
    const storeConfig = config2.stores[store];
    const resources = storeResources[store];
    const progress = makeProgressBar("Loading store", resources.length);
    for (const resource of resources) {
      if (options.exact && (resource.slug !== options.exact || resource.path !== options.exact)) {
        progress.increment();
        continue;
      }
      if (uniqueSlugs.includes(resource.slug)) {
        log(`WARNING: Duplicate slug found: ${resource.slug} in resource: ${resource.path}`);
        continue;
      }
      uniqueSlugs.push(resource.slug);
      const resourceDir = join17(cacheDir, resource.slug);
      const cachesFile = join17(resourceDir, "caches.json");
      const caches = existsSync11(cachesFile) ? await loadJson(cachesFile) : {};
      const storeType = storeTypes[storeConfig.type];
      const valid = !options.cache || await storeType.invalidate(storeConfig, resource, caches);
      if (valid) {
        log(`Building ${resource.path}`);
        await mkdirp(resourceDir);
        const data = await storeType.load(storeConfig, resource, resourceDir, {
          requestCache,
          storeId: resource.storeId,
          build: buildConfig
        });
        if (data["resource.json"].id && data["resource.json"].saveToDisk) {
          idsToSlugs[data["resource.json"].id] = {
            slug: resource.slug,
            type: resource.type
          };
        }
        allResources.push(data["resource.json"]);
        await Promise.all([
          Bun.write(join17(resourceDir, "resource.json"), JSON.stringify(data["resource.json"], null, 2)),
          Bun.write(join17(resourceDir, "vault.json"), JSON.stringify(data["vault.json"], null, 2)),
          Bun.write(join17(resourceDir, "meta.json"), JSON.stringify(data["meta.json"], null, 2)),
          Bun.write(join17(resourceDir, "caches.json"), JSON.stringify(data["caches.json"], null, 2)),
          Bun.write(join17(resourceDir, "indices.json"), JSON.stringify(data["indices.json"], null, 2))
        ]);
      } else {
        const data = await loadJson(join17(resourceDir, "resource.json"));
        if (data.id && data.saveToDisk) {
          idsToSlugs[data.id] = {
            slug: resource.slug,
            type: resource.type
          };
        }
        allResources.push(data);
      }
      if (resource.source && resource.source.type === "disk") {
        editable[resource.slug] = resource.source.path;
      }
      if (resource.source.type === "disk" && resource.source.alias) {
        overrides[resource.source.alias] = `${resource.slug}/manifest.json`;
      }
      if (resource.source.type === "remote" && resource.saveToDisk) {
        overrides[resource.slug] = `${resource.slug}/manifest.json`;
      }
      allPaths[resource.path] = resource.slug;
      if (resource.subFiles) {
        for (const subFile of resource.subFiles) {
          allPaths[subFile] = resource.slug;
        }
      }
      progress.increment();
    }
    progress.stop();
  }
  return { allResources, editable, allPaths, overrides, rewrites, idsToSlugs };
}

// src/commands/build/2-extract.ts
import { join as join19 } from "path";

// src/util/cached-resource.ts
import { join as join18 } from "path";

// src/util/merge-indices.ts
function mergeIndices(newindices, indices) {
  const keys = Object.keys(indices);
  for (const key of keys) {
    if (!newindices[key]) {
      newindices[key] = [];
    }
    for (const item of indices[key]) {
      if (!newindices[key].includes(item)) {
        newindices[key].push(item);
      }
    }
  }
  return newindices;
}

// src/util/cached-resource.ts
var didChange = false;
function createCacheResource({
  resourcePath,
  resource,
  temp,
  collections,
  parentManifest,
  canvasIndex
}) {
  const files = {
    "vault.json": join18(resourcePath, "vault.json"),
    "caches.json": join18(resourcePath, "caches.json"),
    "meta.json": join18(resourcePath, "meta.json"),
    "indices.json": join18(resourcePath, "indices.json")
  };
  const filesDir = join18(resourcePath, "files");
  const vaultData = parentManifest ? null : loadJson(files["vault.json"]);
  const caches = lazyValue(() => loadJson(files["caches.json"], true));
  const meta = lazyValue(() => loadJson(files["meta.json"], true));
  const indices = lazyValue(() => loadJson(files["indices.json"], true));
  const newMeta = {};
  const newCaches = {};
  const newIndices = {};
  return {
    vaultData,
    caches,
    meta,
    indices,
    filesDir,
    getCanvasResource() {
      if (!parentManifest) {
        throw new Error("Parent manifest is required");
      }
      return {
        id: resource.id,
        type: "Canvas",
        path: `${parentManifest.path}/canvases/${canvasIndex}`,
        slug: `${parentManifest.slug}/canvases/${canvasIndex}`,
        storeId: parentManifest.storeId,
        slugSource: parentManifest.slugSource,
        saveToDisk: false,
        source: parentManifest.source,
        vault: parentManifest.vault
      };
    },
    async attachVault() {
      if (!vaultData) {
        throw new Error("Can only load Manifest Vault");
      }
      if (!resource.vault) {
        resource.vault = new Io;
        resource.vault.getStore().setState(await vaultData);
      }
      return resource.vault.getObject(resource.id);
    },
    async getVaultBuilder() {
      if (!resource.vault) {
        this.attachVault();
      }
      return new ni3(resource.vault);
    },
    async saveVault() {
      if (didChange && resource.vault) {
        await Bun.write(files["vault.json"], JSON.stringify(resource.vault.getStore().getState(), null, 2));
      }
    },
    didChange(value) {
      if (typeof value === "undefined")
        return;
      didChange = didChange || value;
    },
    handleResponse(result, extraction) {
      if (result.temp) {
        if (parentManifest) {
          if (typeof canvasIndex === "undefined") {
            throw new Error("Canvas must have an index");
          }
          temp[extraction.id] = temp[extraction.id] || {};
          temp[extraction.id][parentManifest.slug] = temp[extraction.id][parentManifest.slug] || {};
          temp[extraction.id][parentManifest.slug].canvases = temp[extraction.id][parentManifest.slug].canvases || {};
          temp[extraction.id][parentManifest.slug].canvases[canvasIndex.toString()] = result.temp;
        } else {
          temp[extraction.id] = temp[extraction.id] || {};
          temp[extraction.id][resource.slug] = result.temp;
        }
      }
      if (result.meta) {
        Object.assign(newMeta, result.meta);
      }
      if (result.caches) {
        Object.assign(newCaches, result.caches);
      }
      if (result.indices) {
        mergeIndices(newIndices, result.indices);
      }
      if (result.collections) {
        for (const collectionSlug of result.collections) {
          collections[collectionSlug] = collections[collectionSlug] || [];
          collections[collectionSlug].push(resource.slug);
        }
      }
      didChange = didChange || result.didChange || false;
    },
    async save() {
      const hasNewMeta = Object.keys(newMeta).length > 0;
      const hasNewIndices = Object.keys(newIndices).length > 0;
      const hasNewCaches = Object.keys(newCaches).length > 0;
      if (!hasNewMeta && !hasNewIndices && !hasNewCaches) {
        return;
      }
      await mkdirp(resourcePath);
      const savingFiles = [];
      if (Object.keys(newMeta).length > 0) {
        savingFiles.push(Bun.write(files["meta.json"], JSON.stringify(Object.assign(await meta.value, newMeta), null, 2)));
      }
      if (Object.keys(newIndices).length > 0) {
        savingFiles.push(Bun.write(files["indices.json"], JSON.stringify(mergeIndices(await indices.value, newIndices), null, 2)));
      }
      if (Object.keys(newCaches).length > 0) {
        savingFiles.push(Bun.write(files["caches.json"], JSON.stringify(Object.assign(await caches.value, newCaches), null, 2)));
      }
      if (savingFiles.length > 0) {
        await Promise.all(savingFiles);
      }
    }
  };
}

// src/commands/build/2-extract.ts
async function extract2({
  allResources
}, buildConfig) {
  const {
    options,
    config: config2,
    cacheDir,
    log,
    extractions,
    manifestExtractions,
    collectionExtractions,
    canvasExtractions,
    allExtractions,
    requestCacheDir
  } = buildConfig;
  if (!options.extract) {
    return {};
  }
  const requestCache = createStoreRequestCache("_extract", requestCacheDir);
  const extractionConfigs = {};
  for (const extraction of allExtractions) {
    if (extraction.configure) {
      const extractionConfig = config2.config?.[extraction.id];
      extractionConfigs[extraction.id] = await extraction.configure({ config: config2, build: buildConfig }, extractionConfig);
    } else {
      extractionConfigs[extraction.id] = config2.config?.[extraction.id];
    }
  }
  const savingFiles = [];
  const temp = {};
  let totalResources = allResources.length;
  for (const resource of allResources) {
    totalResources += resource.subResources || 0;
  }
  const collections = {};
  const progress = makeProgressBar("Extraction", totalResources);
  for (const manifest of allResources) {
    const skipSteps = config2.stores[manifest.storeId]?.skip || [];
    const runSteps = config2.stores[manifest.storeId]?.run;
    const cachedResource = createCacheResource({
      resource: manifest,
      temp,
      resourcePath: join19(cacheDir, manifest.slug),
      collections
    });
    const resource = await cachedResource.attachVault();
    let extractions2 = manifest.type === "Manifest" ? manifestExtractions : collectionExtractions;
    if (runSteps) {
      extractions2 = [...extractions2];
      for (const step of runSteps) {
        const found = allExtractions.find((e3) => e3.id === step);
        if (found?.types.includes(manifest.type) && !extractions2.includes(found)) {
          extractions2.push(found);
        }
      }
    }
    for (const extraction of extractions2) {
      if (skipSteps.includes(extraction.id)) {
        continue;
      }
      const storeConfig = extractionConfigs[extraction.id] || {};
      const extractConfig = Object.assign({}, storeConfig, config2.stores[manifest.storeId].config?.[extraction.id] || {});
      const valid = !options.cache || await extraction.invalidate(manifest, {
        caches: cachedResource.caches,
        resource,
        build: buildConfig
      }, extractConfig);
      if (valid) {
        log(`Running extract: ${extraction.name} for ${manifest.slug}`);
        const result = await extraction.handler(manifest, {
          resource,
          meta: cachedResource.meta,
          indices: cachedResource.indices,
          caches: cachedResource.caches,
          config: config2,
          build: buildConfig,
          requestCache
        }, extractConfig);
        cachedResource.handleResponse(result, extraction);
      }
      savingFiles.push(cachedResource.save());
    }
    progress.increment();
    if (manifest.type === "Manifest" && canvasExtractions.length) {
      const canvases = resource.items || [];
      let canvasIndex = 0;
      for (const canvas of canvases) {
        const canvasCache = createCacheResource({
          resource: canvas,
          temp,
          resourcePath: join19(cacheDir, manifest.slug, "canvases", canvasIndex.toString()),
          collections,
          parentManifest: manifest,
          canvasIndex
        });
        const canvasResource = canvasCache.getCanvasResource();
        for (const canvasExtraction of canvasExtractions) {
          const storeConfig = extractionConfigs[canvasExtraction.id] || {};
          const extractConfig = Object.assign({}, storeConfig, config2.stores[manifest.storeId].config?.[canvasExtraction.id] || {});
          const valid = !options.cache || await canvasExtraction.invalidate(canvasResource, {
            caches: canvasCache.caches,
            resource: canvas,
            build: buildConfig
          }, extractConfig);
          if (!valid) {
            continue;
          }
          const result = await canvasExtraction.handler(canvasResource, {
            resource: canvas,
            meta: canvasCache.meta,
            indices: canvasCache.indices,
            caches: canvasCache.caches,
            config: config2,
            build: buildConfig,
            requestCache
          }, extractConfig);
          canvasCache.handleResponse(result, canvasExtraction);
        }
        savingFiles.push(canvasCache.save());
        progress.increment();
        canvasIndex++;
      }
      for (const canvasExtraction of canvasExtractions) {
        if (canvasExtraction.collectManifest && temp[canvasExtraction.id] && temp[canvasExtraction.id][manifest.slug]) {
          const extractionConfig = extractionConfigs[canvasExtraction.id] || {};
          await canvasExtraction.collectManifest(manifest, temp[canvasExtraction.id][manifest.slug], { config: config2, build: buildConfig }, extractionConfig);
        }
      }
    } else {
      progress.increment(manifest.subResources || 0);
    }
  }
  log(`Saving ${savingFiles.length} files`);
  await Promise.all(savingFiles);
  for (const extraction of allExtractions) {
    if (extraction.close) {
      const extractionConfig = extractionConfigs[extraction.id] || {};
      await extraction.close(extractionConfig);
    }
    if (extraction.collect && temp[extraction.id]) {
      const extractionConfig = extractionConfigs[extraction.id] || {};
      const resp = await extraction.collect(temp[extraction.id], { config: config2, build: buildConfig }, extractionConfig);
      if (extraction.injectManifest && resp && resp.temp) {
        for (const manifestSlug of Object.keys(resp.temp)) {
          const extractionConfig2 = extractionConfigs[extraction.id] || {};
          const foundManifest = allResources.find((r3) => r3.slug === manifestSlug);
          if (!foundManifest) {
            continue;
          }
          const manifestCache = createCacheResource({
            resource: foundManifest,
            temp,
            resourcePath: join19(cacheDir, manifestSlug),
            collections
          });
          const manifestInjected = await extraction.injectManifest(foundManifest, resp.temp[manifestSlug], { config: config2, build: buildConfig }, extractionConfig2);
          manifestCache.handleResponse(manifestInjected, extraction);
          await manifestCache.save();
        }
      }
    }
  }
  progress.stop();
  return { collections };
}

// src/commands/build/3-enrich.ts
import { join as join20 } from "path";
async function enrich({ allResources }, buildConfig) {
  const {
    options,
    config: config2,
    log,
    cacheDir,
    canvasEnrichment,
    manifestEnrichment,
    collectionEnrichment,
    allEnrichments,
    requestCacheDir
  } = buildConfig;
  if (!options.enrich) {
    return {};
  }
  const enrichmentConfigs = {};
  const temp = {};
  for (const enrichment of allEnrichments) {
    if (enrichment.configure) {
      const enrichmentConfig = config2.config?.[enrichment.id];
      enrichmentConfigs[enrichment.id] = await enrichment.configure({ config: config2, build: buildConfig }, enrichmentConfig);
    } else {
      enrichmentConfigs[enrichment.id] = config2.config?.[enrichment.id];
    }
  }
  let savingFiles = [];
  let totalResources = allResources.length;
  for (const resource of allResources) {
    totalResources += resource.subResources || 0;
  }
  const progress = makeProgressBar("Enrichment", totalResources);
  const requestCache = createStoreRequestCache("_enrich", requestCacheDir);
  const processManifest = async (manifest) => {
    if (!manifest.vault) {
      progress.increment(1 + (manifest.subResources || 0));
      return;
    }
    const skipSteps = config2.stores[manifest.storeId]?.skip || [];
    const runSteps = config2.stores[manifest.storeId]?.run;
    const cachedResource = createCacheResource({
      resource: manifest,
      resourcePath: join20(cacheDir, manifest.slug),
      temp,
      collections: {}
    });
    const resource = await cachedResource.attachVault();
    const builder = await cachedResource.getVaultBuilder();
    let enrichmentList = manifest.type === "Manifest" ? manifestEnrichment : collectionEnrichment;
    if (runSteps) {
      enrichmentList = [...enrichmentList];
      for (const step of runSteps) {
        const found = allEnrichments.find((e3) => e3.id === step);
        if (found?.types.includes(manifest.type) && !enrichmentList.includes(found)) {
          enrichmentList.push(found);
        }
      }
      enrichmentList = enrichmentList.sort((a3, b6) => {
        const aIndex = runSteps.indexOf(a3.id);
        const bIndex = runSteps.indexOf(b6.id);
        if (aIndex === -1 && bIndex === -1) {
          return 0;
        }
        if (aIndex === -1) {
          return 1;
        }
        if (bIndex === -1) {
          return -1;
        }
        return aIndex - bIndex;
      });
    }
    const runEnrichment = async (enrichment) => {
      const filesDir = join20(cacheDir, manifest.slug, "files");
      const storeConfig = enrichmentConfigs[enrichment.id] || {};
      const enrichmentConfig = Object.assign({}, storeConfig, config2.stores[manifest.storeId].config?.[enrichment.id] || {});
      const valid = !options.cache || await enrichment.invalidate(manifest, {
        caches: cachedResource.caches,
        resource,
        config: config2,
        files: filesDir
      }, enrichmentConfig);
      if (!valid) {
        return;
      }
      const result = await enrichment.handler(manifest, {
        meta: cachedResource.meta,
        indices: cachedResource.indices,
        caches: cachedResource.caches,
        config: config2,
        builder,
        resource,
        files: filesDir,
        requestCache
      }, enrichmentConfig);
      cachedResource.handleResponse(result, enrichment);
    };
    const processedEnrichments = [];
    for (const enrichment of enrichmentList) {
      if (skipSteps.includes(enrichment.id)) {
        continue;
      }
      processedEnrichments.push(runEnrichment(enrichment));
    }
    const results = await Promise.allSettled(processedEnrichments);
    const errors = results.filter((r3) => r3.status === "rejected");
    if (errors.length > 0) {
      throw new Error(`Enrichment failed for ${errors.length} manifest(s):

${errors.map((e3, n3) => `  ${n3 + 1})  ${e3?.reason?.message}`).join(", ")}`);
    }
    savingFiles.push(cachedResource.save());
    progress.increment();
    let canvasEnrichmentSteps = canvasEnrichment;
    if (manifest.type === "Manifest" && runSteps) {
      canvasEnrichmentSteps = [...canvasEnrichmentSteps];
      for (const step of runSteps) {
        const found = allEnrichments.find((e3) => e3.id === step);
        if (found?.types.includes("Canvas") && !canvasEnrichmentSteps.includes(found)) {
          canvasEnrichmentSteps.push(found);
        }
      }
    }
    if (manifest.type === "Manifest" && canvasEnrichmentSteps.length) {
      const canvases = resource.items || [];
      for (let canvasIndex = 0;canvasIndex < canvases.length; canvasIndex++) {
        const canvas = canvases[canvasIndex];
        const cachedCanvasResource = createCacheResource({
          resource: canvases[canvasIndex],
          resourcePath: join20(cacheDir, manifest.slug, "canvases", canvasIndex.toString()),
          temp,
          collections: {},
          canvasIndex,
          parentManifest: manifest
        });
        const runEnrichment2 = async (enrichment) => {
          const storeConfig = enrichmentConfigs[enrichment.id] || {};
          const enrichmentConfig = Object.assign({}, storeConfig, config2.stores[manifest.storeId].config?.[enrichment.id] || {});
          const valid = !options.cache || await enrichment.invalidate(manifest, {
            caches: cachedCanvasResource.caches,
            resource: canvas,
            config: config2,
            files: cachedCanvasResource.filesDir
          }, enrichmentConfig);
          const canvasResource = {
            id: canvas.id,
            type: "Canvas",
            path: `${manifest.path}/canvases/${canvasIndex}`,
            slug: `${manifest.slug}/canvases/${canvasIndex}`,
            storeId: manifest.storeId,
            slugSource: manifest.slugSource,
            saveToDisk: false,
            source: manifest.source,
            vault: manifest.vault
          };
          if (!valid) {
            return;
          }
          const result = await enrichment.handler(canvasResource, {
            meta: cachedCanvasResource.meta,
            indices: cachedCanvasResource.indices,
            caches: cachedCanvasResource.caches,
            config: config2,
            builder,
            resource: canvas,
            files: cachedCanvasResource.filesDir,
            requestCache
          }, enrichmentConfig);
          cachedCanvasResource.handleResponse(result, enrichment);
          cachedResource.didChange(result.didChange);
        };
        const processedEnrichments2 = [];
        for (const enrichment of canvasEnrichmentSteps) {
          if (skipSteps.includes(enrichment.id)) {
            continue;
          }
          processedEnrichments2.push(runEnrichment2(enrichment));
        }
        const results2 = await Promise.allSettled(processedEnrichments2);
        const errors2 = results2.filter((r3) => r3.status === "rejected");
        if (errors2.length > 0) {
          throw new Error(`Enrichment failed for ${errors2.length} manifest(s):

${errors2.map((e3, n3) => `  ${n3 + 1}) ${e3?.reason?.message}`).join(", ")}`);
        }
        savingFiles.push(cachedCanvasResource.save());
        progress.increment();
      }
    } else {
      progress.increment(manifest.subResources || 0);
    }
    await cachedResource.saveVault();
  };
  const allManifestProcesses = [];
  for (const manifest of allResources) {
    allManifestProcesses.push(processManifest(manifest));
  }
  await Promise.all(allManifestProcesses);
  for (const extraction of allEnrichments) {
    if (extraction.close) {
      const extractionConfig = enrichmentConfigs[extraction.id] || {};
      await extraction.close(extractionConfig);
    }
    if (extraction.collect) {
      const extractionConfig = enrichmentConfigs[extraction.id] || {};
      await extraction.collect(temp[extraction.id], { config: config2, build: buildConfig }, extractionConfig);
    }
  }
  progress.stop();
  log(`Saving ${savingFiles.length} files`);
  await Promise.all(savingFiles);
  savingFiles = [];
}

// src/commands/build/4-emit.ts
import { existsSync as existsSync12, readdirSync as readdirSync3 } from "fs";
import { readFile as readFile5 } from "fs/promises";
import { join as join21 } from "path";
async function emit({
  allResources,
  allPaths,
  idsToSlugs
}, { options, server, cacheDir, buildDir, log, imageServiceLoader }) {
  if (!options.emit) {
    return {};
  }
  const siteMap = {};
  const savingFiles = [];
  let totalResources = allResources.length;
  for (const resource of allResources) {
    totalResources += resource.subResources || 0;
  }
  const progress = makeProgressBar("Saving output", totalResources);
  const resolveFullId = (id) => {
    if (idsToSlugs?.[id]) {
      const { slug: slug2, type: type2 } = idsToSlugs[id];
      if (type2 === "Manifest") {
        return `${configUrl}/${slug2}/manifest.json`;
      }
      if (type2 === "Collection") {
        return `${configUrl}/${slug2}/collection.json`;
      }
    }
    return id;
  };
  const saveJson = (file, contents) => {
    savingFiles.push(Bun.write(file, JSON.stringify(contents, null, 2)));
  };
  const filesDir = join21(cacheDir, "files");
  if (existsSync12(filesDir) && !isEmpty(filesDir)) {
    savingFiles.push(copy(filesDir, buildDir, { overwrite: true }));
  }
  const configUrl = typeof server === "string" ? server : server?.url;
  const indexCollection = {};
  const indexCollectionMap = {};
  const storeCollections = {};
  const manifestCollection = [];
  const snippets = {};
  for (let iteration = 0;iteration < 2; iteration++) {
    for (const manifest of allResources) {
      if (manifest.type === "Collection" && iteration === 0) {
        continue;
      }
      if (manifest.type === "Manifest" && iteration === 1) {
        continue;
      }
      const { slug: slug2 } = manifest;
      const url = manifest.saveToDisk ? `${configUrl}/${slug2}/manifest.json` : manifest.path;
      const manifestBuildDirectory = join21(buildDir, slug2);
      const manifestCacheDirectory = join21(cacheDir, slug2);
      const cache2 = {
        "vault.json": join21(manifestCacheDirectory, "vault.json"),
        "meta.json": join21(manifestCacheDirectory, "meta.json"),
        "indices.json": join21(manifestCacheDirectory, "indices.json")
      };
      const vaultJson = await loadJson(cache2["vault.json"]);
      const vault = new Io;
      vault.getStore().setState(vaultJson);
      const getThumbnail = async () => {
        try {
          if (resource.thumbnail) {
            return resource.thumbnail;
          }
          const metaJson = await import(cache2["meta.json"]);
          return metaJson.thumbnail || metaJson.default.thumbnail || null;
        } catch (err) {
          return null;
        }
      };
      const helper = qn(vault, { imageServiceLoader });
      const ref = vault.get(manifest.id);
      const resource = vault.toPresentation3(ref);
      if (!resource)
        continue;
      siteMap[manifest.slug] = {
        type: manifest.type,
        source: manifest.source,
        label: getValue(resource.label)
      };
      if (manifest.type === "Manifest") {
        siteMap[manifest.slug].canvases = resource.items?.length;
      }
      let thumbnail = null;
      const maybeThumbnail = await getThumbnail();
      if (maybeThumbnail) {
        thumbnail = { best: maybeThumbnail };
      }
      if (!thumbnail) {
        thumbnail = resource.thumbnail ? null : await helper.getBestThumbnailAtSize(resource, {
          maxWidth: 512,
          maxHeight: 512
        }, false);
      }
      if (!thumbnail?.best && !resource.thumbnail) {
        thumbnail = await helper.getBestThumbnailAtSize(resource, {
          maxWidth: 512,
          maxHeight: 512
        }, true);
      }
      const snippet2 = {
        id: url,
        type: manifest.type,
        label: resource.label,
        "hss:slug": manifest.slug,
        thumbnail: resource.thumbnail || (thumbnail?.best ? [
          {
            id: thumbnail.best.id,
            type: "Image",
            width: thumbnail.best.width,
            height: thumbnail.best.height
          }
        ] : null) || undefined
      };
      snippets[url] = snippet2;
      if (manifest.storeId) {
        storeCollections[manifest.storeId] = storeCollections[manifest.storeId] || [];
        storeCollections[manifest.storeId].push(snippet2);
      }
      indexCollection[manifest.slug] = snippet2;
      if (manifest.type === "Manifest") {
        manifestCollection.push(snippet2);
      }
      await mkdirp(manifestBuildDirectory);
      if (manifest.saveToDisk) {
        const fileName = manifest.type === "Manifest" ? "manifest.json" : "collection.json";
        if (configUrl) {
          resource.id = `${configUrl}/${manifest.slug}/${fileName}`;
        }
        if (!resource["hss:slug"]) {
          resource["hss:slug"] = manifest.slug;
        }
        if (resource.type === "Collection") {
          if (!allPaths) {
            log("WARNING: Skipping Collection generation");
            continue;
          }
          if (resource.items) {
            resource.items = resource.items.map((item) => {
              if (allPaths[item.path]) {
                if (item.type === "Manifest") {
                  item.id = `${configUrl}/${allPaths[item.path]}/manifest.json`;
                } else {
                  item.id = `${configUrl}/${allPaths[item.path]}/collection.json`;
                }
              }
              const newId = resolveFullId(item.id);
              if (newId) {
                item.id = newId;
              }
              if (item.type === "Manifest") {
                const hasSnippet = snippets[item.id];
                if (hasSnippet) {
                  item.label = item.label || hasSnippet.label;
                  item.thumbnail = item.thumbnail || hasSnippet.thumbnail;
                  item["hss:slug"] = hasSnippet["hss:slug"];
                }
              }
              return item;
            });
          }
        }
        saveJson(join21(manifestBuildDirectory, fileName), resource);
      }
      const meta = await readFile5(join21(cacheDir, manifest.slug, "meta.json"));
      savingFiles.push(Bun.write(join21(manifestBuildDirectory, "meta.json"), meta));
      const indices = await readFile5(join21(cacheDir, manifest.slug, "indices.json"));
      savingFiles.push(Bun.write(join21(manifestBuildDirectory, "indices.json"), indices));
      const filesDir2 = join21(cacheDir, manifest.slug, "files");
      if (existsSync12(filesDir2) && !isEmpty(filesDir2)) {
        savingFiles.push(copy(filesDir2, manifestBuildDirectory, { overwrite: true }));
      }
      await Promise.all(savingFiles);
      progress.increment();
      const canvasesDir = join21(cacheDir, manifest.slug, "canvases");
      if (existsSync12(canvasesDir)) {
        siteMap[manifest.slug].hasCanvasData = true;
        const canvasList = readdirSync3(canvasesDir);
        for (const canvasIndex of canvasList) {
          const canvasDir = join21(canvasesDir, canvasIndex);
          const metaFile = join21(canvasDir, "meta.json");
          const canvasBuildDirectory = join21(manifestBuildDirectory, "canvases", canvasIndex);
          await mkdirp(canvasBuildDirectory);
          if (existsSync12(metaFile)) {
            const meta2 = await readFile5(join21(canvasDir, "meta.json"));
            savingFiles.push(Bun.write(join21(canvasBuildDirectory, "meta.json"), meta2));
          }
          const filesDir3 = join21(canvasesDir, canvasIndex, "files");
          if (existsSync12(filesDir3) && !isEmpty(filesDir3)) {
            savingFiles.push(copy(filesDir3, canvasBuildDirectory, { overwrite: true }));
          }
          progress.increment();
        }
      } else {
        progress.increment(manifest.subResources || 0);
      }
    }
  }
  await Promise.all(savingFiles);
  progress.stop();
  return {
    indexCollection,
    storeCollections,
    manifestCollection,
    siteMap
  };
}

// src/commands/build/5-indices.ts
import { existsSync as existsSync13 } from "fs";
import { join as join22 } from "path";
var import_slug2 = __toESM(require_slug(), 1);

// src/util/create-collection.ts
function createCollection(opts) {
  return {
    "@context": "http://iiif.io/api/presentation/3/context.json",
    id: `${opts.configUrl}/${opts.slug}/collection.json`,
    type: "Collection",
    label: { en: [opts.label] },
    "hss:slug": opts.slug
  };
}

// src/commands/build/5-indices.ts
async function indices({
  allResources,
  indexCollection,
  manifestCollection,
  storeCollections,
  siteMap,
  editable,
  overrides,
  collections
}, { options, server, buildDir, config: config2, cacheDir, topicsDir, collectionRewrites }) {
  if (options.exact || options.stores) {
    return;
  }
  const topLevelCollection = [];
  const configUrl = typeof server === "string" ? server : server?.url;
  if (collections && indexCollection) {
    const collectionSlugs = Object.keys(collections);
    for (const originalCollectionSlug of collectionSlugs) {
      const manifestSlugs = collections[originalCollectionSlug];
      let collectionSlug = originalCollectionSlug;
      if (!collectionSlug.startsWith("collections/")) {
        collectionSlug = `collections/${collectionSlug}`;
      }
      for (const rewrite of collectionRewrites) {
        if (rewrite.rewrite) {
          const newSlug = await rewrite.rewrite(collectionSlug, {
            id: collectionSlug,
            type: "Collection"
          });
          if (newSlug) {
            collectionSlug = newSlug;
          }
        }
      }
      if (!indexCollection[collectionSlug]) {
        const collectionSnippet = createCollection({
          configUrl,
          slug: collectionSlug,
          label: collectionSlug
        });
        const collection = {
          ...collectionSnippet,
          items: manifestSlugs.map((slug3) => {
            return indexCollection[slug3];
          }).filter(Boolean)
        };
        collectionSnippet["hss:totalItems"] = collection.items.length;
        await Bun.write(join22(buildDir, collectionSlug, "collection.json"), JSON.stringify(collection, null, 2));
        topLevelCollection.push(collectionSnippet);
      }
    }
  }
  const indexMap = {};
  for (const resource of allResources) {
    const indices2 = join22(cacheDir, resource.slug, "indices.json");
    const file = await Bun.file(indices2).json();
    const subjectTypes = Object.keys(file);
    for (const subjectType of subjectTypes) {
      indexMap[subjectType] = indexMap[subjectType] || {};
      for (const subject of file[subjectType]) {
        indexMap[subjectType][subject] = indexMap[subjectType][subject] || [];
        if (indexMap[subjectType][subject].includes(resource.slug)) {
          continue;
        }
        indexMap[subjectType][subject].push(resource.slug);
      }
    }
  }
  if (indexCollection) {
    const baseTopicTypeCollectionSnippet = createCollection({
      configUrl,
      slug: "topics",
      label: "Topics"
    });
    topLevelCollection.push(baseTopicTypeCollectionSnippet);
    const baseTopicTypeCollection = {
      ...baseTopicTypeCollectionSnippet,
      items: []
    };
    const topicTypeKeys = Object.keys(indexMap);
    for (const topicTypeKey of topicTypeKeys) {
      const topicTypeId = import_slug2.default(topicTypeKey);
      const topicType = indexMap[topicTypeKey];
      const topicKeys = Object.keys(topicType);
      let baseTopicTypeMeta = {};
      const topicTypeMetaDisk = join22(topicsDir, topicTypeKey, "_meta.yaml");
      if (existsSync13(topicTypeMetaDisk)) {
        baseTopicTypeMeta = await import(topicTypeMetaDisk) || {};
      }
      const topicTypeMeta = Object.assign({
        id: topicTypeId,
        label: topicTypeKey,
        slug: `topics/${topicTypeId}`
      }, baseTopicTypeMeta);
      const topicTypeCollectionSnippet = createCollection({
        configUrl,
        slug: topicTypeMeta.slug,
        label: topicTypeMeta.label
      });
      indexCollection[topicTypeMeta.slug] = topicTypeCollectionSnippet;
      topLevelCollection.push(topicTypeCollectionSnippet);
      baseTopicTypeCollection.items.push(topicTypeCollectionSnippet);
      const topicTypeCollection = {
        ...topicTypeCollectionSnippet,
        items: []
      };
      for (const topicKey of topicKeys) {
        const topic = topicType[topicKey];
        const topicId = import_slug2.default(topicKey);
        const topicMetaDisk = join22(topicsDir, topicTypeKey, `${topicId}.yaml`);
        let baseMeta = {};
        if (existsSync13(topicMetaDisk)) {
          baseMeta = await import(topicMetaDisk) || {};
        }
        const topicMeta = Object.assign({
          id: topicId,
          label: topicKey,
          slug: `topics/${topicTypeKey}/${topicId}`
        }, baseMeta);
        if (options.topics) {
          await mkdirp(join22(topicsDir, topicTypeKey));
          await Bun.write(topicMetaDisk, dump(topicMeta));
        }
        const topicCollectionSnippet = createCollection({
          configUrl,
          slug: topicMeta.slug,
          label: topicMeta.label
        });
        topicTypeCollection.items.push(topicCollectionSnippet);
        indexCollection[topicMeta.slug] = topicCollectionSnippet;
        if (topicMeta.thumbnail) {
          topicCollectionSnippet.thumbnail = [
            {
              id: topicMeta.thumbnail,
              type: "Image"
            }
          ];
        }
        const topicCollection = {
          ...topicCollectionSnippet,
          items: topic.map((slug3) => {
            return indexCollection[slug3];
          }).filter((e3) => e3)
        };
        await mkdirp(join22(buildDir, "topics", topicTypeKey, topicId));
        topicCollection["hss:totalItems"] = topicCollection.items.length;
        topicCollectionSnippet["hss:totalItems"] = topicCollection.items.length;
        await Bun.write(join22(buildDir, "topics", topicTypeKey, topicId, "collection.json"), JSON.stringify(topicCollection, null, 2));
        await Bun.write(join22(buildDir, "topics", topicTypeKey, topicId, "meta.json"), JSON.stringify(topicMeta, null, 2));
      }
      await mkdirp(join22(buildDir, "topics", topicTypeKey));
      await Bun.write(join22(buildDir, "topics", "collection.json"), JSON.stringify(baseTopicTypeCollection, null, 2));
      topicTypeCollection["hss:totalItems"] = topicTypeCollection.items.length;
      topicTypeCollectionSnippet["hss:totalItems"] = topicTypeCollection.items.length;
      await Bun.write(join22(buildDir, "topics", topicTypeKey, "collection.json"), JSON.stringify(topicTypeCollection, null, 2));
      await Bun.write(join22(buildDir, "topics", topicTypeKey, "meta.json"), JSON.stringify(topicTypeMeta, null, 2));
    }
  }
  await mkdirp(join22(buildDir, "meta"));
  await Bun.write(join22(buildDir, "meta", "indices.json"), JSON.stringify(indexMap, null, 2));
  if (indexCollection) {
    const indexCollectionJson = createCollection({
      configUrl,
      slug: "",
      label: "Index"
    });
    indexCollectionJson.items = Object.values(indexCollection);
    await Bun.write(join22(buildDir, "collection.json"), JSON.stringify(indexCollectionJson, null, 2));
  }
  if (manifestCollection) {
    const manifestCollectionJson = createCollection({
      configUrl,
      slug: "manifests",
      label: "Manifests"
    });
    manifestCollectionJson.items = manifestCollection;
    await Bun.write(join22(buildDir, "manifests", "collection.json"), JSON.stringify(manifestCollectionJson, null, 2));
  }
  if (storeCollections) {
    await mkdirp(join22(buildDir, "stores"));
    const storeCollectionsJson = Object.entries(storeCollections).map(async ([storeId, items]) => {
      const storeCollectionSnippet = createCollection({
        configUrl,
        slug: `stores/${storeId}`,
        label: storeId
      });
      topLevelCollection.push(storeCollectionSnippet);
      await mkdirp(join22(buildDir, "stores", storeId));
      return Bun.write(join22(buildDir, "stores", `${storeId}/collection.json`), JSON.stringify({
        ...storeCollectionSnippet,
        items
      }, null, 2));
    });
    const topLevelCollectionJson = createCollection({
      configUrl,
      slug: "collections",
      label: "Collections"
    });
    topLevelCollectionJson.items = topLevelCollection;
    await mkdirp(join22(buildDir, "collections"));
    await Bun.write(join22(buildDir, "collections/collection.json"), JSON.stringify(topLevelCollectionJson, null, 2));
    await Promise.all(storeCollectionsJson);
  }
  await mkdirp(join22(buildDir, "config"));
  await Bun.write(join22(buildDir, "config", "slugs.json"), JSON.stringify(config2.slugs || {}, null, 2));
  await Bun.write(join22(buildDir, "config", "stores.json"), JSON.stringify(config2.stores, null, 2));
  if (siteMap) {
    await Bun.write(join22(buildDir, "meta/sitemap.json"), JSON.stringify(siteMap, null, 2));
  }
  if (editable) {
    await Bun.write(join22(buildDir, "meta/editable.json"), JSON.stringify(editable, null, 2));
  }
  if (overrides) {
    await Bun.write(join22(buildDir, "meta/overrides.json"), JSON.stringify(overrides, null, 2));
  }
}

// src/commands/validate.ts
import { existsSync as existsSync14 } from "fs";
import { join as join23 } from "path";
import { cwd as cwd7 } from "process";

// src/util/resolve-from-slug.ts
function resolveFromSlug(slug_, type2, config2, quiet = true) {
  let slug3 = slug_;
  const candidates = [];
  const keys = Object.keys(config2);
  for (const key of keys) {
    const configItem = config2[key];
    if (configItem.type !== type2) {
      continue;
    }
    const addedPrefix = configItem.addedPrefix ? configItem.addedPrefix.startsWith("/") ? configItem.addedPrefix : `/${configItem.addedPrefix}` : "/";
    const matchingPrefix = `${type2.toLowerCase()}s${addedPrefix}`;
    if (matchingPrefix.startsWith("/") && !slug3.startsWith("/")) {
      slug3 = `/${slug3}`;
    }
    if (!matchingPrefix.startsWith("/") && slug3.startsWith("/")) {
      slug3 = slug3.slice(1);
    }
    if (!slug3.startsWith(matchingPrefix)) {
      continue;
    }
    const matcher = compileReverseSlugConfig(configItem);
    const [match, vars] = matcher(slug3);
    if (match) {
      candidates.push({
        match,
        vars,
        key
      });
    }
  }
  if (candidates.length === 0) {
    return null;
  }
  if (candidates.length > 1 && !quiet) {
    throw new Error(`Multiple matches for slug ${slug3} and type ${type2}`);
  }
  return candidates[0];
}

// src/commands/validate.ts
async function validate(options, command) {
  let didError = false;
  const config2 = await getConfig();
  if (config2.slugs) {
    const slugs = Object.keys(config2.slugs);
    for (const slugName of slugs) {
      const slug3 = config2.slugs[slugName];
      if (!slug3.examples) {
        didError = true;
        console.log(source_default.red`  - Slug ${slugName} is missing examples\n`);
        continue;
      }
      const compiled = compileSlugConfig(slug3);
      const reverse = compileReverseSlugConfig(slug3);
      for (const example of slug3.examples) {
        const prefix = `${source_default.gray(`[${slugName}]`)} ${example}`;
        const [result] = compiled(example);
        if (!result) {
          didError = true;
          console.log(source_default.red(prefix), source_default.red` \u2A2F failed to compile`);
          continue;
        }
        const [reverseResult] = reverse(result);
        if (!reverseResult || reverseResult !== example) {
          didError = true;
          console.log(source_default.red(prefix), source_default.red`\u2A2F failed to reverse`);
          console.log(`
    Found:    ${reverseResult}
    Expected: ${example} 
`);
          continue;
        }
        console.log(source_default.green`\u2714 `, prefix);
      }
    }
  }
  console.log("");
  const buildMeta = join23(cwd7(), ".iiif/build/meta/sitemap.json");
  if (config2.slugs && existsSync14(buildMeta)) {
    console.log("Validating built site map");
    const loaded = await Bun.file(buildMeta).json();
    const keys = Object.keys(loaded);
    for (const key of keys) {
      const item = loaded[key];
      const resolved = resolveFromSlug(key, item.type, config2.slugs, false);
      if (resolved) {
      } else {
        if (item.type === "Manifest") {
          const expectedPath = join23(cwd7(), ".iiif/build", key, "manifest.json");
          if (!existsSync14(expectedPath)) {
            console.log(source_default.red`  - Missing ${key} at ${expectedPath}`);
          }
        }
        if (item.type === "Collection") {
          const expectedPath = join23(cwd7(), ".iiif/build", key, "collection.json");
          if (!existsSync14(expectedPath)) {
            console.log(source_default.red`  - Missing ${key} at ${expectedPath}`);
            didError = true;
          }
        }
      }
    }
    if (!didError) {
      console.log(source_default.green`\u2714 `, `Checked ${keys.length} paths`);
    }
  }
  if (didError) {
    console.log(`
`, source_default.red`\u2A2F Validation failed`);
    process.exit(1);
  }
}

// src/commands/build.ts
var defaultCacheDir2 = ".iiif/cache";
var defaultBuildDir = ".iiif/build";
var devCache = ".iiif/dev/cache";
var devBuild = ".iiif/dev/build";
var topicFolder = "content/topics";
var defaultRun = [
  extractRemoteSource.id,
  extractLabelString.id,
  extractSlugSource.id,
  homepageProperty.id,
  extractMetadataAnalysis.id,
  extractFolderCollections.id
];
var buildInRewrites = [
  flatManifests
];
var builtInExtractions = [
  extractLabelString,
  extractSlugSource,
  extractCanvasDims,
  extractThumbnail,
  extractTopics,
  extractMetadataAnalysis,
  extractRemoteSource,
  extractFolderCollections,
  extractPlaintext,
  extractPartOfCollection
];
var buildInEnrichments = [
  homepageProperty,
  canvasThumbnail,
  translateMetadata,
  manifestSqlite,
  enrichTypesense,
  typesensePlaintext
];
var builtInEnrichmentsMap = {
  [homepageProperty.id]: homepageProperty,
  [canvasThumbnail.id]: canvasThumbnail,
  [translateMetadata.id]: translateMetadata
};
var builtInExtractionsMap = {
  [extractLabelString.id]: extractLabelString,
  [extractSlugSource.id]: extractSlugSource,
  [extractCanvasDims.id]: extractCanvasDims
};
var storeTypes = {
  "iiif-json": IIIFJSONStore,
  "iiif-remote": IIIFRemoteStore
};
async function build(options, command) {
  const buildConfig = await getBuildConfig(options);
  const config2 = await getConfig();
  const { log, time } = buildConfig;
  const startTime = Date.now();
  if (options.validate) {
    await validate({}, command);
  }
  if (options.generate) {
    await generate({ cache: options.cache, debug: options.debug, scripts: options.scripts }, command);
  }
  await mkdirp(buildConfig.cacheDir);
  await mkdirp(buildConfig.buildDir);
  await mkdirp(buildConfig.requestCacheDir);
  const { storeResources, filesToWatch } = await time("Parsed stores", parseStores(buildConfig));
  if (!options.skipFirstBuild) {
    const {
      allResources,
      editable,
      allPaths,
      overrides,
      rewrites,
      idsToSlugs
    } = await time("Loaded stores", loadStores({ storeResources }, buildConfig));
    const { collections } = await time("Extracting resources", extract2({ allResources }, buildConfig));
    await time("Enriching resources", enrich({ allResources }, buildConfig));
    const { storeCollections, manifestCollection, indexCollection, siteMap } = await time("Emitting files", emit({ allResources, allPaths, idsToSlugs }, buildConfig));
    await time("Building indices", indices({
      allResources,
      storeCollections,
      manifestCollection,
      indexCollection,
      editable,
      overrides,
      collections,
      siteMap
    }, buildConfig));
    log("");
    console.log(`Done in ${Date.now() - startTime}ms`);
  }
  await buildConfig.fileTypeCache.save();
  if (options.watch) {
  }
}
async function getBuildConfig(options) {
  const config2 = await getConfig();
  const allRewrites = [...buildInRewrites];
  const allExtractions = [...builtInExtractions];
  const allEnrichments = [...buildInEnrichments];
  const cacheDir = options.dev ? devCache : defaultCacheDir2;
  const buildDir = options.dev ? devBuild : options.out || defaultBuildDir;
  const filesDir = join24(cacheDir, "files");
  const slugs = Object.fromEntries(Object.entries(config2.slugs || {}).map(([key, value]) => {
    return [key, { info: value, compile: compileSlugConfig(value) }];
  }));
  const stores = Object.keys(config2.stores).filter((s2) => {
    if (!options.stores || options.stores.length === 0)
      return true;
    return options.stores.includes(s2);
  });
  if (stores.length === 0) {
    if (options.stores && options.stores.length > 0) {
      throw new Error(`No stores found matching: ${options.stores.join(", ")}`);
    }
    throw new Error("No stores defined in config");
  }
  const defaultLogger = (...msg) => console.log(...msg);
  let internalLogger = defaultLogger;
  const log = (...args) => {
    options.debug && internalLogger(...args);
  };
  const setLogger = (logger) => {
    internalLogger = logger;
  };
  const clearLogger = () => {
    internalLogger = defaultLogger;
  };
  const fileTypeCache = createFiletypeCache(join24(cacheDir, "file-types.json"));
  await loadScripts(options, log);
  const globals = getNodeGlobals();
  allExtractions.push(...globals.extractions);
  allEnrichments.push(...globals.enrichments);
  allRewrites.push(...globals.rewrites);
  log("Available extractions:", allExtractions.map((e3) => e3.id).join(", "));
  log("Available enrichments:", allEnrichments.map((e3) => e3.id).join(", "));
  log("Available rewrites:", allRewrites.map((e3) => e3.id).join(", "));
  const toRun = config2.run || defaultRun;
  const rewrites = allRewrites.filter((e3) => toRun.includes(e3.id));
  const extractions = allExtractions.filter((e3) => toRun.includes(e3.id));
  const enrichments = allEnrichments.filter((e3) => toRun.includes(e3.id));
  const manifestRewrites = rewrites.filter((e3) => e3.types.includes("Manifest"));
  const collectionRewrites = rewrites.filter((e3) => e3.types.includes("Collection"));
  const manifestExtractions = extractions.filter((e3) => e3.types.includes("Manifest"));
  const collectionExtractions = extractions.filter((e3) => e3.types.includes("Collection"));
  const canvasExtractions = extractions.filter((e3) => e3.types.includes("Canvas"));
  const manifestEnrichment = enrichments.filter((e3) => e3.types.includes("Manifest"));
  const collectionEnrichment = enrichments.filter((e3) => e3.types.includes("Collection"));
  const canvasEnrichment = enrichments.filter((e3) => e3.types.includes("Canvas"));
  const requestCacheDir = join24(cacheDir, "_requests");
  const virtualCacheDir = join24(cacheDir, "_virtual");
  const server = options.dev ? { url: env2.DEV_SERVER || "http://localhost:7111" } : env2.SERVER_URL || config2.server;
  const time = async (label, promise) => {
    const startTime = Date.now();
    const resp = await promise.catch((e3) => {
      console.log("");
      console.log(source_default.red(e3));
      console.log(e3);
      process.exit(1);
    });
    log(source_default.blue(label) + source_default.grey(` (${Date.now() - startTime}ms)`));
    return resp;
  };
  const requestCache = createStoreRequestCache("_thumbs", requestCacheDir);
  const imageServiceLoader = new class extends ki {
    fetchService(serviceId) {
      return requestCache.fetch(serviceId);
    }
  };
  const topicsDir = join24(cwd8(), topicFolder);
  const configUrl = typeof server === "string" ? server : server?.url;
  const makeId = ({ type: type2, slug: slug3 }) => {
    return `${configUrl}/${slug3}/${type2.toLowerCase()}.json`;
  };
  return {
    options,
    server,
    configUrl,
    config: config2,
    extractions,
    allRewrites,
    allExtractions,
    allEnrichments,
    canvasExtractions,
    manifestExtractions,
    collectionExtractions,
    manifestRewrites,
    collectionRewrites,
    enrichments,
    canvasEnrichment,
    manifestEnrichment,
    collectionEnrichment,
    requestCacheDir,
    virtualCacheDir,
    topicsDir,
    cacheDir,
    buildDir,
    filesDir,
    stores,
    time,
    log,
    makeId,
    setLogger,
    clearLogger,
    slugs,
    imageServiceLoader,
    fileTypeCache,
    storeTypes
  };
}

// src/bun.ts
Bun.plugin(bun_plugin_yaml_default());
export {
  build
};
